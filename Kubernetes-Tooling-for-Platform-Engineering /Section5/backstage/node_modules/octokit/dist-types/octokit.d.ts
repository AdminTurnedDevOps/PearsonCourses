import { Octokit as OctokitCore } from "@octokit/core";
export { RequestError } from "@octokit/request-error";
export type { PageInfoForward, PageInfoBackward, } from "@octokit/plugin-paginate-graphql";
export declare const Octokit: typeof OctokitCore & import("@octokit/core/dist-types/types.d").Constructor<{
    paginate: import("@octokit/plugin-paginate-rest").PaginateInterface;
} & {
    graphql: import("@octokit/graphql/dist-types/types.js").graphql & {
        paginate: (<ResponseType_1 extends object = any>(query: string, initialParameters?: Record<string, any> | undefined) => Promise<ResponseType_1>) & {
            iterator: <ResponseType_2 = any>(query: string, initialParameters?: Record<string, any> | undefined) => {
                [Symbol.asyncIterator]: () => {
                    next(): Promise<{
                        done: boolean;
                        value: ResponseType_2;
                    }>;
                };
            };
        };
    };
} & import("@octokit/plugin-rest-endpoint-methods").Api & {
    retry: {
        retryRequest: (error: import("@octokit/request-error").RequestError, retries: number, retryAfter: number) => import("@octokit/request-error").RequestError;
    };
}>;
export type Octokit = InstanceType<typeof Octokit>;
