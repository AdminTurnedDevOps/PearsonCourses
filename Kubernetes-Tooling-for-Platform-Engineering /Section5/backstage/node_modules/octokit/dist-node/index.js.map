{
  "version": 3,
  "sources": ["../dist-src/index.js", "../dist-src/octokit.js", "../dist-src/version.js", "../dist-src/app.js"],
  "sourcesContent": ["import { Octokit, RequestError } from \"./octokit.js\";\nimport { App, OAuthApp, createNodeMiddleware } from \"./app.js\";\nexport {\n  App,\n  OAuthApp,\n  Octokit,\n  RequestError,\n  createNodeMiddleware\n};\n", "import { Octokit as OctokitCore } from \"@octokit/core\";\nimport { paginateRest } from \"@octokit/plugin-paginate-rest\";\nimport { paginateGraphql } from \"@octokit/plugin-paginate-graphql\";\nimport { restEndpointMethods } from \"@octokit/plugin-rest-endpoint-methods\";\nimport { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { VERSION } from \"./version.js\";\nimport { RequestError } from \"@octokit/request-error\";\nconst Octokit = OctokitCore.plugin(\n  restEndpointMethods,\n  paginateRest,\n  paginateGraphql,\n  retry,\n  throttling\n).defaults({\n  userAgent: `octokit.js/${VERSION}`,\n  throttle: {\n    onRateLimit,\n    onSecondaryRateLimit\n  }\n});\nfunction onRateLimit(retryAfter, options, octokit) {\n  octokit.log.warn(\n    `Request quota exhausted for request ${options.method} ${options.url}`\n  );\n  if (options.request.retryCount === 0) {\n    octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n    return true;\n  }\n}\nfunction onSecondaryRateLimit(retryAfter, options, octokit) {\n  octokit.log.warn(\n    `SecondaryRateLimit detected for request ${options.method} ${options.url}`\n  );\n  if (options.request.retryCount === 0) {\n    octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n    return true;\n  }\n}\nexport {\n  Octokit,\n  RequestError\n};\n", "const VERSION = \"3.2.1\";\nexport {\n  VERSION\n};\n", "import { App as DefaultApp } from \"@octokit/app\";\nimport { OAuthApp as DefaultOAuthApp } from \"@octokit/oauth-app\";\nimport { Octokit } from \"./octokit.js\";\nconst App = DefaultApp.defaults({ Octokit });\nconst OAuthApp = DefaultOAuthApp.defaults({ Octokit });\nimport { createNodeMiddleware } from \"@octokit/app\";\nexport {\n  App,\n  OAuthApp,\n  createNodeMiddleware\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,kBAAuC;AACvC,kCAA6B;AAC7B,qCAAgC;AAChC,0CAAoC;AACpC,0BAAsB;AACtB,+BAA2B;;;ACL3B,IAAM,UAAU;;;ADOhB,2BAA6B;AAC7B,IAAM,UAAU,YAAAA,QAAY;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,EAAE,SAAS;AAAA,EACT,WAAW,cAAc,OAAO;AAAA,EAChC,UAAU;AAAA,IACR;AAAA,IACA;AAAA,EACF;AACF,CAAC;AACD,SAAS,YAAY,YAAY,SAAS,SAAS;AACjD,UAAQ,IAAI;AAAA,IACV,uCAAuC,QAAQ,MAAM,IAAI,QAAQ,GAAG;AAAA,EACtE;AACA,MAAI,QAAQ,QAAQ,eAAe,GAAG;AACpC,YAAQ,IAAI,KAAK,kBAAkB,UAAU,WAAW;AACxD,WAAO;AAAA,EACT;AACF;AACA,SAAS,qBAAqB,YAAY,SAAS,SAAS;AAC1D,UAAQ,IAAI;AAAA,IACV,2CAA2C,QAAQ,MAAM,IAAI,QAAQ,GAAG;AAAA,EAC1E;AACA,MAAI,QAAQ,QAAQ,eAAe,GAAG;AACpC,YAAQ,IAAI,KAAK,kBAAkB,UAAU,WAAW;AACxD,WAAO;AAAA,EACT;AACF;;;AEtCA,iBAAkC;AAClC,uBAA4C;AAI5C,IAAAC,cAAqC;AAFrC,IAAM,MAAM,WAAAC,IAAW,SAAS,EAAE,QAAQ,CAAC;AAC3C,IAAM,WAAW,iBAAAC,SAAgB,SAAS,EAAE,QAAQ,CAAC;",
  "names": ["OctokitCore", "import_app", "DefaultApp", "DefaultOAuthApp"]
}
