"use strict";var m=Object.defineProperty;var l=(n,r)=>m(n,"name",{value:r,configurable:!0});const t=require("graphql"),s=require("./forEachState.cjs.js");function o(n,r){const e={schema:n,type:null,parentType:null,inputType:null,directiveDef:null,fieldDef:null,argDef:null,argDefs:null,objectFieldDefs:null};return s.forEachState(r,i=>{var a,c;switch(i.kind){case"Query":case"ShortQuery":e.type=n.getQueryType();break;case"Mutation":e.type=n.getMutationType();break;case"Subscription":e.type=n.getSubscriptionType();break;case"InlineFragment":case"FragmentDefinition":i.type&&(e.type=n.getType(i.type));break;case"Field":case"AliasedField":e.fieldDef=e.type&&i.name?T(n,e.parentType,i.name):null,e.type=(a=e.fieldDef)===null||a===void 0?void 0:a.type;break;case"SelectionSet":e.parentType=e.type?t.getNamedType(e.type):null;break;case"Directive":e.directiveDef=i.name?n.getDirective(i.name):null;break;case"Arguments":const f=i.prevState?i.prevState.kind==="Field"?e.fieldDef:i.prevState.kind==="Directive"?e.directiveDef:i.prevState.kind==="AliasedField"?i.prevState.name&&T(n,e.parentType,i.prevState.name):null:null;e.argDefs=f?f.args:null;break;case"Argument":if(e.argDef=null,e.argDefs){for(let u=0;u<e.argDefs.length;u++)if(e.argDefs[u].name===i.name){e.argDef=e.argDefs[u];break}}e.inputType=(c=e.argDef)===null||c===void 0?void 0:c.type;break;case"EnumValue":const d=e.inputType?t.getNamedType(e.inputType):null;e.enumValue=d instanceof t.GraphQLEnumType?b(d.getValues(),u=>u.value===i.name):null;break;case"ListValue":const g=e.inputType?t.getNullableType(e.inputType):null;e.inputType=g instanceof t.GraphQLList?g.ofType:null;break;case"ObjectValue":const y=e.inputType?t.getNamedType(e.inputType):null;e.objectFieldDefs=y instanceof t.GraphQLInputObjectType?y.getFields():null;break;case"ObjectField":const p=i.name&&e.objectFieldDefs?e.objectFieldDefs[i.name]:null;e.inputType=p==null?void 0:p.type;break;case"NamedType":e.type=i.name?n.getType(i.name):null;break}}),e}l(o,"getTypeInfo");function T(n,r,e){if(e===t.SchemaMetaFieldDef.name&&n.getQueryType()===r)return t.SchemaMetaFieldDef;if(e===t.TypeMetaFieldDef.name&&n.getQueryType()===r)return t.TypeMetaFieldDef;if(e===t.TypeNameMetaFieldDef.name&&t.isCompositeType(r))return t.TypeNameMetaFieldDef;if(r&&r.getFields)return r.getFields()[e]}l(T,"getFieldDef");function b(n,r){for(let e=0;e<n.length;e++)if(r(n[e]))return n[e]}l(b,"find");function v(n){return{kind:"Field",schema:n.schema,field:n.fieldDef,type:D(n.fieldDef)?null:n.parentType}}l(v,"getFieldReference");function F(n){return{kind:"Directive",schema:n.schema,directive:n.directiveDef}}l(F,"getDirectiveReference");function k(n){return n.directiveDef?{kind:"Argument",schema:n.schema,argument:n.argDef,directive:n.directiveDef}:{kind:"Argument",schema:n.schema,argument:n.argDef,field:n.fieldDef,type:D(n.fieldDef)?null:n.parentType}}l(k,"getArgumentReference");function S(n){return{kind:"EnumValue",value:n.enumValue||void 0,type:n.inputType?t.getNamedType(n.inputType):void 0}}l(S,"getEnumValueReference");function h(n,r){return{kind:"Type",schema:n.schema,type:r||n.type}}l(h,"getTypeReference");function D(n){return n.name.slice(0,2)==="__"}l(D,"isMetaField");exports.getArgumentReference=k;exports.getDirectiveReference=F;exports.getEnumValueReference=S;exports.getFieldReference=v;exports.getTypeInfo=o;exports.getTypeReference=h;
//# sourceMappingURL=SchemaReference.cjs.js.map
