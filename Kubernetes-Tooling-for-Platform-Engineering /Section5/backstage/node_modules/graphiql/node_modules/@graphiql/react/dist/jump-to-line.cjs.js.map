{"version":3,"file":"jump-to-line.cjs.js","sources":["../../../node_modules/codemirror/addon/search/jump-to-line.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Defines jumpToLine command. Uses dialog.js if present.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  // default search panel location\n  CodeMirror.defineOption(\"search\", {bottom: false});\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true, bottom: cm.options.search.bottom});\n    else f(prompt(shortText, deflt));\n  }\n\n  function getJumpDialog(cm) {\n    return cm.phrase(\"Jump to line:\") + ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use line:column or scroll% syntax)\") + '</span>';\n  }\n\n  function interpretLine(cm, string) {\n    var num = Number(string)\n    if (/^[-+]/.test(string)) return cm.getCursor().line + num\n    else return num - 1\n  }\n\n  CodeMirror.commands.jumpToLine = function(cm) {\n    var cur = cm.getCursor();\n    dialog(cm, getJumpDialog(cm), cm.phrase(\"Jump to line:\"), (cur.line + 1) + \":\" + cur.ch, function(posStr) {\n      if (!posStr) return;\n\n      var match;\n      if (match = /^\\s*([\\+\\-]?\\d+)\\s*\\:\\s*(\\d+)\\s*$/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), Number(match[2]))\n      } else if (match = /^\\s*([\\+\\-]?\\d+(\\.\\d+)?)\\%\\s*/.exec(posStr)) {\n        var line = Math.round(cm.lineCount() * Number(match[1]) / 100);\n        if (/^[-+]/.test(match[1])) line = cur.line + line + 1;\n        cm.setCursor(line - 1, cur.ch);\n      } else if (match = /^\\s*\\:?\\s*([\\+\\-]?\\d+)\\s*/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), cur.ch);\n      }\n    });\n  };\n\n  CodeMirror.keyMap[\"default\"][\"Alt-G\"] = \"jumpToLine\";\n});\n"],"names":["mod","require$$0","require$$1","CodeMirror","dialog","cm","text","shortText","deflt","f","__name","getJumpDialog","interpretLine","string","num","cur","posStr","match","line"],"mappings":"kjBAKC,SAASA,EAAK,CAEXA,EAAIC,EAAAA,oBAAiCC,EAAAA,aAA2B,CAKnE,GAAE,SAASC,EAAY,CAItBA,EAAW,aAAa,SAAU,CAAC,OAAQ,EAAK,CAAC,EAEjD,SAASC,EAAOC,EAAIC,EAAMC,EAAWC,EAAOC,EAAG,CACzCJ,EAAG,WAAYA,EAAG,WAAWC,EAAMG,EAAG,CAAC,MAAOD,EAAO,kBAAmB,GAAM,OAAQH,EAAG,QAAQ,OAAO,MAAM,CAAC,EAC9GI,EAAE,OAAOF,EAAWC,CAAK,CAAC,CAChC,CAHQE,EAAAN,EAAA,UAKT,SAASO,EAAcN,EAAI,CACzB,OAAOA,EAAG,OAAO,eAAe,EAAI,sIAAwIA,EAAG,OAAO,qCAAqC,EAAI,SAChO,CAFQK,EAAAC,EAAA,iBAIT,SAASC,EAAcP,EAAIQ,EAAQ,CACjC,IAAIC,EAAM,OAAOD,CAAM,EACvB,MAAI,QAAQ,KAAKA,CAAM,EAAUR,EAAG,UAAS,EAAG,KAAOS,EAC3CA,EAAM,CACnB,CAJQJ,EAAAE,EAAA,iBAMTT,EAAW,SAAS,WAAa,SAASE,EAAI,CAC5C,IAAIU,EAAMV,EAAG,YACbD,EAAOC,EAAIM,EAAcN,CAAE,EAAGA,EAAG,OAAO,eAAe,EAAIU,EAAI,KAAO,EAAK,IAAMA,EAAI,GAAI,SAASC,EAAQ,CACxG,GAAKA,EAEL,KAAIC,EACJ,GAAIA,EAAQ,oCAAoC,KAAKD,CAAM,EACzDX,EAAG,UAAUO,EAAcP,EAAIY,EAAM,CAAC,CAAC,EAAG,OAAOA,EAAM,CAAC,CAAC,CAAC,UACjDA,EAAQ,gCAAgC,KAAKD,CAAM,EAAG,CAC/D,IAAIE,EAAO,KAAK,MAAMb,EAAG,UAAS,EAAK,OAAOY,EAAM,CAAC,CAAC,EAAI,GAAG,EACzD,QAAQ,KAAKA,EAAM,CAAC,CAAC,IAAGC,EAAOH,EAAI,KAAOG,EAAO,GACrDb,EAAG,UAAUa,EAAO,EAAGH,EAAI,EAAE,OACpBE,EAAQ,4BAA4B,KAAKD,CAAM,IACxDX,EAAG,UAAUO,EAAcP,EAAIY,EAAM,CAAC,CAAC,EAAGF,EAAI,EAAE,EAExD,CAAK,CACL,EAEEZ,EAAW,OAAO,QAAW,OAAO,EAAI,YAC1C,CAAC","x_google_ignoreList":[0]}