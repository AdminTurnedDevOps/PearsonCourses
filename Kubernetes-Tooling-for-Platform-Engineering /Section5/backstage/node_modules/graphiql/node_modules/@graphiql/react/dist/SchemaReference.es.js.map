{"version":3,"file":"SchemaReference.es.js","sources":["../../codemirror-graphql/esm/utils/getTypeInfo.js","../../codemirror-graphql/esm/utils/SchemaReference.js"],"sourcesContent":["import { isCompositeType, getNullableType, getNamedType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, } from 'graphql';\nimport forEachState from './forEachState';\nexport default function getTypeInfo(schema, tokenState) {\n    const info = {\n        schema,\n        type: null,\n        parentType: null,\n        inputType: null,\n        directiveDef: null,\n        fieldDef: null,\n        argDef: null,\n        argDefs: null,\n        objectFieldDefs: null,\n    };\n    forEachState(tokenState, (state) => {\n        var _a, _b;\n        switch (state.kind) {\n            case 'Query':\n            case 'ShortQuery':\n                info.type = schema.getQueryType();\n                break;\n            case 'Mutation':\n                info.type = schema.getMutationType();\n                break;\n            case 'Subscription':\n                info.type = schema.getSubscriptionType();\n                break;\n            case 'InlineFragment':\n            case 'FragmentDefinition':\n                if (state.type) {\n                    info.type = schema.getType(state.type);\n                }\n                break;\n            case 'Field':\n            case 'AliasedField':\n                info.fieldDef =\n                    info.type && state.name\n                        ? getFieldDef(schema, info.parentType, state.name)\n                        : null;\n                info.type = (_a = info.fieldDef) === null || _a === void 0 ? void 0 : _a.type;\n                break;\n            case 'SelectionSet':\n                info.parentType = info.type ? getNamedType(info.type) : null;\n                break;\n            case 'Directive':\n                info.directiveDef = state.name ? schema.getDirective(state.name) : null;\n                break;\n            case 'Arguments':\n                const parentDef = state.prevState\n                    ? state.prevState.kind === 'Field'\n                        ? info.fieldDef\n                        : state.prevState.kind === 'Directive'\n                            ? info.directiveDef\n                            : state.prevState.kind === 'AliasedField'\n                                ? state.prevState.name &&\n                                    getFieldDef(schema, info.parentType, state.prevState.name)\n                                : null\n                    : null;\n                info.argDefs = parentDef ? parentDef.args : null;\n                break;\n            case 'Argument':\n                info.argDef = null;\n                if (info.argDefs) {\n                    for (let i = 0; i < info.argDefs.length; i++) {\n                        if (info.argDefs[i].name === state.name) {\n                            info.argDef = info.argDefs[i];\n                            break;\n                        }\n                    }\n                }\n                info.inputType = (_b = info.argDef) === null || _b === void 0 ? void 0 : _b.type;\n                break;\n            case 'EnumValue':\n                const enumType = info.inputType ? getNamedType(info.inputType) : null;\n                info.enumValue =\n                    enumType instanceof GraphQLEnumType\n                        ? find(enumType.getValues(), val => val.value === state.name)\n                        : null;\n                break;\n            case 'ListValue':\n                const nullableType = info.inputType\n                    ? getNullableType(info.inputType)\n                    : null;\n                info.inputType =\n                    nullableType instanceof GraphQLList ? nullableType.ofType : null;\n                break;\n            case 'ObjectValue':\n                const objectType = info.inputType ? getNamedType(info.inputType) : null;\n                info.objectFieldDefs =\n                    objectType instanceof GraphQLInputObjectType\n                        ? objectType.getFields()\n                        : null;\n                break;\n            case 'ObjectField':\n                const objectField = state.name && info.objectFieldDefs\n                    ? info.objectFieldDefs[state.name]\n                    : null;\n                info.inputType = objectField === null || objectField === void 0 ? void 0 : objectField.type;\n                break;\n            case 'NamedType':\n                info.type = state.name ? schema.getType(state.name) : null;\n                break;\n        }\n    });\n    return info;\n}\nfunction getFieldDef(schema, type, fieldName) {\n    if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n        return SchemaMetaFieldDef;\n    }\n    if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === type) {\n        return TypeMetaFieldDef;\n    }\n    if (fieldName === TypeNameMetaFieldDef.name && isCompositeType(type)) {\n        return TypeNameMetaFieldDef;\n    }\n    if (type && type.getFields) {\n        return type.getFields()[fieldName];\n    }\n}\nfunction find(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i])) {\n            return array[i];\n        }\n    }\n}\n//# sourceMappingURL=getTypeInfo.js.map","import { getNamedType } from 'graphql';\nexport function getFieldReference(typeInfo) {\n    return {\n        kind: 'Field',\n        schema: typeInfo.schema,\n        field: typeInfo.fieldDef,\n        type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n    };\n}\nexport function getDirectiveReference(typeInfo) {\n    return {\n        kind: 'Directive',\n        schema: typeInfo.schema,\n        directive: typeInfo.directiveDef,\n    };\n}\nexport function getArgumentReference(typeInfo) {\n    return typeInfo.directiveDef\n        ? {\n            kind: 'Argument',\n            schema: typeInfo.schema,\n            argument: typeInfo.argDef,\n            directive: typeInfo.directiveDef,\n        }\n        : {\n            kind: 'Argument',\n            schema: typeInfo.schema,\n            argument: typeInfo.argDef,\n            field: typeInfo.fieldDef,\n            type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n        };\n}\nexport function getEnumValueReference(typeInfo) {\n    return {\n        kind: 'EnumValue',\n        value: typeInfo.enumValue || undefined,\n        type: typeInfo.inputType\n            ? getNamedType(typeInfo.inputType)\n            : undefined,\n    };\n}\nexport function getTypeReference(typeInfo, type) {\n    return {\n        kind: 'Type',\n        schema: typeInfo.schema,\n        type: type || typeInfo.type,\n    };\n}\nfunction isMetaField(fieldDef) {\n    return fieldDef.name.slice(0, 2) === '__';\n}\n//# sourceMappingURL=SchemaReference.js.map"],"names":["getTypeInfo","schema","tokenState","info","forEachState","state","_a","_b","getFieldDef","getNamedType","parentDef","i","enumType","GraphQLEnumType","find","val","nullableType","getNullableType","GraphQLList","objectType","GraphQLInputObjectType","objectField","__name","type","fieldName","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","isCompositeType","array","predicate","getFieldReference","typeInfo","isMetaField","getDirectiveReference","getArgumentReference","getEnumValueReference","getTypeReference","fieldDef"],"mappings":"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"}