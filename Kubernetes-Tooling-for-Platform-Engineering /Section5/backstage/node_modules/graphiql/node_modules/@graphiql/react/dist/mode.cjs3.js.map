{"version":3,"file":"mode.cjs3.js","sources":["../../codemirror-graphql/esm/results/mode.js"],"sourcesContent":["import CodeMirror from 'codemirror';\nimport { list, t, onlineParser, p } from 'graphql-language-service';\nimport indent from '../utils/mode-indent';\nCodeMirror.defineMode('graphql-results', config => {\n    const parser = onlineParser({\n        eatWhitespace: stream => stream.eatSpace(),\n        lexRules: LexRules,\n        parseRules: ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config,\n        startState: parser.startState,\n        token: parser.token,\n        indent,\n        electricInput: /^\\s*[}\\]]/,\n        fold: 'brace',\n        closeBrackets: {\n            pairs: '[]{}\"\"',\n            explode: '[]{}',\n        },\n    };\n});\nconst LexRules = {\n    Punctuation: /^\\[|]|\\{|\\}|:|,/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n    Keyword: /^true|false|null/,\n};\nconst ParseRules = {\n    Document: [p('{'), list('Entry', p(',')), p('}')],\n    Entry: [t('String', 'def'), p(':'), 'Value'],\n    Value(token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                }\n                return null;\n            case 'Keyword':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                    case 'null':\n                        return 'NullValue';\n                }\n                return null;\n        }\n    },\n    NumberValue: [t('Number', 'number')],\n    StringValue: [t('String', 'string')],\n    BooleanValue: [t('Keyword', 'builtin')],\n    NullValue: [t('Keyword', 'keyword')],\n    ListValue: [p('['), list('Value', p(',')), p(']')],\n    ObjectValue: [p('{'), list('ObjectField', p(',')), p('}')],\n    ObjectField: [t('String', 'property'), p(':'), 'Value'],\n};\n//# sourceMappingURL=mode.js.map"],"names":["CodeMirror","config","parser","onlineParser","stream","LexRules","ParseRules","indent","p","list","t","token"],"mappings":"4JAGAA,EAAAA,WAAW,WAAW,kBAAmBC,GAAU,CAC/C,MAAMC,EAASC,EAAAA,aAAa,CACxB,cAAeC,GAAUA,EAAO,SAAU,EAC1C,SAAUC,EACV,WAAYC,EACZ,aAAc,CAAE,QAASL,EAAO,OAAS,CACjD,CAAK,EACD,MAAO,CACH,OAAAA,EACA,WAAYC,EAAO,WACnB,MAAOA,EAAO,MACtB,OAAQK,EAAM,OACN,cAAe,YACf,KAAM,QACN,cAAe,CACX,MAAO,SACP,QAAS,MACZ,CACT,CACA,CAAC,EACD,MAAMF,EAAW,CACb,YAAa,kBACb,OAAQ,4DACR,OAAQ,0DACR,QAAS,kBACb,EACMC,EAAa,CACf,SAAU,CAACE,EAAAA,EAAE,GAAG,EAAGC,EAAAA,KAAK,QAASD,EAAC,EAAC,GAAG,CAAC,EAAGA,EAAC,EAAC,GAAG,CAAC,EAChD,MAAO,CAACE,EAAC,EAAC,SAAU,KAAK,EAAGF,IAAE,GAAG,EAAG,OAAO,EAC3C,MAAMG,EAAO,CACT,OAAQA,EAAM,KAAI,CACd,IAAK,SACD,MAAO,cACX,IAAK,SACD,MAAO,cACX,IAAK,cACD,OAAQA,EAAM,MAAK,CACf,IAAK,IACD,MAAO,YACX,IAAK,IACD,MAAO,aACd,CACD,OAAO,KACX,IAAK,UACD,OAAQA,EAAM,MAAK,CACf,IAAK,OACL,IAAK,QACD,MAAO,eACX,IAAK,OACD,MAAO,WACd,CACD,OAAO,IACd,CACJ,EACD,YAAa,CAACD,EAAAA,EAAE,SAAU,QAAQ,CAAC,EACnC,YAAa,CAACA,EAAAA,EAAE,SAAU,QAAQ,CAAC,EACnC,aAAc,CAACA,EAAAA,EAAE,UAAW,SAAS,CAAC,EACtC,UAAW,CAACA,EAAAA,EAAE,UAAW,SAAS,CAAC,EACnC,UAAW,CAACF,EAAAA,EAAE,GAAG,EAAGC,EAAAA,KAAK,QAASD,EAAC,EAAC,GAAG,CAAC,EAAGA,EAAC,EAAC,GAAG,CAAC,EACjD,YAAa,CAACA,EAAAA,EAAE,GAAG,EAAGC,EAAAA,KAAK,cAAeD,EAAC,EAAC,GAAG,CAAC,EAAGA,EAAC,EAAC,GAAG,CAAC,EACzD,YAAa,CAACE,EAAC,EAAC,SAAU,UAAU,EAAGF,IAAE,GAAG,EAAG,OAAO,CAC1D"}