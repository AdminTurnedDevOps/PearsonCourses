{
  "version": 3,
  "sources": ["../dist-src/index.js", "../dist-src/errors.js", "../dist-src/object-helpers.js", "../dist-src/extract-page-info.js", "../dist-src/page-info.js", "../dist-src/iterator.js", "../dist-src/merge-responses.js", "../dist-src/paginate.js"],
  "sourcesContent": ["import { createIterator } from \"./iterator\";\nimport { createPaginate } from \"./paginate\";\nfunction paginateGraphql(octokit) {\n  octokit.graphql;\n  return {\n    graphql: Object.assign(octokit.graphql, {\n      paginate: Object.assign(createPaginate(octokit), {\n        iterator: createIterator(octokit)\n      })\n    })\n  };\n}\nexport {\n  paginateGraphql\n};\n", "const generateMessage = (path, cursorValue) => `The cursor at \"${path.join(\n  \",\"\n)}\" did not change its value \"${cursorValue}\" after a page transition. Please make sure your that your query is set up correctly.`;\nclass MissingCursorChange extends Error {\n  constructor(pageInfo, cursorValue) {\n    super(generateMessage(pageInfo.pathInQuery, cursorValue));\n    this.pageInfo = pageInfo;\n    this.cursorValue = cursorValue;\n    this.name = \"MissingCursorChangeError\";\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\nclass MissingPageInfo extends Error {\n  constructor(response) {\n    super(\n      `No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(\n        response,\n        null,\n        2\n      )}`\n    );\n    this.response = response;\n    this.name = \"MissingPageInfo\";\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\nexport {\n  MissingCursorChange,\n  MissingPageInfo\n};\n", "import { MissingPageInfo } from \"./errors\";\nconst isObject = (value) => Object.prototype.toString.call(value) === \"[object Object]\";\nfunction findPaginatedResourcePath(responseData) {\n  const paginatedResourcePath = deepFindPathToProperty(\n    responseData,\n    \"pageInfo\"\n  );\n  if (paginatedResourcePath.length === 0) {\n    throw new MissingPageInfo(responseData);\n  }\n  return paginatedResourcePath;\n}\nconst deepFindPathToProperty = (object, searchProp, path = []) => {\n  for (const key of Object.keys(object)) {\n    const currentPath = [...path, key];\n    const currentValue = object[key];\n    if (currentValue.hasOwnProperty(searchProp)) {\n      return currentPath;\n    }\n    if (isObject(currentValue)) {\n      const result = deepFindPathToProperty(\n        currentValue,\n        searchProp,\n        currentPath\n      );\n      if (result.length > 0) {\n        return result;\n      }\n    }\n  }\n  return [];\n};\nconst get = (object, path) => {\n  return path.reduce((current, nextProperty) => current[nextProperty], object);\n};\nconst set = (object, path, mutator) => {\n  const lastProperty = path[path.length - 1];\n  const parentPath = [...path].slice(0, -1);\n  const parent = get(object, parentPath);\n  if (typeof mutator === \"function\") {\n    parent[lastProperty] = mutator(parent[lastProperty]);\n  } else {\n    parent[lastProperty] = mutator;\n  }\n};\nexport {\n  findPaginatedResourcePath,\n  get,\n  set\n};\n", "import { findPaginatedResourcePath, get } from \"./object-helpers\";\nconst extractPageInfos = (responseData) => {\n  const pageInfoPath = findPaginatedResourcePath(responseData);\n  return {\n    pathInQuery: pageInfoPath,\n    pageInfo: get(responseData, [...pageInfoPath, \"pageInfo\"])\n  };\n};\nexport {\n  extractPageInfos\n};\n", "const isForwardSearch = (givenPageInfo) => {\n  return givenPageInfo.hasOwnProperty(\"hasNextPage\");\n};\nconst getCursorFrom = (pageInfo) => isForwardSearch(pageInfo) ? pageInfo.endCursor : pageInfo.startCursor;\nconst hasAnotherPage = (pageInfo) => isForwardSearch(pageInfo) ? pageInfo.hasNextPage : pageInfo.hasPreviousPage;\nexport {\n  getCursorFrom,\n  hasAnotherPage\n};\n", "import { extractPageInfos } from \"./extract-page-info\";\nimport { getCursorFrom, hasAnotherPage } from \"./page-info\";\nimport { MissingCursorChange } from \"./errors\";\nconst createIterator = (octokit) => {\n  return (query, initialParameters = {}) => {\n    let nextPageExists = true;\n    let parameters = { ...initialParameters };\n    return {\n      [Symbol.asyncIterator]: () => ({\n        async next() {\n          if (!nextPageExists)\n            return { done: true, value: {} };\n          const response = await octokit.graphql(\n            query,\n            parameters\n          );\n          const pageInfoContext = extractPageInfos(response);\n          const nextCursorValue = getCursorFrom(pageInfoContext.pageInfo);\n          nextPageExists = hasAnotherPage(pageInfoContext.pageInfo);\n          if (nextPageExists && nextCursorValue === parameters.cursor) {\n            throw new MissingCursorChange(pageInfoContext, nextCursorValue);\n          }\n          parameters = {\n            ...parameters,\n            cursor: nextCursorValue\n          };\n          return { done: false, value: response };\n        }\n      })\n    };\n  };\n};\nexport {\n  createIterator\n};\n", "import { findPaginatedResourcePath, get, set } from \"./object-helpers\";\nconst mergeResponses = (response1, response2) => {\n  if (Object.keys(response1).length === 0) {\n    return Object.assign(response1, response2);\n  }\n  const path = findPaginatedResourcePath(response1);\n  const nodesPath = [...path, \"nodes\"];\n  const newNodes = get(response2, nodesPath);\n  if (newNodes) {\n    set(response1, nodesPath, (values) => {\n      return [...values, ...newNodes];\n    });\n  }\n  const edgesPath = [...path, \"edges\"];\n  const newEdges = get(response2, edgesPath);\n  if (newEdges) {\n    set(response1, edgesPath, (values) => {\n      return [...values, ...newEdges];\n    });\n  }\n  const pageInfoPath = [...path, \"pageInfo\"];\n  set(response1, pageInfoPath, get(response2, pageInfoPath));\n  return response1;\n};\nexport {\n  mergeResponses\n};\n", "import { mergeResponses } from \"./merge-responses\";\nimport { createIterator } from \"./iterator\";\nconst createPaginate = (octokit) => {\n  const iterator = createIterator(octokit);\n  return async (query, initialParameters = {}) => {\n    let mergedResponse = {};\n    for await (const response of iterator(\n      query,\n      initialParameters\n    )) {\n      mergedResponse = mergeResponses(mergedResponse, response);\n    }\n    return mergedResponse;\n  };\n};\nexport {\n  createPaginate\n};\n"],
  "mappings": "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",
  "names": []
}
