"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Tested Module
const request_1 = __importDefault(require("../../../request/request"));
describe('request - Defaults from "event.EventEmitter" (accepts no arguments and return default values)', () => {
    test('req.addListener is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.addListener).toBeDefined();
        expect(typeof req.addListener).toBe('function');
        expect(req.addListener.getMockName()).toBe('addListener mock default');
    });
    test('req.on is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.on).toBeDefined();
        expect(typeof req.on).toBe('function');
        expect(req.on.getMockName()).toBe('on mock default');
    });
    test('req.once is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.once).toBeDefined();
        expect(typeof req.once).toBe('function');
        expect(req.once.getMockName()).toBe('once mock default');
    });
    test('req.removeListener is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.removeListener).toBeDefined();
        expect(typeof req.removeListener).toBe('function');
        expect(req.removeListener.getMockName()).toBe('removeListener mock default');
    });
    test('req.off is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.off).toBeDefined();
        expect(typeof req.off).toBe('function');
        expect(req.off.getMockName()).toBe('off mock default');
    });
    test('req.removeAllListeners is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.removeAllListeners).toBeDefined();
        expect(typeof req.removeAllListeners).toBe('function');
        expect(req.removeAllListeners.getMockName()).toBe('removeAllListeners mock default');
    });
    test('req.setMaxListeners is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.setMaxListeners).toBeDefined();
        expect(typeof req.setMaxListeners).toBe('function');
        expect(req.setMaxListeners.getMockName()).toBe('setMaxListeners mock default');
    });
    test('req.getMaxListeners is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.getMaxListeners).toBeDefined();
        expect(typeof req.getMaxListeners).toBe('function');
        expect(req.getMaxListeners.getMockName()).toBe('getMaxListeners mock default');
    });
    test('req.listeners is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.listeners).toBeDefined();
        expect(typeof req.listeners).toBe('function');
        expect(req.listeners.getMockName()).toBe('listeners mock default');
    });
    test('req.rawListeners is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.rawListeners).toBeDefined();
        expect(typeof req.rawListeners).toBe('function');
        expect(req.rawListeners.getMockName()).toBe('rawListeners mock default');
    });
    test('req.emit is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.emit).toBeDefined();
        expect(typeof req.emit).toBe('function');
        expect(req.emit.getMockName()).toBe('emit mock default');
    });
    test('req.listenerCount is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.listenerCount).toBeDefined();
        expect(typeof req.listenerCount).toBe('function');
        expect(req.listenerCount.getMockName()).toBe('listenerCount mock default');
    });
    test('req.prependListener is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.prependListener).toBeDefined();
        expect(typeof req.prependListener).toBe('function');
        expect(req.prependListener.getMockName()).toBe('prependListener mock default');
    });
    test('req.prependOnceListener is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.prependOnceListener).toBeDefined();
        expect(typeof req.prependOnceListener).toBe('function');
        expect(req.prependOnceListener.getMockName()).toBe('prependOnceListener mock default');
    });
    test('req.eventNames is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.eventNames).toBeDefined();
        expect(typeof req.eventNames).toBe('function');
        expect(req.eventNames.getMockName()).toBe('eventNames mock default');
    });
});
//# sourceMappingURL=defaults.event.EventEmitter.test.js.map