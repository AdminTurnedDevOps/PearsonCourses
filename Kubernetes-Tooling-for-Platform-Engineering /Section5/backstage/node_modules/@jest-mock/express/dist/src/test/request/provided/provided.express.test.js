"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Helpers
const provided_1 = require("../../helpers/provided");
// Tested Module
const request_1 = __importDefault(require("../../../request/request"));
describe('request - Provided for "express - Request" (accepts arguments and returns expected values)', () => {
    test('req.params can be provided', () => {
        const req = (0, request_1.default)({ params: provided_1.providedParams });
        expect(req.params).toBeDefined();
        expect(req.params).toBe(provided_1.providedParams);
    });
    test('req.query can be provided', () => {
        const req = (0, request_1.default)({ query: provided_1.providedObject });
        expect(req.query).toBeDefined();
        expect(req.query).toBe(provided_1.providedObject);
    });
    test('req.body can be provided', () => {
        const req = (0, request_1.default)({ body: provided_1.providedObject });
        expect(req.body).toBeDefined();
        expect(req.body).toBe(provided_1.providedObject);
    });
    test('req.cookies can be provided', () => {
        const req = (0, request_1.default)({ cookies: provided_1.providedObject });
        expect(req.cookies).toBeDefined();
        expect(req.cookies).toBe(provided_1.providedObject);
    });
    test('req.method can be provided', () => {
        const req = (0, request_1.default)({ method: provided_1.providedString });
        expect(req.method).toBeDefined();
        expect(req.method).toBe(provided_1.providedString);
    });
    test('req.protocol can be provided', () => {
        const req = (0, request_1.default)({ protocol: provided_1.providedString });
        expect(req.protocol).toBeDefined();
        expect(req.protocol).toBe(provided_1.providedString);
    });
    test('req.secure can be provided', () => {
        const req = (0, request_1.default)({ secure: provided_1.providedBoolean });
        expect(req.secure).toBeDefined();
        expect(req.secure).toBe(provided_1.providedBoolean);
    });
    test('req.ip can be provided', () => {
        const req = (0, request_1.default)({ ip: provided_1.providedString });
        expect(req.ip).toBeDefined();
        expect(req.ip).toBe(provided_1.providedString);
    });
    test('req.ips can be provided', () => {
        const req = (0, request_1.default)({ ips: provided_1.providedStringArray });
        expect(req.ips).toBeDefined();
        expect(req.ips).toBe(provided_1.providedStringArray);
    });
    test('req.subdomains can be provided', () => {
        const req = (0, request_1.default)({ subdomains: provided_1.providedStringArray });
        expect(req.subdomains).toBeDefined();
        expect(req.subdomains).toBe(provided_1.providedStringArray);
    });
    test('req.path can be provided', () => {
        const req = (0, request_1.default)({ path: provided_1.providedString });
        expect(req.path).toBeDefined();
        expect(req.path).toBe(provided_1.providedString);
    });
    test('req.hostname can be provided', () => {
        const req = (0, request_1.default)({ hostname: provided_1.providedString });
        expect(req.hostname).toBeDefined();
        expect(req.hostname).toBe(provided_1.providedString);
    });
    test('req.host can be provided', () => {
        const req = (0, request_1.default)({ host: provided_1.providedString });
        expect(req.host).toBeDefined();
        expect(req.host).toBe(provided_1.providedString);
    });
    test('req.fresh can be provided', () => {
        const req = (0, request_1.default)({ fresh: provided_1.providedBoolean });
        expect(req.fresh).toBeDefined();
        expect(req.fresh).toBe(provided_1.providedBoolean);
    });
    test('req.stale can be provided', () => {
        const req = (0, request_1.default)({ stale: provided_1.providedBoolean });
        expect(req.stale).toBeDefined();
        expect(req.stale).toBe(provided_1.providedBoolean);
    });
    test('req.xhr can be provided', () => {
        const req = (0, request_1.default)({ xhr: provided_1.providedBoolean });
        expect(req.xhr).toBeDefined();
        expect(req.xhr).toBe(provided_1.providedBoolean);
    });
    test('req.route can be provided', () => {
        const req = (0, request_1.default)({ route: provided_1.providedObject });
        expect(req.route).toBeDefined();
        expect(req.route).toBe(provided_1.providedObject);
    });
    test('req.signedCookies can be provided', () => {
        const req = (0, request_1.default)({ signedCookies: provided_1.providedObject });
        expect(req.signedCookies).toBeDefined();
        expect(req.signedCookies).toBe(provided_1.providedObject);
    });
    test('req.originalUrl can be provided', () => {
        const req = (0, request_1.default)({ originalUrl: provided_1.providedString });
        expect(req.originalUrl).toBeDefined();
        expect(req.originalUrl).toBe(provided_1.providedString);
    });
    test('req.url can be provided', () => {
        const req = (0, request_1.default)({ url: provided_1.providedString });
        expect(req.url).toBeDefined();
        expect(req.url).toBe(provided_1.providedString);
    });
    test('req.baseUrl can be provided', () => {
        const req = (0, request_1.default)({ baseUrl: provided_1.providedString });
        expect(req.baseUrl).toBeDefined();
        expect(req.baseUrl).toBe(provided_1.providedString);
    });
    test('req.accepted can be provided', () => {
        const req = (0, request_1.default)({ accepted: provided_1.providedMediaTypeArray });
        expect(req.accepted).toBeDefined();
        expect(req.accepted).toBe(provided_1.providedMediaTypeArray);
    });
    test('req.get can be provided', () => {
        const req = (0, request_1.default)({ get: provided_1.providedFunction });
        expect(req.get).toBeDefined();
        expect(req.get).toBe(provided_1.providedFunction);
    });
    test('req.header can be provided', () => {
        const req = (0, request_1.default)({ header: provided_1.providedFunction });
        expect(req.header).toBeDefined();
        expect(req.header).toBe(provided_1.providedFunction);
    });
    test('req.accepts can be provided', () => {
        const req = (0, request_1.default)({ accepts: provided_1.providedFunction });
        expect(req.accepts).toBeDefined();
        expect(req.accepts).toBe(provided_1.providedFunction);
    });
    test('req.acceptsCharsets can be provided', () => {
        const req = (0, request_1.default)({ acceptsCharsets: provided_1.providedFunction });
        expect(req.acceptsCharsets).toBeDefined();
        expect(req.acceptsCharsets).toBe(provided_1.providedFunction);
    });
    test('req.acceptsEncodings can be provided', () => {
        const req = (0, request_1.default)({ acceptsEncodings: provided_1.providedFunction });
        expect(req.acceptsEncodings).toBeDefined();
        expect(req.acceptsEncodings).toBe(provided_1.providedFunction);
    });
    test('req.acceptsLanguages can be provided', () => {
        const req = (0, request_1.default)({ acceptsLanguages: provided_1.providedFunction });
        expect(req.acceptsLanguages).toBeDefined();
        expect(req.acceptsLanguages).toBe(provided_1.providedFunction);
    });
    test('req.range can be provided', () => {
        const req = (0, request_1.default)({ range: provided_1.providedFunction });
        expect(req.range).toBeDefined();
        expect(req.range).toBe(provided_1.providedFunction);
    });
    test('req.param can be provided', () => {
        const req = (0, request_1.default)({ param: provided_1.providedFunction });
        expect(req.param).toBeDefined();
        expect(req.param).toBe(provided_1.providedFunction);
    });
    test('req.is can be provided', () => {
        const req = (0, request_1.default)({ is: provided_1.providedFunction });
        expect(req.is).toBeDefined();
        expect(req.is).toBe(provided_1.providedFunction);
    });
    test('req.app can be provided', () => {
        const req = (0, request_1.default)({ app: provided_1.providedApp });
        expect(req.app).toBeDefined();
        expect(req.app).toBe(provided_1.providedApp);
    });
    test('req.res can be provided', () => {
        const req = (0, request_1.default)({ res: provided_1.providedRes });
        expect(req.res).toBeDefined();
        expect(req.res).toBe(provided_1.providedRes);
    });
    test('req.next can be provided', () => {
        const req = (0, request_1.default)({ next: provided_1.providedFunction });
        expect(req.next).toBeDefined();
        expect(req.next).toBe(provided_1.providedFunction);
    });
});
//# sourceMappingURL=provided.express.test.js.map