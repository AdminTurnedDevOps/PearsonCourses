"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Helpers
const provided_1 = require("../../helpers/provided");
// Tested Module
const response_1 = __importDefault(require("../../../response/response"));
describe('response - Provided for "express.Express" (accepts arguments and returns expected values)', () => {
    test('res.status can be provided', () => {
        const { res } = (0, response_1.default)({ status: provided_1.providedFunction });
        expect(res.status).toBeDefined();
        expect(res.status).toBe(provided_1.providedFunction);
    });
    test('res.sendStatus can be provided', () => {
        const { res } = (0, response_1.default)({ sendStatus: provided_1.providedFunction });
        expect(res.sendStatus).toBeDefined();
        expect(res.sendStatus).toBe(provided_1.providedFunction);
    });
    test('res.links can be provided', () => {
        const { res } = (0, response_1.default)({ links: provided_1.providedFunction });
        expect(res.links).toBeDefined();
        expect(res.links).toBe(provided_1.providedFunction);
    });
    test('res.send can be provided', () => {
        const { res } = (0, response_1.default)({ send: provided_1.providedFunction });
        expect(res.send).toBeDefined();
        expect(res.send).toBe(provided_1.providedFunction);
    });
    test('res.json can be provided', () => {
        const { res } = (0, response_1.default)({ json: provided_1.providedFunction });
        expect(res.json).toBeDefined();
        expect(res.json).toBe(provided_1.providedFunction);
    });
    test('res.jsonp can be provided', () => {
        const { res } = (0, response_1.default)({ jsonp: provided_1.providedFunction });
        expect(res.jsonp).toBeDefined();
        expect(res.jsonp).toBe(provided_1.providedFunction);
    });
    test('res.sendFile can be provided', () => {
        const { res } = (0, response_1.default)({ sendFile: provided_1.providedFunction });
        expect(res.sendFile).toBeDefined();
        expect(res.sendFile).toBe(provided_1.providedFunction);
    });
    test('res.sendfile can be provided', () => {
        const { res } = (0, response_1.default)({ sendfile: provided_1.providedFunction });
        expect(res.sendfile).toBeDefined();
        expect(res.sendfile).toBe(provided_1.providedFunction);
    });
    test('res.download can be provided', () => {
        const { res } = (0, response_1.default)({ download: provided_1.providedFunction });
        expect(res.download).toBeDefined();
        expect(res.download).toBe(provided_1.providedFunction);
    });
    test('res.contentType can be provided', () => {
        const { res } = (0, response_1.default)({ contentType: provided_1.providedFunction });
        expect(res.contentType).toBeDefined();
        expect(res.contentType).toBe(provided_1.providedFunction);
    });
    test('res.type can be provided', () => {
        const { res } = (0, response_1.default)({ type: provided_1.providedFunction });
        expect(res.type).toBeDefined();
        expect(res.type).toBe(provided_1.providedFunction);
    });
    test('res.format can be provided', () => {
        const { res } = (0, response_1.default)({ format: provided_1.providedFunction });
        expect(res.format).toBeDefined();
        expect(res.format).toBe(provided_1.providedFunction);
    });
    test('res.attachment can be provided', () => {
        const { res } = (0, response_1.default)({ attachment: provided_1.providedFunction });
        expect(res.attachment).toBeDefined();
        expect(res.attachment).toBe(provided_1.providedFunction);
    });
    test('res.set can be provided', () => {
        const { res } = (0, response_1.default)({ set: provided_1.providedFunction });
        expect(res.set).toBeDefined();
        expect(res.set).toBe(provided_1.providedFunction);
    });
    test('res.header can be provided', () => {
        const { res } = (0, response_1.default)({ header: provided_1.providedFunction });
        expect(res.header).toBeDefined();
        expect(res.header).toBe(provided_1.providedFunction);
    });
    test('res.headersSent can be provided', () => {
        const { res } = (0, response_1.default)({ headersSent: provided_1.providedBoolean });
        expect(res.headersSent).toBeDefined();
        expect(res.headersSent).toBe(provided_1.providedBoolean);
    });
    test('res.get can be provided', () => {
        const { res } = (0, response_1.default)({ get: provided_1.providedFunction });
        expect(res.get).toBeDefined();
        expect(res.get).toBe(provided_1.providedFunction);
    });
    test('res.clearCookie can be provided', () => {
        const { res } = (0, response_1.default)({ clearCookie: provided_1.providedFunction });
        expect(res.clearCookie).toBeDefined();
        expect(res.clearCookie).toBe(provided_1.providedFunction);
    });
    test('res.cookie can be provided', () => {
        const { res } = (0, response_1.default)({ cookie: provided_1.providedFunction });
        expect(res.cookie).toBeDefined();
        expect(res.cookie).toBe(provided_1.providedFunction);
    });
    test('res.location can be provided', () => {
        const { res } = (0, response_1.default)({ location: provided_1.providedFunction });
        expect(res.location).toBeDefined();
        expect(res.location).toBe(provided_1.providedFunction);
    });
    test('res.redirect can be provided', () => {
        const { res } = (0, response_1.default)({ redirect: provided_1.providedFunction });
        expect(res.redirect).toBeDefined();
        expect(res.redirect).toBe(provided_1.providedFunction);
    });
    test('res.render can be provided', () => {
        const { res } = (0, response_1.default)({ render: provided_1.providedFunction });
        expect(res.render).toBeDefined();
        expect(res.render).toBe(provided_1.providedFunction);
    });
    test('res.locals can be provided', () => {
        const { res } = (0, response_1.default)({ locals: provided_1.providedObject });
        expect(res.locals).toBeDefined();
        expect(res.locals).toBe(provided_1.providedObject);
    });
    test('res.charset can be provided', () => {
        const { res } = (0, response_1.default)({ charset: provided_1.providedString });
        expect(res.charset).toBeDefined();
        expect(res.charset).toBe(provided_1.providedString);
    });
    test('res.vary can be provided', () => {
        const { res } = (0, response_1.default)({ vary: provided_1.providedFunction });
        expect(res.vary).toBeDefined();
        expect(res.vary).toBe(provided_1.providedFunction);
    });
    test('res.app can be provided', () => {
        const { res } = (0, response_1.default)({ app: provided_1.providedApp });
        expect(res.app).toBeDefined();
        expect(res.app).toBe(provided_1.providedApp);
    });
    test('res.append can be provided', () => {
        const { res } = (0, response_1.default)({ append: provided_1.providedFunction });
        expect(res.append).toBeDefined();
        expect(res.append).toBe(provided_1.providedFunction);
    });
    test('res.req can be provided', () => {
        const { res } = (0, response_1.default)({ req: provided_1.providedReq });
        expect(res.req).toBeDefined();
        expect(res.req).toBe(provided_1.providedReq);
    });
});
//# sourceMappingURL=provided.express.test.js.map