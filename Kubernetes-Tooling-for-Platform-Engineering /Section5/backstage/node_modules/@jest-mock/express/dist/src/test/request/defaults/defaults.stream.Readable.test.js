"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Tested Module
const request_1 = __importDefault(require("../../../request/request"));
describe('request - Defaults from "stream.Readable" (accepts no arguments and return default values)', () => {
    test('req.readable is a boolean', () => {
        const req = (0, request_1.default)();
        expect(req.readable).toBeDefined();
        expect(req.readable).toBe(false);
    });
    test('req.readableHighWaterMark is a number', () => {
        const req = (0, request_1.default)();
        expect(req.readableHighWaterMark).toBeDefined();
        expect(req.readableHighWaterMark).toBe(0);
    });
    test('req.readableLength is a number', () => {
        const req = (0, request_1.default)();
        expect(req.readableLength).toBeDefined();
        expect(req.readableLength).toBe(0);
    });
    test('req.readableObjectMode is a boolean', () => {
        const req = (0, request_1.default)();
        expect(req.readableObjectMode).toBeDefined();
        expect(req.readableObjectMode).toBe(false);
    });
    test('req.destroyed is a boolean', () => {
        const req = (0, request_1.default)();
        expect(req.destroyed).toBeDefined();
        expect(req.destroyed).toBe(false);
    });
    test('req.constructor is a function', () => {
        const req = (0, request_1.default)();
        // the constructor is not mocked
        expect(req.constructor).toBeDefined();
        expect(typeof req.constructor).toBe('function');
    });
    test('req._read is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req._read).toBeDefined();
        expect(typeof req._read).toBe('function');
        expect(req._read.getMockName()).toBe('_read mock default');
    });
    test('req.read is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.read).toBeDefined();
        expect(typeof req.read).toBe('function');
        expect(req.read.getMockName()).toBe('read mock default');
    });
    test('req.setEncoding is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.setEncoding).toBeDefined();
        expect(typeof req.setEncoding).toBe('function');
        expect(req.setEncoding.getMockName()).toBe('setEncoding mock default');
    });
    test('req.pause is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.pause).toBeDefined();
        expect(typeof req.pause).toBe('function');
        expect(req.pause.getMockName()).toBe('pause mock default');
    });
    test('req.resume is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.resume).toBeDefined();
        expect(typeof req.resume).toBe('function');
        expect(req.resume.getMockName()).toBe('resume mock default');
    });
    test('req.isPaused is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.isPaused).toBeDefined();
        expect(typeof req.isPaused).toBe('function');
        expect(req.isPaused.getMockName()).toBe('isPaused mock default');
    });
    test('req.unpipe is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.unpipe).toBeDefined();
        expect(typeof req.unpipe).toBe('function');
        expect(req.unpipe.getMockName()).toBe('unpipe mock default');
    });
    test('req.unshift is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.unshift).toBeDefined();
        expect(typeof req.unshift).toBe('function');
        expect(req.unshift.getMockName()).toBe('unshift mock default');
    });
    test('req.wrap is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.wrap).toBeDefined();
        expect(typeof req.wrap).toBe('function');
        expect(req.wrap.getMockName()).toBe('wrap mock default');
    });
    test('req.push is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.push).toBeDefined();
        expect(typeof req.push).toBe('function');
        expect(req.push.getMockName()).toBe('push mock default');
    });
    test('req._destroy is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req._destroy).toBeDefined();
        expect(typeof req._destroy).toBe('function');
        expect(req._destroy.getMockName()).toBe('_destroy mock default');
    });
    test('req.addListener is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.addListener).toBeDefined();
        expect(typeof req.addListener).toBe('function');
        expect(req.addListener.getMockName()).toBe('addListener mock default');
    });
    test('req.emit is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.emit).toBeDefined();
        expect(typeof req.emit).toBe('function');
        expect(req.emit.getMockName()).toBe('emit mock default');
    });
    test('req.on is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.on).toBeDefined();
        expect(typeof req.on).toBe('function');
        expect(req.on.getMockName()).toBe('on mock default');
    });
    test('req.once is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.once).toBeDefined();
        expect(typeof req.once).toBe('function');
        expect(req.once.getMockName()).toBe('once mock default');
    });
    test('req.prependListener is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.prependListener).toBeDefined();
        expect(typeof req.prependListener).toBe('function');
        expect(req.prependListener.getMockName()).toBe('prependListener mock default');
    });
    test('req.prependOnceListener is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.prependOnceListener).toBeDefined();
        expect(typeof req.prependOnceListener).toBe('function');
        expect(req.prependOnceListener.getMockName()).toBe('prependOnceListener mock default');
    });
    test('req.removeListener is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.removeListener).toBeDefined();
        expect(typeof req.removeListener).toBe('function');
        expect(req.removeListener.getMockName()).toBe('removeListener mock default');
    });
    test('req.destroy is a mocked function', () => {
        const req = (0, request_1.default)();
        expect(req.destroy).toBeDefined();
        expect(typeof req.destroy).toBe('function');
        expect(req.destroy.getMockName()).toBe('destroy mock default');
    });
});
//# sourceMappingURL=defaults.stream.Readable.test.js.map