{"version":3,"file":"parse-legacy-protocol.js","sourceRoot":"","sources":["../../src/legacy/parse-legacy-protocol.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,kDAA4C;AAErC,IAAM,0BAA0B,GAAG,UAAC,iBAAoC,EAAE,OAAY;IAC3F,IAAI,eAAe,GAAG,OAAO,CAAC;IAE9B,QAAQ,OAAO,CAAC,IAAI,EAAE;QACpB,KAAK,uBAAY,CAAC,IAAI;YACpB,iBAAiB,CAAC,QAAQ,GAAG,IAAI,CAAC;YAClC,eAAe,yBAAQ,OAAO,KAAE,IAAI,EAAE,uBAAY,CAAC,mBAAmB,GAAE,CAAC;YACzE,MAAM;QACR,KAAK,uBAAY,CAAC,kBAAkB;YAClC,eAAe,GAAG;gBAChB,EAAE,EAAE,OAAO,CAAC,EAAE;gBACd,IAAI,EAAE,uBAAY,CAAC,SAAS;gBAC5B,OAAO,EAAE;oBACP,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,aAAa,EAAE,OAAO,CAAC,aAAa;oBACpC,SAAS,EAAE,OAAO,CAAC,SAAS;iBAC7B;aACF,CAAC;YACF,MAAM;QACR,KAAK,uBAAY,CAAC,gBAAgB;YAChC,eAAe,yBAAQ,OAAO,KAAE,IAAI,EAAE,uBAAY,CAAC,QAAQ,GAAE,CAAC;YAC9D,MAAM;QACR,KAAK,uBAAY,CAAC,kBAAkB;YAClC,IAAI,iBAAiB,CAAC,QAAQ,EAAE;gBAC9B,eAAe,yBAAQ,OAAO,KAAE,IAAI,EAAE,uBAAY,CAAC,YAAY,GAAE,CAAC;aACnE;YACD,MAAM;QACR,KAAK,uBAAY,CAAC,oBAAoB;YACpC,IAAI,iBAAiB,CAAC,QAAQ,EAAE;gBAC9B,eAAe,yBACV,OAAO,KAAE,IAAI,EAAE,uBAAY,CAAC,SAAS,EACxC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,GACxF,CAAC;aACH;YACD,MAAM;QACR,KAAK,uBAAY,CAAC,SAAS;YACzB,IAAI,iBAAiB,CAAC,QAAQ,EAAE;gBAC9B,eAAe,yBAAQ,OAAO,KAAE,IAAI,EAAE,uBAAY,CAAC,iBAAiB,GAAE,CAAC;aACxE;YACD,MAAM;QACR,KAAK,uBAAY,CAAC,QAAQ;YACxB,IAAI,iBAAiB,CAAC,QAAQ,EAAE;gBAC9B,eAAe,yBAAQ,OAAO,KAAE,IAAI,EAAE,uBAAY,CAAC,iBAAiB,GAAE,CAAC;aACxE;YACD,MAAM;QACR,KAAK,uBAAY,CAAC,YAAY;YAC5B,IAAI,iBAAiB,CAAC,QAAQ,EAAE;gBAC9B,eAAe,GAAG,IAAI,CAAC;aACxB;YACD,MAAM;QACR,KAAK,uBAAY,CAAC,oBAAoB;YACpC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE;gBAC/B,eAAe,GAAG,IAAI,CAAC;aACxB;YACD,MAAM;QACR;YACE,MAAM;KACT;IAED,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AA5DW,QAAA,0BAA0B,8BA4DrC","sourcesContent":["import { ConnectionContext } from '../server';\nimport MessageTypes from '../message-types';\n\nexport const parseLegacyProtocolMessage = (connectionContext: ConnectionContext, message: any) => {\n  let messageToReturn = message;\n\n  switch (message.type) {\n    case MessageTypes.INIT:\n      connectionContext.isLegacy = true;\n      messageToReturn = { ...message, type: MessageTypes.GQL_CONNECTION_INIT };\n      break;\n    case MessageTypes.SUBSCRIPTION_START:\n      messageToReturn = {\n        id: message.id,\n        type: MessageTypes.GQL_START,\n        payload: {\n          query: message.query,\n          operationName: message.operationName,\n          variables: message.variables,\n        },\n      };\n      break;\n    case MessageTypes.SUBSCRIPTION_END:\n      messageToReturn = { ...message, type: MessageTypes.GQL_STOP };\n      break;\n    case MessageTypes.GQL_CONNECTION_ACK:\n      if (connectionContext.isLegacy) {\n        messageToReturn = { ...message, type: MessageTypes.INIT_SUCCESS };\n      }\n      break;\n    case MessageTypes.GQL_CONNECTION_ERROR:\n      if (connectionContext.isLegacy) {\n        messageToReturn = {\n          ...message, type: MessageTypes.INIT_FAIL,\n          payload: message.payload.message ? { error: message.payload.message } : message.payload,\n        };\n      }\n      break;\n    case MessageTypes.GQL_ERROR:\n      if (connectionContext.isLegacy) {\n        messageToReturn = { ...message, type: MessageTypes.SUBSCRIPTION_FAIL };\n      }\n      break;\n    case MessageTypes.GQL_DATA:\n      if (connectionContext.isLegacy) {\n        messageToReturn = { ...message, type: MessageTypes.SUBSCRIPTION_DATA };\n      }\n      break;\n    case MessageTypes.GQL_COMPLETE:\n      if (connectionContext.isLegacy) {\n        messageToReturn = null;\n      }\n      break;\n    case MessageTypes.SUBSCRIPTION_SUCCESS:\n      if (!connectionContext.isLegacy) {\n        messageToReturn = null;\n      }\n      break;\n    default:\n      break;\n  }\n\n  return messageToReturn;\n};\n"]}