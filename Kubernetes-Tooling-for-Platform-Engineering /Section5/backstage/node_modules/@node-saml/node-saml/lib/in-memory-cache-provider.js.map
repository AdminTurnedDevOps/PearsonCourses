{"version":3,"file":"in-memory-cache-provider.js","sourceRoot":"","sources":["../src/in-memory-cache-provider.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Simple in memory cache provider.  To be used to store state of requests that needs\n * to be validated/checked when a response is received.\n *\n * This is the default implementation of a cache provider used by Node SAML.  For\n * multiple server instances/load balanced scenarios (I.e. the SAML request could have\n * been generated from a different server/process handling the SAML response) this\n * implementation will NOT be sufficient.\n *\n * The caller should provide their own implementation for a cache provider as defined\n * in the config options.\n */\n\nimport { CacheItem, CacheProvider } from \"./types\";\n\ninterface CacheProviderOptions {\n  keyExpirationPeriodMs: number;\n}\n\nexport class InMemoryCacheProvider implements CacheProvider {\n  private cacheKeys: Record<string, CacheItem>;\n  private options: CacheProviderOptions;\n  private lastPrune = 0;\n  private prune: () => void;\n  private removeKeyIfExpired: (key: keyof typeof this.cacheKeys, nowMs: number) => Promise<void>;\n\n  constructor(options: Partial<CacheProviderOptions>) {\n    this.cacheKeys = {};\n\n    this.options = {\n      ...options,\n      keyExpirationPeriodMs: options.keyExpirationPeriodMs ?? 28800000, // 8 hours,\n    };\n\n    // Remove expired cache keys\n    this.prune = () => {\n      const nowMs = new Date().getTime();\n\n      // Don't call this function more than is needed in high-load environments\n      if (nowMs > this.lastPrune + this.options.keyExpirationPeriodMs) {\n        const keys = Object.keys(this.cacheKeys);\n        const keysToRemove: (keyof typeof this.cacheKeys)[] = [];\n        keys.forEach((key) => {\n          if (nowMs >= this.cacheKeys[key].createdAt + this.options.keyExpirationPeriodMs) {\n            keysToRemove.push(key);\n          }\n        });\n\n        // No need to await this because we don't care when it gets done\n        keysToRemove.forEach((key) => this.removeAsync(key));\n        this.lastPrune = nowMs;\n      }\n    };\n\n    this.removeKeyIfExpired = async (key: keyof typeof this.cacheKeys, nowMs: number) => {\n      if (\n        this.cacheKeys[key] &&\n        nowMs >= this.cacheKeys[key].createdAt + this.options.keyExpirationPeriodMs\n      ) {\n        await this.removeAsync(key);\n      }\n    };\n  }\n\n  /**\n   * Store an item in the cache, using the specified key and value.\n   * Internally will keep track of the time the item was added to the cache\n   */\n  async saveAsync(key: string, value: string): Promise<CacheItem | null> {\n    // Remove all expired keys at a later time\n    this.prune();\n\n    // Remove the key if it is expired\n    const nowMs = new Date().getTime();\n    await this.removeKeyIfExpired(key, nowMs);\n\n    if (!this.cacheKeys[key]) {\n      this.cacheKeys[key] = {\n        createdAt: nowMs,\n        value: value,\n      };\n      return this.cacheKeys[key];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns the value of the specified key in the cache\n   */\n  async getAsync(key: string): Promise<string | null> {\n    // Remove all expired keys at a later time\n    this.prune();\n\n    // Remove the key if it is expired\n    const nowMs = new Date().getTime();\n    await this.removeKeyIfExpired(key, nowMs);\n\n    if (this.cacheKeys[key]) {\n      return this.cacheKeys[key].value;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Removes an item from the cache if it exists\n   */\n  async removeAsync(key: string | null): Promise<string | null> {\n    if (key != null && this.cacheKeys[key]) {\n      delete this.cacheKeys[key];\n      return key;\n    } else {\n      return null;\n    }\n  }\n}\n"]}