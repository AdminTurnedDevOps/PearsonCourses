{"version":3,"file":"saml.js","sourceRoot":"","sources":["../src/saml.ts"],"names":[],"mappings":"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","sourcesContent":["import Debug from \"debug\";\nimport * as zlib from \"zlib\";\nimport * as crypto from \"crypto\";\nimport { URL } from \"url\";\nimport * as querystring from \"querystring\";\nimport * as util from \"util\";\nimport { InMemoryCacheProvider } from \"./in-memory-cache-provider\";\nimport * as algorithms from \"./algorithms\";\nimport { ParsedQs } from \"qs\";\nimport {\n  isValidSamlSigningOptions,\n  AudienceRestrictionXML,\n  CacheProvider,\n  IdpCertCallback,\n  ErrorWithXmlStatus,\n  Profile,\n  SamlOptions,\n  SamlConfig,\n  XMLOutput,\n  ValidateInResponseTo,\n  AuthorizeRequestXML,\n  XMLInput,\n  SamlIDPListConfig,\n  SamlIDPEntryConfig,\n  LogoutRequestXML,\n  XMLObject,\n  XMLValue,\n  SamlResponseXmlJs,\n  AuthOptions,\n} from \"./types\";\nimport { assertBooleanIfPresent, assertRequired } from \"./utility\";\nimport {\n  buildXml2JsObject,\n  buildXmlBuilderObject,\n  decryptXml,\n  getNameIdAsync,\n  parseDomFromString,\n  parseXml2JsFromString,\n  validateSignature,\n  xpath,\n} from \"./xml\";\nimport { keyInfoToPem, generateUniqueId } from \"./crypto\";\nimport { dateStringToTimestamp, generateInstant } from \"./date-time\";\nimport { signAuthnRequestPost } from \"./saml-post-signing\";\nimport { generateServiceProviderMetadata } from \"./metadata\";\nimport { DEFAULT_IDENTIFIER_FORMAT, DEFAULT_WANT_ASSERTIONS_SIGNED } from \"./constants\";\n\nconst debug = Debug(\"node-saml\");\nconst inflateRawAsync = util.promisify(zlib.inflateRaw);\nconst deflateRawAsync = util.promisify(zlib.deflateRaw);\n\nconst resolveAndParseKeyInfosToPem = async ({\n  idpCert,\n}: Pick<SamlOptions, \"idpCert\">): Promise<string[]> => {\n  const keyInfosToHandle: string[] = [];\n  const pemFiles: string[] = [];\n  if (typeof idpCert === \"function\") {\n    await util\n      .promisify(idpCert as IdpCertCallback)()\n      .then((certs) => {\n        assertRequired(certs, \"callback didn't return idpCert\");\n        keyInfosToHandle.push(...(Array.isArray(certs) ? certs : [certs]));\n      });\n  } else {\n    keyInfosToHandle.push(...(Array.isArray(idpCert) ? idpCert : [idpCert]));\n  }\n  // Verify and normalize each PEM file.\n  keyInfosToHandle.forEach((cert) => {\n    pemFiles.push(keyInfoToPem(cert, \"CERTIFICATE\"));\n  });\n\n  return pemFiles;\n};\n\nclass SAML {\n  /**\n   * Note that some methods in SAML are not yet marked as protected as they are used in testing.\n   * Those methods start with an underscore, e.g. _generateLogoutRequest\n   */\n  options: SamlOptions;\n  // This is only for testing\n  cacheProvider: CacheProvider;\n\n  // Array of PEM files used to validate signatures.\n  pemFiles: string[] = [];\n\n  constructor(ctorOptions: SamlConfig) {\n    this.options = this.initialize(ctorOptions);\n    this.cacheProvider = this.options.cacheProvider;\n  }\n\n  initialize(ctorOptions: SamlConfig): SamlOptions {\n    if (!ctorOptions) {\n      throw new TypeError(\"SamlOptions required on construction\");\n    }\n\n    assertRequired(ctorOptions.callbackUrl, \"callbackUrl is required\");\n    assertRequired(ctorOptions.issuer, \"issuer is required\");\n    assertRequired(ctorOptions.idpCert, \"idpCert is required\");\n\n    // Prevent a JS user from passing in \"false\", which is truthy, and doing the wrong thing\n    assertBooleanIfPresent(ctorOptions.passive);\n    assertBooleanIfPresent(ctorOptions.disableRequestedAuthnContext);\n    assertBooleanIfPresent(ctorOptions.forceAuthn);\n    assertBooleanIfPresent(ctorOptions.skipRequestCompression);\n    assertBooleanIfPresent(ctorOptions.disableRequestAcsUrl);\n    assertBooleanIfPresent(ctorOptions.allowCreate);\n    assertBooleanIfPresent(ctorOptions.wantAssertionsSigned);\n    assertBooleanIfPresent(ctorOptions.wantAuthnResponseSigned);\n    assertBooleanIfPresent(ctorOptions.signMetadata);\n\n    const options: SamlOptions = {\n      ...ctorOptions,\n      passive: ctorOptions.passive ?? false,\n      disableRequestedAuthnContext: ctorOptions.disableRequestedAuthnContext ?? false,\n      additionalParams: ctorOptions.additionalParams ?? {},\n      additionalAuthorizeParams: ctorOptions.additionalAuthorizeParams ?? {},\n      additionalLogoutParams: ctorOptions.additionalLogoutParams ?? {},\n      forceAuthn: ctorOptions.forceAuthn ?? false,\n      skipRequestCompression: ctorOptions.skipRequestCompression ?? false,\n      disableRequestAcsUrl: ctorOptions.disableRequestAcsUrl ?? false,\n      acceptedClockSkewMs: ctorOptions.acceptedClockSkewMs ?? 0,\n      maxAssertionAgeMs: ctorOptions.maxAssertionAgeMs ?? 0,\n      callbackUrl: ctorOptions.callbackUrl,\n      issuer: ctorOptions.issuer,\n      audience: ctorOptions.audience ?? ctorOptions.issuer ?? \"unknown_audience\", // use issuer as default\n      identifierFormat:\n        ctorOptions.identifierFormat === undefined\n          ? DEFAULT_IDENTIFIER_FORMAT\n          : ctorOptions.identifierFormat,\n      allowCreate: ctorOptions.allowCreate ?? true,\n      spNameQualifier: ctorOptions.spNameQualifier,\n      wantAssertionsSigned: ctorOptions.wantAssertionsSigned ?? DEFAULT_WANT_ASSERTIONS_SIGNED,\n      wantAuthnResponseSigned: ctorOptions.wantAuthnResponseSigned ?? true,\n      authnContext: ctorOptions.authnContext ?? [\n        \"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\",\n      ],\n      validateInResponseTo: ctorOptions.validateInResponseTo ?? ValidateInResponseTo.never,\n      idpCert: ctorOptions.idpCert,\n      requestIdExpirationPeriodMs: ctorOptions.requestIdExpirationPeriodMs ?? 28800000, // 8 hours\n      cacheProvider:\n        ctorOptions.cacheProvider ??\n        new InMemoryCacheProvider({\n          keyExpirationPeriodMs: ctorOptions.requestIdExpirationPeriodMs,\n        }),\n      logoutUrl: ctorOptions.logoutUrl ?? ctorOptions.entryPoint ?? \"\", // Default to Entry Point\n      signatureAlgorithm: ctorOptions.signatureAlgorithm ?? \"sha1\", // sha1, sha256, or sha512\n      authnRequestBinding: ctorOptions.authnRequestBinding ?? \"HTTP-Redirect\",\n      generateUniqueId: ctorOptions.generateUniqueId ?? generateUniqueId,\n      signMetadata: ctorOptions.signMetadata ?? false,\n      racComparison: ctorOptions.racComparison ?? \"exact\",\n    };\n\n    if (!Object.values(ValidateInResponseTo).includes(options.validateInResponseTo)) {\n      throw new TypeError(\"validateInResponseTo must be one of ['never', 'ifPresent', 'always']\");\n    }\n\n    /**\n     * List of possible values:\n     * - exact : Assertion context must exactly match a context in the list\n     * - minimum:  Assertion context must be at least as strong as a context in the list\n     * - maximum:  Assertion context must be no stronger than a context in the list\n     * - better:  Assertion context must be stronger than all contexts in the list\n     */\n    if (![\"exact\", \"minimum\", \"maximum\", \"better\"].includes(options.racComparison)) {\n      throw new TypeError(\"racComparison must be one of ['exact', 'minimum', 'maximum', 'better']\");\n    }\n\n    return options;\n  }\n\n  protected signRequest(samlMessage: querystring.ParsedUrlQueryInput): void {\n    assertRequired(this.options.privateKey, \"privateKey is required\");\n\n    const samlMessageToSign: querystring.ParsedUrlQueryInput = {};\n    samlMessage.SigAlg = algorithms.getSigningAlgorithm(this.options.signatureAlgorithm);\n    const signer = algorithms.getSigner(this.options.signatureAlgorithm);\n    if (samlMessage.SAMLRequest) {\n      samlMessageToSign.SAMLRequest = samlMessage.SAMLRequest;\n    }\n    if (samlMessage.SAMLResponse) {\n      samlMessageToSign.SAMLResponse = samlMessage.SAMLResponse;\n    }\n    if (samlMessage.RelayState) {\n      samlMessageToSign.RelayState = samlMessage.RelayState;\n    }\n    if (samlMessage.SigAlg) {\n      samlMessageToSign.SigAlg = samlMessage.SigAlg;\n    }\n    signer.update(querystring.stringify(samlMessageToSign));\n    samlMessage.Signature = signer.sign(\n      keyInfoToPem(this.options.privateKey, \"PRIVATE KEY\"),\n      \"base64\",\n    );\n  }\n\n  protected async generateAuthorizeRequestAsync(\n    this: SAML,\n    isPassive: boolean,\n    isHttpPostBinding: boolean,\n  ): Promise<string> {\n    assertRequired(this.options.entryPoint, \"entryPoint is required\");\n\n    const id = this.options.generateUniqueId();\n    const instant = generateInstant();\n\n    if (this.mustValidateInResponseTo(true)) {\n      await this.cacheProvider.saveAsync(id, instant);\n    }\n    const request: AuthorizeRequestXML = {\n      \"samlp:AuthnRequest\": {\n        \"@xmlns:samlp\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n        \"@ID\": id,\n        \"@Version\": \"2.0\",\n        \"@IssueInstant\": instant,\n        \"@ProtocolBinding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\",\n        \"@Destination\": this.options.entryPoint,\n        \"saml:Issuer\": {\n          \"@xmlns:saml\": \"urn:oasis:names:tc:SAML:2.0:assertion\",\n          \"#text\": this.options.issuer,\n        },\n      },\n    };\n\n    if (isPassive) request[\"samlp:AuthnRequest\"][\"@IsPassive\"] = true;\n\n    if (this.options.forceAuthn === true) {\n      request[\"samlp:AuthnRequest\"][\"@ForceAuthn\"] = true;\n    }\n\n    if (!this.options.disableRequestAcsUrl) {\n      request[\"samlp:AuthnRequest\"][\"@AssertionConsumerServiceURL\"] = this.options.callbackUrl;\n    }\n\n    const samlAuthnRequestExtensions = this.options.samlAuthnRequestExtensions;\n    if (samlAuthnRequestExtensions != null) {\n      if (typeof samlAuthnRequestExtensions != \"object\") {\n        throw new TypeError(\"samlAuthnRequestExtensions should be Object\");\n      }\n      request[\"samlp:AuthnRequest\"][\"samlp:Extensions\"] = {\n        \"@xmlns:samlp\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n        ...samlAuthnRequestExtensions,\n      };\n    }\n\n    const nameIDPolicy: XMLInput = {\n      \"@xmlns:samlp\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n      \"@AllowCreate\": this.options.allowCreate,\n    };\n\n    if (this.options.identifierFormat != null) {\n      nameIDPolicy[\"@Format\"] = this.options.identifierFormat;\n    }\n\n    if (this.options.spNameQualifier != null) {\n      nameIDPolicy[\"@SPNameQualifier\"] = this.options.spNameQualifier;\n    }\n\n    request[\"samlp:AuthnRequest\"][\"samlp:NameIDPolicy\"] = nameIDPolicy;\n\n    if (!this.options.disableRequestedAuthnContext) {\n      const authnContextClassRefs: XMLInput[] = [];\n      (this.options.authnContext as string[]).forEach(function (value) {\n        authnContextClassRefs.push({\n          \"@xmlns:saml\": \"urn:oasis:names:tc:SAML:2.0:assertion\",\n          \"#text\": value,\n        });\n      });\n\n      request[\"samlp:AuthnRequest\"][\"samlp:RequestedAuthnContext\"] = {\n        \"@xmlns:samlp\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n        \"@Comparison\": this.options.racComparison,\n        \"saml:AuthnContextClassRef\": authnContextClassRefs,\n      };\n    }\n\n    if (this.options.attributeConsumingServiceIndex != null) {\n      request[\"samlp:AuthnRequest\"][\"@AttributeConsumingServiceIndex\"] =\n        this.options.attributeConsumingServiceIndex;\n    }\n\n    if (this.options.providerName != null) {\n      request[\"samlp:AuthnRequest\"][\"@ProviderName\"] = this.options.providerName;\n    }\n\n    if (this.options.scoping != null) {\n      const scoping: XMLInput = {\n        \"@xmlns:samlp\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n      };\n\n      if (typeof this.options.scoping.proxyCount === \"number\") {\n        scoping[\"@ProxyCount\"] = this.options.scoping.proxyCount;\n      }\n\n      if (this.options.scoping.idpList) {\n        scoping[\"samlp:IDPList\"] = this.options.scoping.idpList.map(\n          (idpListItem: SamlIDPListConfig) => {\n            const formattedIdpListItem: XMLInput = {\n              \"@xmlns:samlp\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n            };\n\n            if (idpListItem.entries) {\n              formattedIdpListItem[\"samlp:IDPEntry\"] = idpListItem.entries.map(\n                (entry: SamlIDPEntryConfig) => {\n                  const formattedEntry: XMLInput = {\n                    \"@xmlns:samlp\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n                  };\n\n                  formattedEntry[\"@ProviderID\"] = entry.providerId;\n\n                  if (entry.name) {\n                    formattedEntry[\"@Name\"] = entry.name;\n                  }\n\n                  if (entry.loc) {\n                    formattedEntry[\"@Loc\"] = entry.loc;\n                  }\n\n                  return formattedEntry;\n                },\n              );\n            }\n\n            if (idpListItem.getComplete) {\n              formattedIdpListItem[\"samlp:GetComplete\"] = idpListItem.getComplete;\n            }\n\n            return formattedIdpListItem;\n          },\n        );\n      }\n\n      if (this.options.scoping.requesterId) {\n        scoping[\"samlp:RequesterID\"] = this.options.scoping.requesterId;\n      }\n\n      request[\"samlp:AuthnRequest\"][\"samlp:Scoping\"] = scoping;\n    }\n\n    let stringRequest = buildXmlBuilderObject(request, false);\n    // TODO: maybe we should always sign here\n    if (isHttpPostBinding && isValidSamlSigningOptions(this.options)) {\n      stringRequest = signAuthnRequestPost(stringRequest, this.options);\n    }\n    return stringRequest;\n  }\n\n  async _generateLogoutRequest(this: SAML, user: Profile): Promise<string> {\n    const id = this.options.generateUniqueId();\n    const instant = generateInstant();\n\n    const request = {\n      \"samlp:LogoutRequest\": {\n        \"@xmlns:samlp\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n        \"@xmlns:saml\": \"urn:oasis:names:tc:SAML:2.0:assertion\",\n        \"@ID\": id,\n        \"@Version\": \"2.0\",\n        \"@IssueInstant\": instant,\n        \"@Destination\": this.options.logoutUrl,\n        \"saml:Issuer\": {\n          \"@xmlns:saml\": \"urn:oasis:names:tc:SAML:2.0:assertion\",\n          \"#text\": this.options.issuer,\n        },\n        \"samlp:Extensions\": {},\n        \"saml:NameID\": {\n          \"@Format\": user.nameIDFormat,\n          \"#text\": user.nameID,\n        },\n      },\n    } as LogoutRequestXML;\n\n    const samlLogoutRequestExtensions = this.options.samlLogoutRequestExtensions;\n    if (samlLogoutRequestExtensions != null) {\n      if (typeof samlLogoutRequestExtensions != \"object\") {\n        throw new TypeError(\"samlLogoutRequestExtensions should be Object\");\n      }\n      request[\"samlp:LogoutRequest\"][\"samlp:Extensions\"] = {\n        \"@xmlns:samlp\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n        ...samlLogoutRequestExtensions,\n      };\n    } else {\n      delete request[\"samlp:LogoutRequest\"][\"samlp:Extensions\"];\n    }\n\n    if (user.nameQualifier != null) {\n      request[\"samlp:LogoutRequest\"][\"saml:NameID\"][\"@NameQualifier\"] = user.nameQualifier;\n    }\n\n    if (user.spNameQualifier != null) {\n      request[\"samlp:LogoutRequest\"][\"saml:NameID\"][\"@SPNameQualifier\"] = user.spNameQualifier;\n    }\n\n    if (user.sessionIndex) {\n      request[\"samlp:LogoutRequest\"][\"saml2p:SessionIndex\"] = {\n        \"@xmlns:saml2p\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n        \"#text\": user.sessionIndex,\n      };\n    }\n\n    await this.cacheProvider.saveAsync(id, instant);\n    return buildXmlBuilderObject(request, false);\n  }\n\n  _generateLogoutResponse(this: SAML, logoutRequest: Profile, success: boolean): string {\n    const id = this.options.generateUniqueId();\n    const instant = generateInstant();\n\n    const successStatus = {\n      \"samlp:StatusCode\": {\n        \"@Value\": \"urn:oasis:names:tc:SAML:2.0:status:Success\",\n      },\n    };\n\n    const failStatus = {\n      \"samlp:StatusCode\": {\n        \"@Value\": \"urn:oasis:names:tc:SAML:2.0:status:Requester\",\n        \"samlp:StatusCode\": {\n          \"@Value\": \"urn:oasis:names:tc:SAML:2.0:status:UnknownPrincipal\",\n        },\n      },\n    };\n\n    const request = {\n      \"samlp:LogoutResponse\": {\n        \"@xmlns:samlp\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n        \"@xmlns:saml\": \"urn:oasis:names:tc:SAML:2.0:assertion\",\n        \"@ID\": id,\n        \"@Version\": \"2.0\",\n        \"@IssueInstant\": instant,\n        \"@Destination\": this.options.logoutUrl,\n        \"@InResponseTo\": logoutRequest.ID,\n        \"saml:Issuer\": {\n          \"#text\": this.options.issuer,\n        },\n        \"samlp:Status\": success ? successStatus : failStatus,\n      },\n    };\n\n    return buildXmlBuilderObject(request, false);\n  }\n\n  async _requestToUrlAsync(\n    request: string | null | undefined,\n    response: string | null,\n    operation: string,\n    additionalParameters: querystring.ParsedUrlQuery,\n  ): Promise<string> {\n    assertRequired(this.options.entryPoint, \"entryPoint is required\");\n    const requestOrResponse = request || response;\n    assertRequired(requestOrResponse, \"either request or response is required\");\n\n    let buffer: Buffer;\n    if (this.options.skipRequestCompression) {\n      buffer = Buffer.from(requestOrResponse, \"utf8\");\n    } else {\n      buffer = await deflateRawAsync(requestOrResponse);\n    }\n\n    const base64 = buffer.toString(\"base64\");\n    let target = new URL(this.options.entryPoint);\n\n    if (operation === \"logout\") {\n      if (this.options.logoutUrl) {\n        target = new URL(this.options.logoutUrl);\n      }\n    } else if (operation !== \"authorize\") {\n      throw new Error(\"Unknown operation: \" + operation);\n    }\n\n    const samlMessage: querystring.ParsedUrlQuery = request\n      ? {\n          SAMLRequest: base64,\n        }\n      : {\n          SAMLResponse: base64,\n        };\n    Object.keys(additionalParameters).forEach((k) => {\n      samlMessage[k] = additionalParameters[k];\n    });\n    if (isValidSamlSigningOptions(this.options)) {\n      if (!this.options.entryPoint) {\n        throw new Error('\"entryPoint\" config parameter is required for signed messages');\n      }\n\n      // sets .SigAlg and .Signature\n      this.signRequest(samlMessage);\n    }\n    Object.keys(samlMessage).forEach((k) => {\n      target.searchParams.set(k, samlMessage[k] as string);\n    });\n\n    return target.toString();\n  }\n\n  _getAdditionalParams(\n    relayState: string,\n    operation: \"authorize\" | \"logout\",\n    overrideParams?: querystring.ParsedUrlQuery,\n  ): querystring.ParsedUrlQuery {\n    const additionalParams: querystring.ParsedUrlQuery = {};\n\n    if (typeof relayState === \"string\" && relayState.length > 0) {\n      additionalParams.RelayState = relayState;\n    }\n\n    return Object.assign(\n      additionalParams,\n      this.options.additionalParams,\n      operation === \"logout\"\n        ? this.options.additionalLogoutParams\n        : this.options.additionalAuthorizeParams,\n      overrideParams ?? {},\n    );\n  }\n\n  async getAuthorizeUrlAsync(\n    RelayState: string,\n    host: string | undefined,\n    options: AuthOptions,\n  ): Promise<string> {\n    const request = await this.generateAuthorizeRequestAsync(this.options.passive, false);\n    const operation = \"authorize\";\n    const overrideParams = options ? options.additionalParams || {} : {};\n    return await this._requestToUrlAsync(\n      request,\n      null,\n      operation,\n      this._getAdditionalParams(RelayState, operation, overrideParams),\n    );\n  }\n\n  async getAuthorizeMessageAsync(\n    RelayState: string,\n    host?: string,\n    options?: AuthOptions,\n  ): Promise<querystring.ParsedUrlQueryInput> {\n    assertRequired(this.options.entryPoint, \"entryPoint is required\");\n\n    const request = await this.generateAuthorizeRequestAsync(this.options.passive, true);\n    let buffer: Buffer;\n    if (this.options.skipRequestCompression) {\n      buffer = Buffer.from(request, \"utf8\");\n    } else {\n      buffer = await deflateRawAsync(request);\n    }\n\n    const operation = \"authorize\";\n    const overrideParams = options ? options.additionalParams || {} : {};\n    const additionalParameters = this._getAdditionalParams(RelayState, operation, overrideParams);\n    const samlMessage: querystring.ParsedUrlQueryInput = {\n      SAMLRequest: buffer.toString(\"base64\"),\n    };\n\n    Object.keys(additionalParameters).forEach((k) => {\n      samlMessage[k] = additionalParameters[k] || \"\";\n    });\n\n    return samlMessage;\n  }\n\n  async getAuthorizeFormAsync(\n    RelayState: string,\n    host?: string,\n    options?: AuthOptions,\n  ): Promise<string> {\n    assertRequired(this.options.entryPoint, \"entryPoint is required\");\n\n    // The quoteattr() function is used in a context, where the result will not be evaluated by javascript\n    // but must be interpreted by an XML or HTML parser, and it must absolutely avoid breaking the syntax\n    // of an element attribute.\n    const quoteattr = function (\n      s:\n        | string\n        | number\n        | boolean\n        | undefined\n        | null\n        | readonly string[]\n        | readonly number[]\n        | readonly boolean[],\n      preserveCR?: boolean,\n    ) {\n      const preserveCRChar = preserveCR ? \"&#13;\" : \"\\n\";\n      return (\n        (\"\" + s) // Forces the conversion to string.\n          .replace(/&/g, \"&amp;\") // This MUST be the 1st replacement.\n          .replace(/'/g, \"&apos;\") // The 4 other predefined entities, required.\n          .replace(/\"/g, \"&quot;\")\n          .replace(/</g, \"&lt;\")\n          .replace(/>/g, \"&gt;\")\n          // Add other replacements here for HTML only\n          // Or for XML, only if the named entities are defined in its DTD.\n          .replace(/\\r\\n/g, preserveCRChar) // Must be before the next replacement.\n          .replace(/[\\r\\n]/g, preserveCRChar)\n      );\n    };\n\n    const samlMessage = await this.getAuthorizeMessageAsync(RelayState, host, options);\n\n    const formInputs = Object.keys(samlMessage)\n      .map((k) => {\n        return '<input type=\"hidden\" name=\"' + k + '\" value=\"' + quoteattr(samlMessage[k]) + '\" />';\n      })\n      .join(\"\\r\\n\");\n\n    return [\n      \"<!DOCTYPE html>\",\n      \"<html>\",\n      \"<head>\",\n      '<meta charset=\"utf-8\">',\n      '<meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">',\n      \"</head>\",\n      '<body onload=\"document.forms[0].submit()\">',\n      \"<noscript>\",\n      \"<p><strong>Note:</strong> Since your browser does not support JavaScript, you must press the button below once to proceed.</p>\",\n      \"</noscript>\",\n      '<form method=\"post\" action=\"' + encodeURI(this.options.entryPoint) + '\">',\n      formInputs,\n      '<input type=\"submit\" value=\"Submit\" />',\n      \"</form>\",\n      '<script>document.forms[0].style.display=\"none\";</script>', // Hide the form if JavaScript is enabled\n      \"</body>\",\n      \"</html>\",\n    ].join(\"\\r\\n\");\n  }\n\n  async getLogoutUrlAsync(\n    user: Profile,\n    RelayState: string,\n    options: AuthOptions,\n  ): Promise<string> {\n    const request = await this._generateLogoutRequest(user);\n    const operation = \"logout\";\n    const overrideParams = options ? options.additionalParams || {} : {};\n    return await this._requestToUrlAsync(\n      request,\n      null,\n      operation,\n      this._getAdditionalParams(RelayState, operation, overrideParams),\n    );\n  }\n\n  getLogoutResponseUrl(\n    samlLogoutRequest: Profile,\n    RelayState: string,\n    options: AuthOptions,\n    success: boolean,\n    callback: (err: Error | null, url?: string) => void,\n  ): void {\n    util.callbackify(() =>\n      this.getLogoutResponseUrlAsync(samlLogoutRequest, RelayState, options, success),\n    )(callback);\n  }\n\n  async getLogoutResponseUrlAsync(\n    samlLogoutRequest: Profile,\n    RelayState: string,\n    options: AuthOptions,\n    success: boolean,\n  ): Promise<string> {\n    const response = this._generateLogoutResponse(samlLogoutRequest, success);\n    const operation = \"logout\";\n    const overrideParams = options ? options.additionalParams || {} : {};\n    return await this._requestToUrlAsync(\n      null,\n      response,\n      operation,\n      this._getAdditionalParams(RelayState, operation, overrideParams),\n    );\n  }\n\n  protected async getKeyInfosAsPem(): Promise<string[]> {\n    if (typeof this.options.idpCert === \"function\") {\n      // Do not cache\n      return await resolveAndParseKeyInfosToPem(this.options);\n    } else if (this.pemFiles.length > 0) {\n      // Return already cached PEM files.\n      return this.pemFiles;\n    }\n\n    // Load PEM files from different sources and cache.\n    this.pemFiles = await resolveAndParseKeyInfosToPem(this.options);\n    return this.pemFiles;\n  }\n\n  async validatePostResponseAsync(\n    container: Record<string, string>,\n  ): Promise<{ profile: Profile | null; loggedOut: boolean }> {\n    let xml: string;\n    let doc: Document;\n    let inResponseTo: string | null = null;\n\n    try {\n      xml = Buffer.from(container.SAMLResponse, \"base64\").toString(\"utf8\");\n      doc = await parseDomFromString(xml);\n\n      const inResponseToNodes = xpath.selectAttributes(\n        doc,\n        \"/*[local-name()='Response']/@InResponseTo\",\n      );\n\n      if (inResponseToNodes) {\n        inResponseTo = inResponseToNodes.length ? inResponseToNodes[0].nodeValue : null;\n\n        await this.validateInResponseTo(inResponseTo);\n      }\n      const pemFiles = await this.getKeyInfosAsPem();\n      // Check if this document has a valid top-level signature which applies to the entire XML document\n      let validSignature = false;\n      if (validateSignature(xml, doc.documentElement, pemFiles)) {\n        validSignature = true;\n      }\n\n      if (this.options.wantAuthnResponseSigned === true && validSignature === false) {\n        throw new Error(\"Invalid document signature\");\n      }\n\n      const assertions = xpath.selectElements(\n        doc,\n        \"/*[local-name()='Response']/*[local-name()='Assertion']\",\n      );\n      const encryptedAssertions = xpath.selectElements(\n        doc,\n        \"/*[local-name()='Response']/*[local-name()='EncryptedAssertion']\",\n      );\n\n      if (assertions.length + encryptedAssertions.length > 1) {\n        // There's no reason I know of that we want to handle multiple assertions, and it seems like a\n        //   potential risk vector for signature scope issues, so treat this as an invalid signature\n        throw new Error(\"Invalid signature: multiple assertions\");\n      }\n\n      if (assertions.length == 1) {\n        if (\n          (this.options.wantAssertionsSigned || !validSignature) &&\n          !validateSignature(xml, assertions[0], pemFiles)\n        ) {\n          throw new Error(\"Invalid signature\");\n        }\n\n        return await this.processValidlySignedAssertionAsync(\n          assertions[0].toString(),\n          xml,\n          inResponseTo,\n        );\n      }\n\n      if (encryptedAssertions.length == 1) {\n        assertRequired(this.options.decryptionPvk, \"No decryption key for encrypted SAML response\");\n\n        const encryptedAssertionXml = encryptedAssertions[0].toString();\n\n        const decryptedXml = await decryptXml(encryptedAssertionXml, this.options.decryptionPvk);\n        const decryptedDoc = await parseDomFromString(decryptedXml);\n        const decryptedAssertions = xpath.selectElements(\n          decryptedDoc,\n          \"/*[local-name()='Assertion']\",\n        );\n        if (decryptedAssertions.length != 1) throw new Error(\"Invalid EncryptedAssertion content\");\n\n        if (\n          (this.options.wantAssertionsSigned || !validSignature) &&\n          !validateSignature(decryptedXml, decryptedAssertions[0], pemFiles)\n        ) {\n          throw new Error(\"Invalid signature from encrypted assertion\");\n        }\n\n        return await this.processValidlySignedAssertionAsync(\n          decryptedAssertions[0].toString(),\n          xml,\n          inResponseTo,\n        );\n      }\n\n      // If there's no assertion, fall back on xml2js response parsing for the status &\n      //   LogoutResponse code.\n\n      const xmljsDoc = (await parseXml2JsFromString(xml)) as SamlResponseXmlJs;\n      const response = xmljsDoc.Response;\n      if (response) {\n        if (!(\"Assertion\" in response)) {\n          const status = response.Status;\n          if (status) {\n            const statusCode = status[0].StatusCode;\n            if (\n              statusCode &&\n              statusCode[0].$?.Value === \"urn:oasis:names:tc:SAML:2.0:status:Responder\"\n            ) {\n              const nestedStatusCode = statusCode[0].StatusCode;\n              if (\n                nestedStatusCode &&\n                nestedStatusCode[0].$?.Value === \"urn:oasis:names:tc:SAML:2.0:status:NoPassive\"\n              ) {\n                if (!validSignature) {\n                  throw new Error(\"Invalid signature: NoPassive\");\n                }\n                return { profile: null, loggedOut: false };\n              }\n            }\n\n            // Note that we're not requiring a valid signature before this logic -- since we are\n            //   throwing an error in any case, and some providers don't sign error results,\n            //   let's go ahead and give the potentially more helpful error.\n            if (statusCode && statusCode[0].$?.Value) {\n              const msgType = statusCode[0].$.Value.match(/[^:]*$/);\n              if (msgType && msgType[0] != \"Success\") {\n                let msg = \"unspecified\";\n                if (status[0].StatusMessage) {\n                  msg = status[0].StatusMessage[0]._ || msg;\n                } else if (statusCode[0].StatusCode) {\n                  const msgValues = statusCode[0].StatusCode[0].$?.Value.match(/[^:]*$/);\n                  msg = msgValues ? msgValues[0] : msg;\n                }\n                const statusXml = buildXml2JsObject(\"Status\", status[0]);\n                throw new ErrorWithXmlStatus(\n                  \"SAML provider returned \" + msgType + \" error: \" + msg,\n                  statusXml,\n                );\n              }\n            }\n          }\n        }\n        throw new Error(\"Missing SAML assertion\");\n      } else {\n        if (!validSignature) {\n          throw new Error(\"Invalid signature: No response found\");\n        }\n        const logoutResponse = xmljsDoc.LogoutResponse;\n        if (logoutResponse) {\n          return { profile: null, loggedOut: true };\n        } else {\n          throw new Error(\"Unknown SAML response message\");\n        }\n      }\n    } catch (err) {\n      debug(\"validatePostResponse resulted in an error: %s\", err);\n      if (this.mustValidateInResponseTo(Boolean(inResponseTo))) {\n        await this.cacheProvider.removeAsync(inResponseTo);\n      }\n      throw err;\n    }\n  }\n\n  protected async validateInResponseTo(inResponseTo: string | null): Promise<void> {\n    if (this.mustValidateInResponseTo(Boolean(inResponseTo))) {\n      if (inResponseTo) {\n        const result = await this.cacheProvider.getAsync(inResponseTo);\n        if (!result) throw new Error(\"InResponseTo is not valid\");\n        return;\n      } else {\n        throw new Error(\"InResponseTo is missing from response\");\n      }\n    }\n  }\n\n  async validateRedirectAsync(\n    container: ParsedQs,\n    originalQuery: string,\n  ): Promise<{ profile: Profile | null; loggedOut: boolean }> {\n    const samlMessageType = container.SAMLRequest ? \"SAMLRequest\" : \"SAMLResponse\";\n\n    const data = Buffer.from(container[samlMessageType] as string, \"base64\");\n    const inflated = await inflateRawAsync(data);\n\n    const dom = await parseDomFromString(inflated.toString());\n    const doc: XMLOutput = await parseXml2JsFromString(inflated);\n    samlMessageType === \"SAMLResponse\"\n      ? await this.verifyLogoutResponse(doc)\n      : this.verifyLogoutRequest(doc);\n    await this.hasValidSignatureForRedirect(container, originalQuery);\n    return await this.processValidlySignedSamlLogoutAsync(doc, dom);\n  }\n\n  protected async hasValidSignatureForRedirect(\n    container: ParsedQs,\n    originalQuery: string,\n  ): Promise<boolean | void> {\n    const tokens = originalQuery.split(\"&\");\n    const getParam = (key: string) => {\n      const exists = tokens.filter((t) => {\n        return new RegExp(key).test(t);\n      });\n      return exists[0];\n    };\n\n    if (container.Signature) {\n      let urlString = getParam(\"SAMLRequest\") || getParam(\"SAMLResponse\");\n\n      if (getParam(\"RelayState\")) {\n        urlString += \"&\" + getParam(\"RelayState\");\n      }\n\n      urlString += \"&\" + getParam(\"SigAlg\");\n\n      const pemFiles = await this.getKeyInfosAsPem();\n      const hasValidQuerySignature = pemFiles.some((pemFile) => {\n        return this.validateSignatureForRedirect(\n          urlString,\n          container.Signature as string,\n          container.SigAlg as string,\n          pemFile,\n        );\n      });\n      if (!hasValidQuerySignature) {\n        throw new Error(\"Invalid query signature\");\n      }\n    } else {\n      return true;\n    }\n  }\n\n  protected validateSignatureForRedirect(\n    urlString: crypto.BinaryLike,\n    signature: string,\n    alg: string,\n    pemFile: string,\n  ): boolean {\n    // See if we support a matching algorithm, case-insensitive. Otherwise, throw error.\n    function hasMatch(ourAlgo: string) {\n      // The incoming algorithm is forwarded as a URL.\n      // We trim everything before the last # get something we can compare to the Node.js list\n      const algFromURI = alg.toLowerCase().replace(/.*#(.*)$/, \"$1\");\n      return ourAlgo.toLowerCase() === algFromURI;\n    }\n    const i = crypto.getHashes().findIndex(hasMatch);\n    let matchingAlgo;\n    if (i > -1) {\n      matchingAlgo = crypto.getHashes()[i];\n    } else {\n      throw new Error(alg + \" is not supported\");\n    }\n\n    const verifier = crypto.createVerify(matchingAlgo);\n    verifier.update(urlString);\n\n    return verifier.verify(pemFile, signature, \"base64\");\n  }\n\n  protected verifyLogoutRequest(doc: XMLOutput): void {\n    this.verifyIssuer(doc.LogoutRequest);\n    const nowMs = new Date().getTime();\n    const conditions = doc.LogoutRequest.$;\n    const conErr = this.checkTimestampsValidityError(\n      nowMs,\n      conditions.NotBefore,\n      conditions.NotOnOrAfter,\n    );\n    if (conErr) {\n      throw conErr;\n    }\n  }\n\n  protected async verifyLogoutResponse(doc: XMLOutput): Promise<void> {\n    const statusCode = doc.LogoutResponse.Status[0].StatusCode[0].$.Value;\n    if (statusCode !== \"urn:oasis:names:tc:SAML:2.0:status:Success\")\n      throw new Error(\"Bad status code: \" + statusCode);\n\n    this.verifyIssuer(doc.LogoutResponse);\n    const inResponseTo = doc.LogoutResponse.$.InResponseTo;\n    if (inResponseTo) {\n      return this.validateInResponseTo(inResponseTo);\n    }\n\n    return;\n  }\n\n  protected verifyIssuer(samlMessage: XMLOutput): void {\n    if (this.options.idpIssuer != null) {\n      const issuer = samlMessage.Issuer;\n      if (issuer) {\n        if (issuer[0]._ !== this.options.idpIssuer)\n          throw new Error(\n            \"Unknown SAML issuer. Expected: \" +\n              this.options.idpIssuer +\n              \" Received: \" +\n              issuer[0]._,\n          );\n      } else {\n        throw new Error(\"Missing SAML issuer\");\n      }\n    }\n  }\n\n  protected async processValidlySignedAssertionAsync(\n    this: SAML,\n    xml: string,\n    samlResponseXml: string,\n    inResponseTo: string | null,\n  ): Promise<{ profile: Profile; loggedOut: boolean }> {\n    let msg;\n    const nowMs = new Date().getTime();\n    const profile = {} as Profile;\n    const doc: XMLOutput = await parseXml2JsFromString(xml);\n    const parsedAssertion: XMLOutput = doc;\n    const assertion: XMLOutput = doc.Assertion;\n    getInResponseTo: {\n      const issuer = assertion.Issuer;\n      if (issuer && issuer[0]._) {\n        profile.issuer = issuer[0]._;\n      }\n\n      if (inResponseTo != null) {\n        profile.inResponseTo = inResponseTo;\n      }\n\n      const authnStatement = assertion.AuthnStatement;\n      if (authnStatement) {\n        if (authnStatement[0].$ && authnStatement[0].$.SessionIndex) {\n          profile.sessionIndex = authnStatement[0].$.SessionIndex;\n        }\n      }\n\n      const subject = assertion.Subject;\n      let subjectConfirmation: XMLOutput | null | undefined;\n      let confirmData: XMLOutput | null = null;\n      let subjectConfirmations: XMLOutput[] | null = null;\n      if (subject) {\n        const nameID = subject[0].NameID;\n        if (nameID && nameID[0]._) {\n          profile.nameID = nameID[0]._;\n\n          if (nameID[0].$ && nameID[0].$.Format) {\n            profile.nameIDFormat = nameID[0].$.Format;\n            profile.nameQualifier = nameID[0].$.NameQualifier;\n            profile.spNameQualifier = nameID[0].$.SPNameQualifier;\n          }\n        }\n        subjectConfirmations = subject[0].SubjectConfirmation;\n        subjectConfirmation = subjectConfirmations?.find((_subjectConfirmation: XMLOutput) => {\n          const _confirmData = _subjectConfirmation.SubjectConfirmationData?.[0];\n          if (_confirmData?.$) {\n            const subjectNotBefore = _confirmData.$.NotBefore;\n            const subjectNotOnOrAfter = _confirmData.$.NotOnOrAfter;\n            const maxTimeLimitMs = this.calcMaxAgeAssertionTime(\n              this.options.maxAssertionAgeMs,\n              subjectNotOnOrAfter,\n              assertion.$.IssueInstant,\n            );\n\n            const subjErr = this.checkTimestampsValidityError(\n              nowMs,\n              subjectNotBefore,\n              subjectNotOnOrAfter,\n              maxTimeLimitMs,\n            );\n            if (subjErr === null) return true;\n          }\n\n          return false;\n        });\n\n        if (subjectConfirmation != null) {\n          confirmData = subjectConfirmation.SubjectConfirmationData[0];\n        }\n      }\n\n      /**\n       * Test to see that if we have a SubjectConfirmation InResponseTo that it matches\n       * the 'InResponseTo' attribute set in the Response\n       */\n      if (this.mustValidateInResponseTo(Boolean(inResponseTo))) {\n        if (subjectConfirmation) {\n          if (confirmData?.$) {\n            const subjectInResponseTo = confirmData.$.InResponseTo;\n\n            if (inResponseTo && subjectInResponseTo && subjectInResponseTo != inResponseTo) {\n              await this.cacheProvider.removeAsync(inResponseTo);\n              throw new Error(\"InResponseTo does not match subjectInResponseTo\");\n            } else if (subjectInResponseTo) {\n              let foundValidInResponseTo = false;\n              const result = await this.cacheProvider.getAsync(subjectInResponseTo);\n              if (result) {\n                const createdAt = new Date(result);\n                if (nowMs < createdAt.getTime() + this.options.requestIdExpirationPeriodMs)\n                  foundValidInResponseTo = true;\n              }\n              await this.cacheProvider.removeAsync(inResponseTo);\n              if (!foundValidInResponseTo) {\n                throw new Error(\"SubjectInResponseTo is not valid\");\n              }\n              break getInResponseTo;\n            }\n          }\n        } else {\n          if (subjectConfirmations != null && subjectConfirmation == null) {\n            msg = \"No valid subject confirmation found among those available in the SAML assertion\";\n            throw new Error(msg);\n          } else {\n            await this.cacheProvider.removeAsync(inResponseTo);\n            break getInResponseTo;\n          }\n        }\n      } else {\n        break getInResponseTo;\n      }\n    }\n    const conditions = assertion.Conditions ? assertion.Conditions[0] : null;\n    if (assertion.Conditions && assertion.Conditions.length > 1) {\n      msg = \"Unable to process multiple conditions in SAML assertion\";\n      throw new Error(msg);\n    }\n    if (conditions && conditions.$) {\n      const maxTimeLimitMs = this.calcMaxAgeAssertionTime(\n        this.options.maxAssertionAgeMs,\n        conditions.$.NotOnOrAfter,\n        assertion.$.IssueInstant,\n      );\n      const conErr = this.checkTimestampsValidityError(\n        nowMs,\n        conditions.$.NotBefore,\n        conditions.$.NotOnOrAfter,\n        maxTimeLimitMs,\n      );\n      if (conErr) throw conErr;\n    }\n\n    if (this.options.audience !== false) {\n      const audienceErr = this.checkAudienceValidityError(\n        this.options.audience,\n        conditions.AudienceRestriction,\n      );\n      if (audienceErr) throw audienceErr;\n    }\n\n    const attributeStatement = assertion.AttributeStatement;\n    if (attributeStatement) {\n      const attributes: XMLOutput[] = [].concat(\n        ...attributeStatement\n          .filter((attr: XMLObject) => Array.isArray(attr.Attribute))\n          .map((attr: XMLObject) => attr.Attribute),\n      );\n\n      const attrValueMapper = (value: XMLObject) => {\n        const hasChildren = Object.keys(value).some((cur) => {\n          return cur !== \"_\" && cur !== \"$\";\n        });\n        return hasChildren ? value : value._;\n      };\n\n      if (attributes.length > 0) {\n        const profileAttributes: Record<string, XMLValue | XMLValue[]> = {};\n\n        attributes.forEach((attribute) => {\n          if (!Object.prototype.hasOwnProperty.call(attribute, \"AttributeValue\")) {\n            // if attributes has no AttributeValue child, continue\n            return;\n          }\n\n          const name: string = attribute.$.Name;\n          const value: XMLValue | XMLValue[] =\n            attribute.AttributeValue.length === 1\n              ? attrValueMapper(attribute.AttributeValue[0])\n              : attribute.AttributeValue.map(attrValueMapper);\n\n          profileAttributes[name] = value;\n\n          /**\n           * If any property is already present in profile and is also present\n           * in attributes, then skip the one from attributes. Handle this\n           * conflict gracefully without returning any error\n           */\n          if (Object.prototype.hasOwnProperty.call(profile, name)) {\n            return;\n          }\n\n          profile[name] = value;\n        });\n\n        profile.attributes = profileAttributes;\n      }\n    }\n\n    if (!profile.mail && profile[\"urn:oid:0.9.2342.19200300.100.1.3\"]) {\n      /**\n       * See https://spaces.internet2.edu/display/InCFederation/Supported+Attribute+Summary\n       * for definition of attribute OIDs\n       */\n      profile.mail = profile[\"urn:oid:0.9.2342.19200300.100.1.3\"];\n    }\n\n    if (!profile.email && profile.mail) {\n      profile.email = profile.mail;\n    }\n\n    profile.getAssertionXml = () => xml.toString();\n    profile.getAssertion = () => parsedAssertion;\n    profile.getSamlResponseXml = () => samlResponseXml;\n\n    return { profile, loggedOut: false };\n  }\n\n  protected checkTimestampsValidityError(\n    nowMs: number,\n    notBefore: string,\n    notOnOrAfter: string,\n    maxTimeLimitMs?: number,\n  ): Error | null {\n    if (this.options.acceptedClockSkewMs == -1) return null;\n\n    if (notBefore) {\n      const notBeforeMs = dateStringToTimestamp(notBefore, \"NotBefore\");\n      if (nowMs + this.options.acceptedClockSkewMs < notBeforeMs)\n        return new Error(\"SAML assertion not yet valid\");\n    }\n    if (notOnOrAfter) {\n      const notOnOrAfterMs = dateStringToTimestamp(notOnOrAfter, \"NotOnOrAfter\");\n      if (nowMs - this.options.acceptedClockSkewMs >= notOnOrAfterMs)\n        return new Error(\"SAML assertion expired: clocks skewed too much\");\n    }\n    if (maxTimeLimitMs) {\n      if (nowMs - this.options.acceptedClockSkewMs >= maxTimeLimitMs)\n        return new Error(\"SAML assertion expired: assertion too old\");\n    }\n\n    return null;\n  }\n\n  protected checkAudienceValidityError(\n    expectedAudience: string,\n    audienceRestrictions: AudienceRestrictionXML[],\n  ): Error | null {\n    if (!audienceRestrictions || audienceRestrictions.length < 1) {\n      return new Error(\"SAML assertion has no AudienceRestriction\");\n    }\n    const errors = audienceRestrictions\n      .map((restriction) => {\n        if (!restriction.Audience || !restriction.Audience[0] || !restriction.Audience[0]._) {\n          return new Error(\"SAML assertion AudienceRestriction has no Audience value\");\n        }\n        if (restriction.Audience.every((audience) => audience._ !== expectedAudience)) {\n          return new Error(\n            \"SAML assertion audience mismatch. Expected: \" +\n              expectedAudience +\n              \" Received: \" +\n              restriction.Audience.map((audience) => audience._).join(\", \"),\n          );\n        }\n        return null;\n      })\n      .filter((result) => {\n        return result !== null;\n      });\n    if (errors.length > 0) {\n      return errors[0];\n    }\n    return null;\n  }\n\n  async validatePostRequestAsync(\n    container: Record<string, string>,\n    {\n      _parseDomFromString = parseDomFromString,\n      _parseXml2JsFromString = parseXml2JsFromString,\n      _validateSignature = validateSignature,\n    } = {},\n  ): Promise<{ profile: Profile; loggedOut: boolean }> {\n    const xml = Buffer.from(container.SAMLRequest, \"base64\").toString(\"utf8\");\n    const dom = await _parseDomFromString(xml);\n    const doc = await _parseXml2JsFromString(xml);\n    const pemFiles = await this.getKeyInfosAsPem();\n    if (!_validateSignature(xml, dom.documentElement, pemFiles)) {\n      throw new Error(\"Invalid signature on documentElement\");\n    }\n    return await this.processValidlySignedPostRequestAsync(doc, dom);\n  }\n\n  protected async processValidlySignedPostRequestAsync(\n    this: SAML,\n    doc: XMLOutput,\n    dom: Document,\n  ): Promise<{ profile: Profile; loggedOut: boolean }> {\n    const request = doc.LogoutRequest;\n    this.verifyLogoutRequest(doc);\n    if (request) {\n      const profile = {} as Profile;\n      if (request.$.ID) {\n        profile.ID = request.$.ID;\n      } else {\n        throw new Error(\"Missing SAML LogoutRequest ID\");\n      }\n      const issuer = request.Issuer;\n      if (issuer && issuer[0]._) {\n        profile.issuer = issuer[0]._;\n      } else {\n        throw new Error(\"Missing SAML issuer\");\n      }\n      const nameID = await getNameIdAsync(dom, this.options.decryptionPvk ?? null);\n      if (nameID.value) {\n        profile.nameID = nameID.value;\n        if (nameID.format) {\n          profile.nameIDFormat = nameID.format;\n        }\n      } else {\n        throw new Error(\"Missing SAML NameID\");\n      }\n      const sessionIndex = request.SessionIndex;\n      if (sessionIndex) {\n        profile.sessionIndex = sessionIndex[0]._;\n      }\n      return { profile, loggedOut: true };\n    } else {\n      throw new Error(\"Unknown SAML request message\");\n    }\n  }\n\n  protected async processValidlySignedSamlLogoutAsync(\n    this: SAML,\n    doc: XMLOutput,\n    dom: Document,\n  ): Promise<{ profile: Profile | null; loggedOut: boolean }> {\n    const response = doc.LogoutResponse;\n    const request = doc.LogoutRequest;\n\n    if (response) {\n      return { profile: null, loggedOut: true };\n    } else if (request) {\n      return await this.processValidlySignedPostRequestAsync(doc, dom);\n    } else {\n      throw new Error(\"Unknown SAML response message\");\n    }\n  }\n\n  generateServiceProviderMetadata(\n    this: SAML,\n    decryptionCert: string | null,\n    publicCerts?: string | string[] | null,\n  ): string {\n    return generateServiceProviderMetadata({\n      ...this.options,\n      decryptionCert,\n      publicCerts,\n    });\n  }\n\n  /**\n   * Process max age assertion and use it if it is more restrictive than the NotOnOrAfter age\n   * assertion received in the SAMLResponse.\n   *\n   * @param maxAssertionAgeMs Max time after IssueInstant that we will accept assertion, in Ms.\n   * @param notOnOrAfter Expiration provided in response.\n   * @param issueInstant Time when response was issued.\n   * @returns {*} The expiration time to be used, in Ms.\n   */\n  protected calcMaxAgeAssertionTime(\n    maxAssertionAgeMs: number,\n    notOnOrAfter: string,\n    issueInstant: string,\n  ): number {\n    const notOnOrAfterMs = dateStringToTimestamp(notOnOrAfter, \"NotOnOrAfter\");\n    const issueInstantMs = dateStringToTimestamp(issueInstant, \"IssueInstant\");\n\n    if (maxAssertionAgeMs === 0) {\n      return notOnOrAfterMs;\n    }\n\n    const maxAssertionTimeMs = issueInstantMs + maxAssertionAgeMs;\n    return maxAssertionTimeMs < notOnOrAfterMs ? maxAssertionTimeMs : notOnOrAfterMs;\n  }\n\n  protected mustValidateInResponseTo(hasInResponseTo: boolean): boolean {\n    return (\n      this.options.validateInResponseTo === ValidateInResponseTo.always ||\n      (this.options.validateInResponseTo === ValidateInResponseTo.ifPresent && hasInResponseTo)\n    );\n  }\n}\n\nexport { SAML };\n"]}