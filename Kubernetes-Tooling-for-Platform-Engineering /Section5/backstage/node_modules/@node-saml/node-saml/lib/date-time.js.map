{"version":3,"file":"date-time.js","sourceRoot":"","sources":["../src/date-time.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACI,MAAM,eAAe,GAAG,GAAW,EAAE;IAC1C,OAAO,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;AAClC,CAAC,CAAC;AAFW,QAAA,eAAe,mBAE1B;AAEF;;;;;;;GAOG;AACI,MAAM,qBAAqB,GAAG,CAAC,UAAkB,EAAE,KAAa,EAAU,EAAE;IACjF,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAEtC,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,iBAAiB,KAAK,MAAM,UAAU,uBAAuB,CAAC,CAAC;IACjF,CAAC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AARW,QAAA,qBAAqB,yBAQhC","sourcesContent":["/**\n * Return the current time in ISO format.\n */\nexport const generateInstant = (): string => {\n  return new Date().toISOString();\n};\n\n/**\n * Convert a date string to a timestamp (in milliseconds).\n *\n * @param dateString A string representation of a date\n * @param label Descriptive name of the date being passed in, e.g. \"NotOnOrAfter\"\n * @throws Will throw an error if parsing `dateString` returns `NaN`\n * @returns {number} The timestamp (in milliseconds) representation of the given date\n */\nexport const dateStringToTimestamp = (dateString: string, label: string): number => {\n  const dateMs = Date.parse(dateString);\n\n  if (isNaN(dateMs)) {\n    throw new Error(`Error parsing ${label}: '${dateString}' is not a valid date`);\n  }\n\n  return dateMs;\n};\n"]}