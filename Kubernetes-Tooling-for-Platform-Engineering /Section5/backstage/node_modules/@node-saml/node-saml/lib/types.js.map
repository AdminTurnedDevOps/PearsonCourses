{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAiBO,MAAM,yBAAyB,GAAG,CACvC,OAAoC,EACL,EAAE;IACjC,OAAO,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC;AACpC,CAAC,CAAC;AAJW,QAAA,yBAAyB,6BAIpC;AAgHF,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC9B,uCAAe,CAAA;IACf,+CAAuB,CAAA;IACvB,yCAAiB,CAAA;AACnB,CAAC,EAJW,oBAAoB,oCAApB,oBAAoB,QAI/B;AAiHD,MAAa,kBAAmB,SAAQ,KAAK;IAC3C,YACE,OAAe,EACC,SAAiB;QAEjC,KAAK,CAAC,OAAO,CAAC,CAAC;QAFC,cAAS,GAAT,SAAS,CAAQ;IAGnC,CAAC;CACF;AAPD,gDAOC","sourcesContent":["export type SignatureAlgorithm = \"sha1\" | \"sha256\" | \"sha512\";\n\nexport type PemLabel = \"CERTIFICATE\" | \"PUBLIC KEY\" | \"PRIVATE KEY\";\n\nexport interface SamlSigningOptions {\n  privateKey: string | Buffer;\n  publicCert?: string;\n  signatureAlgorithm?: SignatureAlgorithm;\n  xmlSignatureTransforms?: string[];\n  digestAlgorithm?: string;\n}\n\nexport interface AuthOptions {\n  samlFallback?: \"login-request\" | \"logout-request\";\n  additionalParams?: Record<string, string | string[]>;\n}\n\nexport const isValidSamlSigningOptions = (\n  options: Partial<SamlSigningOptions>,\n): options is SamlSigningOptions => {\n  return options.privateKey != null;\n};\n\nexport interface AudienceRestrictionXML {\n  Audience?: XMLObject[];\n}\nexport interface CacheItem {\n  value: string;\n  createdAt: number;\n}\n\nexport interface CacheProvider {\n  saveAsync(key: string, value: string): Promise<CacheItem | null>;\n  getAsync(key: string): Promise<string | null>;\n  removeAsync(key: string | null): Promise<string | null>;\n}\n\nexport type XMLValue = string | number | boolean | null | XMLObject | XMLValue[];\n\nexport type XMLObject = {\n  [key: string]: XMLValue;\n};\n\nexport type XMLInput = XMLObject;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type XMLOutput = Record<string, any>;\n\nexport type AuthorizeRequestXML = {\n  \"samlp:AuthnRequest\": XMLInput;\n};\n\nexport type XmlJsObject = {\n  [key: string]: string | XmlJsObject | XmlJsObject[] | undefined;\n  $?: { Value: string };\n  _?: string;\n};\n\nexport type SamlResponseXmlJs = XmlJsObject & {\n  Response?: SamlAssertionXmlJs | SamlStatusXmlJs;\n  LogoutResponse?: unknown;\n};\n\nexport type SamlRequestXmlJs = {\n  Request: unknown;\n};\n\nexport type SamlAssertionXmlJs = {\n  Assertion: unknown;\n};\n\nexport type SamlStatusXmlJs = {\n  Status: [\n    { StatusCode: [XmlJsObject & { StatusCode: [XmlJsObject] }]; StatusMessage: [XmlJsObject] },\n  ];\n};\n\nexport type IdpCertCallback = (\n  callback: (err: Error | null, publicCert?: string | string[]) => void,\n) => void;\n\n/**\n * These are SAML options that must be provided to construct a new SAML Strategy\n */\nexport interface MandatorySamlOptions {\n  idpCert: string | string[] | IdpCertCallback;\n  issuer: string;\n  callbackUrl: string;\n}\n\nexport interface SamlIDPListConfig {\n  entries: SamlIDPEntryConfig[];\n  getComplete?: string;\n}\n\nexport interface SamlIDPEntryConfig {\n  providerId: string;\n  name?: string;\n  loc?: string;\n}\n\nexport type LogoutRequestXML = {\n  \"samlp:LogoutRequest\": {\n    \"saml:NameID\": XMLInput;\n    [key: string]: XMLValue;\n  };\n};\n\nexport type ServiceMetadataXML = {\n  EntityDescriptor: {\n    [key: string]: XMLValue;\n    SPSSODescriptor: XMLObject;\n  };\n};\n\nexport interface NameID {\n  value: string | null;\n  format: string | null;\n}\n\nexport interface XmlSignatureLocation {\n  reference: string;\n  action: \"append\" | \"prepend\" | \"before\" | \"after\";\n}\n\nexport type RacComparison = \"exact\" | \"minimum\" | \"maximum\" | \"better\";\n\nexport interface SamlScopingConfig {\n  idpList?: SamlIDPListConfig[];\n  proxyCount?: number;\n  requesterId?: string[] | string;\n}\n\nexport enum ValidateInResponseTo {\n  never = \"never\",\n  ifPresent = \"ifPresent\",\n  always = \"always\",\n}\n\n/**\n * The options required to use a SAML strategy\n * These may be provided by means of defaults specified in the constructor\n */\nexport interface SamlOptions extends Partial<SamlSigningOptions>, MandatorySamlOptions {\n  // Core\n  entryPoint?: string;\n  decryptionPvk?: string | Buffer;\n\n  // Additional SAML behaviors\n  additionalParams: Record<string, string>;\n  additionalAuthorizeParams: Record<string, string>;\n  identifierFormat: string | null;\n  allowCreate: boolean;\n  spNameQualifier?: string | null;\n  acceptedClockSkewMs: number;\n  attributeConsumingServiceIndex?: string;\n  disableRequestedAuthnContext: boolean;\n  authnContext: string[];\n  forceAuthn: boolean;\n  skipRequestCompression: boolean;\n  authnRequestBinding?: string;\n  racComparison: RacComparison;\n  providerName?: string;\n  passive: boolean;\n  idpIssuer?: string;\n  audience: string | false;\n  scoping?: SamlScopingConfig;\n  wantAssertionsSigned: boolean;\n  wantAuthnResponseSigned: boolean;\n  maxAssertionAgeMs: number;\n  generateUniqueId: () => string;\n  signMetadata: boolean;\n\n  // InResponseTo Validation\n  validateInResponseTo: ValidateInResponseTo;\n  requestIdExpirationPeriodMs: number;\n  cacheProvider: CacheProvider;\n\n  // Logout\n  logoutUrl: string;\n  additionalLogoutParams: Record<string, string>;\n  logoutCallbackUrl?: string;\n\n  // extras\n  disableRequestAcsUrl: boolean;\n  samlAuthnRequestExtensions?: Record<string, unknown>;\n  samlLogoutRequestExtensions?: Record<string, unknown>;\n  metadataContactPerson?: {\n    \"@contactType\": \"technical\" | \"support\" | \"administrative\" | \"billing\" | \"other\";\n    Extensions?: string;\n    Company?: string;\n    GivenName?: string;\n    SurName?: string;\n    EmailAddress?: [string];\n    TelephoneNumber?: [string];\n  }[];\n  metadataOrganization?: {\n    OrganizationName: {\n      \"@xml:lang\": string;\n      \"#text\": string;\n    }[];\n    OrganizationDisplayName: {\n      \"@xml:lang\": string;\n      \"#text\": string;\n    }[];\n    OrganizationURL: {\n      \"@xml:lang\": string;\n      \"#text\": string;\n    }[];\n  };\n}\n\nexport interface GenerateServiceProviderMetadataParams {\n  decryptionCert?: string | null;\n  publicCerts?: string | string[] | null;\n  issuer: SamlOptions[\"issuer\"];\n  callbackUrl: SamlOptions[\"callbackUrl\"];\n  logoutCallbackUrl?: SamlOptions[\"logoutCallbackUrl\"];\n  identifierFormat?: SamlOptions[\"identifierFormat\"];\n  wantAssertionsSigned?: SamlOptions[\"wantAssertionsSigned\"];\n  decryptionPvk?: SamlOptions[\"decryptionPvk\"];\n  privateKey?: SamlOptions[\"privateKey\"];\n  signatureAlgorithm?: SamlOptions[\"signatureAlgorithm\"];\n  xmlSignatureTransforms?: SamlOptions[\"xmlSignatureTransforms\"];\n  digestAlgorithm?: SamlOptions[\"digestAlgorithm\"];\n  signMetadata?: SamlOptions[\"signMetadata\"];\n  metadataContactPerson?: SamlOptions[\"metadataContactPerson\"];\n  metadataOrganization?: SamlOptions[\"metadataOrganization\"];\n  generateUniqueId?: SamlOptions[\"generateUniqueId\"];\n}\n\nexport type SamlConfig = Partial<SamlOptions> & MandatorySamlOptions;\n\nexport interface Profile {\n  issuer: string;\n  sessionIndex?: string;\n  nameID: string;\n  nameIDFormat: string;\n  nameQualifier?: string;\n  spNameQualifier?: string;\n  ID?: string;\n  mail?: string; // InCommon Attribute urn:oid:0.9.2342.19200300.100.1.3\n  email?: string; // `mail` if not present in the assertion\n  [\"urn:oid:0.9.2342.19200300.100.1.3\"]?: string;\n  getAssertionXml?(): string; // get the raw assertion XML\n  getAssertion?(): Record<string, unknown>; // get the assertion XML parsed as a JavaScript object\n  getSamlResponseXml?(): string; // get the raw SAML response XML\n  [attributeName: string]: unknown; // arbitrary `AttributeValue`s\n}\n\nexport class ErrorWithXmlStatus extends Error {\n  constructor(\n    message: string,\n    public readonly xmlStatus: string,\n  ) {\n    super(message);\n  }\n}\n"]}