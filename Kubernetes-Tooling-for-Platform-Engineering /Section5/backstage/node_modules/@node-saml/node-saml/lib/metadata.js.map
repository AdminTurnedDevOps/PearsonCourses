{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../src/metadata.ts"],"names":[],"mappings":"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","sourcesContent":["import { stripPemHeaderAndFooter } from \"./crypto\";\nimport {\n  isValidSamlSigningOptions,\n  ServiceMetadataXML,\n  XMLObject,\n  GenerateServiceProviderMetadataParams,\n} from \"./types\";\nimport { assertRequired, signXmlMetadata } from \"./utility\";\nimport { buildXmlBuilderObject } from \"./xml\";\nimport { generateUniqueId as generateUniqueIdDefault } from \"./crypto\";\nimport { DEFAULT_IDENTIFIER_FORMAT, DEFAULT_WANT_ASSERTIONS_SIGNED } from \"./constants\";\n\nexport const generateServiceProviderMetadata = (\n  params: GenerateServiceProviderMetadataParams,\n): string => {\n  const {\n    issuer,\n    callbackUrl,\n    logoutCallbackUrl,\n    decryptionPvk,\n    privateKey,\n    metadataContactPerson,\n    metadataOrganization,\n    identifierFormat = DEFAULT_IDENTIFIER_FORMAT,\n    wantAssertionsSigned = DEFAULT_WANT_ASSERTIONS_SIGNED,\n    // This matches the default used in the `SAML` class.\n    generateUniqueId = generateUniqueIdDefault,\n  } = params;\n\n  let { publicCerts, decryptionCert } = params;\n\n  if (decryptionPvk != null) {\n    if (!decryptionCert) {\n      throw new Error(\n        \"Missing decryptionCert while generating metadata for decrypting service provider\",\n      );\n    }\n  } else {\n    decryptionCert = null;\n  }\n\n  if (privateKey != null) {\n    if (!publicCerts) {\n      throw new Error(\n        \"Missing publicCert while generating metadata for signing service provider messages\",\n      );\n    }\n    publicCerts = !Array.isArray(publicCerts) ? [publicCerts] : publicCerts;\n  } else {\n    publicCerts = null;\n  }\n\n  const metadata: ServiceMetadataXML = {\n    EntityDescriptor: {\n      \"@xmlns\": \"urn:oasis:names:tc:SAML:2.0:metadata\",\n      \"@xmlns:ds\": \"http://www.w3.org/2000/09/xmldsig#\",\n      \"@entityID\": issuer,\n      \"@ID\": generateUniqueId(),\n      SPSSODescriptor: {\n        \"@protocolSupportEnumeration\": \"urn:oasis:names:tc:SAML:2.0:protocol\",\n        \"@AuthnRequestsSigned\": \"false\",\n      },\n      ...(metadataOrganization ? { Organization: metadataOrganization } : {}),\n      ...(metadataContactPerson ? { ContactPerson: metadataContactPerson } : {}),\n    },\n  };\n\n  if (decryptionCert != null || publicCerts != null) {\n    metadata.EntityDescriptor.SPSSODescriptor.KeyDescriptor = [];\n    if (isValidSamlSigningOptions(params)) {\n      assertRequired(\n        publicCerts,\n        \"Missing publicCert while generating metadata for signing service provider messages\",\n      );\n\n      metadata.EntityDescriptor.SPSSODescriptor[\"@AuthnRequestsSigned\"] = true;\n\n      const certArray = Array.isArray(publicCerts) ? publicCerts : [publicCerts];\n      const signingKeyDescriptors = certArray.map((cert) => ({\n        \"@use\": \"signing\",\n        \"ds:KeyInfo\": {\n          \"ds:X509Data\": {\n            \"ds:X509Certificate\": {\n              \"#text\": stripPemHeaderAndFooter(cert),\n            },\n          },\n        },\n      }));\n      metadata.EntityDescriptor.SPSSODescriptor.KeyDescriptor.push(signingKeyDescriptors);\n    }\n\n    if (decryptionPvk != null) {\n      assertRequired(\n        decryptionCert,\n        \"Missing decryptionCert while generating metadata for decrypting service provider\",\n      );\n\n      decryptionCert = stripPemHeaderAndFooter(decryptionCert);\n\n      metadata.EntityDescriptor.SPSSODescriptor.KeyDescriptor.push({\n        \"@use\": \"encryption\",\n        \"ds:KeyInfo\": {\n          \"ds:X509Data\": {\n            \"ds:X509Certificate\": {\n              \"#text\": decryptionCert,\n            },\n          },\n        },\n        EncryptionMethod: [\n          // this should be the set that the xmlenc library supports\n          { \"@Algorithm\": \"http://www.w3.org/2009/xmlenc11#aes256-gcm\" },\n          { \"@Algorithm\": \"http://www.w3.org/2009/xmlenc11#aes128-gcm\" },\n          { \"@Algorithm\": \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\" },\n          { \"@Algorithm\": \"http://www.w3.org/2001/04/xmlenc#aes128-cbc\" },\n        ],\n      });\n    }\n  }\n\n  if (logoutCallbackUrl != null) {\n    metadata.EntityDescriptor.SPSSODescriptor.SingleLogoutService = {\n      \"@Binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\",\n      \"@Location\": logoutCallbackUrl,\n    };\n  }\n\n  if (identifierFormat != null) {\n    metadata.EntityDescriptor.SPSSODescriptor.NameIDFormat = identifierFormat;\n  }\n\n  if (wantAssertionsSigned) {\n    metadata.EntityDescriptor.SPSSODescriptor[\"@WantAssertionsSigned\"] = true;\n  }\n\n  metadata.EntityDescriptor.SPSSODescriptor.AssertionConsumerService = {\n    \"@index\": \"1\",\n    \"@isDefault\": \"true\",\n    \"@Binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\",\n    \"@Location\": callbackUrl,\n  } as XMLObject;\n\n  let metadataXml = buildXmlBuilderObject(metadata, true);\n  if (params.signMetadata === true && isValidSamlSigningOptions(params)) {\n    metadataXml = signXmlMetadata(metadataXml, {\n      privateKey: params.privateKey,\n      signatureAlgorithm: params.signatureAlgorithm,\n      xmlSignatureTransforms: params.xmlSignatureTransforms,\n      digestAlgorithm: params.digestAlgorithm,\n    });\n  }\n  return metadataXml;\n};\n"]}