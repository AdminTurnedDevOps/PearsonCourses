{"version":3,"file":"utility.js","sourceRoot":"","sources":["../src/utility.ts"],"names":[],"mappings":";;;AACA,+BAAgC;AAEhC,SAAgB,cAAc,CAAI,KAA2B,EAAE,KAAc;IAC3E,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE,CAAC;QAC/F,MAAM,IAAI,SAAS,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,sBAAsB,CAAC,CAAC;IACvD,CAAC;AACH,CAAC;AAJD,wCAIC;AAED,SAAgB,sBAAsB,CACpC,KAA2B,EAC3B,KAAc;IAEd,IAAI,KAAK,IAAI,IAAI,IAAI,OAAO,KAAK,IAAI,SAAS,EAAE,CAAC;QAC/C,MAAM,IAAI,SAAS,CAAC,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,8BAA8B,CAAC,CAAC;IAC/D,CAAC;AACH,CAAC;AAPD,wDAOC;AAED,SAAgB,eAAe,CAAC,WAAmB,EAAE,OAA2B;IAC9E,MAAM,aAAa,GACjB,2FAA2F,CAAC;IAE9F,OAAO,IAAA,aAAO,EACZ,WAAW,EACX,aAAa,EACb,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,EAAE,QAAQ,EAAE,EAC9C,OAAO,CACR,CAAC;AACJ,CAAC;AAVD,0CAUC;AAED,SAAgB,eAAe,CAAC,WAAmB,EAAE,OAA2B;IAC9E,MAAM,aAAa,GACjB,mGAAmG,CAAC;IAEtG,OAAO,IAAA,aAAO,EACZ,WAAW,EACX,aAAa,EACb,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,EAAE,SAAS,EAAE,EAC/C,OAAO,CACR,CAAC;AACJ,CAAC;AAVD,0CAUC","sourcesContent":["import { SamlSigningOptions } from \"./types\";\nimport { signXml } from \"./xml\";\n\nexport function assertRequired<T>(value: T | null | undefined, error?: string): asserts value {\n  if (value === undefined || value === null || (typeof value === \"string\" && value.length === 0)) {\n    throw new TypeError(error ?? \"value does not exist\");\n  }\n}\n\nexport function assertBooleanIfPresent<T>(\n  value: T | null | undefined,\n  error?: string,\n): asserts value {\n  if (value != null && typeof value != \"boolean\") {\n    throw new TypeError(error ?? \"value is set but not boolean\");\n  }\n}\n\nexport function signXmlResponse(samlMessage: string, options: SamlSigningOptions): string {\n  const responseXpath =\n    '//*[local-name(.)=\"Response\" and namespace-uri(.)=\"urn:oasis:names:tc:SAML:2.0:protocol\"]';\n\n  return signXml(\n    samlMessage,\n    responseXpath,\n    { reference: responseXpath, action: \"append\" },\n    options,\n  );\n}\n\nexport function signXmlMetadata(metadataXml: string, options: SamlSigningOptions): string {\n  const metadataXpath =\n    '//*[local-name(.)=\"EntityDescriptor\" and namespace-uri(.)=\"urn:oasis:names:tc:SAML:2.0:metadata\"]';\n\n  return signXml(\n    metadataXml,\n    metadataXpath,\n    { reference: metadataXpath, action: \"prepend\" },\n    options,\n  );\n}\n"]}