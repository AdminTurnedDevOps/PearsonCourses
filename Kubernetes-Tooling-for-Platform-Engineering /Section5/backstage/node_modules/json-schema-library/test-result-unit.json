{
  "stats": {
    "suites": 135,
    "tests": 451,
    "passes": 449,
    "pending": 2,
    "failures": 0,
    "start": "2024-02-25T16:04:28.884Z",
    "end": "2024-02-25T16:04:29.006Z",
    "duration": 122
  },
  "tests": [
    {
      "title": "should return rootSchema",
      "fullTitle": "compile.getRef should return rootSchema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return value for json-pointer uri",
      "fullTitle": "compile.getRef should return value for json-pointer uri",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve ids to pointer",
      "fullTitle": "compile.getRef should resolve ids to pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return remote schema",
      "fullTitle": "compile.getRef should return remote schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve host/target from ids",
      "fullTitle": "compile.getRef host/target should resolve host/target from ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve separated host/target from ids",
      "fullTitle": "compile.getRef host/target should resolve separated host/target from ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve target-pointer from remote host",
      "fullTitle": "compile.getRef host/target should resolve target-pointer from remote host",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call 'getRef' when resolving remotes",
      "fullTitle": "compile.getRef host/target should call 'getRef' when resolving remotes",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve pointer recursively",
      "fullTitle": "compile.getRef recursion should resolve pointer recursively",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve id recursively",
      "fullTitle": "compile.getRef recursion should resolve id recursively",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remote recursively",
      "fullTitle": "compile.getRef recursion should resolve remote recursively",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return base without trailing #",
      "fullTitle": "joinScope single param should return base without trailing #",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should join domain with folder",
      "fullTitle": "joinScope single param should join domain with folder",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should join domain with folder/",
      "fullTitle": "joinScope single param should join domain with folder/",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add file to domain with folder/",
      "fullTitle": "joinScope single param should add file to domain with folder/",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should replace fragments not ending with slash",
      "fullTitle": "joinScope single param should replace fragments not ending with slash",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should append id to url",
      "fullTitle": "joinScope single param should append id to url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should append id to url/",
      "fullTitle": "joinScope single param should append id to url/",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should override base root",
      "fullTitle": "joinScope single param should override base root",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should replace id",
      "fullTitle": "joinScope single param should replace id",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should replace pointer",
      "fullTitle": "joinScope single param should replace pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return empty list for empty string",
      "fullTitle": "compile.splitRef should return empty list for empty string",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return empty list for root pointer",
      "fullTitle": "compile.splitRef should return empty list for root pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return input pointer",
      "fullTitle": "compile.splitRef should return input pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return input id",
      "fullTitle": "compile.splitRef should return input id",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return sanitized url",
      "fullTitle": "compile.splitRef should return sanitized url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return sanitized url",
      "fullTitle": "compile.splitRef should return sanitized url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return sanitized url and id",
      "fullTitle": "compile.splitRef should return sanitized url and id",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return sanitized url and pointer",
      "fullTitle": "compile.splitRef should return sanitized url and pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined for missing schema",
      "fullTitle": "compile behaviour should return undefined for missing schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a copy",
      "fullTitle": "compile behaviour should return a copy",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not copy schema twice",
      "fullTitle": "compile behaviour should not copy schema twice",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not change iterable properties",
      "fullTitle": "compile behaviour should not change iterable properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 9,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should always return json-pointer target",
      "fullTitle": "compile getRef should always return json-pointer target",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a defined $ref with json-pointer",
      "fullTitle": "compile getRef should return a defined $ref with json-pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema defined with referenced ids",
      "fullTitle": "compile getRef should return schema defined with referenced ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema for absolute assembled scope ids",
      "fullTitle": "compile getRef should return schema for absolute assembled scope ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve json-pointer with root-url",
      "fullTitle": "compile getRef should resolve json-pointer with root-url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema defined with referenced ids from root schema",
      "fullTitle": "compile getRef should return schema defined with referenced ids from root schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema defined with referenced ids not using root schema",
      "fullTitle": "compile getRef should return schema defined with referenced ids not using root schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should compile ref to absolute scope",
      "fullTitle": "compile compile ref should compile ref to absolute scope",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should compile ref to absolute scope",
      "fullTitle": "compile compile ref should compile ref to absolute scope",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve absolute url with subfolder",
      "fullTitle": "compile compile ref should resolve absolute url with subfolder",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remotes",
      "fullTitle": "compile getRef remote should resolve remotes",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remotes with trailing '#'",
      "fullTitle": "compile getRef remote should resolve remotes with trailing '#'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve pointer within remote",
      "fullTitle": "compile getRef remote should resolve pointer within remote",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve id within remote",
      "fullTitle": "compile getRef remote should resolve id within remote",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return root",
      "fullTitle": "compile spec ref.json should return root",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return relative pointer",
      "fullTitle": "compile spec ref.json should return relative pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should work on escaped pointer",
      "fullTitle": "compile spec ref.json should work on escaped pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve nested $ref",
      "fullTitle": "compile spec ref.json should resolve nested $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve pointer containing quotes",
      "fullTitle": "compile spec ref.json should resolve pointer containing quotes",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve location independent identifier",
      "fullTitle": "compile spec ref.json should resolve location independent identifier",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve location independent identifier with base uri change in subschema",
      "fullTitle": "compile spec ref.json should resolve location independent identifier with base uri change in subschema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remote ref",
      "fullTitle": "compile draft04Schema spec remoteRef.json should resolve remote ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remote ref with fragment",
      "fullTitle": "compile draft04Schema spec remoteRef.json should resolve remote ref with fragment",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve ref with remote ref",
      "fullTitle": "compile draft04Schema spec remoteRef.json should resolve ref with remote ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should join scope and resolve to remote",
      "fullTitle": "compile draft04Schema spec remoteRef.json should join scope and resolve to remote",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should correctly replace base uri for remote scope updates",
      "fullTitle": "compile draft04Schema spec remoteRef.json should correctly replace base uri for remote scope updates",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve joined remote with root ref",
      "fullTitle": "compile draft04Schema spec remoteRef.json should resolve joined remote with root ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "base URI change ref valid",
      "fullTitle": "compile draft04Schema spec remoteRef.json base URI change base URI change ref valid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "base URI change ref invalid",
      "fullTitle": "compile draft04Schema spec remoteRef.json base URI change base URI change ref invalid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "number is valid",
      "fullTitle": "compile draft04Schema spec remoteRef.json base URI change - change folder number is valid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "string is invalid",
      "fullTitle": "compile draft04Schema spec remoteRef.json base URI change - change folder string is invalid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "$ref resolves to /definitions/base_foo, data does not validate",
      "fullTitle": "compile draft04Schema spec remoteRef.json $ref prevents a sibling id from changing the base uri $ref resolves to /definitions/base_foo, data does not validate",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "$ref resolves to /definitions/base_foo, data validates",
      "fullTitle": "compile draft04Schema spec remoteRef.json $ref prevents a sibling id from changing the base uri $ref resolves to /definitions/base_foo, data validates",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 'string'",
      "fullTitle": "compileV06 01 - refRemote base URI change - base URI change ref invalid should validate 'string'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchemaV6.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 'null'",
      "fullTitle": "compileV06 01 - refRemote base URI change - base URI change ref invalid should validate 'null'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchemaV6.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate 'object'",
      "fullTitle": "compileV06 01 - refRemote base URI change - base URI change ref invalid should not validate 'object'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchemaV6.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate 'string'",
      "fullTitle": "compileV06 02 - refRemote base URI change - base URI change ref invalid should not validate 'string'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchemaV6.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 'number'",
      "fullTitle": "compileV06 02 - refRemote base URI change - base URI change ref invalid should validate 'number'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchemaV6.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add type 'object' of data to schema",
      "fullTitle": "createSchemaOf should add type 'object' of data to schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/createSchemaOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add type 'string' of data to schema",
      "fullTitle": "createSchemaOf should add type 'string' of data to schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/createSchemaOf.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should should add object's properties",
      "fullTitle": "createSchemaOf should should add object's properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/createSchemaOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add items from array",
      "fullTitle": "createSchemaOf should add items from array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/createSchemaOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add single item as item-object",
      "fullTitle": "createSchemaOf should add single item as item-object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/createSchemaOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "validate should return error",
      "fullTitle": "docs draft methods validate should return error",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "validate should return error for separate schema",
      "fullTitle": "docs draft methods validate should return error for separate schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return data using 'getTemplate'",
      "fullTitle": "docs draft methods should return data using 'getTemplate'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should complement data using 'getTemplate'",
      "fullTitle": "docs draft methods should complement data using 'getTemplate'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call for each data point using 'each",
      "fullTitle": "docs draft methods should call for each data point using 'each",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call for each sub schema",
      "fullTitle": "docs draft methods should call for each sub schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve oneOf item using 'getSchema'",
      "fullTitle": "docs draft methods should resolve oneOf item using 'getSchema'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve from remote schema",
      "fullTitle": "docs draft methods should resolve from remote schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 4,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remote schema from given url",
      "fullTitle": "docs - remote schema should resolve remote schema from given url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/remoteSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remote schemas from simple ids",
      "fullTitle": "docs - remote schema should resolve remote schemas from simple ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/remoteSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $defs from remote schema",
      "fullTitle": "docs - remote schema should resolve $defs from remote schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/remoteSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $defs from remote schema using simple ids",
      "fullTitle": "docs - remote schema should resolve $defs from remote schema using simple ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/remoteSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve pointer to nested object in remote schema",
      "fullTitle": "docs - remote schema should resolve pointer to nested object in remote schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/remoteSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call callback with schema, value and pointer",
      "fullTitle": "each should call callback with schema, value and pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/each.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should callback for array and all array items",
      "fullTitle": "each should callback for array and all array items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/each.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should callback for array and pick correct schema forEach item",
      "fullTitle": "each should callback for array and pick correct schema forEach item",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/each.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should callback for object and all properties",
      "fullTitle": "each should callback for object and all properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/each.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve root reference",
      "fullTitle": "each should resolve root reference",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/each.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should execute callback on root-schema",
      "fullTitle": "eachSchema should execute callback on root-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on unspecified properties",
      "fullTitle": "eachSchema should call on unspecified properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should call on each property schema",
      "fullTitle": "eachSchema should call on each property schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each item schema",
      "fullTitle": "eachSchema should call on each item schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each item property",
      "fullTitle": "eachSchema should call on each item property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each oneOf-schema",
      "fullTitle": "eachSchema should call on each oneOf-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each oneOf-schema in items",
      "fullTitle": "eachSchema should call on each oneOf-schema in items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each anyOf-schema",
      "fullTitle": "eachSchema should call on each anyOf-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each allOf-schema",
      "fullTitle": "eachSchema should call on each allOf-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on definitions",
      "fullTitle": "eachSchema should call on definitions",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on additionalProperties",
      "fullTitle": "eachSchema should call on additionalProperties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should ignore depedency list",
      "fullTitle": "eachSchema should ignore depedency list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each depedency schema",
      "fullTitle": "eachSchema should call on each depedency schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should iterate definitions",
      "fullTitle": "eachSchema should iterate definitions",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should iterate over nested definitions",
      "fullTitle": "eachSchema should iterate over nested definitions",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support array-types",
      "fullTitle": "eachSchema should support array-types",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a single object-schema as list",
      "fullTitle": "getChildSchemaSelection should return a single object-schema as list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getChildSchemaSelection.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a single array-item as list",
      "fullTitle": "getChildSchemaSelection should return a single array-item as list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getChildSchemaSelection.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return list of oneOf elements",
      "fullTitle": "getChildSchemaSelection should return list of oneOf elements",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getChildSchemaSelection.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve items from oneOf elements",
      "fullTitle": "getChildSchemaSelection should resolve items from oneOf elements",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getChildSchemaSelection.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema of any value",
      "fullTitle": "getSchema value should return schema of any value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve property through root $ref",
      "fullTitle": "getSchema value should resolve property through root $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema of valid property",
      "fullTitle": "getSchema object should return schema of valid property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return `schema-warning` for unknown, but valid property",
      "fullTitle": "getSchema object should return `schema-warning` for unknown, but valid property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return `undefined` for unknown, but valid property",
      "fullTitle": "getSchema object should return `undefined` for unknown, but valid property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema for unknown property if data is passed",
      "fullTitle": "getSchema object should return schema for unknown property if data is passed",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for invalid properties",
      "fullTitle": "getSchema object should return an error for invalid properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for invalid properties, even if value is given",
      "fullTitle": "getSchema object should return an error for invalid properties, even if value is given",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema for property within nested object",
      "fullTitle": "getSchema object should return schema for property within nested object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $ref as property",
      "fullTitle": "getSchema object should resolve $ref as property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return correct 'oneOf' object definition",
      "fullTitle": "getSchema object should return correct 'oneOf' object definition",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'one-of-error' if enforced oneOf schema could not be resolved",
      "fullTitle": "getSchema object should return 'one-of-error' if enforced oneOf schema could not be resolved",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema of matching patternProperty",
      "fullTitle": "getSchema object should return schema of matching patternProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if schema could not be resolved",
      "fullTitle": "getSchema object should return an error if schema could not be resolved",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema from dependencies when dependent property is present",
      "fullTitle": "getSchema object dependencies should return schema from dependencies when dependent property is present",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return then-schema for matching if-schema",
      "fullTitle": "getSchema object if-then-else should return then-schema for matching if-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return else-schema for non-matching if-schema",
      "fullTitle": "getSchema object if-then-else should return else-schema for non-matching if-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return correct schema for duplicate property",
      "fullTitle": "getSchema object if-then-else should return correct schema for duplicate property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return item schema",
      "fullTitle": "getSchema array should return item schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return item schema based on index",
      "fullTitle": "getSchema array should return item schema based on index",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema for matching 'oneOf' item",
      "fullTitle": "getSchema array should return schema for matching 'oneOf' item",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if no matching 'oneOf' item was found",
      "fullTitle": "getSchema array should return error if no matching 'oneOf' item was found",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set an empty string if no default value is given",
      "fullTitle": "getTemplate should set an empty string if no default value is given",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set the first enum option for a missing default",
      "fullTitle": "getTemplate should set the first enum option for a missing default",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support null types",
      "fullTitle": "getTemplate should support null types",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support null type properties",
      "fullTitle": "getTemplate should support null type properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not modify input schema",
      "fullTitle": "getTemplate should not modify input schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set default value for boolean",
      "fullTitle": "getTemplate boolean should set default value for boolean",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given boolean if it is 'false'",
      "fullTitle": "getTemplate boolean should not override given boolean if it is 'false'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given boolean if it is 'true'",
      "fullTitle": "getTemplate boolean should not override given boolean if it is 'true'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set default value for number",
      "fullTitle": "getTemplate number should set default value for number",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given number",
      "fullTitle": "getTemplate number should not override given number",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set default value for integer",
      "fullTitle": "getTemplate integer should set default value for integer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given integer",
      "fullTitle": "getTemplate integer should not override given integer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return defined properties of object",
      "fullTitle": "getTemplate object properties should return defined properties of object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not fail on falsy input data",
      "fullTitle": "getTemplate object properties should not fail on falsy input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default object if defined",
      "fullTitle": "getTemplate object properties should return default object if defined",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given default values",
      "fullTitle": "getTemplate object properties should not override given default values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should extend given template data by default values",
      "fullTitle": "getTemplate object properties should extend given template data by default values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not remove additional properties `additionalProperties=undefined`",
      "fullTitle": "getTemplate object additionalProperties should not remove additional properties `additionalProperties=undefined`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not remove additional properties `additionalProperties=true`",
      "fullTitle": "getTemplate object additionalProperties should not remove additional properties `additionalProperties=true`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not remove non matching properties",
      "fullTitle": "getTemplate object additionalProperties should not remove non matching properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not remove additional properties with `additionalProperties=false`",
      "fullTitle": "getTemplate object additionalProperties should not remove additional properties with `additionalProperties=false`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should remove unmatched properties with option `removeInvalidData=true`",
      "fullTitle": "getTemplate object additionalProperties should remove unmatched properties with option `removeInvalidData=true`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should remove invalid properties with option `removeInvalidData=true`",
      "fullTitle": "getTemplate object additionalProperties should remove invalid properties with option `removeInvalidData=true`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $ref in object schema",
      "fullTitle": "getTemplate object $ref should resolve $ref in object schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $ref in items-array",
      "fullTitle": "getTemplate object $ref should resolve $ref in items-array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should follow $ref once",
      "fullTitle": "getTemplate object $ref should follow $ref once",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should respect depth of input data in $ref-resolution",
      "fullTitle": "getTemplate object $ref should respect depth of input data in $ref-resolution",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template of draft04",
      "fullTitle": "getTemplate object $ref should create template of draft04",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 2,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return template of first oneOf schema",
      "fullTitle": "getTemplate object oneOf should return template of first oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should extend empty object with first oneOf schema",
      "fullTitle": "getTemplate object oneOf should extend empty object with first oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return template of matching oneOf schema",
      "fullTitle": "getTemplate object oneOf should return template of matching oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return input value if no oneOf-schema matches ",
      "fullTitle": "getTemplate object oneOf should return input value if no oneOf-schema matches ",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not require object type definition in oneOf schemas",
      "fullTitle": "getTemplate object oneOf should not require object type definition in oneOf schemas",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template for merged allOf schema",
      "fullTitle": "getTemplate object allOf should create template for merged allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template for first anyOf schema",
      "fullTitle": "getTemplate object anyOf should create template for first anyOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not add dependency if it is not required",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: false` dependency required should not add dependency if it is not required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add dependency if triggered as required",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: false` dependency required should add dependency if triggered as required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add dependency if initially triggered as required",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: false` dependency required should add dependency if initially triggered as required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not add dependency from schema if it is not required",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: false` dependency schema should not add dependency from schema if it is not required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add dependency from schema if triggered as required",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: false` dependency schema should add dependency from schema if triggered as required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template for valid dependency",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: true` should create template for valid dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not change passed value of dependency",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: true` should not change passed value of dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not create data for non matching dependency",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: true` should not create data for non matching dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return empty array if minItems = 0",
      "fullTitle": "getTemplate array items:Object should return empty array if minItems = 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return array with minItems",
      "fullTitle": "getTemplate array items:Object should return array with minItems",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default array",
      "fullTitle": "getTemplate array items:Object should return default array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default array even if minItems is not set",
      "fullTitle": "getTemplate array items:Object should return default array even if minItems is not set",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default array if part of object",
      "fullTitle": "getTemplate array items:Object should return default array if part of object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given default values",
      "fullTitle": "getTemplate array items:Object should not override given default values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should extend given template data by default values",
      "fullTitle": "getTemplate array items:Object should extend given template data by default values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should extend all input objects by missing properties",
      "fullTitle": "getTemplate array items:Object should extend all input objects by missing properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return items in given order",
      "fullTitle": "getTemplate array items:Array should return items in given order",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should replace input data",
      "fullTitle": "getTemplate array items:Array should replace input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should convert input data for strings",
      "fullTitle": "getTemplate array items:Array should convert input data for strings",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should convert input data for numbers",
      "fullTitle": "getTemplate array items:Array should convert input data for numbers",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default value for invalid number",
      "fullTitle": "getTemplate array items:Array should return default value for invalid number",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should convert input data for booleans",
      "fullTitle": "getTemplate array items:Array should convert input data for booleans",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default value for invalid boolean",
      "fullTitle": "getTemplate array items:Array should return default value for invalid boolean",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return template of first oneOf schema",
      "fullTitle": "getTemplate array items.oneOf should return template of first oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge with input data",
      "fullTitle": "getTemplate array items.oneOf should merge with input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not remove invalid oneOf schema if 'removeInvalidData' is unset",
      "fullTitle": "getTemplate array items.oneOf should not remove invalid oneOf schema if 'removeInvalidData' is unset",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template for merged allOf schema",
      "fullTitle": "getTemplate array items.allOf should create template for merged allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template for first anyOf schema",
      "fullTitle": "getTemplate array items.anyOf should create template for first anyOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return first schema for mixed types",
      "fullTitle": "getTemplate oneOf should return first schema for mixed types",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return first type of list for template",
      "fullTitle": "getTemplate list of types should return first type of list for template",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return input data",
      "fullTitle": "getTemplate list of types should return input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return type of default value if data is not given",
      "fullTitle": "getTemplate list of types should return type of default value if data is not given",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should remove invalid oneOf schema if 'removeInvalidData=true'",
      "fullTitle": "getTemplate templateOptions should remove invalid oneOf schema if 'removeInvalidData=true'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not add optional properties",
      "fullTitle": "getTemplate templateOptions should not add optional properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set default as value",
      "fullTitle": "getTemplate - v7 should set default as value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set const as value",
      "fullTitle": "getTemplate - v7 should set const as value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should prefer const over default",
      "fullTitle": "getTemplate - v7 should prefer const over default",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return template of then-schema for valid if-schema",
      "fullTitle": "getTemplate - v7 object if-then-else should return template of then-schema for valid if-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not create data for then-schema if it is not required",
      "fullTitle": "getTemplate - v7 object if-then-else should not create data for then-schema if it is not required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not return template of then-schema for invalid if-schema",
      "fullTitle": "getTemplate - v7 object if-then-else should not return template of then-schema for invalid if-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return template of else-schema for invalid if-schema",
      "fullTitle": "getTemplate - v7 object if-then-else should return template of else-schema for invalid if-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'string' for \"\"",
      "fullTitle": "getTypeOf should return 'string' for \"\"",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'boolean' for false",
      "fullTitle": "getTypeOf should return 'boolean' for false",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'number' for 0",
      "fullTitle": "getTypeOf should return 'number' for 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'regexp' for /^/",
      "fullTitle": "getTypeOf should return 'regexp' for /^/",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'regexp' for 'new RegExp()'",
      "fullTitle": "getTypeOf should return 'regexp' for 'new RegExp()'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'object' for {}",
      "fullTitle": "getTypeOf should return 'object' for {}",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'array' for []",
      "fullTitle": "getTypeOf should return 'array' for []",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'null' for null",
      "fullTitle": "getTypeOf should return 'null' for null",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'undefined' for undefined",
      "fullTitle": "getTypeOf should return 'undefined' for undefined",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return correct schema for existing data property 'customField'",
      "fullTitle": "issue#19 - getSchema from dependencies should return correct schema for existing data property 'customField'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue19.getSchema.dependencies.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return correct schema for missing data property 'customField'",
      "fullTitle": "issue#19 - getSchema from dependencies should return correct schema for missing data property 'customField'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue19.getSchema.dependencies.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should append property 'runner' on partial objects",
      "fullTitle": "issue#21 - getTemplate containing refs should append property 'runner' on partial objects",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue21.getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call for each properties",
      "fullTitle": "issue#22 - eachSchema on root $ref should call for each properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue22.each.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override input data",
      "fullTitle": "issue#32 - getTemplate ignored input data for integer should not override input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue32.getTemplate.integer.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false for root array",
      "fullTitle": "issue#33 - root oneOf changes type should return false for root array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false for root array",
      "fullTitle": "issue#33 - root oneOf changes type type array should return false for root array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false for root boolean",
      "fullTitle": "issue#33 - root oneOf changes type type array should return false for root boolean",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return true for root string",
      "fullTitle": "issue#33 - root oneOf changes type type array should return true for root string",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return true for root number",
      "fullTitle": "issue#33 - root oneOf changes type type array should return true for root number",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false for property array",
      "fullTitle": "issue#33 - root oneOf changes type variations should return false for property array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false for property boolean",
      "fullTitle": "issue#33 - root oneOf changes type variations should return false for property boolean",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return valid default value",
      "fullTitle": "issue#38 - getTemplate anyOf should not modify valid default value should return valid default value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue38.getTemplate.anyOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 1",
      "fullTitle": "issue#43 - multipleOf .01 should validate 1",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate .2",
      "fullTitle": "issue#43 - multipleOf .01 should validate .2",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate .02",
      "fullTitle": "issue#43 - multipleOf .01 should validate .02",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate .025",
      "fullTitle": "issue#43 - multipleOf .01 should not validate .025",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 1.36",
      "fullTitle": "issue#43 - multipleOf .01 should validate 1.36",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 2.74",
      "fullTitle": "issue#43 - multipleOf .01 should validate 2.74",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 123456789",
      "fullTitle": "issue#43 - multipleOf .01 should validate 123456789",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate Infinity",
      "fullTitle": "issue#43 - multipleOf .01 should not validate Infinity",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate all floats with two decimals",
      "fullTitle": "issue#43 - multipleOf .01 should validate all floats with two decimals",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 2,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still validate multiple of integers",
      "fullTitle": "issue#43 - multipleOf .01 should still validate multiple of integers",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still invalidate non-multiples of integers",
      "fullTitle": "issue#43 - multipleOf .01 should still invalidate non-multiples of integers",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate input data",
      "fullTitle": "issue#44 - chained negative logic should validate input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue44.chainedNegLogic.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return true if value is valid",
      "fullTitle": "isValid should return true if value is valid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/isValid.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false if value is invalid",
      "fullTitle": "isValid should return false if value is invalid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/isValid.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate multiple oneOf validations",
      "fullTitle": "isValid should not validate multiple oneOf validations",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/isValid.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge required statements",
      "fullTitle": "mergeSchema should merge required statements",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/mergeSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge properties",
      "fullTitle": "mergeSchema should merge properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/mergeSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge property",
      "fullTitle": "mergeSchema should merge property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/mergeSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge item property",
      "fullTitle": "mergeSchema should merge item property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/mergeSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should iteratively resolve allOf before merging (issue#44)",
      "fullTitle": "reduceSchema allOf should iteratively resolve allOf before merging (issue#44)",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/reduceSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return oneOf source schema for resolved oneOf object",
      "fullTitle": "reduceSchema oneOf should return oneOf source schema for resolved oneOf object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/reduceSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return merged schema of type string",
      "fullTitle": "resolveAllOf should return merged schema of type string",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return merged schema while resolving $ref",
      "fullTitle": "resolveAllOf should return merged schema while resolving $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return merged properties and attributes",
      "fullTitle": "resolveAllOf should return merged properties and attributes",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return merged required-list of type object",
      "fullTitle": "resolveAllOf should return merged required-list of type object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return unique merged required-list of type object",
      "fullTitle": "resolveAllOf should return unique merged required-list of type object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not return 'then'-schema when 'if' does not match",
      "fullTitle": "resolveAllOf if-then-else should not return 'then'-schema when 'if' does not match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'then'-schema when 'if' does match",
      "fullTitle": "resolveAllOf if-then-else should return 'then'-schema when 'if' does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge multiple 'then'-schema",
      "fullTitle": "resolveAllOf if-then-else should merge multiple 'then'-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge only matching 'if'-schema",
      "fullTitle": "resolveAllOf if-then-else should merge only matching 'if'-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should incrementally resolve multiple 'then'-schema",
      "fullTitle": "resolveAllOf if-then-else should incrementally resolve multiple 'then'-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should correctly merge dependencies",
      "fullTitle": "resolveDynamicSchema dependencies should correctly merge dependencies",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined if dynamic schema is not triggered",
      "fullTitle": "resolveDynamicSchema dependencies should return undefined if dynamic schema is not triggered",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve nested dependencies schema",
      "fullTitle": "resolveDynamicSchema dependencies should resolve nested dependencies schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should select if-then-else schema",
      "fullTitle": "resolveDynamicSchema if-then-else should select if-then-else schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined if dynamic schema is not triggered",
      "fullTitle": "resolveDynamicSchema if-then-else should return undefined if dynamic schema is not triggered",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve nested if-then-else schema",
      "fullTitle": "resolveDynamicSchema if-then-else should resolve nested if-then-else schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return merged allOf schema",
      "fullTitle": "resolveDynamicSchema allOf should return merged allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined if allOf is empty",
      "fullTitle": "resolveDynamicSchema allOf should return undefined if allOf is empty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve nested allOf schema",
      "fullTitle": "resolveDynamicSchema allOf should resolve nested allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should select oneOf schema",
      "fullTitle": "resolveDynamicSchema oneOf should select oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should select correct oneOf schema from oneOfProperty",
      "fullTitle": "resolveDynamicSchema oneOf should select correct oneOf schema from oneOfProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined if anyOf is empty",
      "fullTitle": "resolveDynamicSchema anyOf should return undefined if anyOf is empty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined if no anyOf matches input data",
      "fullTitle": "resolveDynamicSchema anyOf should return undefined if no anyOf matches input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching oneOf schema",
      "fullTitle": "resolveDynamicSchema anyOf should return matching oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all matching oneOf schema as merged schema",
      "fullTitle": "resolveDynamicSchema anyOf should return all matching oneOf schema as merged schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema with matching type",
      "fullTitle": "resolveOneOf (fuzzy) should return schema with matching type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema with matching pattern",
      "fullTitle": "resolveOneOf (fuzzy) should return schema with matching pattern",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $ref before schema",
      "fullTitle": "resolveOneOf (fuzzy) should resolve $ref before schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema with matching properties",
      "fullTitle": "resolveOneOf (fuzzy) object should return schema with matching properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema matching nested properties",
      "fullTitle": "resolveOneOf (fuzzy) object should return schema matching nested properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema matching oneOfProperty",
      "fullTitle": "resolveOneOf (fuzzy) object oneOfProperty should return schema matching oneOfProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema matching oneOfProperty even it is invalid",
      "fullTitle": "resolveOneOf (fuzzy) object oneOfProperty should return schema matching oneOfProperty even it is invalid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if value at oneOfProperty is undefined",
      "fullTitle": "resolveOneOf (fuzzy) object oneOfProperty should return an error if value at oneOfProperty is undefined",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if no oneOfProperty could be matched",
      "fullTitle": "resolveOneOf (fuzzy) object oneOfProperty should return an error if no oneOfProperty could be matched",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema with least missing properties",
      "fullTitle": "resolveOneOf (fuzzy) object fuzzy match missing values should return schema with least missing properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should only count properties that match the schema",
      "fullTitle": "resolveOneOf (fuzzy) object fuzzy match missing values should only count properties that match the schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should find correct pay type",
      "fullTitle": "resolveOneOf (fuzzy) object fuzzy match missing values should find correct pay type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return oneOfError for invalid data",
      "fullTitle": "resolveOneOf (fuzzy) array should return oneOfError for invalid data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema matching oneOfProperty",
      "fullTitle": "oneOfProperty should return schema matching oneOfProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.oneOfProperty.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema matching oneOfProperty even it is invalid",
      "fullTitle": "oneOfProperty should return schema matching oneOfProperty even it is invalid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.oneOfProperty.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if value at oneOfProperty is undefined",
      "fullTitle": "oneOfProperty should return an error if value at oneOfProperty is undefined",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.oneOfProperty.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if no oneOfProperty could be matched",
      "fullTitle": "oneOfProperty should return an error if no oneOfProperty could be matched",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.oneOfProperty.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all type definitions",
      "fullTitle": "getTypeDefs should return all type definitions",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/schema/getTypeDef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return valid type definitions only",
      "fullTitle": "getTypeDefs should return valid type definitions only",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/schema/getTypeDef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return only valid type definitions from dependencies",
      "fullTitle": "getTypeDefs should return only valid type definitions from dependencies",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/schema/getTypeDef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support both item formats",
      "fullTitle": "getTypeDefs should support both item formats",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/schema/getTypeDef.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should also return type definitions defined as array",
      "fullTitle": "getTypeDefs should also return type definitions defined as array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/schema/getTypeDef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching schema",
      "fullTitle": "step.oneof should return matching schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.oneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return index of matching schema",
      "fullTitle": "step.oneof should return index of matching schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.oneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should maintain references from a remote schema when resolving oneOf with $ref",
      "fullTitle": "step.oneof should maintain references from a remote schema when resolving oneOf with $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.oneOf.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should maintain references from a remote schema when resolving oneOf with $ref",
      "fullTitle": "step.oneof should maintain references from a remote schema when resolving oneOf with $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.oneOf.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for unknown types",
      "fullTitle": "step should return an error for unknown types",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return object property",
      "fullTitle": "step object should return object property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for unknown property",
      "fullTitle": "step object should return error for unknown property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for unknown property",
      "fullTitle": "step object should return error for unknown property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create schema for `additionalProperties=true`",
      "fullTitle": "step object should create schema for `additionalProperties=true`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should treat `additionalProperties` as `true` per default",
      "fullTitle": "step object should treat `additionalProperties` as `true` per default",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if `additionalProperties=false` and property unknown",
      "fullTitle": "step object should return an error if `additionalProperties=false` and property unknown",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching oneOf",
      "fullTitle": "step object should return matching oneOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching oneOf, for objects missing properties",
      "fullTitle": "step object should return matching oneOf, for objects missing properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching anyOf",
      "fullTitle": "step object should return matching anyOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return combined anyOf schema",
      "fullTitle": "step object should return combined anyOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve references from anyOf schema",
      "fullTitle": "step object should resolve references from anyOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching allOf schema",
      "fullTitle": "step object should return matching allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve references in allOf schema",
      "fullTitle": "step object should resolve references in allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching patternProperty",
      "fullTitle": "step object should return matching patternProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return additionalProperties schema for not matching patternProperty",
      "fullTitle": "step object should return additionalProperties schema for not matching patternProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for invalid array schema",
      "fullTitle": "step array should return an error for invalid array schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return item property",
      "fullTitle": "step array should return item property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return item at index",
      "fullTitle": "step array should return item at index",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching item in oneOf",
      "fullTitle": "step array should return matching item in oneOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching anyOf",
      "fullTitle": "step array should return matching anyOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return combined anyOf schema",
      "fullTitle": "step array should return combined anyOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return combined allOf schema",
      "fullTitle": "step array should return combined allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a generated schema with additionalItems",
      "fullTitle": "step array should return a generated schema with additionalItems",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return combined schema",
      "fullTitle": "step[v7].allOf should return combined schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step7.allOf.test.ts",
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return decimal precision",
      "fullTitle": "getPrecision should return decimal precision",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/utils/getPrecision.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge objects",
      "fullTitle": "merge should merge objects",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/utils/merge.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should replace arrays",
      "fullTitle": "merge should replace arrays",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/utils/merge.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not modify input values",
      "fullTitle": "merge should not modify input values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/utils/merge.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate HH:mm:ss",
      "fullTitle": "validate format time should validate HH:mm:ss",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate HH:mm:ss.s",
      "fullTitle": "validate format time should validate HH:mm:ss.s",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate HH:mm:ss-HH:mm",
      "fullTitle": "validate format time should validate HH:mm:ss-HH:mm",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate HH:mm:ssZ",
      "fullTitle": "validate format time should validate HH:mm:ssZ",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate minutes above 59",
      "fullTitle": "validate format time should not validate minutes above 59",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate seconds above 59",
      "fullTitle": "validate format time should not validate seconds above 59",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate HH:mm",
      "fullTitle": "validate format time should not validate HH:mm",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate format url",
      "fullTitle": "validate format url should validate format url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error UrlFormatError for invalid urls",
      "fullTitle": "validate format url should return error UrlFormatError for invalid urls",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support type 'integer'",
      "fullTitle": "validate integer should support type 'integer'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should throw error if type 'integer' received a float",
      "fullTitle": "validate integer should throw error if type 'integer' received a float",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate NaN",
      "fullTitle": "validate integer should validate NaN",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate on a matching oneOf definition",
      "fullTitle": "validate integer oneOf should validate on a matching oneOf definition",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for multiple matching oneOf schemas",
      "fullTitle": "validate integer oneOf should return an error for multiple matching oneOf schemas",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate if all allOf-schemas are valid",
      "fullTitle": "validate integer allOf should validate if all allOf-schemas are valid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if not all schemas match",
      "fullTitle": "validate integer allOf should return error if not all schemas match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all errors for each non-matching schemas",
      "fullTitle": "validate integer allOf should return all errors for each non-matching schemas",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate if one schemas in anyOf validates",
      "fullTitle": "validate integer anyOf should validate if one schemas in anyOf validates",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if not all schemas match",
      "fullTitle": "validate integer anyOf should return error if not all schemas match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate null",
      "fullTitle": "validate integer anyOf should validate null",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if invalid null",
      "fullTitle": "validate integer anyOf should return error if invalid null",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve references",
      "fullTitle": "validate integer anyOf should resolve references",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still be valid for missing type",
      "fullTitle": "validate object should still be valid for missing type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all errors",
      "fullTitle": "validate object should return all errors",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "shoud return errors for missing `required` properties",
      "fullTitle": "validate object required shoud return errors for missing `required` properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MinPropertiesError for too few properties",
      "fullTitle": "validate object min/maxProperties should return MinPropertiesError for too few properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MaxPropertiesError for too many properties",
      "fullTitle": "validate object min/maxProperties should return MaxPropertiesError for too many properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if property count is within range",
      "fullTitle": "validate object min/maxProperties should be valid if property count is within range",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if 'not' keyword does match",
      "fullTitle": "validate object not should be invalid if 'not' keyword does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate matching oneOf",
      "fullTitle": "validate object oneOf should validate matching oneOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for non-matching oneOf",
      "fullTitle": "validate object oneOf should return error for non-matching oneOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return AdditionalPropertiesError for an additional property",
      "fullTitle": "validate object additionalProperties should return AdditionalPropertiesError for an additional property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all AdditionalPropertiesErrors",
      "fullTitle": "validate object additionalProperties should return all AdditionalPropertiesErrors",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if 'additionalProperties' is 'true'",
      "fullTitle": "validate object additionalProperties should be valid if 'additionalProperties' is 'true'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if value matches 'additionalProperties' schema",
      "fullTitle": "validate object additionalProperties should be valid if value matches 'additionalProperties' schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should only validate existing definition in 'properties'",
      "fullTitle": "validate object additionalProperties should only validate existing definition in 'properties'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if value does not match 'additionalProperties' schema",
      "fullTitle": "validate object additionalProperties should return error if value does not match 'additionalProperties' schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if value matches 'additionalProperties' oneOf schema",
      "fullTitle": "validate object additionalProperties should be valid if value matches 'additionalProperties' oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if value does not match 'additionalProperties' in oneOf schema",
      "fullTitle": "validate object additionalProperties should be invalid if value does not match 'additionalProperties' in oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be ignore properties that are matched by patternProperties",
      "fullTitle": "validate object additionalProperties should be ignore properties that are matched by patternProperties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if value does match multiple 'additionalProperties' in oneOf schema",
      "fullTitle": "validate object additionalProperties should be invalid if value does match multiple 'additionalProperties' in oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for matching pattern and failed validation",
      "fullTitle": "validate object patternProperties should return an error for matching pattern and failed validation",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate a correct matching pattern",
      "fullTitle": "validate object patternProperties should validate a correct matching pattern",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for matching regex pattern and failed validation",
      "fullTitle": "validate object patternProperties should return an error for matching regex pattern and failed validation",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should invalidate defined property",
      "fullTitle": "validate object patternProperties should invalidate defined property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'PatternPropertiesError' if additional properties are not allowed",
      "fullTitle": "validate object patternProperties should return 'PatternPropertiesError' if additional properties are not allowed",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if one of the matching patterns does not validate",
      "fullTitle": "validate object patternProperties should return an error if one of the matching patterns does not validate",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return no error if additional properties are not allowed but valid in patterns",
      "fullTitle": "validate object patternProperties should return no error if additional properties are not allowed but valid in patterns",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return no error if additional properties validate value",
      "fullTitle": "validate object patternProperties should return no error if additional properties validate value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an AdditionalPropertiesError if additional properties do not validate",
      "fullTitle": "validate object patternProperties should return an AdditionalPropertiesError if additional properties do not validate",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should ignore any dependencies if the property is no set",
      "fullTitle": "validate object dependencies should ignore any dependencies if the property is no set",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a 'MissingDependencyError' if the dependent property is missing",
      "fullTitle": "validate object dependencies should return a 'MissingDependencyError' if the dependent property is missing",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a 'MissingDependencyError' if the dependent counterpart is missing",
      "fullTitle": "validate object dependencies should return a 'MissingDependencyError' if the dependent counterpart is missing",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid for a matching schema dependency",
      "fullTitle": "validate object dependencies should be valid for a matching schema dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return validation error for a non-matching schema dependency",
      "fullTitle": "validate object dependencies should return validation error for a non-matching schema dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for invalid index",
      "fullTitle": "validate array should return error for invalid index",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid for matching indices",
      "fullTitle": "validate array should be valid for matching indices",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all errors",
      "fullTitle": "validate array should return all errors",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MinItemsError for too few items",
      "fullTitle": "validate array min/maxItems should return MinItemsError for too few items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MaxItemsError for too many items",
      "fullTitle": "validate array min/maxItems should return MaxItemsError for too many items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if item count is within range",
      "fullTitle": "validate array min/maxItems should be valid if item count is within range",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still be valid for missing type",
      "fullTitle": "validate array min/maxItems should still be valid for missing type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for prohibited additional items",
      "fullTitle": "validate array additionalItems should return error for prohibited additional items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if 'additionalItems' is true",
      "fullTitle": "validate array additionalItems should be valid if 'additionalItems' is true",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should also be valid if 'additionalItems' is undefined",
      "fullTitle": "validate array additionalItems should also be valid if 'additionalItems' is undefined",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for mismatching 'additionalItems' schema",
      "fullTitle": "validate array additionalItems should return error for mismatching 'additionalItems' schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid for matching 'additionalItems' schema",
      "fullTitle": "validate array additionalItems should be valid for matching 'additionalItems' schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if 'not' keyword does match",
      "fullTitle": "validate array not should be invalid if 'not' keyword does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate for duplicated values",
      "fullTitle": "validate array uniqueItems should not validate for duplicated values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate for duplicated objects",
      "fullTitle": "validate array uniqueItems should not validate for duplicated objects",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate for mismatching objects with equal properties",
      "fullTitle": "validate array uniqueItems should validate for mismatching objects with equal properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return no error for valid oneOf items",
      "fullTitle": "validate array oneOf should return no error for valid oneOf items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if no item does match",
      "fullTitle": "validate array oneOf should return error if no item does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MultipleOneOfError if multiple oneOf definitions match the given value",
      "fullTitle": "validate array oneOf should return MultipleOneOfError if multiple oneOf definitions match the given value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MinLengthError if string is too short",
      "fullTitle": "validate string should return MinLengthError if string is too short",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MaxLengthError if string is too long",
      "fullTitle": "validate string should return MaxLengthError if string is too long",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if string is within range",
      "fullTitle": "validate string should be valid if string is within range",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still be valid for missing type",
      "fullTitle": "validate string should still be valid for missing type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return EnumError if value is not within enum list",
      "fullTitle": "validate string should return EnumError if value is not within enum list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if value is within enum list",
      "fullTitle": "validate string should be valid if value is within enum list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if 'not' keyword does match",
      "fullTitle": "validate string should be invalid if 'not' keyword does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MinimumError if number is too small",
      "fullTitle": "validate number should return MinimumError if number is too small",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MinimumError if number is equal and exclusiveMinimum is set",
      "fullTitle": "validate number should return MinimumError if number is equal and exclusiveMinimum is set",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MaximumError if number is too large",
      "fullTitle": "validate number should return MaximumError if number is too large",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MaximumError if number same and exclusiveMaximum is set",
      "fullTitle": "validate number should return MaximumError if number same and exclusiveMaximum is set",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if number is within range",
      "fullTitle": "validate number should be valid if number is within range",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still be valid for missing type",
      "fullTitle": "validate number should still be valid for missing type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate NaN",
      "fullTitle": "validate number should validate NaN",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return EnumError if value is not within enum list",
      "fullTitle": "validate number should return EnumError if value is not within enum list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if value is within enum list",
      "fullTitle": "validate number should be valid if value is within enum list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if value is not multiple of 1.5",
      "fullTitle": "validate number should return error if value is not multiple of 1.5",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if value if a multiple of 1.5",
      "fullTitle": "validate number should be valid if value if a multiple of 1.5",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if 'multipleOf' is not a number",
      "fullTitle": "validate number should be valid if 'multipleOf' is not a number",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if 'not' keyword does match",
      "fullTitle": "validate number should be invalid if 'not' keyword does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not return an error for a valid type",
      "fullTitle": "validate arrays of types should not return an error for a valid type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a TypeError if passed type is not within array",
      "fullTitle": "validate arrays of types should return a TypeError if passed type is not within array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support 'integer' as a valid type within array",
      "fullTitle": "validate arrays of types should support 'integer' as a valid type within array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate a matching value within enum",
      "fullTitle": "validate heterogeneous types enum should validate a matching value within enum",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate a matching array within enum",
      "fullTitle": "validate heterogeneous types enum should validate a matching array within enum",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate a matching object within enum",
      "fullTitle": "validate heterogeneous types enum should validate a matching object within enum",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for non-matching object",
      "fullTitle": "validate heterogeneous types enum should return error for non-matching object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for invalid null",
      "fullTitle": "validate heterogeneous types enum should return error for invalid null",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should correctly validate data through nested $ref",
      "fullTitle": "validate heterogeneous types $ref should correctly validate data through nested $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should correctly validate combination of remote, allOf, and allOf-$ref",
      "fullTitle": "validate heterogeneous types $ref should correctly validate combination of remote, allOf, and allOf-$ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 3,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should correctly resolve local remote url",
      "fullTitle": "validate heterogeneous types $ref should correctly resolve local remote url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a promise",
      "fullTitle": "validateAsync should return a promise",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateAsync.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve successfull with an empty error",
      "fullTitle": "validateAsync should resolve successfull with an empty error",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateAsync.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve with errors for a failed validation",
      "fullTitle": "validateAsync should resolve with errors for a failed validation",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateAsync.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call onProgress immediately with error",
      "fullTitle": "validateAsync onError should call onProgress immediately with error",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateAsync.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should fail if value is equal to 0",
      "fullTitle": "validate draft07 integer exclusiveMaximum should fail if value is equal to 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should succeed if value is below to 0",
      "fullTitle": "validate draft07 integer exclusiveMaximum should succeed if value is below to 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should fail if value is equal to 0",
      "fullTitle": "validate draft07 integer exclusiveMinimum should fail if value is equal to 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should succeed if value is above to 0",
      "fullTitle": "validate draft07 integer exclusiveMinimum should succeed if value is above to 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate if-then constructs",
      "fullTitle": "validate draft07 integer if-then-else should validate if-then constructs",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate if-else constructs",
      "fullTitle": "validate draft07 integer if-then-else should validate if-else constructs",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return correct error for invalid dependency",
      "fullTitle": "validate draft07 object dependencies should return correct error for invalid dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    }
  ],
  "pending": [
    {
      "title": "should call on unspecified properties",
      "fullTitle": "eachSchema should call on unspecified properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "should return combined schema",
      "fullTitle": "step[v7].allOf should return combined schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step7.allOf.test.ts",
      "currentRetry": 0,
      "err": {}
    }
  ],
  "failures": [],
  "passes": [
    {
      "title": "should return rootSchema",
      "fullTitle": "compile.getRef should return rootSchema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return value for json-pointer uri",
      "fullTitle": "compile.getRef should return value for json-pointer uri",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve ids to pointer",
      "fullTitle": "compile.getRef should resolve ids to pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return remote schema",
      "fullTitle": "compile.getRef should return remote schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve host/target from ids",
      "fullTitle": "compile.getRef host/target should resolve host/target from ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve separated host/target from ids",
      "fullTitle": "compile.getRef host/target should resolve separated host/target from ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve target-pointer from remote host",
      "fullTitle": "compile.getRef host/target should resolve target-pointer from remote host",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call 'getRef' when resolving remotes",
      "fullTitle": "compile.getRef host/target should call 'getRef' when resolving remotes",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve pointer recursively",
      "fullTitle": "compile.getRef recursion should resolve pointer recursively",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve id recursively",
      "fullTitle": "compile.getRef recursion should resolve id recursively",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remote recursively",
      "fullTitle": "compile.getRef recursion should resolve remote recursively",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/getRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return base without trailing #",
      "fullTitle": "joinScope single param should return base without trailing #",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should join domain with folder",
      "fullTitle": "joinScope single param should join domain with folder",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should join domain with folder/",
      "fullTitle": "joinScope single param should join domain with folder/",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add file to domain with folder/",
      "fullTitle": "joinScope single param should add file to domain with folder/",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should replace fragments not ending with slash",
      "fullTitle": "joinScope single param should replace fragments not ending with slash",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should append id to url",
      "fullTitle": "joinScope single param should append id to url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should append id to url/",
      "fullTitle": "joinScope single param should append id to url/",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should override base root",
      "fullTitle": "joinScope single param should override base root",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should replace id",
      "fullTitle": "joinScope single param should replace id",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should replace pointer",
      "fullTitle": "joinScope single param should replace pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/joinScope.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return empty list for empty string",
      "fullTitle": "compile.splitRef should return empty list for empty string",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return empty list for root pointer",
      "fullTitle": "compile.splitRef should return empty list for root pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return input pointer",
      "fullTitle": "compile.splitRef should return input pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return input id",
      "fullTitle": "compile.splitRef should return input id",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return sanitized url",
      "fullTitle": "compile.splitRef should return sanitized url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return sanitized url",
      "fullTitle": "compile.splitRef should return sanitized url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return sanitized url and id",
      "fullTitle": "compile.splitRef should return sanitized url and id",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return sanitized url and pointer",
      "fullTitle": "compile.splitRef should return sanitized url and pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compile/splitRef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined for missing schema",
      "fullTitle": "compile behaviour should return undefined for missing schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a copy",
      "fullTitle": "compile behaviour should return a copy",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not copy schema twice",
      "fullTitle": "compile behaviour should not copy schema twice",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not change iterable properties",
      "fullTitle": "compile behaviour should not change iterable properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 9,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should always return json-pointer target",
      "fullTitle": "compile getRef should always return json-pointer target",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a defined $ref with json-pointer",
      "fullTitle": "compile getRef should return a defined $ref with json-pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema defined with referenced ids",
      "fullTitle": "compile getRef should return schema defined with referenced ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema for absolute assembled scope ids",
      "fullTitle": "compile getRef should return schema for absolute assembled scope ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve json-pointer with root-url",
      "fullTitle": "compile getRef should resolve json-pointer with root-url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema defined with referenced ids from root schema",
      "fullTitle": "compile getRef should return schema defined with referenced ids from root schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema defined with referenced ids not using root schema",
      "fullTitle": "compile getRef should return schema defined with referenced ids not using root schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should compile ref to absolute scope",
      "fullTitle": "compile compile ref should compile ref to absolute scope",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should compile ref to absolute scope",
      "fullTitle": "compile compile ref should compile ref to absolute scope",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve absolute url with subfolder",
      "fullTitle": "compile compile ref should resolve absolute url with subfolder",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remotes",
      "fullTitle": "compile getRef remote should resolve remotes",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remotes with trailing '#'",
      "fullTitle": "compile getRef remote should resolve remotes with trailing '#'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve pointer within remote",
      "fullTitle": "compile getRef remote should resolve pointer within remote",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve id within remote",
      "fullTitle": "compile getRef remote should resolve id within remote",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return root",
      "fullTitle": "compile spec ref.json should return root",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return relative pointer",
      "fullTitle": "compile spec ref.json should return relative pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should work on escaped pointer",
      "fullTitle": "compile spec ref.json should work on escaped pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve nested $ref",
      "fullTitle": "compile spec ref.json should resolve nested $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve pointer containing quotes",
      "fullTitle": "compile spec ref.json should resolve pointer containing quotes",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve location independent identifier",
      "fullTitle": "compile spec ref.json should resolve location independent identifier",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve location independent identifier with base uri change in subschema",
      "fullTitle": "compile spec ref.json should resolve location independent identifier with base uri change in subschema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remote ref",
      "fullTitle": "compile draft04Schema spec remoteRef.json should resolve remote ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remote ref with fragment",
      "fullTitle": "compile draft04Schema spec remoteRef.json should resolve remote ref with fragment",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve ref with remote ref",
      "fullTitle": "compile draft04Schema spec remoteRef.json should resolve ref with remote ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should join scope and resolve to remote",
      "fullTitle": "compile draft04Schema spec remoteRef.json should join scope and resolve to remote",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should correctly replace base uri for remote scope updates",
      "fullTitle": "compile draft04Schema spec remoteRef.json should correctly replace base uri for remote scope updates",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve joined remote with root ref",
      "fullTitle": "compile draft04Schema spec remoteRef.json should resolve joined remote with root ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "base URI change ref valid",
      "fullTitle": "compile draft04Schema spec remoteRef.json base URI change base URI change ref valid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "base URI change ref invalid",
      "fullTitle": "compile draft04Schema spec remoteRef.json base URI change base URI change ref invalid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "number is valid",
      "fullTitle": "compile draft04Schema spec remoteRef.json base URI change - change folder number is valid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "string is invalid",
      "fullTitle": "compile draft04Schema spec remoteRef.json base URI change - change folder string is invalid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "$ref resolves to /definitions/base_foo, data does not validate",
      "fullTitle": "compile draft04Schema spec remoteRef.json $ref prevents a sibling id from changing the base uri $ref resolves to /definitions/base_foo, data does not validate",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "$ref resolves to /definitions/base_foo, data validates",
      "fullTitle": "compile draft04Schema spec remoteRef.json $ref prevents a sibling id from changing the base uri $ref resolves to /definitions/base_foo, data validates",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 'string'",
      "fullTitle": "compileV06 01 - refRemote base URI change - base URI change ref invalid should validate 'string'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchemaV6.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 'null'",
      "fullTitle": "compileV06 01 - refRemote base URI change - base URI change ref invalid should validate 'null'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchemaV6.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate 'object'",
      "fullTitle": "compileV06 01 - refRemote base URI change - base URI change ref invalid should not validate 'object'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchemaV6.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate 'string'",
      "fullTitle": "compileV06 02 - refRemote base URI change - base URI change ref invalid should not validate 'string'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchemaV6.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 'number'",
      "fullTitle": "compileV06 02 - refRemote base URI change - base URI change ref invalid should validate 'number'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/compileSchemaV6.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add type 'object' of data to schema",
      "fullTitle": "createSchemaOf should add type 'object' of data to schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/createSchemaOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add type 'string' of data to schema",
      "fullTitle": "createSchemaOf should add type 'string' of data to schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/createSchemaOf.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should should add object's properties",
      "fullTitle": "createSchemaOf should should add object's properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/createSchemaOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add items from array",
      "fullTitle": "createSchemaOf should add items from array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/createSchemaOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add single item as item-object",
      "fullTitle": "createSchemaOf should add single item as item-object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/createSchemaOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "validate should return error",
      "fullTitle": "docs draft methods validate should return error",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "validate should return error for separate schema",
      "fullTitle": "docs draft methods validate should return error for separate schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return data using 'getTemplate'",
      "fullTitle": "docs draft methods should return data using 'getTemplate'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should complement data using 'getTemplate'",
      "fullTitle": "docs draft methods should complement data using 'getTemplate'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call for each data point using 'each",
      "fullTitle": "docs draft methods should call for each data point using 'each",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call for each sub schema",
      "fullTitle": "docs draft methods should call for each sub schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve oneOf item using 'getSchema'",
      "fullTitle": "docs draft methods should resolve oneOf item using 'getSchema'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve from remote schema",
      "fullTitle": "docs draft methods should resolve from remote schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/docs.test.ts",
      "duration": 4,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remote schema from given url",
      "fullTitle": "docs - remote schema should resolve remote schema from given url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/remoteSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve remote schemas from simple ids",
      "fullTitle": "docs - remote schema should resolve remote schemas from simple ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/remoteSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $defs from remote schema",
      "fullTitle": "docs - remote schema should resolve $defs from remote schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/remoteSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $defs from remote schema using simple ids",
      "fullTitle": "docs - remote schema should resolve $defs from remote schema using simple ids",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/remoteSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve pointer to nested object in remote schema",
      "fullTitle": "docs - remote schema should resolve pointer to nested object in remote schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/docs/remoteSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call callback with schema, value and pointer",
      "fullTitle": "each should call callback with schema, value and pointer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/each.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should callback for array and all array items",
      "fullTitle": "each should callback for array and all array items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/each.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should callback for array and pick correct schema forEach item",
      "fullTitle": "each should callback for array and pick correct schema forEach item",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/each.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should callback for object and all properties",
      "fullTitle": "each should callback for object and all properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/each.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve root reference",
      "fullTitle": "each should resolve root reference",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/each.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should execute callback on root-schema",
      "fullTitle": "eachSchema should execute callback on root-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each property schema",
      "fullTitle": "eachSchema should call on each property schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each item schema",
      "fullTitle": "eachSchema should call on each item schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each item property",
      "fullTitle": "eachSchema should call on each item property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each oneOf-schema",
      "fullTitle": "eachSchema should call on each oneOf-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each oneOf-schema in items",
      "fullTitle": "eachSchema should call on each oneOf-schema in items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each anyOf-schema",
      "fullTitle": "eachSchema should call on each anyOf-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each allOf-schema",
      "fullTitle": "eachSchema should call on each allOf-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on definitions",
      "fullTitle": "eachSchema should call on definitions",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on additionalProperties",
      "fullTitle": "eachSchema should call on additionalProperties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should ignore depedency list",
      "fullTitle": "eachSchema should ignore depedency list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call on each depedency schema",
      "fullTitle": "eachSchema should call on each depedency schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should iterate definitions",
      "fullTitle": "eachSchema should iterate definitions",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should iterate over nested definitions",
      "fullTitle": "eachSchema should iterate over nested definitions",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support array-types",
      "fullTitle": "eachSchema should support array-types",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/eachSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a single object-schema as list",
      "fullTitle": "getChildSchemaSelection should return a single object-schema as list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getChildSchemaSelection.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a single array-item as list",
      "fullTitle": "getChildSchemaSelection should return a single array-item as list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getChildSchemaSelection.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return list of oneOf elements",
      "fullTitle": "getChildSchemaSelection should return list of oneOf elements",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getChildSchemaSelection.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve items from oneOf elements",
      "fullTitle": "getChildSchemaSelection should resolve items from oneOf elements",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getChildSchemaSelection.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema of any value",
      "fullTitle": "getSchema value should return schema of any value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve property through root $ref",
      "fullTitle": "getSchema value should resolve property through root $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema of valid property",
      "fullTitle": "getSchema object should return schema of valid property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return `schema-warning` for unknown, but valid property",
      "fullTitle": "getSchema object should return `schema-warning` for unknown, but valid property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return `undefined` for unknown, but valid property",
      "fullTitle": "getSchema object should return `undefined` for unknown, but valid property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema for unknown property if data is passed",
      "fullTitle": "getSchema object should return schema for unknown property if data is passed",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for invalid properties",
      "fullTitle": "getSchema object should return an error for invalid properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for invalid properties, even if value is given",
      "fullTitle": "getSchema object should return an error for invalid properties, even if value is given",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema for property within nested object",
      "fullTitle": "getSchema object should return schema for property within nested object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $ref as property",
      "fullTitle": "getSchema object should resolve $ref as property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return correct 'oneOf' object definition",
      "fullTitle": "getSchema object should return correct 'oneOf' object definition",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'one-of-error' if enforced oneOf schema could not be resolved",
      "fullTitle": "getSchema object should return 'one-of-error' if enforced oneOf schema could not be resolved",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema of matching patternProperty",
      "fullTitle": "getSchema object should return schema of matching patternProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if schema could not be resolved",
      "fullTitle": "getSchema object should return an error if schema could not be resolved",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema from dependencies when dependent property is present",
      "fullTitle": "getSchema object dependencies should return schema from dependencies when dependent property is present",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return then-schema for matching if-schema",
      "fullTitle": "getSchema object if-then-else should return then-schema for matching if-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return else-schema for non-matching if-schema",
      "fullTitle": "getSchema object if-then-else should return else-schema for non-matching if-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return correct schema for duplicate property",
      "fullTitle": "getSchema object if-then-else should return correct schema for duplicate property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return item schema",
      "fullTitle": "getSchema array should return item schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return item schema based on index",
      "fullTitle": "getSchema array should return item schema based on index",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema for matching 'oneOf' item",
      "fullTitle": "getSchema array should return schema for matching 'oneOf' item",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if no matching 'oneOf' item was found",
      "fullTitle": "getSchema array should return error if no matching 'oneOf' item was found",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set an empty string if no default value is given",
      "fullTitle": "getTemplate should set an empty string if no default value is given",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set the first enum option for a missing default",
      "fullTitle": "getTemplate should set the first enum option for a missing default",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support null types",
      "fullTitle": "getTemplate should support null types",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support null type properties",
      "fullTitle": "getTemplate should support null type properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not modify input schema",
      "fullTitle": "getTemplate should not modify input schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set default value for boolean",
      "fullTitle": "getTemplate boolean should set default value for boolean",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given boolean if it is 'false'",
      "fullTitle": "getTemplate boolean should not override given boolean if it is 'false'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given boolean if it is 'true'",
      "fullTitle": "getTemplate boolean should not override given boolean if it is 'true'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set default value for number",
      "fullTitle": "getTemplate number should set default value for number",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given number",
      "fullTitle": "getTemplate number should not override given number",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set default value for integer",
      "fullTitle": "getTemplate integer should set default value for integer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given integer",
      "fullTitle": "getTemplate integer should not override given integer",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return defined properties of object",
      "fullTitle": "getTemplate object properties should return defined properties of object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not fail on falsy input data",
      "fullTitle": "getTemplate object properties should not fail on falsy input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default object if defined",
      "fullTitle": "getTemplate object properties should return default object if defined",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given default values",
      "fullTitle": "getTemplate object properties should not override given default values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should extend given template data by default values",
      "fullTitle": "getTemplate object properties should extend given template data by default values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not remove additional properties `additionalProperties=undefined`",
      "fullTitle": "getTemplate object additionalProperties should not remove additional properties `additionalProperties=undefined`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not remove additional properties `additionalProperties=true`",
      "fullTitle": "getTemplate object additionalProperties should not remove additional properties `additionalProperties=true`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not remove non matching properties",
      "fullTitle": "getTemplate object additionalProperties should not remove non matching properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not remove additional properties with `additionalProperties=false`",
      "fullTitle": "getTemplate object additionalProperties should not remove additional properties with `additionalProperties=false`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should remove unmatched properties with option `removeInvalidData=true`",
      "fullTitle": "getTemplate object additionalProperties should remove unmatched properties with option `removeInvalidData=true`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should remove invalid properties with option `removeInvalidData=true`",
      "fullTitle": "getTemplate object additionalProperties should remove invalid properties with option `removeInvalidData=true`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $ref in object schema",
      "fullTitle": "getTemplate object $ref should resolve $ref in object schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $ref in items-array",
      "fullTitle": "getTemplate object $ref should resolve $ref in items-array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should follow $ref once",
      "fullTitle": "getTemplate object $ref should follow $ref once",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should respect depth of input data in $ref-resolution",
      "fullTitle": "getTemplate object $ref should respect depth of input data in $ref-resolution",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template of draft04",
      "fullTitle": "getTemplate object $ref should create template of draft04",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 2,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return template of first oneOf schema",
      "fullTitle": "getTemplate object oneOf should return template of first oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should extend empty object with first oneOf schema",
      "fullTitle": "getTemplate object oneOf should extend empty object with first oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return template of matching oneOf schema",
      "fullTitle": "getTemplate object oneOf should return template of matching oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return input value if no oneOf-schema matches ",
      "fullTitle": "getTemplate object oneOf should return input value if no oneOf-schema matches ",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not require object type definition in oneOf schemas",
      "fullTitle": "getTemplate object oneOf should not require object type definition in oneOf schemas",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template for merged allOf schema",
      "fullTitle": "getTemplate object allOf should create template for merged allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template for first anyOf schema",
      "fullTitle": "getTemplate object anyOf should create template for first anyOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not add dependency if it is not required",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: false` dependency required should not add dependency if it is not required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add dependency if triggered as required",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: false` dependency required should add dependency if triggered as required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add dependency if initially triggered as required",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: false` dependency required should add dependency if initially triggered as required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not add dependency from schema if it is not required",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: false` dependency schema should not add dependency from schema if it is not required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should add dependency from schema if triggered as required",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: false` dependency schema should add dependency from schema if triggered as required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template for valid dependency",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: true` should create template for valid dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not change passed value of dependency",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: true` should not change passed value of dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not create data for non matching dependency",
      "fullTitle": "getTemplate object dependencies option: `additionalProps: true` should not create data for non matching dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return empty array if minItems = 0",
      "fullTitle": "getTemplate array items:Object should return empty array if minItems = 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return array with minItems",
      "fullTitle": "getTemplate array items:Object should return array with minItems",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default array",
      "fullTitle": "getTemplate array items:Object should return default array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default array even if minItems is not set",
      "fullTitle": "getTemplate array items:Object should return default array even if minItems is not set",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default array if part of object",
      "fullTitle": "getTemplate array items:Object should return default array if part of object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override given default values",
      "fullTitle": "getTemplate array items:Object should not override given default values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should extend given template data by default values",
      "fullTitle": "getTemplate array items:Object should extend given template data by default values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should extend all input objects by missing properties",
      "fullTitle": "getTemplate array items:Object should extend all input objects by missing properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return items in given order",
      "fullTitle": "getTemplate array items:Array should return items in given order",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should replace input data",
      "fullTitle": "getTemplate array items:Array should replace input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should convert input data for strings",
      "fullTitle": "getTemplate array items:Array should convert input data for strings",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should convert input data for numbers",
      "fullTitle": "getTemplate array items:Array should convert input data for numbers",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default value for invalid number",
      "fullTitle": "getTemplate array items:Array should return default value for invalid number",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should convert input data for booleans",
      "fullTitle": "getTemplate array items:Array should convert input data for booleans",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return default value for invalid boolean",
      "fullTitle": "getTemplate array items:Array should return default value for invalid boolean",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return template of first oneOf schema",
      "fullTitle": "getTemplate array items.oneOf should return template of first oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge with input data",
      "fullTitle": "getTemplate array items.oneOf should merge with input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not remove invalid oneOf schema if 'removeInvalidData' is unset",
      "fullTitle": "getTemplate array items.oneOf should not remove invalid oneOf schema if 'removeInvalidData' is unset",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template for merged allOf schema",
      "fullTitle": "getTemplate array items.allOf should create template for merged allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create template for first anyOf schema",
      "fullTitle": "getTemplate array items.anyOf should create template for first anyOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return first schema for mixed types",
      "fullTitle": "getTemplate oneOf should return first schema for mixed types",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return first type of list for template",
      "fullTitle": "getTemplate list of types should return first type of list for template",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return input data",
      "fullTitle": "getTemplate list of types should return input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return type of default value if data is not given",
      "fullTitle": "getTemplate list of types should return type of default value if data is not given",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should remove invalid oneOf schema if 'removeInvalidData=true'",
      "fullTitle": "getTemplate templateOptions should remove invalid oneOf schema if 'removeInvalidData=true'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not add optional properties",
      "fullTitle": "getTemplate templateOptions should not add optional properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set default as value",
      "fullTitle": "getTemplate - v7 should set default as value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should set const as value",
      "fullTitle": "getTemplate - v7 should set const as value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should prefer const over default",
      "fullTitle": "getTemplate - v7 should prefer const over default",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return template of then-schema for valid if-schema",
      "fullTitle": "getTemplate - v7 object if-then-else should return template of then-schema for valid if-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not create data for then-schema if it is not required",
      "fullTitle": "getTemplate - v7 object if-then-else should not create data for then-schema if it is not required",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not return template of then-schema for invalid if-schema",
      "fullTitle": "getTemplate - v7 object if-then-else should not return template of then-schema for invalid if-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return template of else-schema for invalid if-schema",
      "fullTitle": "getTemplate - v7 object if-then-else should return template of else-schema for invalid if-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTemplate7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'string' for \"\"",
      "fullTitle": "getTypeOf should return 'string' for \"\"",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'boolean' for false",
      "fullTitle": "getTypeOf should return 'boolean' for false",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'number' for 0",
      "fullTitle": "getTypeOf should return 'number' for 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'regexp' for /^/",
      "fullTitle": "getTypeOf should return 'regexp' for /^/",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'regexp' for 'new RegExp()'",
      "fullTitle": "getTypeOf should return 'regexp' for 'new RegExp()'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'object' for {}",
      "fullTitle": "getTypeOf should return 'object' for {}",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'array' for []",
      "fullTitle": "getTypeOf should return 'array' for []",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'null' for null",
      "fullTitle": "getTypeOf should return 'null' for null",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'undefined' for undefined",
      "fullTitle": "getTypeOf should return 'undefined' for undefined",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/getTypeOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return correct schema for existing data property 'customField'",
      "fullTitle": "issue#19 - getSchema from dependencies should return correct schema for existing data property 'customField'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue19.getSchema.dependencies.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return correct schema for missing data property 'customField'",
      "fullTitle": "issue#19 - getSchema from dependencies should return correct schema for missing data property 'customField'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue19.getSchema.dependencies.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should append property 'runner' on partial objects",
      "fullTitle": "issue#21 - getTemplate containing refs should append property 'runner' on partial objects",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue21.getTemplate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call for each properties",
      "fullTitle": "issue#22 - eachSchema on root $ref should call for each properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue22.each.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not override input data",
      "fullTitle": "issue#32 - getTemplate ignored input data for integer should not override input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue32.getTemplate.integer.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false for root array",
      "fullTitle": "issue#33 - root oneOf changes type should return false for root array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false for root array",
      "fullTitle": "issue#33 - root oneOf changes type type array should return false for root array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false for root boolean",
      "fullTitle": "issue#33 - root oneOf changes type type array should return false for root boolean",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return true for root string",
      "fullTitle": "issue#33 - root oneOf changes type type array should return true for root string",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return true for root number",
      "fullTitle": "issue#33 - root oneOf changes type type array should return true for root number",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false for property array",
      "fullTitle": "issue#33 - root oneOf changes type variations should return false for property array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false for property boolean",
      "fullTitle": "issue#33 - root oneOf changes type variations should return false for property boolean",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue33.rootOneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return valid default value",
      "fullTitle": "issue#38 - getTemplate anyOf should not modify valid default value should return valid default value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue38.getTemplate.anyOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 1",
      "fullTitle": "issue#43 - multipleOf .01 should validate 1",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate .2",
      "fullTitle": "issue#43 - multipleOf .01 should validate .2",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate .02",
      "fullTitle": "issue#43 - multipleOf .01 should validate .02",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate .025",
      "fullTitle": "issue#43 - multipleOf .01 should not validate .025",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 1.36",
      "fullTitle": "issue#43 - multipleOf .01 should validate 1.36",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 2.74",
      "fullTitle": "issue#43 - multipleOf .01 should validate 2.74",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate 123456789",
      "fullTitle": "issue#43 - multipleOf .01 should validate 123456789",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate Infinity",
      "fullTitle": "issue#43 - multipleOf .01 should not validate Infinity",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate all floats with two decimals",
      "fullTitle": "issue#43 - multipleOf .01 should validate all floats with two decimals",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 2,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still validate multiple of integers",
      "fullTitle": "issue#43 - multipleOf .01 should still validate multiple of integers",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still invalidate non-multiples of integers",
      "fullTitle": "issue#43 - multipleOf .01 should still invalidate non-multiples of integers",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue43.multipleOf.float.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate input data",
      "fullTitle": "issue#44 - chained negative logic should validate input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/issues/issue44.chainedNegLogic.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return true if value is valid",
      "fullTitle": "isValid should return true if value is valid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/isValid.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return false if value is invalid",
      "fullTitle": "isValid should return false if value is invalid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/isValid.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate multiple oneOf validations",
      "fullTitle": "isValid should not validate multiple oneOf validations",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/isValid.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge required statements",
      "fullTitle": "mergeSchema should merge required statements",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/mergeSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge properties",
      "fullTitle": "mergeSchema should merge properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/mergeSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge property",
      "fullTitle": "mergeSchema should merge property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/mergeSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge item property",
      "fullTitle": "mergeSchema should merge item property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/mergeSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should iteratively resolve allOf before merging (issue#44)",
      "fullTitle": "reduceSchema allOf should iteratively resolve allOf before merging (issue#44)",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/reduceSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return oneOf source schema for resolved oneOf object",
      "fullTitle": "reduceSchema oneOf should return oneOf source schema for resolved oneOf object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/reduceSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return merged schema of type string",
      "fullTitle": "resolveAllOf should return merged schema of type string",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return merged schema while resolving $ref",
      "fullTitle": "resolveAllOf should return merged schema while resolving $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return merged properties and attributes",
      "fullTitle": "resolveAllOf should return merged properties and attributes",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return merged required-list of type object",
      "fullTitle": "resolveAllOf should return merged required-list of type object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return unique merged required-list of type object",
      "fullTitle": "resolveAllOf should return unique merged required-list of type object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not return 'then'-schema when 'if' does not match",
      "fullTitle": "resolveAllOf if-then-else should not return 'then'-schema when 'if' does not match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'then'-schema when 'if' does match",
      "fullTitle": "resolveAllOf if-then-else should return 'then'-schema when 'if' does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge multiple 'then'-schema",
      "fullTitle": "resolveAllOf if-then-else should merge multiple 'then'-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge only matching 'if'-schema",
      "fullTitle": "resolveAllOf if-then-else should merge only matching 'if'-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should incrementally resolve multiple 'then'-schema",
      "fullTitle": "resolveAllOf if-then-else should incrementally resolve multiple 'then'-schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveAllOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should correctly merge dependencies",
      "fullTitle": "resolveDynamicSchema dependencies should correctly merge dependencies",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined if dynamic schema is not triggered",
      "fullTitle": "resolveDynamicSchema dependencies should return undefined if dynamic schema is not triggered",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve nested dependencies schema",
      "fullTitle": "resolveDynamicSchema dependencies should resolve nested dependencies schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should select if-then-else schema",
      "fullTitle": "resolveDynamicSchema if-then-else should select if-then-else schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined if dynamic schema is not triggered",
      "fullTitle": "resolveDynamicSchema if-then-else should return undefined if dynamic schema is not triggered",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve nested if-then-else schema",
      "fullTitle": "resolveDynamicSchema if-then-else should resolve nested if-then-else schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return merged allOf schema",
      "fullTitle": "resolveDynamicSchema allOf should return merged allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined if allOf is empty",
      "fullTitle": "resolveDynamicSchema allOf should return undefined if allOf is empty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve nested allOf schema",
      "fullTitle": "resolveDynamicSchema allOf should resolve nested allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should select oneOf schema",
      "fullTitle": "resolveDynamicSchema oneOf should select oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should select correct oneOf schema from oneOfProperty",
      "fullTitle": "resolveDynamicSchema oneOf should select correct oneOf schema from oneOfProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined if anyOf is empty",
      "fullTitle": "resolveDynamicSchema anyOf should return undefined if anyOf is empty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return undefined if no anyOf matches input data",
      "fullTitle": "resolveDynamicSchema anyOf should return undefined if no anyOf matches input data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching oneOf schema",
      "fullTitle": "resolveDynamicSchema anyOf should return matching oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all matching oneOf schema as merged schema",
      "fullTitle": "resolveDynamicSchema anyOf should return all matching oneOf schema as merged schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveDynamicSchema.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema with matching type",
      "fullTitle": "resolveOneOf (fuzzy) should return schema with matching type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema with matching pattern",
      "fullTitle": "resolveOneOf (fuzzy) should return schema with matching pattern",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve $ref before schema",
      "fullTitle": "resolveOneOf (fuzzy) should resolve $ref before schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema with matching properties",
      "fullTitle": "resolveOneOf (fuzzy) object should return schema with matching properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema matching nested properties",
      "fullTitle": "resolveOneOf (fuzzy) object should return schema matching nested properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema matching oneOfProperty",
      "fullTitle": "resolveOneOf (fuzzy) object oneOfProperty should return schema matching oneOfProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema matching oneOfProperty even it is invalid",
      "fullTitle": "resolveOneOf (fuzzy) object oneOfProperty should return schema matching oneOfProperty even it is invalid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if value at oneOfProperty is undefined",
      "fullTitle": "resolveOneOf (fuzzy) object oneOfProperty should return an error if value at oneOfProperty is undefined",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if no oneOfProperty could be matched",
      "fullTitle": "resolveOneOf (fuzzy) object oneOfProperty should return an error if no oneOfProperty could be matched",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema with least missing properties",
      "fullTitle": "resolveOneOf (fuzzy) object fuzzy match missing values should return schema with least missing properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should only count properties that match the schema",
      "fullTitle": "resolveOneOf (fuzzy) object fuzzy match missing values should only count properties that match the schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should find correct pay type",
      "fullTitle": "resolveOneOf (fuzzy) object fuzzy match missing values should find correct pay type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return oneOfError for invalid data",
      "fullTitle": "resolveOneOf (fuzzy) array should return oneOfError for invalid data",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.fuzzy.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema matching oneOfProperty",
      "fullTitle": "oneOfProperty should return schema matching oneOfProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.oneOfProperty.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return schema matching oneOfProperty even it is invalid",
      "fullTitle": "oneOfProperty should return schema matching oneOfProperty even it is invalid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.oneOfProperty.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if value at oneOfProperty is undefined",
      "fullTitle": "oneOfProperty should return an error if value at oneOfProperty is undefined",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.oneOfProperty.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if no oneOfProperty could be matched",
      "fullTitle": "oneOfProperty should return an error if no oneOfProperty could be matched",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/resolveOneOf.oneOfProperty.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all type definitions",
      "fullTitle": "getTypeDefs should return all type definitions",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/schema/getTypeDef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return valid type definitions only",
      "fullTitle": "getTypeDefs should return valid type definitions only",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/schema/getTypeDef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return only valid type definitions from dependencies",
      "fullTitle": "getTypeDefs should return only valid type definitions from dependencies",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/schema/getTypeDef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support both item formats",
      "fullTitle": "getTypeDefs should support both item formats",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/schema/getTypeDef.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should also return type definitions defined as array",
      "fullTitle": "getTypeDefs should also return type definitions defined as array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/schema/getTypeDef.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching schema",
      "fullTitle": "step.oneof should return matching schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.oneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return index of matching schema",
      "fullTitle": "step.oneof should return index of matching schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.oneOf.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should maintain references from a remote schema when resolving oneOf with $ref",
      "fullTitle": "step.oneof should maintain references from a remote schema when resolving oneOf with $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.oneOf.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should maintain references from a remote schema when resolving oneOf with $ref",
      "fullTitle": "step.oneof should maintain references from a remote schema when resolving oneOf with $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.oneOf.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for unknown types",
      "fullTitle": "step should return an error for unknown types",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return object property",
      "fullTitle": "step object should return object property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for unknown property",
      "fullTitle": "step object should return error for unknown property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for unknown property",
      "fullTitle": "step object should return error for unknown property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should create schema for `additionalProperties=true`",
      "fullTitle": "step object should create schema for `additionalProperties=true`",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should treat `additionalProperties` as `true` per default",
      "fullTitle": "step object should treat `additionalProperties` as `true` per default",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if `additionalProperties=false` and property unknown",
      "fullTitle": "step object should return an error if `additionalProperties=false` and property unknown",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching oneOf",
      "fullTitle": "step object should return matching oneOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching oneOf, for objects missing properties",
      "fullTitle": "step object should return matching oneOf, for objects missing properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching anyOf",
      "fullTitle": "step object should return matching anyOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return combined anyOf schema",
      "fullTitle": "step object should return combined anyOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve references from anyOf schema",
      "fullTitle": "step object should resolve references from anyOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching allOf schema",
      "fullTitle": "step object should return matching allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve references in allOf schema",
      "fullTitle": "step object should resolve references in allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching patternProperty",
      "fullTitle": "step object should return matching patternProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return additionalProperties schema for not matching patternProperty",
      "fullTitle": "step object should return additionalProperties schema for not matching patternProperty",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for invalid array schema",
      "fullTitle": "step array should return an error for invalid array schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return item property",
      "fullTitle": "step array should return item property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return item at index",
      "fullTitle": "step array should return item at index",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching item in oneOf",
      "fullTitle": "step array should return matching item in oneOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return matching anyOf",
      "fullTitle": "step array should return matching anyOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return combined anyOf schema",
      "fullTitle": "step array should return combined anyOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return combined allOf schema",
      "fullTitle": "step array should return combined allOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a generated schema with additionalItems",
      "fullTitle": "step array should return a generated schema with additionalItems",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/step/step.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return decimal precision",
      "fullTitle": "getPrecision should return decimal precision",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/utils/getPrecision.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should merge objects",
      "fullTitle": "merge should merge objects",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/utils/merge.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should replace arrays",
      "fullTitle": "merge should replace arrays",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/utils/merge.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not modify input values",
      "fullTitle": "merge should not modify input values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/utils/merge.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate HH:mm:ss",
      "fullTitle": "validate format time should validate HH:mm:ss",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate HH:mm:ss.s",
      "fullTitle": "validate format time should validate HH:mm:ss.s",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate HH:mm:ss-HH:mm",
      "fullTitle": "validate format time should validate HH:mm:ss-HH:mm",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate HH:mm:ssZ",
      "fullTitle": "validate format time should validate HH:mm:ssZ",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate minutes above 59",
      "fullTitle": "validate format time should not validate minutes above 59",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate seconds above 59",
      "fullTitle": "validate format time should not validate seconds above 59",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate HH:mm",
      "fullTitle": "validate format time should not validate HH:mm",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate format url",
      "fullTitle": "validate format url should validate format url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error UrlFormatError for invalid urls",
      "fullTitle": "validate format url should return error UrlFormatError for invalid urls",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.format.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support type 'integer'",
      "fullTitle": "validate integer should support type 'integer'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should throw error if type 'integer' received a float",
      "fullTitle": "validate integer should throw error if type 'integer' received a float",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate NaN",
      "fullTitle": "validate integer should validate NaN",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate on a matching oneOf definition",
      "fullTitle": "validate integer oneOf should validate on a matching oneOf definition",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for multiple matching oneOf schemas",
      "fullTitle": "validate integer oneOf should return an error for multiple matching oneOf schemas",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate if all allOf-schemas are valid",
      "fullTitle": "validate integer allOf should validate if all allOf-schemas are valid",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if not all schemas match",
      "fullTitle": "validate integer allOf should return error if not all schemas match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all errors for each non-matching schemas",
      "fullTitle": "validate integer allOf should return all errors for each non-matching schemas",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate if one schemas in anyOf validates",
      "fullTitle": "validate integer anyOf should validate if one schemas in anyOf validates",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if not all schemas match",
      "fullTitle": "validate integer anyOf should return error if not all schemas match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate null",
      "fullTitle": "validate integer anyOf should validate null",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if invalid null",
      "fullTitle": "validate integer anyOf should return error if invalid null",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve references",
      "fullTitle": "validate integer anyOf should resolve references",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still be valid for missing type",
      "fullTitle": "validate object should still be valid for missing type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all errors",
      "fullTitle": "validate object should return all errors",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "shoud return errors for missing `required` properties",
      "fullTitle": "validate object required shoud return errors for missing `required` properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MinPropertiesError for too few properties",
      "fullTitle": "validate object min/maxProperties should return MinPropertiesError for too few properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MaxPropertiesError for too many properties",
      "fullTitle": "validate object min/maxProperties should return MaxPropertiesError for too many properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if property count is within range",
      "fullTitle": "validate object min/maxProperties should be valid if property count is within range",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if 'not' keyword does match",
      "fullTitle": "validate object not should be invalid if 'not' keyword does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate matching oneOf",
      "fullTitle": "validate object oneOf should validate matching oneOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for non-matching oneOf",
      "fullTitle": "validate object oneOf should return error for non-matching oneOf",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return AdditionalPropertiesError for an additional property",
      "fullTitle": "validate object additionalProperties should return AdditionalPropertiesError for an additional property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all AdditionalPropertiesErrors",
      "fullTitle": "validate object additionalProperties should return all AdditionalPropertiesErrors",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if 'additionalProperties' is 'true'",
      "fullTitle": "validate object additionalProperties should be valid if 'additionalProperties' is 'true'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if value matches 'additionalProperties' schema",
      "fullTitle": "validate object additionalProperties should be valid if value matches 'additionalProperties' schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should only validate existing definition in 'properties'",
      "fullTitle": "validate object additionalProperties should only validate existing definition in 'properties'",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if value does not match 'additionalProperties' schema",
      "fullTitle": "validate object additionalProperties should return error if value does not match 'additionalProperties' schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if value matches 'additionalProperties' oneOf schema",
      "fullTitle": "validate object additionalProperties should be valid if value matches 'additionalProperties' oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if value does not match 'additionalProperties' in oneOf schema",
      "fullTitle": "validate object additionalProperties should be invalid if value does not match 'additionalProperties' in oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be ignore properties that are matched by patternProperties",
      "fullTitle": "validate object additionalProperties should be ignore properties that are matched by patternProperties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if value does match multiple 'additionalProperties' in oneOf schema",
      "fullTitle": "validate object additionalProperties should be invalid if value does match multiple 'additionalProperties' in oneOf schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for matching pattern and failed validation",
      "fullTitle": "validate object patternProperties should return an error for matching pattern and failed validation",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate a correct matching pattern",
      "fullTitle": "validate object patternProperties should validate a correct matching pattern",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error for matching regex pattern and failed validation",
      "fullTitle": "validate object patternProperties should return an error for matching regex pattern and failed validation",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should invalidate defined property",
      "fullTitle": "validate object patternProperties should invalidate defined property",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return 'PatternPropertiesError' if additional properties are not allowed",
      "fullTitle": "validate object patternProperties should return 'PatternPropertiesError' if additional properties are not allowed",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an error if one of the matching patterns does not validate",
      "fullTitle": "validate object patternProperties should return an error if one of the matching patterns does not validate",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return no error if additional properties are not allowed but valid in patterns",
      "fullTitle": "validate object patternProperties should return no error if additional properties are not allowed but valid in patterns",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return no error if additional properties validate value",
      "fullTitle": "validate object patternProperties should return no error if additional properties validate value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return an AdditionalPropertiesError if additional properties do not validate",
      "fullTitle": "validate object patternProperties should return an AdditionalPropertiesError if additional properties do not validate",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should ignore any dependencies if the property is no set",
      "fullTitle": "validate object dependencies should ignore any dependencies if the property is no set",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a 'MissingDependencyError' if the dependent property is missing",
      "fullTitle": "validate object dependencies should return a 'MissingDependencyError' if the dependent property is missing",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a 'MissingDependencyError' if the dependent counterpart is missing",
      "fullTitle": "validate object dependencies should return a 'MissingDependencyError' if the dependent counterpart is missing",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid for a matching schema dependency",
      "fullTitle": "validate object dependencies should be valid for a matching schema dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return validation error for a non-matching schema dependency",
      "fullTitle": "validate object dependencies should return validation error for a non-matching schema dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for invalid index",
      "fullTitle": "validate array should return error for invalid index",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid for matching indices",
      "fullTitle": "validate array should be valid for matching indices",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return all errors",
      "fullTitle": "validate array should return all errors",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MinItemsError for too few items",
      "fullTitle": "validate array min/maxItems should return MinItemsError for too few items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MaxItemsError for too many items",
      "fullTitle": "validate array min/maxItems should return MaxItemsError for too many items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if item count is within range",
      "fullTitle": "validate array min/maxItems should be valid if item count is within range",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still be valid for missing type",
      "fullTitle": "validate array min/maxItems should still be valid for missing type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for prohibited additional items",
      "fullTitle": "validate array additionalItems should return error for prohibited additional items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if 'additionalItems' is true",
      "fullTitle": "validate array additionalItems should be valid if 'additionalItems' is true",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should also be valid if 'additionalItems' is undefined",
      "fullTitle": "validate array additionalItems should also be valid if 'additionalItems' is undefined",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for mismatching 'additionalItems' schema",
      "fullTitle": "validate array additionalItems should return error for mismatching 'additionalItems' schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid for matching 'additionalItems' schema",
      "fullTitle": "validate array additionalItems should be valid for matching 'additionalItems' schema",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if 'not' keyword does match",
      "fullTitle": "validate array not should be invalid if 'not' keyword does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate for duplicated values",
      "fullTitle": "validate array uniqueItems should not validate for duplicated values",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not validate for duplicated objects",
      "fullTitle": "validate array uniqueItems should not validate for duplicated objects",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate for mismatching objects with equal properties",
      "fullTitle": "validate array uniqueItems should validate for mismatching objects with equal properties",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return no error for valid oneOf items",
      "fullTitle": "validate array oneOf should return no error for valid oneOf items",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if no item does match",
      "fullTitle": "validate array oneOf should return error if no item does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MultipleOneOfError if multiple oneOf definitions match the given value",
      "fullTitle": "validate array oneOf should return MultipleOneOfError if multiple oneOf definitions match the given value",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MinLengthError if string is too short",
      "fullTitle": "validate string should return MinLengthError if string is too short",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MaxLengthError if string is too long",
      "fullTitle": "validate string should return MaxLengthError if string is too long",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if string is within range",
      "fullTitle": "validate string should be valid if string is within range",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still be valid for missing type",
      "fullTitle": "validate string should still be valid for missing type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return EnumError if value is not within enum list",
      "fullTitle": "validate string should return EnumError if value is not within enum list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if value is within enum list",
      "fullTitle": "validate string should be valid if value is within enum list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if 'not' keyword does match",
      "fullTitle": "validate string should be invalid if 'not' keyword does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MinimumError if number is too small",
      "fullTitle": "validate number should return MinimumError if number is too small",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MinimumError if number is equal and exclusiveMinimum is set",
      "fullTitle": "validate number should return MinimumError if number is equal and exclusiveMinimum is set",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MaximumError if number is too large",
      "fullTitle": "validate number should return MaximumError if number is too large",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return MaximumError if number same and exclusiveMaximum is set",
      "fullTitle": "validate number should return MaximumError if number same and exclusiveMaximum is set",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if number is within range",
      "fullTitle": "validate number should be valid if number is within range",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should still be valid for missing type",
      "fullTitle": "validate number should still be valid for missing type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate NaN",
      "fullTitle": "validate number should validate NaN",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return EnumError if value is not within enum list",
      "fullTitle": "validate number should return EnumError if value is not within enum list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if value is within enum list",
      "fullTitle": "validate number should be valid if value is within enum list",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error if value is not multiple of 1.5",
      "fullTitle": "validate number should return error if value is not multiple of 1.5",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if value if a multiple of 1.5",
      "fullTitle": "validate number should be valid if value if a multiple of 1.5",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be valid if 'multipleOf' is not a number",
      "fullTitle": "validate number should be valid if 'multipleOf' is not a number",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should be invalid if 'not' keyword does match",
      "fullTitle": "validate number should be invalid if 'not' keyword does match",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should not return an error for a valid type",
      "fullTitle": "validate arrays of types should not return an error for a valid type",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a TypeError if passed type is not within array",
      "fullTitle": "validate arrays of types should return a TypeError if passed type is not within array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should support 'integer' as a valid type within array",
      "fullTitle": "validate arrays of types should support 'integer' as a valid type within array",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate a matching value within enum",
      "fullTitle": "validate heterogeneous types enum should validate a matching value within enum",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate a matching array within enum",
      "fullTitle": "validate heterogeneous types enum should validate a matching array within enum",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate a matching object within enum",
      "fullTitle": "validate heterogeneous types enum should validate a matching object within enum",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for non-matching object",
      "fullTitle": "validate heterogeneous types enum should return error for non-matching object",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return error for invalid null",
      "fullTitle": "validate heterogeneous types enum should return error for invalid null",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should correctly validate data through nested $ref",
      "fullTitle": "validate heterogeneous types $ref should correctly validate data through nested $ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should correctly validate combination of remote, allOf, and allOf-$ref",
      "fullTitle": "validate heterogeneous types $ref should correctly validate combination of remote, allOf, and allOf-$ref",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 3,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should correctly resolve local remote url",
      "fullTitle": "validate heterogeneous types $ref should correctly resolve local remote url",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validate.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return a promise",
      "fullTitle": "validateAsync should return a promise",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateAsync.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve successfull with an empty error",
      "fullTitle": "validateAsync should resolve successfull with an empty error",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateAsync.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should resolve with errors for a failed validation",
      "fullTitle": "validateAsync should resolve with errors for a failed validation",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateAsync.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should call onProgress immediately with error",
      "fullTitle": "validateAsync onError should call onProgress immediately with error",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateAsync.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should fail if value is equal to 0",
      "fullTitle": "validate draft07 integer exclusiveMaximum should fail if value is equal to 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should succeed if value is below to 0",
      "fullTitle": "validate draft07 integer exclusiveMaximum should succeed if value is below to 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should fail if value is equal to 0",
      "fullTitle": "validate draft07 integer exclusiveMinimum should fail if value is equal to 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should succeed if value is above to 0",
      "fullTitle": "validate draft07 integer exclusiveMinimum should succeed if value is above to 0",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate if-then constructs",
      "fullTitle": "validate draft07 integer if-then-else should validate if-then constructs",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should validate if-else constructs",
      "fullTitle": "validate draft07 integer if-then-else should validate if-else constructs",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 0,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    },
    {
      "title": "should return correct error for invalid dependency",
      "fullTitle": "validate draft07 object dependencies should return correct error for invalid dependency",
      "file": "/Users/saschagoldhofer/Arbeit/versioned/sagold/json-schema-library/test/unit/validateV7.test.ts",
      "duration": 1,
      "currentRetry": 0,
      "speed": "fast",
      "err": {}
    }
  ]
}