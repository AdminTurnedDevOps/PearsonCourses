import { parse } from 'graphql';
import { QueryStore } from './query';
const MAX_QUERY_SIZE = 100000;
export class HistoryStore {
    constructor(storage, maxHistoryLength) {
        this.storage = storage;
        this.maxHistoryLength = maxHistoryLength;
        this.updateHistory = ({ query, variables, headers, operationName, }) => {
            if (!this.shouldSaveQuery(query, variables, headers, this.history.fetchRecent())) {
                return;
            }
            this.history.push({
                query,
                variables,
                headers,
                operationName,
            });
            const historyQueries = this.history.items;
            const favoriteQueries = this.favorite.items;
            this.queries = historyQueries.concat(favoriteQueries);
        };
        this.deleteHistory = ({ query, variables, headers, operationName, favorite }, clearFavorites = false) => {
            function deleteFromStore(store) {
                const found = store.items.find(x => x.query === query &&
                    x.variables === variables &&
                    x.headers === headers &&
                    x.operationName === operationName);
                if (found) {
                    store.delete(found);
                }
            }
            if (favorite || clearFavorites) {
                deleteFromStore(this.favorite);
            }
            if (!favorite || clearFavorites) {
                deleteFromStore(this.history);
            }
            this.queries = [...this.history.items, ...this.favorite.items];
        };
        this.history = new QueryStore('queries', this.storage, this.maxHistoryLength);
        this.favorite = new QueryStore('favorites', this.storage, null);
        this.queries = [...this.history.fetchAll(), ...this.favorite.fetchAll()];
    }
    shouldSaveQuery(query, variables, headers, lastQuerySaved) {
        if (!query) {
            return false;
        }
        try {
            parse(query);
        }
        catch (_a) {
            return false;
        }
        if (query.length > MAX_QUERY_SIZE) {
            return false;
        }
        if (!lastQuerySaved) {
            return true;
        }
        if (JSON.stringify(query) === JSON.stringify(lastQuerySaved.query)) {
            if (JSON.stringify(variables) === JSON.stringify(lastQuerySaved.variables)) {
                if (JSON.stringify(headers) === JSON.stringify(lastQuerySaved.headers)) {
                    return false;
                }
                if (headers && !lastQuerySaved.headers) {
                    return false;
                }
            }
            if (variables && !lastQuerySaved.variables) {
                return false;
            }
        }
        return true;
    }
    toggleFavorite({ query, variables, headers, operationName, label, favorite, }) {
        const item = {
            query,
            variables,
            headers,
            operationName,
            label,
        };
        if (favorite) {
            item.favorite = false;
            this.favorite.delete(item);
            this.history.push(item);
        }
        else {
            item.favorite = true;
            this.favorite.push(item);
            this.history.delete(item);
        }
        this.queries = [...this.history.items, ...this.favorite.items];
    }
    editLabel({ query, variables, headers, operationName, label, favorite, }, index) {
        const item = {
            query,
            variables,
            headers,
            operationName,
            label,
        };
        if (favorite) {
            this.favorite.edit(Object.assign(Object.assign({}, item), { favorite }), index);
        }
        else {
            this.history.edit(item, index);
        }
        this.queries = [...this.history.items, ...this.favorite.items];
    }
}
//# sourceMappingURL=history.js.map