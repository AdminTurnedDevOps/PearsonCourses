{"version":3,"file":"searchcursor.cjs2.js","sources":["../../../node_modules/codemirror/addon/search/searchcursor.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp), target = current\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)\n      target += flags.charAt(i)\n    return current == target ? regexp : new RegExp(regexp.source, target)\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp, endMargin) {\n    var match, from = 0\n    while (from <= string.length) {\n      regexp.lastIndex = from\n      var newMatch = regexp.exec(string)\n      if (!newMatch) break\n      var end = newMatch.index + newMatch[0].length\n      if (end > string.length - endMargin) break\n      if (!match || end > match.index + match[0].length)\n        match = newMatch\n      from = newMatch.index + 1\n    }\n    return match\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpBackward(doc, regexp, start)\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunkSize = 1, endMargin = doc.getLine(start.line).length - start.ch\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunkSize && line >= first; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine : curLine + \"\\n\" + string\n      }\n      chunkSize *= 2\n\n      var match = lastMatchIn(string, regexp, endMargin)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (endString.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.afterEmptyMatch = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureFlags(query, \"gm\")\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      if (this.afterEmptyMatch && this.atOccurrence) {\n        // do not return the same 0 width match twice\n        head = Pos(head.line, head.ch)\n        if (reverse) {\n          head.ch--;\n          if (head.ch < 0) {\n            head.line--;\n            head.ch = (this.doc.getLine(head.line) || \"\").length;\n          }\n        } else {\n          head.ch++;\n          if (head.ch > (this.doc.getLine(head.line) || \"\").length) {\n            head.ch = 0;\n            head.line++;\n          }\n        }\n        if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n           return this.atOccurrence = false\n        }\n      }\n      var result = this.matches(reverse, head)\n      this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n"],"names":["require$$0","pos"],"mappings":"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","x_google_ignoreList":[0]}