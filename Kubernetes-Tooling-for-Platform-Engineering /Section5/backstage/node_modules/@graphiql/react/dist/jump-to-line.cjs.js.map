{"version":3,"file":"jump-to-line.cjs.js","sources":["../../../node_modules/codemirror/addon/search/jump-to-line.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Defines jumpToLine command. Uses dialog.js if present.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  // default search panel location\n  CodeMirror.defineOption(\"search\", {bottom: false});\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true, bottom: cm.options.search.bottom});\n    else f(prompt(shortText, deflt));\n  }\n\n  function getJumpDialog(cm) {\n    return cm.phrase(\"Jump to line:\") + ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use line:column or scroll% syntax)\") + '</span>';\n  }\n\n  function interpretLine(cm, string) {\n    var num = Number(string)\n    if (/^[-+]/.test(string)) return cm.getCursor().line + num\n    else return num - 1\n  }\n\n  CodeMirror.commands.jumpToLine = function(cm) {\n    var cur = cm.getCursor();\n    dialog(cm, getJumpDialog(cm), cm.phrase(\"Jump to line:\"), (cur.line + 1) + \":\" + cur.ch, function(posStr) {\n      if (!posStr) return;\n\n      var match;\n      if (match = /^\\s*([\\+\\-]?\\d+)\\s*\\:\\s*(\\d+)\\s*$/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), Number(match[2]))\n      } else if (match = /^\\s*([\\+\\-]?\\d+(\\.\\d+)?)\\%\\s*/.exec(posStr)) {\n        var line = Math.round(cm.lineCount() * Number(match[1]) / 100);\n        if (/^[-+]/.test(match[1])) line = cur.line + line + 1;\n        cm.setCursor(line - 1, cur.ch);\n      } else if (match = /^\\s*\\:?\\s*([\\+\\-]?\\d+)\\s*/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), cur.ch);\n      }\n    });\n  };\n\n  CodeMirror.keyMap[\"default\"][\"Alt-G\"] = \"jumpToLine\";\n});\n"],"names":["require$$0","require$$1","dialog"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAKA,GAAC,SAAS,KAAK;AAEX,QAAIA,WAAAA,qBAAiCC,OAAAA,aAA2B;AAAA,EAKnE,GAAE,SAAS,YAAY;AAItB,eAAW,aAAa,UAAU,EAAC,QAAQ,MAAK,CAAC;AAEjD,aAASC,QAAO,IAAI,MAAM,WAAW,OAAO,GAAG;AAC7C,UAAI,GAAG,WAAY,IAAG,WAAW,MAAM,GAAG,EAAC,OAAO,OAAO,mBAAmB,MAAM,QAAQ,GAAG,QAAQ,OAAO,OAAM,CAAC;AAAA,UAC9G,GAAE,OAAO,WAAW,KAAK,CAAC;AAAA,IAChC;AAED,aAAS,cAAc,IAAI;AACzB,aAAO,GAAG,OAAO,eAAe,IAAI,wIAAwI,GAAG,OAAO,qCAAqC,IAAI;AAAA,IAChO;AAED,aAAS,cAAc,IAAI,QAAQ;AACjC,UAAI,MAAM,OAAO,MAAM;AACvB,UAAI,QAAQ,KAAK,MAAM,EAAG,QAAO,GAAG,UAAS,EAAG,OAAO;AAAA,UAClD,QAAO,MAAM;AAAA,IACnB;AAED,eAAW,SAAS,aAAa,SAAS,IAAI;AAC5C,UAAI,MAAM,GAAG;AACb,MAAAA,QAAO,IAAI,cAAc,EAAE,GAAG,GAAG,OAAO,eAAe,GAAI,IAAI,OAAO,IAAK,MAAM,IAAI,IAAI,SAAS,QAAQ;AACxG,YAAI,CAAC,OAAQ;AAEb,YAAI;AACJ,YAAI,QAAQ,oCAAoC,KAAK,MAAM,GAAG;AAC5D,aAAG,UAAU,cAAc,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,MAAM,CAAC,CAAC,CAAC;AAAA,QAC3D,WAAU,QAAQ,gCAAgC,KAAK,MAAM,GAAG;AAC/D,cAAI,OAAO,KAAK,MAAM,GAAG,UAAS,IAAK,OAAO,MAAM,CAAC,CAAC,IAAI,GAAG;AAC7D,cAAI,QAAQ,KAAK,MAAM,CAAC,CAAC,EAAG,QAAO,IAAI,OAAO,OAAO;AACrD,aAAG,UAAU,OAAO,GAAG,IAAI,EAAE;AAAA,QAC9B,WAAU,QAAQ,4BAA4B,KAAK,MAAM,GAAG;AAC3D,aAAG,UAAU,cAAc,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,EAAE;AAAA,QACjD;AAAA,MACP,CAAK;AAAA,IACL;AAEE,eAAW,OAAO,SAAS,EAAE,OAAO,IAAI;AAAA,EAC1C,CAAC;;;;;;;;;","x_google_ignoreList":[0]}