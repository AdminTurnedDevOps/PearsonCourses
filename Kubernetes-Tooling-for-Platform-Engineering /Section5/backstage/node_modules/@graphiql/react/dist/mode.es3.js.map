{"version":3,"file":"mode.es3.js","sources":["../../codemirror-graphql/esm/results/mode.js"],"sourcesContent":["import CodeMirror from 'codemirror';\nimport { list, t, onlineParser, p } from 'graphql-language-service';\nimport indent from '../utils/mode-indent';\nCodeMirror.defineMode('graphql-results', config => {\n    const parser = onlineParser({\n        eatWhitespace: stream => stream.eatSpace(),\n        lexRules: LexRules,\n        parseRules: ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config,\n        startState: parser.startState,\n        token: parser.token,\n        indent,\n        electricInput: /^\\s*[}\\]]/,\n        fold: 'brace',\n        closeBrackets: {\n            pairs: '[]{}\"\"',\n            explode: '[]{}',\n        },\n    };\n});\nconst LexRules = {\n    Punctuation: /^\\[|]|\\{|\\}|:|,/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n    Keyword: /^true|false|null/,\n};\nconst ParseRules = {\n    Document: [p('{'), list('Entry', p(',')), p('}')],\n    Entry: [t('String', 'def'), p(':'), 'Value'],\n    Value(token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                }\n                return null;\n            case 'Keyword':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                    case 'null':\n                        return 'NullValue';\n                }\n                return null;\n        }\n    },\n    NumberValue: [t('Number', 'number')],\n    StringValue: [t('String', 'string')],\n    BooleanValue: [t('Keyword', 'builtin')],\n    NullValue: [t('Keyword', 'keyword')],\n    ListValue: [p('['), list('Value', p(',')), p(']')],\n    ObjectValue: [p('{'), list('ObjectField', p(',')), p('}')],\n    ObjectField: [t('String', 'property'), p(':'), 'Value'],\n};\n//# sourceMappingURL=mode.js.map"],"names":[],"mappings":";;;AAGA,WAAW,WAAW,mBAAmB,YAAU;AAC/C,QAAM,SAAS,aAAa;AAAA,IACxB,eAAe,YAAU,OAAO,SAAU;AAAA,IAC1C,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,cAAc,EAAE,SAAS,OAAO,QAAS;AAAA,EACjD,CAAK;AACD,SAAO;AAAA,IACH;AAAA,IACA,YAAY,OAAO;AAAA,IACnB,OAAO,OAAO;AAAA,IACd;AAAA,IACA,eAAe;AAAA,IACf,MAAM;AAAA,IACN,eAAe;AAAA,MACX,OAAO;AAAA,MACP,SAAS;AAAA,IACZ;AAAA,EACT;AACA,CAAC;AACD,MAAM,WAAW;AAAA,EACb,aAAa;AAAA,EACb,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,SAAS;AACb;AACA,MAAM,aAAa;AAAA,EACf,UAAU,CAAC,EAAE,GAAG,GAAG,KAAK,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;AAAA,EAChD,OAAO,CAAC,EAAE,UAAU,KAAK,GAAG,EAAE,GAAG,GAAG,OAAO;AAAA,EAC3C,MAAM,OAAO;AACT,YAAQ,MAAM,MAAI;AAAA,MACd,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,eAAO;AAAA,MACX,KAAK;AACD,gBAAQ,MAAM,OAAK;AAAA,UACf,KAAK;AACD,mBAAO;AAAA,UACX,KAAK;AACD,mBAAO;AAAA,QACd;AACD,eAAO;AAAA,MACX,KAAK;AACD,gBAAQ,MAAM,OAAK;AAAA,UACf,KAAK;AAAA,UACL,KAAK;AACD,mBAAO;AAAA,UACX,KAAK;AACD,mBAAO;AAAA,QACd;AACD,eAAO;AAAA,IACd;AAAA,EACJ;AAAA,EACD,aAAa,CAAC,EAAE,UAAU,QAAQ,CAAC;AAAA,EACnC,aAAa,CAAC,EAAE,UAAU,QAAQ,CAAC;AAAA,EACnC,cAAc,CAAC,EAAE,WAAW,SAAS,CAAC;AAAA,EACtC,WAAW,CAAC,EAAE,WAAW,SAAS,CAAC;AAAA,EACnC,WAAW,CAAC,EAAE,GAAG,GAAG,KAAK,SAAS,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;AAAA,EACjD,aAAa,CAAC,EAAE,GAAG,GAAG,KAAK,eAAe,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;AAAA,EACzD,aAAa,CAAC,EAAE,UAAU,UAAU,GAAG,EAAE,GAAG,GAAG,OAAO;AAC1D;"}