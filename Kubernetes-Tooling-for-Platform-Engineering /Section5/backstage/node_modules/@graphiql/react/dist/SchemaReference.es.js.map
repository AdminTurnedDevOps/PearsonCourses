{"version":3,"file":"SchemaReference.es.js","sources":["../../codemirror-graphql/esm/utils/getTypeInfo.js","../../codemirror-graphql/esm/utils/SchemaReference.js"],"sourcesContent":["import { isCompositeType, getNullableType, getNamedType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, } from 'graphql';\nimport forEachState from './forEachState';\nexport default function getTypeInfo(schema, tokenState) {\n    const info = {\n        schema,\n        type: null,\n        parentType: null,\n        inputType: null,\n        directiveDef: null,\n        fieldDef: null,\n        argDef: null,\n        argDefs: null,\n        objectFieldDefs: null,\n    };\n    forEachState(tokenState, (state) => {\n        var _a, _b;\n        switch (state.kind) {\n            case 'Query':\n            case 'ShortQuery':\n                info.type = schema.getQueryType();\n                break;\n            case 'Mutation':\n                info.type = schema.getMutationType();\n                break;\n            case 'Subscription':\n                info.type = schema.getSubscriptionType();\n                break;\n            case 'InlineFragment':\n            case 'FragmentDefinition':\n                if (state.type) {\n                    info.type = schema.getType(state.type);\n                }\n                break;\n            case 'Field':\n            case 'AliasedField':\n                info.fieldDef =\n                    info.type && state.name\n                        ? getFieldDef(schema, info.parentType, state.name)\n                        : null;\n                info.type = (_a = info.fieldDef) === null || _a === void 0 ? void 0 : _a.type;\n                break;\n            case 'SelectionSet':\n                info.parentType = info.type ? getNamedType(info.type) : null;\n                break;\n            case 'Directive':\n                info.directiveDef = state.name ? schema.getDirective(state.name) : null;\n                break;\n            case 'Arguments':\n                const parentDef = state.prevState\n                    ? state.prevState.kind === 'Field'\n                        ? info.fieldDef\n                        : state.prevState.kind === 'Directive'\n                            ? info.directiveDef\n                            : state.prevState.kind === 'AliasedField'\n                                ? state.prevState.name &&\n                                    getFieldDef(schema, info.parentType, state.prevState.name)\n                                : null\n                    : null;\n                info.argDefs = parentDef ? parentDef.args : null;\n                break;\n            case 'Argument':\n                info.argDef = null;\n                if (info.argDefs) {\n                    for (let i = 0; i < info.argDefs.length; i++) {\n                        if (info.argDefs[i].name === state.name) {\n                            info.argDef = info.argDefs[i];\n                            break;\n                        }\n                    }\n                }\n                info.inputType = (_b = info.argDef) === null || _b === void 0 ? void 0 : _b.type;\n                break;\n            case 'EnumValue':\n                const enumType = info.inputType ? getNamedType(info.inputType) : null;\n                info.enumValue =\n                    enumType instanceof GraphQLEnumType\n                        ? find(enumType.getValues(), val => val.value === state.name)\n                        : null;\n                break;\n            case 'ListValue':\n                const nullableType = info.inputType\n                    ? getNullableType(info.inputType)\n                    : null;\n                info.inputType =\n                    nullableType instanceof GraphQLList ? nullableType.ofType : null;\n                break;\n            case 'ObjectValue':\n                const objectType = info.inputType ? getNamedType(info.inputType) : null;\n                info.objectFieldDefs =\n                    objectType instanceof GraphQLInputObjectType\n                        ? objectType.getFields()\n                        : null;\n                break;\n            case 'ObjectField':\n                const objectField = state.name && info.objectFieldDefs\n                    ? info.objectFieldDefs[state.name]\n                    : null;\n                info.inputType = objectField === null || objectField === void 0 ? void 0 : objectField.type;\n                info.fieldDef = objectField;\n                break;\n            case 'NamedType':\n                info.type = state.name ? schema.getType(state.name) : null;\n                break;\n        }\n    });\n    return info;\n}\nfunction getFieldDef(schema, type, fieldName) {\n    if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === type) {\n        return SchemaMetaFieldDef;\n    }\n    if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === type) {\n        return TypeMetaFieldDef;\n    }\n    if (fieldName === TypeNameMetaFieldDef.name && isCompositeType(type)) {\n        return TypeNameMetaFieldDef;\n    }\n    if (type && type.getFields) {\n        return type.getFields()[fieldName];\n    }\n}\nfunction find(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i])) {\n            return array[i];\n        }\n    }\n}\n//# sourceMappingURL=getTypeInfo.js.map","import { getNamedType } from 'graphql';\nexport function getFieldReference(typeInfo) {\n    return {\n        kind: 'Field',\n        schema: typeInfo.schema,\n        field: typeInfo.fieldDef,\n        type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n    };\n}\nexport function getDirectiveReference(typeInfo) {\n    return {\n        kind: 'Directive',\n        schema: typeInfo.schema,\n        directive: typeInfo.directiveDef,\n    };\n}\nexport function getArgumentReference(typeInfo) {\n    return typeInfo.directiveDef\n        ? {\n            kind: 'Argument',\n            schema: typeInfo.schema,\n            argument: typeInfo.argDef,\n            directive: typeInfo.directiveDef,\n        }\n        : {\n            kind: 'Argument',\n            schema: typeInfo.schema,\n            argument: typeInfo.argDef,\n            field: typeInfo.fieldDef,\n            type: isMetaField(typeInfo.fieldDef) ? null : typeInfo.parentType,\n        };\n}\nexport function getEnumValueReference(typeInfo) {\n    return {\n        kind: 'EnumValue',\n        value: typeInfo.enumValue || undefined,\n        type: typeInfo.inputType\n            ? getNamedType(typeInfo.inputType)\n            : undefined,\n    };\n}\nexport function getTypeReference(typeInfo, type) {\n    return {\n        kind: 'Type',\n        schema: typeInfo.schema,\n        type: type || typeInfo.type,\n    };\n}\nfunction isMetaField(fieldDef) {\n    return fieldDef.name.slice(0, 2) === '__';\n}\n//# sourceMappingURL=SchemaReference.js.map"],"names":[],"mappings":"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"}