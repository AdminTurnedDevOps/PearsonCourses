{"version":3,"file":"brace-fold.cjs.js","sources":["../../../node_modules/codemirror/addon/fold/brace-fold.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction bracketFolding(pairs) {\n  return function(cm, start) {\n    var line = start.line, lineText = cm.getLine(line);\n\n    function findOpening(pair) {\n      var tokenType;\n      for (var at = start.ch, pass = 0;;) {\n        var found = at <= 0 ? -1 : lineText.lastIndexOf(pair[0], at - 1);\n        if (found == -1) {\n          if (pass == 1) break;\n          pass = 1;\n          at = lineText.length;\n          continue;\n        }\n        if (pass == 1 && found < start.ch) break;\n        tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n        if (!/^(comment|string)/.test(tokenType)) return {ch: found + 1, tokenType: tokenType, pair: pair};\n        at = found - 1;\n      }\n    }\n\n    function findRange(found) {\n      var count = 1, lastLine = cm.lastLine(), end, startCh = found.ch, endCh\n      outer: for (var i = line; i <= lastLine; ++i) {\n        var text = cm.getLine(i), pos = i == line ? startCh : 0;\n        for (;;) {\n          var nextOpen = text.indexOf(found.pair[0], pos), nextClose = text.indexOf(found.pair[1], pos);\n          if (nextOpen < 0) nextOpen = text.length;\n          if (nextClose < 0) nextClose = text.length;\n          pos = Math.min(nextOpen, nextClose);\n          if (pos == text.length) break;\n          if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == found.tokenType) {\n            if (pos == nextOpen) ++count;\n            else if (!--count) { end = i; endCh = pos; break outer; }\n          }\n          ++pos;\n        }\n      }\n\n      if (end == null || line == end) return null\n      return {from: CodeMirror.Pos(line, startCh),\n              to: CodeMirror.Pos(end, endCh)};\n    }\n\n    var found = []\n    for (var i = 0; i < pairs.length; i++) {\n      var open = findOpening(pairs[i])\n      if (open) found.push(open)\n    }\n    found.sort(function(a, b) { return a.ch - b.ch })\n    for (var i = 0; i < found.length; i++) {\n      var range = findRange(found[i])\n      if (range) return range\n    }\n    return null\n  }\n}\n\nCodeMirror.registerHelper(\"fold\", \"brace\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"]]));\n\nCodeMirror.registerHelper(\"fold\", \"brace-paren\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]));\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n"],"names":["require$$0","found","i","start"],"mappings":"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","x_google_ignoreList":[0]}