'use strict';

const sourcesSymbol = Symbol.for(
  "@backstage/config-loader#MergedConfigSource.sources"
);
class MergedConfigSource {
  constructor(sources) {
    this.sources = sources;
    this[sourcesSymbol] = this.sources;
  }
  // An optimization to flatten nested merged sources to avid unnecessary microtasks
  static #flattenSources(sources) {
    return sources.flatMap((source) => {
      if (sourcesSymbol in source && Array.isArray(source[sourcesSymbol])) {
        return this.#flattenSources(
          source[sourcesSymbol]
        );
      }
      return source;
    });
  }
  static from(sources) {
    return new MergedConfigSource(this.#flattenSources(sources));
  }
  [sourcesSymbol];
  async *readConfigData(options) {
    const its = this.sources.map((source) => source.readConfigData(options));
    const initialResults = await Promise.all(its.map((it) => it.next()));
    const configs = initialResults.map((result, i) => {
      if (result.done) {
        throw new Error(
          `Config source ${String(this.sources[i])} returned no data`
        );
      }
      return result.value.configs;
    });
    yield { configs: configs.flat(1) };
    const results = its.map((it, i) => nextWithIndex(it, i));
    while (results.some(Boolean)) {
      try {
        const [i, result] = await Promise.race(results.filter(Boolean));
        if (result.done) {
          results[i] = void 0;
        } else {
          results[i] = nextWithIndex(its[i], i);
          configs[i] = result.value.configs;
          yield { configs: configs.flat(1) };
        }
      } catch (error) {
        const source = this.sources[error.index];
        if (source) {
          throw new Error(`Config source ${String(source)} failed: ${error}`);
        }
        throw error;
      }
    }
  }
  toString() {
    return `MergedConfigSource{${this.sources.map(String).join(", ")}}`;
  }
}
function nextWithIndex(iterator, index) {
  return iterator.next().then(
    (r) => [index, r],
    (e) => {
      throw Object.assign(e, { index });
    }
  );
}

exports.MergedConfigSource = MergedConfigSource;
//# sourceMappingURL=MergedConfigSource.cjs.js.map
