{"version":3,"file":"MergedConfigSource.cjs.js","sources":["../../src/sources/MergedConfigSource.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AsyncConfigSourceGenerator,\n  ConfigSource,\n  ConfigSourceData,\n  ReadConfigDataOptions,\n} from './types';\n\nconst sourcesSymbol = Symbol.for(\n  '@backstage/config-loader#MergedConfigSource.sources',\n);\n\n/** @internal */\nexport class MergedConfigSource implements ConfigSource {\n  // An optimization to flatten nested merged sources to avid unnecessary microtasks\n  static #flattenSources(sources: ConfigSource[]): ConfigSource[] {\n    return sources.flatMap(source => {\n      if (\n        sourcesSymbol in source &&\n        Array.isArray((source as any)[sourcesSymbol])\n      ) {\n        return this.#flattenSources(\n          (source as any)[sourcesSymbol] as ConfigSource[],\n        );\n      }\n      return source;\n    });\n  }\n\n  static from(sources: ConfigSource[]): ConfigSource {\n    return new MergedConfigSource(this.#flattenSources(sources));\n  }\n\n  [sourcesSymbol]: ConfigSource[];\n\n  private constructor(private readonly sources: ConfigSource[]) {\n    this[sourcesSymbol] = this.sources;\n  }\n\n  async *readConfigData(\n    options?: ReadConfigDataOptions,\n  ): AsyncConfigSourceGenerator {\n    const its = this.sources.map(source => source.readConfigData(options));\n    const initialResults = await Promise.all(its.map(it => it.next()));\n    const configs = initialResults.map((result, i) => {\n      if (result.done) {\n        throw new Error(\n          `Config source ${String(this.sources[i])} returned no data`,\n        );\n      }\n      return result.value.configs;\n    });\n\n    yield { configs: configs.flat(1) };\n\n    const results: Array<\n      | Promise<\n          readonly [\n            number,\n            IteratorResult<{ configs: ConfigSourceData[] }, void>,\n          ]\n        >\n      | undefined\n    > = its.map((it, i) => nextWithIndex(it, i));\n\n    while (results.some(Boolean)) {\n      try {\n        const [i, result] = (await Promise.race(results.filter(Boolean)))!;\n        if (result.done) {\n          results[i] = undefined;\n        } else {\n          results[i] = nextWithIndex(its[i], i);\n          configs[i] = result.value.configs;\n          yield { configs: configs.flat(1) };\n        }\n      } catch (error) {\n        const source = this.sources[error.index];\n        if (source) {\n          throw new Error(`Config source ${String(source)} failed: ${error}`);\n        }\n        throw error;\n      }\n    }\n  }\n\n  toString() {\n    return `MergedConfigSource{${this.sources.map(String).join(', ')}}`;\n  }\n}\n\n// Helper to wait for the next value of the iterator, while decorating the value\n// or error with the index of the iterator.\nfunction nextWithIndex<T>(\n  iterator: AsyncIterator<T, void, void>,\n  index: number,\n): Promise<readonly [index: number, result: IteratorResult<T, void>]> {\n  return iterator.next().then(\n    r => [index, r] as const,\n    e => {\n      throw Object.assign(e, { index });\n    },\n  );\n}\n"],"names":[],"mappings":"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"}