{"version":3,"file":"EnvConfigSource.cjs.js","sources":["../../src/sources/EnvConfigSource.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { assertError } from '@backstage/errors';\nimport { JsonObject } from '@backstage/types';\nimport { AsyncConfigSourceGenerator, ConfigSource } from './types';\n\n/**\n * Options for {@link EnvConfigSource.create}.\n *\n * @public\n */\nexport interface EnvConfigSourceOptions {\n  /**\n   * The environment variables to use, defaults to `process.env`.\n   */\n  env?: Record<string, string | undefined>;\n}\n\n/**\n * A config source that reads configuration from the environment.\n *\n * @remarks\n *\n * Only environment variables prefixed with APP_CONFIG_ will be considered.\n *\n * For each variable, the prefix will be removed, and rest of the key will\n * be split by '_'. Each part will then be used as keys to build up a nested\n * config object structure. The treatment of the entire environment variable\n * is case-sensitive.\n *\n * The value of the variable should be JSON serialized, as it will be parsed\n * and the type will be kept intact. For example \"true\" and true are treated\n * differently, as well as \"42\" and 42.\n *\n * For example, to set the config app.title to \"My Title\", use the following:\n *\n * APP_CONFIG_app_title='\"My Title\"'\n *\n * @public\n */\nexport class EnvConfigSource implements ConfigSource {\n  /**\n   * Creates a new config source that reads from the environment.\n   *\n   * @param options - Options for the config source.\n   * @returns A new config source that reads from the environment.\n   */\n  static create(options: EnvConfigSourceOptions): ConfigSource {\n    return new EnvConfigSource(options?.env ?? process.env);\n  }\n\n  private constructor(\n    private readonly env: { [name: string]: string | undefined },\n  ) {}\n\n  async *readConfigData(): AsyncConfigSourceGenerator {\n    const configs = readEnvConfig(this.env);\n    yield { configs };\n    return;\n  }\n\n  toString() {\n    const keys = Object.keys(this.env).filter(key =>\n      key.startsWith('APP_CONFIG_'),\n    );\n    return `EnvConfigSource{count=${keys.length}}`;\n  }\n}\n\nconst ENV_PREFIX = 'APP_CONFIG_';\n\n// Update the same pattern in config package if this is changed\nconst CONFIG_KEY_PART_PATTERN = /^[a-z][a-z0-9]*(?:[-_][a-z][a-z0-9]*)*$/i;\n\n/**\n * Read runtime configuration from the environment.\n *\n * @remarks\n *\n * Only environment variables prefixed with APP_CONFIG_ will be considered.\n *\n * For each variable, the prefix will be removed, and rest of the key will\n * be split by '_'. Each part will then be used as keys to build up a nested\n * config object structure. The treatment of the entire environment variable\n * is case-sensitive.\n *\n * The value of the variable should be JSON serialized, as it will be parsed\n * and the type will be kept intact. For example \"true\" and true are treated\n * differently, as well as \"42\" and 42.\n *\n * For example, to set the config app.title to \"My Title\", use the following:\n *\n * APP_CONFIG_app_title='\"My Title\"'\n *\n * @public\n * @deprecated Use {@link EnvConfigSource} instead\n */\nexport function readEnvConfig(env: {\n  [name: string]: string | undefined;\n}): AppConfig[] {\n  let data: JsonObject | undefined = undefined;\n\n  for (const [name, value] of Object.entries(env)) {\n    if (!value) {\n      continue;\n    }\n    if (name.startsWith(ENV_PREFIX)) {\n      const key = name.replace(ENV_PREFIX, '');\n      const keyParts = key.split('_');\n\n      let obj = (data = data ?? {});\n      for (const [index, part] of keyParts.entries()) {\n        if (!CONFIG_KEY_PART_PATTERN.test(part)) {\n          throw new TypeError(`Invalid env config key '${key}'`);\n        }\n        if (index < keyParts.length - 1) {\n          obj = (obj[part] = obj[part] ?? {}) as JsonObject;\n          if (typeof obj !== 'object' || Array.isArray(obj)) {\n            const subKey = keyParts.slice(0, index + 1).join('_');\n            throw new TypeError(\n              `Could not nest config for key '${key}' under existing value '${subKey}'`,\n            );\n          }\n        } else {\n          if (part in obj) {\n            throw new TypeError(\n              `Refusing to override existing config at key '${key}'`,\n            );\n          }\n          try {\n            const [, parsedValue] = safeJsonParse(value);\n            if (parsedValue === null) {\n              throw new Error('value may not be null');\n            }\n            obj[part] = parsedValue;\n          } catch (error) {\n            throw new TypeError(\n              `Failed to parse JSON-serialized config value for key '${key}', ${error}`,\n            );\n          }\n        }\n      }\n    }\n  }\n\n  return data ? [{ data, context: 'env' }] : [];\n}\n\nfunction safeJsonParse(str: string): [Error | null, any] {\n  try {\n    return [null, JSON.parse(str)];\n  } catch (err) {\n    assertError(err);\n    return [err, str];\n  }\n}\n"],"names":["assertError"],"mappings":"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"}