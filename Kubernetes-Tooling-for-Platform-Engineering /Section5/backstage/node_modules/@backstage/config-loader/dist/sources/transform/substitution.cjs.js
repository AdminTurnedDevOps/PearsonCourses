'use strict';

function createSubstitutionTransform(env) {
  return async (input) => {
    if (typeof input !== "string") {
      return { applied: false };
    }
    const parts = input.split(/(\$?\$\{[^{}]*\})/);
    for (let i = 1; i < parts.length; i += 2) {
      const part = parts[i];
      if (part.startsWith("$$")) {
        parts[i] = part.slice(1);
      } else {
        const indexOfFallbackSeparator = part.indexOf(":-");
        if (indexOfFallbackSeparator > -1) {
          const envVarValue = await env(
            part.slice(2, indexOfFallbackSeparator).trim()
          );
          const fallbackValue = part.slice(indexOfFallbackSeparator + ":-".length, -1).trim();
          parts[i] = envVarValue || fallbackValue || void 0;
        } else {
          parts[i] = await env(part.slice(2, -1).trim());
        }
      }
    }
    if (parts.some((part) => part === void 0)) {
      return { applied: true, value: void 0 };
    }
    return { applied: true, value: parts.join("") };
  };
}

exports.createSubstitutionTransform = createSubstitutionTransform;
//# sourceMappingURL=substitution.cjs.js.map
