{"version":3,"file":"include.cjs.js","sources":["../../../src/sources/transform/include.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport yaml from 'yaml';\nimport { extname, dirname, resolve as resolvePath } from 'path';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { isObject } from './utils';\nimport { TransformFunc, ReadFileFunc } from './types';\nimport { SubstitutionFunc } from '../types';\n\n// Parsers for each type of included file\nconst includeFileParser: {\n  [ext in string]: (content: string) => Promise<JsonObject>;\n} = {\n  '.json': async content => JSON.parse(content),\n  '.yaml': async content => yaml.parse(content),\n  '.yml': async content => yaml.parse(content),\n};\n\n/**\n * Transforms a include description into the actual included value.\n */\nexport function createIncludeTransform(\n  env: SubstitutionFunc,\n  readFile: ReadFileFunc,\n  substitute: TransformFunc,\n): TransformFunc {\n  return async (input, context) => {\n    const { dir } = context;\n    if (!dir) {\n      throw new Error('Include transform requires a base directory');\n    }\n    if (!isObject(input)) {\n      return { applied: false };\n    }\n    // Check if there's any key that starts with a '$', in that case we treat\n    // this entire object as an include description.\n    const [includeKey] = Object.keys(input).filter(key => key.startsWith('$'));\n    if (includeKey) {\n      if (Object.keys(input).length !== 1) {\n        throw new Error(\n          `include key ${includeKey} should not have adjacent keys`,\n        );\n      }\n    } else {\n      return { applied: false };\n    }\n\n    const rawIncludedValue = input[includeKey];\n    if (typeof rawIncludedValue !== 'string') {\n      throw new Error(`${includeKey} include value is not a string`);\n    }\n\n    const substituteResults = await substitute(rawIncludedValue, { dir });\n    const includeValue = substituteResults.applied\n      ? substituteResults.value\n      : rawIncludedValue;\n\n    // The second string check is needed for Typescript to know this is a string.\n    if (includeValue === undefined || typeof includeValue !== 'string') {\n      throw new Error(`${includeKey} substitution value was undefined`);\n    }\n\n    switch (includeKey) {\n      case '$file':\n        try {\n          const value = await readFile(resolvePath(dir, includeValue));\n          return { applied: true, value: value.trimEnd() };\n        } catch (error) {\n          throw new Error(`failed to read file ${includeValue}, ${error}`);\n        }\n      case '$env':\n        try {\n          return { applied: true, value: await env(includeValue) };\n        } catch (error) {\n          throw new Error(`failed to read env ${includeValue}, ${error}`);\n        }\n\n      case '$include': {\n        const [filePath, dataPath] = includeValue.split(/#(.*)/);\n\n        const ext = extname(filePath);\n        const parser = includeFileParser[ext];\n        if (!parser) {\n          throw new Error(\n            `no configuration parser available for included file ${filePath}`,\n          );\n        }\n\n        const path = resolvePath(dir, filePath);\n        const content = await readFile(path);\n        const newDir = dirname(path);\n\n        const parts = dataPath ? dataPath.split('.') : [];\n\n        let value: JsonValue | undefined;\n        try {\n          value = await parser(content);\n        } catch (error) {\n          throw new Error(\n            `failed to parse included file ${filePath}, ${error}`,\n          );\n        }\n\n        // This bit handles selecting a subtree in the included file, if a path was provided after a #\n        for (const [index, part] of parts.entries()) {\n          if (!isObject(value)) {\n            const errPath = parts.slice(0, index).join('.');\n            throw new Error(\n              `value at '${errPath}' in included file ${filePath} is not an object`,\n            );\n          }\n          value = value[part];\n        }\n\n        if (typeof value === 'string') {\n          const substituted = await substitute(value, { dir: newDir });\n          if (substituted.applied) {\n            value = substituted.value;\n          }\n        }\n\n        return {\n          applied: true,\n          value,\n          newDir: newDir !== dir ? newDir : undefined,\n        };\n      }\n\n      default:\n        throw new Error(`unknown include ${includeKey}`);\n    }\n  };\n}\n"],"names":["yaml","isObject","resolvePath","extname","path","dirname"],"mappings":"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"}