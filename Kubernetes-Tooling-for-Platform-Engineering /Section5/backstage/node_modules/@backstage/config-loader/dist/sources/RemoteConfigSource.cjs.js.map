{"version":3,"file":"RemoteConfigSource.cjs.js","sources":["../../src/sources/RemoteConfigSource.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResponseError } from '@backstage/errors';\nimport {\n  HumanDuration,\n  JsonObject,\n  durationToMilliseconds,\n} from '@backstage/types';\nimport isEqual from 'lodash/isEqual';\nimport { ConfigTransformer, createConfigTransformer } from './transform';\nimport {\n  AsyncConfigSourceGenerator,\n  ConfigSource,\n  SubstitutionFunc,\n  ReadConfigDataOptions,\n  Parser,\n} from './types';\nimport { parseYamlContent } from './utils';\n\nconst DEFAULT_RELOAD_INTERVAL = { seconds: 60 };\n\n/**\n * Options for {@link RemoteConfigSource.create}.\n *\n * @public\n */\nexport interface RemoteConfigSourceOptions {\n  /**\n   * The URL to load the config from.\n   */\n  url: string;\n\n  /**\n   * How often to reload the config from the remote URL, defaults to 1 minute.\n   *\n   * Set to Infinity to disable reloading, for example `{ days: Infinity }`.\n   */\n  reloadInterval?: HumanDuration;\n\n  /**\n   * A substitution function to use instead of the default environment substitution.\n   */\n  substitutionFunc?: SubstitutionFunc;\n\n  /**\n   * A content parsing function to transform string content to configuration values.\n   */\n  parser?: Parser;\n}\n\n/**\n * A config source that loads configuration from a remote URL.\n *\n * @public\n */\nexport class RemoteConfigSource implements ConfigSource {\n  /**\n   * Creates a new {@link RemoteConfigSource}.\n   *\n   * @param options - Options for the source.\n   * @returns A new remote config source.\n   */\n  static create(options: RemoteConfigSourceOptions): ConfigSource {\n    try {\n      // eslint-disable-next-line no-new\n      new URL(options.url);\n    } catch (error) {\n      throw new Error(\n        `Invalid URL provided to remote config source, '${options.url}', ${error}`,\n      );\n    }\n    return new RemoteConfigSource(options);\n  }\n\n  readonly #url: string;\n  readonly #reloadIntervalMs: number;\n  readonly #transformer: ConfigTransformer;\n  readonly #parser: Parser;\n\n  private constructor(options: RemoteConfigSourceOptions) {\n    this.#url = options.url;\n    this.#reloadIntervalMs = durationToMilliseconds(\n      options.reloadInterval ?? DEFAULT_RELOAD_INTERVAL,\n    );\n    this.#transformer = createConfigTransformer({\n      substitutionFunc: options.substitutionFunc,\n    });\n    this.#parser = options.parser ?? parseYamlContent;\n  }\n\n  async *readConfigData(\n    options?: ReadConfigDataOptions | undefined,\n  ): AsyncConfigSourceGenerator {\n    let data = await this.#load();\n\n    yield { configs: [{ data, context: this.#url }] };\n\n    for (;;) {\n      await this.#wait(options?.signal);\n\n      if (options?.signal?.aborted) {\n        return;\n      }\n\n      try {\n        const newData = await this.#load(options?.signal);\n        if (newData && !isEqual(data, newData)) {\n          data = newData;\n          yield { configs: [{ data, context: this.#url }] };\n        }\n      } catch (error) {\n        if (error.name !== 'AbortError') {\n          console.error(`Failed to read config from ${this.#url}, ${error}`);\n        }\n      }\n    }\n  }\n\n  toString() {\n    return `RemoteConfigSource{path=\"${this.#url}\"}`;\n  }\n\n  async #load(signal?: AbortSignal): Promise<JsonObject> {\n    const res = await fetch(this.#url, {\n      signal: signal as RequestInit['signal'],\n    });\n    if (!res.ok) {\n      throw await ResponseError.fromResponse(res);\n    }\n\n    const contents = await res.text();\n    const { result: rawData } = await this.#parser({ contents });\n    if (rawData === undefined) {\n      /**\n       * This error message is/was coupled to the implementation and with refactoring it is no longer truly accurate\n       * This behavior is also inconsistent with {@link FileConfigSource}, which doesn't error on unparseable or empty\n       * content\n       *\n       * Preserving to not make a breaking change\n       */\n      throw new Error('configuration data is null');\n    }\n\n    const data = await this.#transformer(rawData);\n    if (typeof data !== 'object') {\n      throw new Error('configuration data is not an object');\n    } else if (Array.isArray(data)) {\n      throw new Error(\n        'configuration data is an array, expected an object instead',\n      );\n    }\n    return data;\n  }\n\n  async #wait(signal?: AbortSignal) {\n    return new Promise<void>(resolve => {\n      const timeoutId = setTimeout(onDone, this.#reloadIntervalMs);\n      signal?.addEventListener('abort', onDone);\n\n      function onDone() {\n        clearTimeout(timeoutId);\n        signal?.removeEventListener('abort', onDone);\n        resolve();\n      }\n    });\n  }\n}\n"],"names":["durationToMilliseconds","createConfigTransformer","parseYamlContent","isEqual","ResponseError"],"mappings":"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"}