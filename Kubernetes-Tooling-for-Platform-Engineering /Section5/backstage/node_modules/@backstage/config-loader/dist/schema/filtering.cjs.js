'use strict';

var types = require('./types.cjs.js');
var utils = require('./utils.cjs.js');

function filterByVisibility(data, includeVisibilities, visibilityByDataPath, deepVisibilityByDataPath, deprecationByDataPath, transformFunc, withFilteredKeys, withDeprecatedKeys) {
  const filteredKeys = new Array();
  const deprecatedKeys = new Array();
  function transform(jsonVal, visibilityPath, filterPath, inheritedVisibility) {
    const visibility = visibilityByDataPath.get(visibilityPath) ?? inheritedVisibility;
    const isVisible = includeVisibilities.includes(visibility);
    const newInheritedVisibility = deepVisibilityByDataPath.get(visibilityPath) ?? inheritedVisibility;
    const deprecation = deprecationByDataPath.get(visibilityPath);
    if (deprecation) {
      deprecatedKeys.push({ key: filterPath, description: deprecation });
    }
    if (typeof jsonVal !== "object") {
      if (isVisible) {
        if (transformFunc) {
          return transformFunc(jsonVal, { visibility, path: filterPath });
        }
        return jsonVal;
      }
      if (withFilteredKeys) {
        filteredKeys.push(filterPath);
      }
      return void 0;
    } else if (jsonVal === null) {
      return void 0;
    } else if (Array.isArray(jsonVal)) {
      const arr = new Array();
      for (const [index, value] of jsonVal.entries()) {
        let path = visibilityPath;
        const hasVisibilityInIndex = visibilityByDataPath.get(
          `${visibilityPath}/${index}`
        );
        if (hasVisibilityInIndex || typeof value === "object") {
          path = `${visibilityPath}/${index}`;
        }
        const out = transform(
          value,
          path,
          `${filterPath}[${index}]`,
          newInheritedVisibility
        );
        if (out !== void 0) {
          arr.push(out);
        }
      }
      if (arr.length > 0 || isVisible) {
        return arr;
      }
      return void 0;
    }
    const outObj = {};
    let hasOutput = false;
    for (const [key, value] of Object.entries(jsonVal)) {
      if (value === void 0) {
        continue;
      }
      const out = transform(
        value,
        `${visibilityPath}/${key}`,
        filterPath ? `${filterPath}.${key}` : key,
        newInheritedVisibility
      );
      if (out !== void 0) {
        outObj[key] = out;
        hasOutput = true;
      }
    }
    if (hasOutput || isVisible) {
      return outObj;
    }
    return void 0;
  }
  return {
    filteredKeys: withFilteredKeys ? filteredKeys : void 0,
    deprecatedKeys: withDeprecatedKeys ? deprecatedKeys : void 0,
    data: transform(data, "", "", types.DEFAULT_CONFIG_VISIBILITY) ?? {}
  };
}
function filterErrorsByVisibility(errors, includeVisibilities, visibilityByDataPath, visibilityBySchemaPath) {
  if (!errors) {
    return [];
  }
  if (!includeVisibilities) {
    return errors;
  }
  const visibleSchemaPaths = Array.from(visibilityBySchemaPath).filter(([, v]) => includeVisibilities.includes(v)).map(([k]) => k);
  return errors.filter((error) => {
    if (error.keyword === "type" && ["object", "array"].includes(error.params.type)) {
      return true;
    }
    if (error.keyword === "required") {
      const trimmedPath = utils.normalizeAjvPath(error.schemaPath).slice(
        1,
        -"/required".length
      );
      const fullPath = `${trimmedPath}/properties/${error.params.missingProperty}`;
      if (visibleSchemaPaths.some((visiblePath) => visiblePath.startsWith(fullPath))) {
        return true;
      }
    }
    const vis = visibilityByDataPath.get(utils.normalizeAjvPath(error.instancePath)) ?? types.DEFAULT_CONFIG_VISIBILITY;
    return vis && includeVisibilities.includes(vis);
  });
}

exports.filterByVisibility = filterByVisibility;
exports.filterErrorsByVisibility = filterErrorsByVisibility;
//# sourceMappingURL=filtering.cjs.js.map
