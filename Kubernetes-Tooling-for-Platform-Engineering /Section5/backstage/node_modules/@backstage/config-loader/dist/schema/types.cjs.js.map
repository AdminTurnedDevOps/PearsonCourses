{"version":3,"file":"types.cjs.js","sources":["../../src/schema/types.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\n\n/**\n * An sub-set of configuration schema.\n */\nexport type ConfigSchemaPackageEntry = {\n  /**\n   * The configuration schema itself.\n   */\n  value: JsonObject;\n  /**\n   * The relative path that the configuration schema was discovered at.\n   */\n  path: string;\n};\n\n/**\n * A list of all possible configuration value visibilities.\n */\nexport const CONFIG_VISIBILITIES = ['frontend', 'backend', 'secret'] as const;\n\n/**\n * A type representing the possible configuration value visibilities\n *\n * @public\n */\nexport type ConfigVisibility = 'frontend' | 'backend' | 'secret';\n\n/**\n * The default configuration visibility if no other values is given.\n */\nexport const DEFAULT_CONFIG_VISIBILITY: ConfigVisibility = 'backend';\n\n/**\n * An explanation of a configuration validation error.\n */\nexport type ValidationError = {\n  keyword: string;\n  instancePath: string;\n  schemaPath: string;\n  params: Record<string, any>;\n  propertyName?: string;\n  message?: string;\n};\n\n/**\n * The result of validating configuration data using a schema.\n */\ntype ValidationResult = {\n  /**\n   * Errors that where emitted during validation, if any.\n   */\n  errors?: ValidationError[];\n  /**\n   * The configuration visibilities that were discovered during validation.\n   *\n   * The path in the key uses the form `/<key>/<sub-key>/<array-index>/<leaf-key>`\n   */\n  visibilityByDataPath: Map<string, ConfigVisibility>;\n\n  /**\n   * The configuration deep visibilities that were discovered during validation.\n   *\n   * The path in the key uses the form `/<key>/<sub-key>/<array-index>/<leaf-key>`\n   */\n  deepVisibilityByDataPath: Map<string, ConfigVisibility>;\n\n  /**\n   * The configuration visibilities that were discovered during validation.\n   *\n   * The path in the key uses the form `/properties/<key>/items/additionalProperties/<leaf-key>`\n   */\n  visibilityBySchemaPath: Map<string, ConfigVisibility>;\n\n  /**\n   * The deprecated options that were discovered during validation.\n   *\n   * The path in the key uses the form `/<key>/<sub-key>/<array-index>/<leaf-key>`\n   */\n  deprecationByDataPath: Map<string, string>;\n};\n\n/**\n * A function used validate configuration data.\n */\nexport type ValidationFunc = (configs: AppConfig[]) => ValidationResult;\n\n/**\n * A function used to transform primitive configuration values.\n *\n * The \"path\" in the context is a JQ-style path to the current value from\n * within the original object passed to filterByVisibility().\n * For example, \"field.list[2]\" would refer to:\n * \\{\n *   field: [\n *     \"foo\",\n *     \"bar\",\n *     \"baz\" -- this one\n *   ]\n * \\}\n *\n * @public\n */\nexport type TransformFunc<T extends number | string | boolean> = (\n  value: T,\n  context: { visibility: ConfigVisibility; path: string },\n) => T | undefined;\n\n/**\n * Options used to process configuration data with a schema.\n *\n * @public\n */\nexport type ConfigSchemaProcessingOptions = {\n  /**\n   * The visibilities that should be included in the output data.\n   * If omitted, the data will not be filtered by visibility.\n   */\n  visibility?: ConfigVisibility[];\n\n  /**\n   * When set to `true`, any schema errors in the provided configuration will be ignored.\n   */\n  ignoreSchemaErrors?: boolean;\n\n  /**\n   * A transform function that can be used to transform primitive configuration values\n   * during validation. The value returned from the transform function will be used\n   * instead of the original value. If the transform returns `undefined`, the value\n   * will be omitted.\n   */\n  valueTransform?: TransformFunc<any>;\n\n  /**\n   * Whether or not to include the `filteredKeys` property in the output `AppConfig`s.\n   *\n   * Default: `false`.\n   */\n  withFilteredKeys?: boolean;\n\n  /**\n   * Whether or not to include the `deprecatedKeys` property in the output `AppConfig`s.\n   *\n   * Default: `true`.\n   */\n  withDeprecatedKeys?: boolean;\n};\n\n/**\n * A loaded configuration schema that is ready to process configuration data.\n *\n * @public\n */\nexport type ConfigSchema = {\n  process(\n    appConfigs: AppConfig[],\n    options?: ConfigSchemaProcessingOptions,\n  ): AppConfig[];\n\n  serialize(): JsonObject;\n};\n"],"names":[],"mappings":";;AAoCO,MAAM,mBAAsB,GAAA,CAAC,UAAY,EAAA,SAAA,EAAW,QAAQ;AAY5D,MAAM,yBAA8C,GAAA;;;;;"}