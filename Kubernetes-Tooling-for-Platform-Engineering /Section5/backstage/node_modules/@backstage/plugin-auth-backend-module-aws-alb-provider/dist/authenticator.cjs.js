'use strict';

var errors = require('@backstage/errors');
var jose = require('jose');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var NodeCache = require('node-cache');
var helpers = require('./helpers.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var NodeCache__default = /*#__PURE__*/_interopDefaultCompat(NodeCache);

const ALB_JWT_HEADER = "x-amzn-oidc-data";
const ALB_ACCESS_TOKEN_HEADER = "x-amzn-oidc-accesstoken";
const awsAlbAuthenticator = pluginAuthNode.createProxyAuthenticator({
  defaultProfileTransform: async (result) => {
    return {
      profile: helpers.makeProfileInfo(result.fullProfile, result.accessToken)
    };
  },
  initialize({ config }) {
    const issuer = config.getString("issuer");
    const signer = config.getOptionalString("signer");
    const region = config.getString("region");
    const keyCache = new NodeCache__default.default({ stdTTL: 3600 });
    const getKey = helpers.provisionKeyCache(region, keyCache);
    return { issuer, signer, getKey };
  },
  async authenticate({ req }, { issuer, signer, getKey }) {
    const jwt = req.header(ALB_JWT_HEADER);
    const accessToken = req.header(ALB_ACCESS_TOKEN_HEADER);
    if (jwt === void 0) {
      throw new errors.AuthenticationError(
        `Missing ALB OIDC header: ${ALB_JWT_HEADER}`
      );
    }
    if (accessToken === void 0) {
      throw new errors.AuthenticationError(
        `Missing ALB OIDC header: ${ALB_ACCESS_TOKEN_HEADER}`
      );
    }
    try {
      const verifyResult = await jose.jwtVerify(jwt, getKey);
      const header = verifyResult.protectedHeader;
      const claims = verifyResult.payload;
      if (claims?.iss !== issuer) {
        throw new errors.AuthenticationError("Issuer mismatch on JWT token");
      } else if (signer && header?.signer !== signer) {
        throw new errors.AuthenticationError("Signer mismatch on JWT token");
      }
      if (!claims.email) {
        throw new errors.AuthenticationError(`Missing email in the JWT token`);
      }
      const fullProfile = {
        provider: "unknown",
        id: claims.sub,
        displayName: claims.name,
        username: claims.email.split("@")[0],
        name: {
          familyName: claims.family_name,
          givenName: claims.given_name
        },
        emails: [{ value: claims.email }],
        photos: [{ value: claims.picture }]
      };
      return {
        result: {
          fullProfile,
          accessToken,
          expiresInSeconds: claims.exp
        },
        providerInfo: {
          accessToken,
          expiresInSeconds: claims.exp
        }
      };
    } catch (e) {
      throw new Error(`Exception occurred during JWT processing: ${e}`);
    }
  }
});

exports.ALB_ACCESS_TOKEN_HEADER = ALB_ACCESS_TOKEN_HEADER;
exports.ALB_JWT_HEADER = ALB_JWT_HEADER;
exports.awsAlbAuthenticator = awsAlbAuthenticator;
//# sourceMappingURL=authenticator.cjs.js.map
