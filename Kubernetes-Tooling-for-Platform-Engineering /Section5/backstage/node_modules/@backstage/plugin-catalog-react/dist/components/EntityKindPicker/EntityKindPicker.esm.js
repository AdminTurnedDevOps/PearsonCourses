import { Select } from '@backstage/core-components';
import { useApi, alertApiRef } from '@backstage/core-plugin-api';
import Box from '@material-ui/core/Box';
import React, { useEffect, useMemo, useState } from 'react';
import { EntityKindFilter } from '../../filters.esm.js';
import '../../hooks/useEntity.esm.js';
import { useEntityList } from '../../hooks/useEntityListProvider.esm.js';
import 'react-use/esm/useAsync';
import 'lodash/isEqual';
import 'lodash/sortBy';
import '../../api.esm.js';
import '@backstage/catalog-model';
import 'react-use/esm/useObservable';
import '../../apis/EntityPresentationApi/EntityPresentationApi.esm.js';
import 'lodash/get';
import '../../apis/StarredEntitiesApi/StarredEntitiesApi.esm.js';
import 'zen-observable';
import { filterKinds, useAllKinds } from './kindFilterUtils.esm.js';
import { catalogReactTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

function useEntityKindFilter(opts) {
  const {
    filters,
    queryParameters: { kind: kindParameter },
    updateFilters
  } = useEntityList();
  const queryParamKind = useMemo(
    () => [kindParameter].flat()[0],
    [kindParameter]
  );
  const [selectedKind, setSelectedKind] = useState(
    queryParamKind ?? filters.kind?.value ?? opts.initialFilter
  );
  useEffect(() => {
    if (queryParamKind) {
      setSelectedKind(queryParamKind);
    }
  }, [queryParamKind]);
  useEffect(() => {
    if (filters.kind?.value) {
      setSelectedKind(filters.kind?.value);
    }
  }, [filters.kind]);
  const { allKinds, loading, error } = useAllKinds();
  const selectedKindLabel = allKinds.get(selectedKind) || selectedKind;
  useEffect(() => {
    updateFilters({
      kind: selectedKind ? new EntityKindFilter(selectedKind, selectedKindLabel) : void 0
    });
  }, [selectedKind, selectedKindLabel, updateFilters]);
  return {
    loading,
    error,
    allKinds,
    selectedKind,
    setSelectedKind
  };
}
const EntityKindPicker = (props) => {
  const { allowedKinds, hidden, initialFilter = "component" } = props;
  const { t } = useTranslationRef(catalogReactTranslationRef);
  const alertApi = useApi(alertApiRef);
  const { error, allKinds, selectedKind, setSelectedKind } = useEntityKindFilter({
    initialFilter
  });
  useEffect(() => {
    if (error) {
      alertApi.post({
        message: t("entityKindPicker.errorMessage"),
        severity: "error"
      });
    }
  }, [error, alertApi, t]);
  if (error) return null;
  const options = filterKinds(allKinds, allowedKinds, selectedKind);
  const items = [...options.entries()].map(([key, value]) => ({
    label: value,
    value: key
  }));
  return hidden ? null : /* @__PURE__ */ React.createElement(Box, { pb: 1, pt: 1 }, /* @__PURE__ */ React.createElement(
    Select,
    {
      label: t("entityKindPicker.title"),
      items,
      selected: selectedKind.toLocaleLowerCase("en-US"),
      onChange: (value) => setSelectedKind(String(value))
    }
  ));
};

export { EntityKindPicker };
//# sourceMappingURL=EntityKindPicker.esm.js.map
