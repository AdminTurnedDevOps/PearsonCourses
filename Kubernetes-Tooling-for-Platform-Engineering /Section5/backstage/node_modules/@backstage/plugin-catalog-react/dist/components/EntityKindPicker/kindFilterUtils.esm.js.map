{"version":3,"file":"kindFilterUtils.esm.js","sources":["../../../src/components/EntityKindPicker/kindFilterUtils.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useApi } from '@backstage/core-plugin-api';\nimport useAsync from 'react-use/esm/useAsync';\nimport { catalogApiRef } from '../../api';\n\n/**\n * Fetch and return all available kinds.\n */\nexport function useAllKinds(): {\n  loading: boolean;\n  error?: Error;\n  allKinds: Map<string, string>;\n} {\n  const catalogApi = useApi(catalogApiRef);\n\n  const {\n    error,\n    loading,\n    value: allKinds,\n  } = useAsync(async () => {\n    const { facets } = await catalogApi.getEntityFacets({ facets: ['kind'] });\n    const kindFacets = (facets.kind ?? []).map(f => f.value);\n    return new Map(\n      kindFacets.map(kind => [kind.toLocaleLowerCase('en-US'), kind]),\n    );\n  }, [catalogApi]);\n\n  return { loading, error, allKinds: allKinds ?? new Map() };\n}\n\n/**\n * Filter and capitalize accessible kinds.\n */\nexport function filterKinds(\n  allKinds: Map<string, string>,\n  allowedKinds?: string[],\n  forcedKinds?: string,\n): Map<string, string> {\n  // Before allKinds is loaded, or when a kind is entered manually in the URL, selectedKind may not\n  // be present in allKinds. It should still be shown in the dropdown, but may not have the nice\n  // enforced casing from the catalog-backend. This makes a key/value record for the Select options,\n  // including selectedKind if it's unknown - but allows the selectedKind to get clobbered by the\n  // more proper catalog kind if it exists.\n  let availableKinds = Array.from(allKinds.keys());\n  if (allowedKinds) {\n    availableKinds = allowedKinds\n      .map(k => k.toLocaleLowerCase('en-US'))\n      .filter(k => allKinds.has(k));\n  }\n\n  const kindsMap = new Map(\n    availableKinds.map(kind => [kind, allKinds.get(kind) || kind]),\n  );\n\n  if (forcedKinds && !kindsMap.has(forcedKinds)) {\n    // this is the only time we set a label for a kind which is not properly capitalized\n    kindsMap.set(forcedKinds.toLocaleLowerCase('en-US'), forcedKinds);\n  }\n\n  return kindsMap;\n}\n"],"names":[],"mappings":";;;;AAuBO,SAAS,WAId,GAAA;AACA,EAAM,MAAA,UAAA,GAAa,OAAO,aAAa,CAAA;AAEvC,EAAM,MAAA;AAAA,IACJ,KAAA;AAAA,IACA,OAAA;AAAA,IACA,KAAO,EAAA;AAAA,GACT,GAAI,SAAS,YAAY;AACvB,IAAM,MAAA,EAAE,MAAO,EAAA,GAAI,MAAM,UAAA,CAAW,eAAgB,CAAA,EAAE,MAAQ,EAAA,CAAC,MAAM,CAAA,EAAG,CAAA;AACxE,IAAM,MAAA,UAAA,GAAA,CAAc,OAAO,IAAQ,IAAA,IAAI,GAAI,CAAA,CAAA,CAAA,KAAK,EAAE,KAAK,CAAA;AACvD,IAAA,OAAO,IAAI,GAAA;AAAA,MACT,UAAA,CAAW,IAAI,CAAQ,IAAA,KAAA,CAAC,KAAK,iBAAkB,CAAA,OAAO,CAAG,EAAA,IAAI,CAAC;AAAA,KAChE;AAAA,GACF,EAAG,CAAC,UAAU,CAAC,CAAA;AAEf,EAAA,OAAO,EAAE,OAAS,EAAA,KAAA,EAAO,UAAU,QAAY,oBAAA,IAAI,KAAM,EAAA;AAC3D;AAKgB,SAAA,WAAA,CACd,QACA,EAAA,YAAA,EACA,WACqB,EAAA;AAMrB,EAAA,IAAI,cAAiB,GAAA,KAAA,CAAM,IAAK,CAAA,QAAA,CAAS,MAAM,CAAA;AAC/C,EAAA,IAAI,YAAc,EAAA;AAChB,IAAA,cAAA,GAAiB,YACd,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,iBAAkB,CAAA,OAAO,CAAC,CAAA,CACrC,MAAO,CAAA,CAAA,CAAA,KAAK,QAAS,CAAA,GAAA,CAAI,CAAC,CAAC,CAAA;AAAA;AAGhC,EAAA,MAAM,WAAW,IAAI,GAAA;AAAA,IACnB,cAAA,CAAe,GAAI,CAAA,CAAA,IAAA,KAAQ,CAAC,IAAA,EAAM,SAAS,GAAI,CAAA,IAAI,CAAK,IAAA,IAAI,CAAC;AAAA,GAC/D;AAEA,EAAA,IAAI,WAAe,IAAA,CAAC,QAAS,CAAA,GAAA,CAAI,WAAW,CAAG,EAAA;AAE7C,IAAA,QAAA,CAAS,GAAI,CAAA,WAAA,CAAY,iBAAkB,CAAA,OAAO,GAAG,WAAW,CAAA;AAAA;AAGlE,EAAO,OAAA,QAAA;AACT;;;;"}