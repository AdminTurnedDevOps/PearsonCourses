import { parseEntityRef, DEFAULT_NAMESPACE } from '@backstage/catalog-model';
import { Link } from '@backstage/core-components';
import { useRouteRef } from '@backstage/core-plugin-api';
import React, { forwardRef } from 'react';
import { entityRouteRef } from '../../routes.esm.js';
import { EntityDisplayName } from '../EntityDisplayName/EntityDisplayName.esm.js';

const EntityRefLink = forwardRef(
  (props, ref) => {
    const {
      entityRef,
      defaultKind,
      defaultNamespace,
      title,
      children,
      hideIcon,
      disableTooltip,
      ...linkProps
    } = props;
    const entityRoute = useEntityRoute(props.entityRef);
    const content = children ?? title ?? /* @__PURE__ */ React.createElement(
      EntityDisplayName,
      {
        entityRef,
        defaultKind,
        defaultNamespace,
        hideIcon,
        disableTooltip
      }
    );
    return /* @__PURE__ */ React.createElement(Link, { ...linkProps, ref, to: entityRoute }, content);
  }
);
function useEntityRoute(entityRef) {
  const entityRoute = useRouteRef(entityRouteRef);
  let kind;
  let namespace;
  let name;
  if (typeof entityRef === "string") {
    const parsed = parseEntityRef(entityRef);
    kind = parsed.kind;
    namespace = parsed.namespace;
    name = parsed.name;
  } else if ("metadata" in entityRef) {
    kind = entityRef.kind;
    namespace = entityRef.metadata.namespace;
    name = entityRef.metadata.name;
  } else {
    kind = entityRef.kind;
    namespace = entityRef.namespace;
    name = entityRef.name;
  }
  kind = kind.toLocaleLowerCase("en-US");
  namespace = namespace?.toLocaleLowerCase("en-US") ?? DEFAULT_NAMESPACE;
  const routeParams = {
    kind: encodeURIComponent(kind),
    namespace: encodeURIComponent(namespace),
    name: encodeURIComponent(name)
  };
  return entityRoute(routeParams);
}

export { EntityRefLink };
//# sourceMappingURL=EntityRefLink.esm.js.map
