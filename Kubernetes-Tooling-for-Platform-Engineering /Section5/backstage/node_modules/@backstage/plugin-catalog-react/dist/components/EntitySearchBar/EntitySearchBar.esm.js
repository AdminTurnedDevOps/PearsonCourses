import FormControl from '@material-ui/core/FormControl';
import IconButton from '@material-ui/core/IconButton';
import Input from '@material-ui/core/Input';
import InputAdornment from '@material-ui/core/InputAdornment';
import Toolbar from '@material-ui/core/Toolbar';
import { makeStyles } from '@material-ui/core/styles';
import Clear from '@material-ui/icons/Clear';
import Search from '@material-ui/icons/Search';
import React, { useMemo, useState, useEffect } from 'react';
import useDebounce from 'react-use/lib/useDebounce';
import { useEntityList } from '../../hooks/useEntityListProvider.esm.js';
import { EntityTextFilter } from '../../filters.esm.js';
import { catalogReactTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useStyles = makeStyles(
  (_theme) => ({
    searchToolbar: {
      paddingLeft: 0,
      paddingRight: 0
    },
    input: {}
  }),
  { name: "CatalogReactEntitySearchBar" }
);
const EntitySearchBar = () => {
  const classes = useStyles();
  const { t } = useTranslationRef(catalogReactTranslationRef);
  const {
    updateFilters,
    queryParameters: { text: textParameter }
  } = useEntityList();
  const queryParamTextFilter = useMemo(
    () => [textParameter].flat()[0],
    [textParameter]
  );
  const [search, setSearch] = useState(queryParamTextFilter ?? "");
  useDebounce(
    () => {
      updateFilters({
        text: search.length ? new EntityTextFilter(search) : void 0
      });
    },
    250,
    [search, updateFilters]
  );
  useEffect(() => {
    if (queryParamTextFilter) {
      setSearch(queryParamTextFilter);
    }
  }, [queryParamTextFilter]);
  return /* @__PURE__ */ React.createElement(Toolbar, { className: classes.searchToolbar }, /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(
    Input,
    {
      "aria-label": "search",
      id: "input-with-icon-adornment",
      className: classes.input,
      placeholder: t("entitySearchBar.placeholder"),
      autoComplete: "off",
      onChange: (event) => setSearch(event.target.value),
      value: search,
      startAdornment: /* @__PURE__ */ React.createElement(InputAdornment, { position: "start" }, /* @__PURE__ */ React.createElement(Search, null)),
      endAdornment: /* @__PURE__ */ React.createElement(InputAdornment, { position: "end" }, /* @__PURE__ */ React.createElement(
        IconButton,
        {
          "aria-label": "clear search",
          onClick: () => setSearch(""),
          edge: "end",
          disabled: search.length === 0
        },
        /* @__PURE__ */ React.createElement(Clear, null)
      ))
    }
  )));
};

export { EntitySearchBar };
//# sourceMappingURL=EntitySearchBar.esm.js.map
