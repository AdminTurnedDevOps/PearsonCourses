import Box from '@material-ui/core/Box';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Autocomplete from '@material-ui/lab/Autocomplete';
import React, { useMemo, useState, useEffect } from 'react';
import { useApi } from '@backstage/core-plugin-api';
import useAsync from 'react-use/esm/useAsync';
import { catalogApiRef } from '../../api.esm.js';
import { EntityAutocompletePickerOption } from './EntityAutocompletePickerOption.esm.js';
import { EntityAutocompletePickerInput } from './EntityAutocompletePickerInput.esm.js';
import { useEntityList } from '../../hooks/useEntityListProvider.esm.js';
import { reduceBackendCatalogFilters } from '../../utils/filters.esm.js';

const useStyles = makeStyles(
  {
    root: {},
    label: {
      textTransform: "none",
      fontWeight: "bold"
    }
  },
  { name: "CatalogReactEntityAutocompletePicker" }
);
function EntityAutocompletePicker(props) {
  const {
    label,
    name,
    path,
    showCounts,
    Filter,
    InputProps,
    initialSelectedOptions = [],
    filtersForAvailableValues = ["kind"]
  } = props;
  const classes = useStyles();
  const {
    updateFilters,
    filters,
    queryParameters: { [name]: queryParameter }
  } = useEntityList();
  const catalogApi = useApi(catalogApiRef);
  const availableValuesFilters = filtersForAvailableValues.map(
    (f) => filters[f]
  );
  const { value: availableValues } = useAsync(async () => {
    const facet = path;
    const { facets } = await catalogApi.getEntityFacets({
      facets: [facet],
      filter: reduceBackendCatalogFilters(
        availableValuesFilters.filter(Boolean)
      )
    });
    return Object.fromEntries(
      facets[facet].map(({ value, count }) => [value, count])
    );
  }, [...availableValuesFilters]);
  const queryParameters = useMemo(
    () => [queryParameter].flat().filter(Boolean),
    [queryParameter]
  );
  const [selectedOptions, setSelectedOptions] = useState(
    queryParameters.length ? queryParameters : filters[name]?.values ?? initialSelectedOptions
  );
  useEffect(() => {
    if (queryParameters.length) {
      setSelectedOptions(queryParameters);
    }
  }, [queryParameters]);
  const availableOptions = Object.keys(availableValues ?? {});
  const shouldAddFilter = selectedOptions.length && availableOptions.length;
  useEffect(() => {
    updateFilters({
      [name]: shouldAddFilter ? new Filter(selectedOptions) : void 0
    });
  }, [name, shouldAddFilter, selectedOptions, Filter, updateFilters]);
  const filter = filters[name];
  if (filter && typeof filter === "object" && !("values" in filter) || !availableOptions.length) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(Box, { className: classes.root, pb: 1, pt: 1 }, /* @__PURE__ */ React.createElement(Typography, { className: classes.label, variant: "button", component: "label" }, label, /* @__PURE__ */ React.createElement(
    Autocomplete,
    {
      PopperComponent: (popperProps) => /* @__PURE__ */ React.createElement("div", { ...popperProps }, popperProps.children),
      multiple: true,
      disableCloseOnSelect: true,
      options: availableOptions,
      value: selectedOptions,
      onChange: (_event, options) => setSelectedOptions(options),
      renderOption: (option, { selected }) => /* @__PURE__ */ React.createElement(
        EntityAutocompletePickerOption,
        {
          selected,
          value: option,
          availableOptions: availableValues,
          showCounts: !!showCounts
        }
      ),
      size: "small",
      popupIcon: /* @__PURE__ */ React.createElement(ExpandMoreIcon, { "data-testid": `${String(name)}-picker-expand` }),
      renderInput: (params) => /* @__PURE__ */ React.createElement(EntityAutocompletePickerInput, { ...params, ...InputProps })
    }
  )));
}

export { EntityAutocompletePicker };
//# sourceMappingURL=EntityAutocompletePicker.esm.js.map
