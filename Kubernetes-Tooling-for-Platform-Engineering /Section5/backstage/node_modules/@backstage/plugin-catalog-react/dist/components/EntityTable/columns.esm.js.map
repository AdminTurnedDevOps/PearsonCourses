{"version":3,"file":"columns.esm.js","sources":["../../../src/components/EntityTable/columns.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  CompoundEntityRef,\n  RELATION_OWNED_BY,\n  RELATION_PART_OF,\n} from '@backstage/catalog-model';\nimport { OverflowTooltip, TableColumn } from '@backstage/core-components';\nimport React from 'react';\nimport { getEntityRelations } from '../../utils';\nimport {\n  EntityRefLink,\n  EntityRefLinks,\n  humanizeEntityRef,\n} from '../EntityRefLink';\n\n// TODO: column title support i18n\n\n/** @public */\nexport const columnFactories = Object.freeze({\n  createEntityRefColumn<T extends Entity>(options: {\n    defaultKind?: string;\n  }): TableColumn<T> {\n    const { defaultKind } = options;\n    function formatContent(entity: T): string {\n      return (\n        entity.metadata?.title ||\n        humanizeEntityRef(entity, {\n          defaultKind,\n        })\n      );\n    }\n\n    return {\n      title: 'Name',\n      highlight: true,\n      customFilterAndSearch(filter, entity) {\n        // TODO: We could implement this more efficiently, like searching over\n        // each field that is displayed individually (kind, namespace, name).\n        // but that might confuse the user as it will behave different than a\n        // simple text search.\n        // Another alternative would be to cache the values. But writing them\n        // into the entity feels bad too.\n        return formatContent(entity).includes(filter);\n      },\n      customSort(entity1, entity2) {\n        // TODO: We could implement this more efficiently by comparing field by field.\n        // This has similar issues as above.\n        return formatContent(entity1).localeCompare(formatContent(entity2));\n      },\n      render: entity => (\n        <EntityRefLink\n          entityRef={entity}\n          defaultKind={defaultKind}\n          title={entity.metadata?.title}\n        />\n      ),\n    };\n  },\n  createEntityRelationColumn<T extends Entity>(options: {\n    title: string;\n    relation: string;\n    defaultKind?: string;\n    filter?: { kind: string };\n  }): TableColumn<T> {\n    const { title, relation, defaultKind, filter: entityFilter } = options;\n\n    function getRelations(entity: T): CompoundEntityRef[] {\n      return getEntityRelations(entity, relation, entityFilter);\n    }\n\n    function formatContent(entity: T): string {\n      return getRelations(entity)\n        .map(r => humanizeEntityRef(r, { defaultKind }))\n        .join(', ');\n    }\n\n    return {\n      title,\n      customFilterAndSearch(filter, entity) {\n        return formatContent(entity).includes(filter);\n      },\n      customSort(entity1, entity2) {\n        return formatContent(entity1).localeCompare(formatContent(entity2));\n      },\n      render: entity => {\n        return (\n          <EntityRefLinks\n            entityRefs={getRelations(entity)}\n            defaultKind={defaultKind}\n          />\n        );\n      },\n    };\n  },\n  createOwnerColumn<T extends Entity>(): TableColumn<T> {\n    return this.createEntityRelationColumn({\n      title: 'Owner',\n      relation: RELATION_OWNED_BY,\n      defaultKind: 'group',\n    });\n  },\n  createDomainColumn<T extends Entity>(): TableColumn<T> {\n    return this.createEntityRelationColumn({\n      title: 'Domain',\n      relation: RELATION_PART_OF,\n      defaultKind: 'domain',\n      filter: {\n        kind: 'domain',\n      },\n    });\n  },\n  createSystemColumn<T extends Entity>(): TableColumn<T> {\n    return this.createEntityRelationColumn({\n      title: 'System',\n      relation: RELATION_PART_OF,\n      defaultKind: 'system',\n      filter: {\n        kind: 'system',\n      },\n    });\n  },\n  createMetadataDescriptionColumn<T extends Entity>(): TableColumn<T> {\n    return {\n      title: 'Description',\n      field: 'metadata.description',\n      render: entity => (\n        <OverflowTooltip\n          text={entity.metadata.description}\n          placement=\"bottom-start\"\n          line={2}\n        />\n      ),\n    };\n  },\n  createSpecLifecycleColumn<T extends Entity>(): TableColumn<T> {\n    return {\n      title: 'Lifecycle',\n      field: 'spec.lifecycle',\n    };\n  },\n  createSpecTypeColumn<T extends Entity>(): TableColumn<T> {\n    return {\n      title: 'Type',\n      field: 'spec.type',\n    };\n  },\n});\n"],"names":[],"mappings":"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"}