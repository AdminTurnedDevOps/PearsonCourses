import { EntityRefLink } from '../EntityRefLink/EntityRefLink.esm.js';
import '@backstage/catalog-model';
import React, { useState, useCallback } from 'react';
import 'lodash/get';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogContentText from '@material-ui/core/DialogContentText';
import DialogTitle from '@material-ui/core/DialogTitle';
import Divider from '@material-ui/core/Divider';
import { makeStyles } from '@material-ui/core/styles';
import Alert from '@material-ui/lab/Alert';
import { useUnregisterEntityDialogState } from './useUnregisterEntityDialogState.esm.js';
import { useApi, alertApiRef, configApiRef } from '@backstage/core-plugin-api';
import { Progress, ResponseErrorPanel } from '@backstage/core-components';
import { assertError } from '@backstage/errors';
import { catalogReactTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useStyles = makeStyles({
  advancedButton: {
    fontSize: "0.7em"
  },
  dialogActions: {
    display: "inline-block"
  }
});
const Contents = ({
  entity,
  onConfirm,
  onClose
}) => {
  const alertApi = useApi(alertApiRef);
  const configApi = useApi(configApiRef);
  const classes = useStyles();
  const state = useUnregisterEntityDialogState(entity);
  const [showDelete, setShowDelete] = useState(false);
  const [busy, setBusy] = useState(false);
  const appTitle = configApi.getOptionalString("app.title") ?? "Backstage";
  const { t } = useTranslationRef(catalogReactTranslationRef);
  const onUnregister = useCallback(
    async function onUnregisterFn() {
      if ("unregisterLocation" in state) {
        setBusy(true);
        try {
          await state.unregisterLocation();
          onConfirm();
        } catch (err) {
          assertError(err);
          alertApi.post({ message: err.message });
        } finally {
          setBusy(false);
        }
      }
    },
    [alertApi, onConfirm, state]
  );
  const onDelete = useCallback(
    async function onDeleteFn() {
      if ("deleteEntity" in state) {
        setBusy(true);
        try {
          await state.deleteEntity();
          const entityName = entity.metadata.title ?? entity.metadata.name;
          onConfirm();
          alertApi.post({
            message: t("unregisterEntityDialog.deleteEntitySuccessMessage", {
              entityName
            }),
            severity: "success",
            display: "transient"
          });
        } catch (err) {
          assertError(err);
          alertApi.post({ message: err.message });
        } finally {
          setBusy(false);
        }
      }
    },
    [alertApi, onConfirm, state, entity, t]
  );
  const DialogActionsPanel = () => /* @__PURE__ */ React.createElement(DialogActions, { className: classes.dialogActions }, /* @__PURE__ */ React.createElement(Button, { onClick: onClose, color: "primary" }, t("unregisterEntityDialog.cancelButtonTitle")));
  if (state.type === "loading") {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (state.type === "error") {
    return /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error: state.error });
  }
  if (state.type === "bootstrap") {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Alert, { severity: "info" }, t("unregisterEntityDialog.bootstrapState.title", {
      appTitle,
      location: state.location
    })), /* @__PURE__ */ React.createElement(Box, { marginTop: 2 }, !showDelete && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "text",
        size: "small",
        color: "primary",
        className: classes.advancedButton,
        onClick: () => setShowDelete(true)
      },
      t("unregisterEntityDialog.bootstrapState.advancedOptions")
    ), /* @__PURE__ */ React.createElement(DialogActionsPanel, null)), showDelete && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DialogContentText, null, t("unregisterEntityDialog.bootstrapState.advancedDescription")), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "secondary",
        disabled: busy,
        onClick: onDelete
      },
      t("unregisterEntityDialog.deleteButtonTitle")
    ), /* @__PURE__ */ React.createElement(DialogActionsPanel, null))));
  }
  if (state.type === "only-delete") {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DialogContentText, null, t("unregisterEntityDialog.onlyDeleteStateTitle")), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "secondary",
        disabled: busy,
        onClick: onDelete
      },
      t("unregisterEntityDialog.deleteButtonTitle")
    ), /* @__PURE__ */ React.createElement(DialogActionsPanel, null));
  }
  if (state.type === "unregister") {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DialogContentText, null, t("unregisterEntityDialog.unregisterState.title")), /* @__PURE__ */ React.createElement(DialogContentText, { component: "ul" }, state.colocatedEntities.map((e) => /* @__PURE__ */ React.createElement("li", { key: `${e.kind}:${e.namespace}/${e.name}` }, /* @__PURE__ */ React.createElement(EntityRefLink, { entityRef: e })))), /* @__PURE__ */ React.createElement(DialogContentText, null, t("unregisterEntityDialog.unregisterState.subTitle")), /* @__PURE__ */ React.createElement(DialogContentText, { component: "ul" }, /* @__PURE__ */ React.createElement("li", null, state.location)), /* @__PURE__ */ React.createElement(DialogContentText, null, t("unregisterEntityDialog.unregisterState.description", {
      appTitle
    })), /* @__PURE__ */ React.createElement(Box, { marginTop: 2 }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "secondary",
        disabled: busy,
        onClick: onUnregister
      },
      t("unregisterEntityDialog.unregisterState.unregisterButtonTitle")
    ), !showDelete && /* @__PURE__ */ React.createElement(Box, { component: "span", marginLeft: 2 }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "text",
        size: "small",
        color: "primary",
        className: classes.advancedButton,
        onClick: () => setShowDelete(true)
      },
      t("unregisterEntityDialog.unregisterState.advancedOptions")
    ))), showDelete && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Box, { paddingTop: 4, paddingBottom: 4 }, /* @__PURE__ */ React.createElement(Divider, null)), /* @__PURE__ */ React.createElement(DialogContentText, null, t("unregisterEntityDialog.unregisterState.advancedDescription")), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "secondary",
        disabled: busy,
        onClick: onDelete
      },
      t("unregisterEntityDialog.deleteButtonTitle")
    )));
  }
  return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, t("unregisterEntityDialog.errorStateTitle"));
};
const UnregisterEntityDialog = (props) => {
  const { open, onConfirm, onClose, entity } = props;
  const { t } = useTranslationRef(catalogReactTranslationRef);
  return /* @__PURE__ */ React.createElement(Dialog, { open, onClose }, /* @__PURE__ */ React.createElement(DialogTitle, { id: "responsive-dialog-title" }, t("unregisterEntityDialog.title")), /* @__PURE__ */ React.createElement(DialogContent, null, /* @__PURE__ */ React.createElement(Contents, { entity, onConfirm, onClose })));
};

export { UnregisterEntityDialog };
//# sourceMappingURL=UnregisterEntityDialog.esm.js.map
