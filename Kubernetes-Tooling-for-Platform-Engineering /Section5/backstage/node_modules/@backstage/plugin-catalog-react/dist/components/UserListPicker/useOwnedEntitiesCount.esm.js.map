{"version":3,"file":"useOwnedEntitiesCount.esm.js","sources":["../../../src/components/UserListPicker/useOwnedEntitiesCount.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { identityApiRef, useApi } from '@backstage/core-plugin-api';\nimport { compact, intersection } from 'lodash';\nimport { useMemo } from 'react';\nimport useAsync from 'react-use/esm/useAsync';\nimport { catalogApiRef } from '../../api';\nimport { EntityOwnerFilter, EntityUserFilter } from '../../filters';\nimport { useEntityList } from '../../hooks';\nimport { CatalogFilters, reduceCatalogFilters } from '../../utils/filters';\nimport useAsyncFn from 'react-use/esm/useAsyncFn';\nimport useDeepCompareEffect from 'react-use/esm/useDeepCompareEffect';\n\nexport function useOwnedEntitiesCount() {\n  const identityApi = useApi(identityApiRef);\n  const catalogApi = useApi(catalogApiRef);\n\n  const { filters } = useEntityList();\n\n  const { value: ownershipEntityRefs, loading: loadingEntityRefs } = useAsync(\n    async () => (await identityApi.getBackstageIdentity()).ownershipEntityRefs,\n    // load only on mount\n    [],\n  );\n\n  const { user, owners, ...allFilters } = filters;\n  const catalogFilters = reduceCatalogFilters(\n    compact(Object.values(allFilters)),\n  );\n\n  const [{ value: count, loading: loadingEntityOwnership }, fetchEntities] =\n    useAsyncFn(\n      async (req: {\n        ownershipEntityRefs: string[];\n        owners: EntityOwnerFilter | undefined;\n        filter: CatalogFilters;\n      }) => {\n        const ownedClaims = getOwnedCountClaims(\n          req.owners,\n          req.ownershipEntityRefs,\n        );\n        if (ownedClaims === undefined) {\n          // this implicitly means that there aren't claims in common with\n          // the logged in users, so avoid invoking the queryEntities endpoint\n          // which will implicitly returns 0\n          return 0;\n        }\n\n        const { ['metadata.name']: metadata, ...filter } = req.filter.filter;\n\n        const { totalItems } = await catalogApi.queryEntities({\n          ...req.filter,\n          filter: {\n            ...filter,\n            'relations.ownedBy': ownedClaims,\n          },\n          limit: 0,\n        });\n        return totalItems;\n      },\n      [],\n      { loading: true },\n    );\n\n  useDeepCompareEffect(() => {\n    // context contains no filter, wait\n    if (Object.keys(catalogFilters.filter).length === 0) {\n      return;\n    }\n    // ownershipEntityRefs is loading, wait\n    if (ownershipEntityRefs === undefined) {\n      return;\n    }\n    fetchEntities({\n      ownershipEntityRefs,\n      owners,\n      filter: catalogFilters,\n    });\n  }, [ownershipEntityRefs, owners, catalogFilters]);\n\n  const loading = loadingEntityRefs || loadingEntityOwnership;\n\n  return {\n    count,\n    loading,\n    filter: useMemo(\n      () => EntityUserFilter.owned(ownershipEntityRefs ?? []),\n      [ownershipEntityRefs],\n    ),\n    ownershipEntityRefs,\n  };\n}\n\nfunction getOwnedCountClaims(\n  owners: EntityOwnerFilter | undefined,\n  ownershipEntityRefs: string[] | undefined,\n) {\n  if (ownershipEntityRefs === undefined) {\n    return undefined;\n  }\n  const ownersRefs = owners?.values ?? [];\n  if (ownersRefs.length) {\n    const commonOwnedBy = intersection(ownersRefs, ownershipEntityRefs);\n    if (commonOwnedBy.length === 0) {\n      return undefined;\n    }\n    return commonOwnedBy;\n  }\n  return ownershipEntityRefs;\n}\n"],"names":[],"mappings":"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"}