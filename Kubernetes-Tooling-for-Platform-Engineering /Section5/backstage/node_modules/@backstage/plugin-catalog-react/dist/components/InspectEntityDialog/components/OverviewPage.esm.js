import Box from '@material-ui/core/Box';
import DialogContentText from '@material-ui/core/DialogContentText';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import groupBy from 'lodash/groupBy';
import sortBy from 'lodash/sortBy';
import React from 'react';
import { EntityRefLink } from '../../EntityRefLink/EntityRefLink.esm.js';
import { stringifyEntityRef } from '@backstage/catalog-model';
import 'lodash/get';
import { Container, ListItemText, ListSubheader, HelpIcon, KeyValueListItem } from './common.esm.js';
import { CopyTextButton } from '@backstage/core-components';
import { catalogReactTranslationRef } from '../../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useStyles = makeStyles({
  root: {
    display: "flex",
    flexDirection: "column"
  }
});
function OverviewPage(props) {
  const classes = useStyles();
  const {
    apiVersion,
    kind,
    metadata,
    spec,
    relations = [],
    status = {}
  } = props.entity;
  const groupedRelations = groupBy(
    sortBy(relations, (r) => r.targetRef),
    "type"
  );
  const { t } = useTranslationRef(catalogReactTranslationRef);
  const entityRef = stringifyEntityRef(props.entity);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(DialogContentText, { variant: "h2" }, t("inspectEntityDialog.overviewPage.title")), /* @__PURE__ */ React.createElement("div", { className: classes.root }, /* @__PURE__ */ React.createElement(Container, { title: "Identity" }, /* @__PURE__ */ React.createElement(List, { dense: true }, /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemText, { primary: "apiVersion", secondary: apiVersion })), /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemText, { primary: "kind", secondary: kind })), spec?.type && /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(
    ListItemText,
    {
      primary: "spec.type",
      secondary: spec.type?.toString()
    }
  )), metadata.uid && /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemText, { primary: "uid", secondary: metadata.uid }), /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, /* @__PURE__ */ React.createElement(CopyTextButton, { text: metadata.uid }))), metadata.etag && /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemText, { primary: "etag", secondary: metadata.etag }), /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, /* @__PURE__ */ React.createElement(CopyTextButton, { text: metadata.etag }))), /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemText, { primary: "entityRef", secondary: entityRef }), /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, /* @__PURE__ */ React.createElement(CopyTextButton, { text: entityRef }))))), /* @__PURE__ */ React.createElement(Container, { title: "Metadata" }, !!Object.keys(metadata.annotations || {}).length && /* @__PURE__ */ React.createElement(
    List,
    {
      dense: true,
      subheader: /* @__PURE__ */ React.createElement(ListSubheader, null, "Annotations", /* @__PURE__ */ React.createElement(HelpIcon, { to: "https://backstage.io/docs/features/software-catalog/well-known-annotations" }))
    },
    Object.entries(metadata.annotations).map((entry) => /* @__PURE__ */ React.createElement(KeyValueListItem, { key: entry[0], indent: true, entry }))
  ), !!Object.keys(metadata.labels || {}).length && /* @__PURE__ */ React.createElement(List, { dense: true, subheader: /* @__PURE__ */ React.createElement(ListSubheader, null, "Labels") }, Object.entries(metadata.labels).map((entry) => /* @__PURE__ */ React.createElement(KeyValueListItem, { key: entry[0], indent: true, entry }))), !!metadata.tags?.length && /* @__PURE__ */ React.createElement(List, { dense: true, subheader: /* @__PURE__ */ React.createElement(ListSubheader, null, "Tags") }, metadata.tags.map((tag, index) => /* @__PURE__ */ React.createElement(ListItem, { key: `${tag}-${index}` }, /* @__PURE__ */ React.createElement(ListItemIcon, null), /* @__PURE__ */ React.createElement(ListItemText, { primary: tag }))))), !!relations.length && /* @__PURE__ */ React.createElement(
    Container,
    {
      title: "Relations",
      helpLink: "https://backstage.io/docs/features/software-catalog/well-known-relations"
    },
    Object.entries(groupedRelations).map(
      ([type, groupRelations], index) => /* @__PURE__ */ React.createElement("div", { key: index }, /* @__PURE__ */ React.createElement(List, { dense: true, subheader: /* @__PURE__ */ React.createElement(ListSubheader, null, type) }, groupRelations.map((group) => /* @__PURE__ */ React.createElement(ListItem, { key: group.targetRef }, /* @__PURE__ */ React.createElement(
        ListItemText,
        {
          primary: /* @__PURE__ */ React.createElement(EntityRefLink, { entityRef: group.targetRef })
        }
      )))))
    )
  ), !!status.items?.length && /* @__PURE__ */ React.createElement(
    Container,
    {
      title: "Status",
      helpLink: "https://backstage.io/docs/features/software-catalog/well-known-statuses"
    },
    status.items.map((item, index) => /* @__PURE__ */ React.createElement("div", { key: index }, /* @__PURE__ */ React.createElement(Typography, null, item.level, ": ", item.type), /* @__PURE__ */ React.createElement(Box, { ml: 2 }, item.message)))
  )));
}

export { OverviewPage };
//# sourceMappingURL=OverviewPage.esm.js.map
