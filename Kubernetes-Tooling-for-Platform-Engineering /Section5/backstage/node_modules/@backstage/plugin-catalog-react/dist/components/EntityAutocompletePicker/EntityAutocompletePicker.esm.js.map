{"version":3,"file":"EntityAutocompletePicker.esm.js","sources":["../../../src/components/EntityAutocompletePicker/EntityAutocompletePicker.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Box from '@material-ui/core/Box';\nimport { TextFieldProps } from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport React, { useEffect, useMemo, useState, ReactNode } from 'react';\nimport { useApi } from '@backstage/core-plugin-api';\nimport useAsync from 'react-use/esm/useAsync';\nimport { catalogApiRef } from '../../api';\nimport { EntityAutocompletePickerOption } from './EntityAutocompletePickerOption';\nimport { EntityAutocompletePickerInput } from './EntityAutocompletePickerInput';\nimport {\n  DefaultEntityFilters,\n  useEntityList,\n} from '../../hooks/useEntityListProvider';\nimport { EntityFilter } from '../../types';\nimport { reduceBackendCatalogFilters } from '../../utils/filters';\n\n/** @public */\nexport type AllowedEntityFilters<T extends DefaultEntityFilters> = {\n  [K in keyof T]-?: NonNullable<T[K]> extends EntityFilter & {\n    values: string[];\n  }\n    ? K\n    : never;\n}[keyof T];\n\n/** @public */\nexport type EntityAutocompletePickerProps<\n  T extends DefaultEntityFilters = DefaultEntityFilters,\n  Name extends AllowedEntityFilters<T> = AllowedEntityFilters<T>,\n> = {\n  label: string;\n  name: Name;\n  path: string;\n  showCounts?: boolean;\n  Filter: { new (values: string[]): NonNullable<T[Name]> };\n  InputProps?: TextFieldProps;\n  initialSelectedOptions?: string[];\n  filtersForAvailableValues?: Array<keyof T>;\n};\n\n/** @public */\nexport type CatalogReactEntityAutocompletePickerClassKey = 'root' | 'label';\n\nconst useStyles = makeStyles(\n  {\n    root: {},\n    label: {\n      textTransform: 'none',\n      fontWeight: 'bold',\n    },\n  },\n  { name: 'CatalogReactEntityAutocompletePicker' },\n);\n\n/** @public */\nexport function EntityAutocompletePicker<\n  T extends DefaultEntityFilters = DefaultEntityFilters,\n  Name extends AllowedEntityFilters<T> = AllowedEntityFilters<T>,\n>(props: EntityAutocompletePickerProps<T, Name>) {\n  const {\n    label,\n    name,\n    path,\n    showCounts,\n    Filter,\n    InputProps,\n    initialSelectedOptions = [],\n    filtersForAvailableValues = ['kind'],\n  } = props;\n\n  const classes = useStyles();\n\n  const {\n    updateFilters,\n    filters,\n    queryParameters: { [name]: queryParameter },\n  } = useEntityList<T>();\n\n  const catalogApi = useApi(catalogApiRef);\n  const availableValuesFilters = filtersForAvailableValues.map(\n    f => filters[f] as EntityFilter | undefined,\n  );\n  const { value: availableValues } = useAsync(async () => {\n    const facet = path;\n    const { facets } = await catalogApi.getEntityFacets({\n      facets: [facet],\n      filter: reduceBackendCatalogFilters(\n        availableValuesFilters.filter(Boolean) as EntityFilter[],\n      ),\n    });\n\n    return Object.fromEntries(\n      facets[facet].map(({ value, count }) => [value, count]),\n    );\n  }, [...availableValuesFilters]);\n\n  const queryParameters = useMemo(\n    () => [queryParameter].flat().filter(Boolean) as string[],\n    [queryParameter],\n  );\n\n  const [selectedOptions, setSelectedOptions] = useState(\n    queryParameters.length\n      ? queryParameters\n      : (filters[name] as unknown as { values: string[] })?.values ??\n          initialSelectedOptions,\n  );\n\n  // Set selected options on query parameter updates; this happens at initial page load and from\n  // external updates to the page location\n  useEffect(() => {\n    if (queryParameters.length) {\n      setSelectedOptions(queryParameters);\n    }\n  }, [queryParameters]);\n\n  const availableOptions = Object.keys(availableValues ?? {});\n  const shouldAddFilter = selectedOptions.length && availableOptions.length;\n\n  useEffect(() => {\n    updateFilters({\n      [name]: shouldAddFilter ? new Filter(selectedOptions) : undefined,\n    } as Partial<T>);\n  }, [name, shouldAddFilter, selectedOptions, Filter, updateFilters]);\n\n  const filter = filters[name];\n  if (\n    (filter && typeof filter === 'object' && !('values' in filter)) ||\n    !availableOptions.length\n  ) {\n    return null;\n  }\n\n  return (\n    <Box className={classes.root} pb={1} pt={1}>\n      <Typography className={classes.label} variant=\"button\" component=\"label\">\n        {label}\n        <Autocomplete<string, true>\n          PopperComponent={popperProps => (\n            <div {...popperProps}>{popperProps.children as ReactNode}</div>\n          )}\n          multiple\n          disableCloseOnSelect\n          options={availableOptions}\n          value={selectedOptions}\n          onChange={(_event: object, options: string[]) =>\n            setSelectedOptions(options)\n          }\n          renderOption={(option, { selected }) => (\n            <EntityAutocompletePickerOption\n              selected={selected}\n              value={option}\n              availableOptions={availableValues}\n              showCounts={!!showCounts}\n            />\n          )}\n          size=\"small\"\n          popupIcon={\n            <ExpandMoreIcon data-testid={`${String(name)}-picker-expand`} />\n          }\n          renderInput={params => (\n            <EntityAutocompletePickerInput {...params} {...InputProps} />\n          )}\n        />\n      </Typography>\n    </Box>\n  );\n}\n"],"names":[],"mappings":"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"}