import { useApi, identityApiRef } from '@backstage/core-plugin-api';
import { compact, intersection } from 'lodash';
import { useMemo } from 'react';
import useAsync from 'react-use/esm/useAsync';
import { catalogApiRef } from '../../api.esm.js';
import { EntityUserFilter } from '../../filters.esm.js';
import '../../hooks/useEntity.esm.js';
import { useEntityList } from '../../hooks/useEntityListProvider.esm.js';
import 'lodash/isEqual';
import 'lodash/sortBy';
import '@backstage/catalog-model';
import 'react-use/esm/useObservable';
import '../../apis/EntityPresentationApi/EntityPresentationApi.esm.js';
import 'lodash/get';
import '../../apis/StarredEntitiesApi/StarredEntitiesApi.esm.js';
import 'zen-observable';
import { reduceCatalogFilters } from '../../utils/filters.esm.js';
import useAsyncFn from 'react-use/esm/useAsyncFn';
import useDeepCompareEffect from 'react-use/esm/useDeepCompareEffect';

function useOwnedEntitiesCount() {
  const identityApi = useApi(identityApiRef);
  const catalogApi = useApi(catalogApiRef);
  const { filters } = useEntityList();
  const { value: ownershipEntityRefs, loading: loadingEntityRefs } = useAsync(
    async () => (await identityApi.getBackstageIdentity()).ownershipEntityRefs,
    // load only on mount
    []
  );
  const { user, owners, ...allFilters } = filters;
  const catalogFilters = reduceCatalogFilters(
    compact(Object.values(allFilters))
  );
  const [{ value: count, loading: loadingEntityOwnership }, fetchEntities] = useAsyncFn(
    async (req) => {
      const ownedClaims = getOwnedCountClaims(
        req.owners,
        req.ownershipEntityRefs
      );
      if (ownedClaims === void 0) {
        return 0;
      }
      const { ["metadata.name"]: metadata, ...filter } = req.filter.filter;
      const { totalItems } = await catalogApi.queryEntities({
        ...req.filter,
        filter: {
          ...filter,
          "relations.ownedBy": ownedClaims
        },
        limit: 0
      });
      return totalItems;
    },
    [],
    { loading: true }
  );
  useDeepCompareEffect(() => {
    if (Object.keys(catalogFilters.filter).length === 0) {
      return;
    }
    if (ownershipEntityRefs === void 0) {
      return;
    }
    fetchEntities({
      ownershipEntityRefs,
      owners,
      filter: catalogFilters
    });
  }, [ownershipEntityRefs, owners, catalogFilters]);
  const loading = loadingEntityRefs || loadingEntityOwnership;
  return {
    count,
    loading,
    filter: useMemo(
      () => EntityUserFilter.owned(ownershipEntityRefs ?? []),
      [ownershipEntityRefs]
    ),
    ownershipEntityRefs
  };
}
function getOwnedCountClaims(owners, ownershipEntityRefs) {
  if (ownershipEntityRefs === void 0) {
    return void 0;
  }
  const ownersRefs = owners?.values ?? [];
  if (ownersRefs.length) {
    const commonOwnedBy = intersection(ownersRefs, ownershipEntityRefs);
    if (commonOwnedBy.length === 0) {
      return void 0;
    }
    return commonOwnedBy;
  }
  return ownershipEntityRefs;
}

export { useOwnedEntitiesCount };
//# sourceMappingURL=useOwnedEntitiesCount.esm.js.map
