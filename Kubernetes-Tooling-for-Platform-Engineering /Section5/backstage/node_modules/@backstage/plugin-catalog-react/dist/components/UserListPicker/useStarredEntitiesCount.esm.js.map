{"version":3,"file":"useStarredEntitiesCount.esm.js","sources":["../../../src/components/UserListPicker/useStarredEntitiesCount.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryEntitiesInitialRequest } from '@backstage/catalog-client';\nimport { parseEntityRef, stringifyEntityRef } from '@backstage/catalog-model';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { compact, isEqual } from 'lodash';\nimport { useMemo, useRef } from 'react';\nimport useAsync from 'react-use/esm/useAsync';\nimport { catalogApiRef } from '../../api';\nimport { EntityUserFilter } from '../../filters';\nimport { useEntityList, useStarredEntities } from '../../hooks';\nimport { reduceCatalogFilters } from '../../utils/filters';\n\nexport function useStarredEntitiesCount() {\n  const catalogApi = useApi(catalogApiRef);\n  const { filters } = useEntityList();\n  const { starredEntities } = useStarredEntities();\n\n  const prevRequest = useRef<QueryEntitiesInitialRequest>();\n  const request = useMemo(() => {\n    const { user, ...allFilters } = filters;\n    const compacted = compact(Object.values(allFilters));\n    const catalogFilters = reduceCatalogFilters(compacted);\n\n    const facet = 'metadata.name';\n\n    const newRequest: QueryEntitiesInitialRequest = {\n      ...catalogFilters,\n      filter: {\n        ...catalogFilters.filter,\n        /**\n         * here we are filtering entities by `name`. Given this filter,\n         * the response might contain more entities than expected, in case multiple entities\n         * of different kind or namespace share the same name. Those extra entities are filtered out\n         * client side by `EntityUserFilter`, so they won't be visible to the user.\n         */\n        [facet]: Array.from(starredEntities).map(e => parseEntityRef(e).name),\n      },\n      /**\n       * limit is set to a high value as we are not expecting many starred entities\n       */\n      limit: 1000,\n    };\n    if (isEqual(newRequest, prevRequest.current)) {\n      return prevRequest.current;\n    }\n    prevRequest.current = newRequest;\n\n    return newRequest;\n  }, [filters, starredEntities]);\n\n  const { value: count, loading } = useAsync(async () => {\n    if (!starredEntities.size) {\n      return 0;\n    }\n\n    /**\n     * given a list of starred entity refs and some filters coming from CatalogPage,\n     * it reduces the list of starred entities, to a list of entities that matches the\n     * provided filters. It won't be possible to getEntitiesByRefs\n     * as the method doesn't accept any filter.\n     */\n    const response = await catalogApi.queryEntities(request);\n\n    return response.items\n      .map(e =>\n        stringifyEntityRef({\n          kind: e.kind,\n          namespace: e.metadata.namespace,\n          name: e.metadata.name,\n        }),\n      )\n      .filter(e => starredEntities.has(e)).length;\n  }, [request, starredEntities]);\n\n  const filter = useMemo(\n    () => EntityUserFilter.starred(Array.from(starredEntities)),\n    [starredEntities],\n  );\n\n  return { count, loading, filter };\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AA2BO,SAAS,uBAA0B,GAAA;AACxC,EAAM,MAAA,UAAA,GAAa,OAAO,aAAa,CAAA;AACvC,EAAM,MAAA,EAAE,OAAQ,EAAA,GAAI,aAAc,EAAA;AAClC,EAAM,MAAA,EAAE,eAAgB,EAAA,GAAI,kBAAmB,EAAA;AAE/C,EAAA,MAAM,cAAc,MAAoC,EAAA;AACxD,EAAM,MAAA,OAAA,GAAU,QAAQ,MAAM;AAC5B,IAAA,MAAM,EAAE,IAAA,EAAM,GAAG,UAAA,EAAe,GAAA,OAAA;AAChC,IAAA,MAAM,SAAY,GAAA,OAAA,CAAQ,MAAO,CAAA,MAAA,CAAO,UAAU,CAAC,CAAA;AACnD,IAAM,MAAA,cAAA,GAAiB,qBAAqB,SAAS,CAAA;AAErD,IAAA,MAAM,KAAQ,GAAA,eAAA;AAEd,IAAA,MAAM,UAA0C,GAAA;AAAA,MAC9C,GAAG,cAAA;AAAA,MACH,MAAQ,EAAA;AAAA,QACN,GAAG,cAAe,CAAA,MAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOlB,CAAC,KAAK,GAAG,KAAA,CAAM,IAAK,CAAA,eAAe,CAAE,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,cAAA,CAAe,CAAC,CAAA,CAAE,IAAI;AAAA,OACtE;AAAA;AAAA;AAAA;AAAA,MAIA,KAAO,EAAA;AAAA,KACT;AACA,IAAA,IAAI,OAAQ,CAAA,UAAA,EAAY,WAAY,CAAA,OAAO,CAAG,EAAA;AAC5C,MAAA,OAAO,WAAY,CAAA,OAAA;AAAA;AAErB,IAAA,WAAA,CAAY,OAAU,GAAA,UAAA;AAEtB,IAAO,OAAA,UAAA;AAAA,GACN,EAAA,CAAC,OAAS,EAAA,eAAe,CAAC,CAAA;AAE7B,EAAA,MAAM,EAAE,KAAO,EAAA,KAAA,EAAO,OAAQ,EAAA,GAAI,SAAS,YAAY;AACrD,IAAI,IAAA,CAAC,gBAAgB,IAAM,EAAA;AACzB,MAAO,OAAA,CAAA;AAAA;AAST,IAAA,MAAM,QAAW,GAAA,MAAM,UAAW,CAAA,aAAA,CAAc,OAAO,CAAA;AAEvD,IAAA,OAAO,SAAS,KACb,CAAA,GAAA;AAAA,MAAI,OACH,kBAAmB,CAAA;AAAA,QACjB,MAAM,CAAE,CAAA,IAAA;AAAA,QACR,SAAA,EAAW,EAAE,QAAS,CAAA,SAAA;AAAA,QACtB,IAAA,EAAM,EAAE,QAAS,CAAA;AAAA,OAClB;AAAA,MAEF,MAAO,CAAA,CAAA,CAAA,KAAK,gBAAgB,GAAI,CAAA,CAAC,CAAC,CAAE,CAAA,MAAA;AAAA,GACtC,EAAA,CAAC,OAAS,EAAA,eAAe,CAAC,CAAA;AAE7B,EAAA,MAAM,MAAS,GAAA,OAAA;AAAA,IACb,MAAM,gBAAiB,CAAA,OAAA,CAAQ,KAAM,CAAA,IAAA,CAAK,eAAe,CAAC,CAAA;AAAA,IAC1D,CAAC,eAAe;AAAA,GAClB;AAEA,EAAO,OAAA,EAAE,KAAO,EAAA,OAAA,EAAS,MAAO,EAAA;AAClC;;;;"}