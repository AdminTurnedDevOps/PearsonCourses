{"version":3,"file":"EntityPresentationApi.esm.js","sources":["../../../src/apis/EntityPresentationApi/EntityPresentationApi.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport {\n  ApiRef,\n  IconComponent,\n  createApiRef,\n} from '@backstage/core-plugin-api';\nimport { Observable } from '@backstage/types';\n\n/**\n * An API that handles how to represent entities in the interface.\n *\n * @public\n */\nexport const entityPresentationApiRef: ApiRef<EntityPresentationApi> =\n  createApiRef({\n    id: 'plugin.catalog.entity-presentation',\n  });\n\n/**\n * The visual presentation of an entity reference at some point in time.\n *\n * @public\n */\nexport interface EntityRefPresentationSnapshot {\n  /**\n   * The ref to the entity that this snapshot represents.\n   *\n   * @remarks\n   *\n   * Note that when the input data was broken or had missing vital pieces of\n   * information, this string may contain placeholders such as \"unknown\". You\n   * can therefore not necessarily assume that the ref is completely valid and\n   * usable for example for forming a clickable link to the entity.\n   */\n  entityRef: string;\n  /**\n   * A string that can be used as a plain representation of the entity, for\n   * example in a header or a link.\n   *\n   * @remarks\n   *\n   * The title may be short and not contain all of the information that the\n   * entity holds. When rendering the primary title, you may also want to\n   * make sure to add more contextual information nearby such as the icon or\n   * secondary title, since the primary could for example just be the\n   * `metadata.name` of the entity which might be ambiguous to the reader.\n   */\n  primaryTitle: string;\n  /**\n   * Optionally, some additional textual information about the entity, to be\n   * used as a clarification on top of the primary title.\n   *\n   * @remarks\n   *\n   * This text can for example be rendered in a tooltip or be used as a\n   * subtitle. It may not be sufficient to display on its own; it should\n   * typically be used in conjunction with the primary title. It can contain\n   * such information as the entity ref and/or a `spec.type` etc.\n   */\n  secondaryTitle?: string;\n  /**\n   * Optionally, an icon that represents the kind/type of entity.\n   *\n   * @remarks\n   *\n   * This icon should ideally be easily recognizable as the kind of entity, and\n   * be used consistently throughout the Backstage interface. It can be rendered\n   * both in larger formats such as in a header, or in smaller formats such as\n   * inline with regular text, so bear in mind that the legibility should be\n   * high in both cases.\n   *\n   * A value of `false` here indicates the desire to not have an icon present\n   * for the given implementation. A value of `undefined` leaves it at the\n   * discretion of the display layer to choose what to do (such as for example\n   * showing a fallback icon).\n   */\n  Icon?: IconComponent | undefined | false;\n}\n\n/**\n * The visual presentation of an entity reference.\n *\n * @public\n */\nexport interface EntityRefPresentation {\n  /**\n   * The representation that's suitable to use for this entity right now.\n   */\n  snapshot: EntityRefPresentationSnapshot;\n  /**\n   * Some presentation implementations support emitting updated snapshots over\n   * time, for example after retrieving additional data from the catalog or\n   * elsewhere.\n   */\n  update$?: Observable<EntityRefPresentationSnapshot>;\n  /**\n   * A promise that resolves to a usable entity presentation.\n   */\n  promise: Promise<EntityRefPresentationSnapshot>;\n}\n\n/**\n * An API that decides how to visually represent entities in the interface.\n *\n * @remarks\n *\n * Most consumers will want to use the {@link useEntityPresentation} hook\n * instead of this interface directly.\n *\n * @public\n */\nexport interface EntityPresentationApi {\n  /**\n   * Fetches the presentation for an entity.\n   *\n   * @param entityOrRef - Either an entity, or a string ref to it. If you pass\n   *   in an entity, it is assumed that it is not a partial one - i.e. only pass\n   *   in an entity if you know that it was fetched in such a way that it\n   *   contains all of the fields that the representation renderer needs.\n   * @param context - Contextual information that may affect the presentation.\n   */\n  forEntity(\n    entityOrRef: Entity | string,\n    context?: {\n      defaultKind?: string;\n      defaultNamespace?: string;\n    },\n  ): EntityRefPresentation;\n}\n"],"names":[],"mappings":";;AA6BO,MAAM,2BACX,YAAa,CAAA;AAAA,EACX,EAAI,EAAA;AACN,CAAC;;;;"}