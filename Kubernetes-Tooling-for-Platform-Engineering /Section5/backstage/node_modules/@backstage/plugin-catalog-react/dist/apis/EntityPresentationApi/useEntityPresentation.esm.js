import { stringifyEntityRef } from '@backstage/catalog-model';
import { useApiHolder } from '@backstage/core-plugin-api';
import { useMemo } from 'react';
import { entityPresentationApiRef } from './EntityPresentationApi.esm.js';
import { defaultEntityPresentation } from './defaultEntityPresentation.esm.js';
import { useUpdatingObservable } from './useUpdatingObservable.esm.js';

function useEntityPresentation(entityOrRef, context) {
  const apis = useApiHolder();
  const entityPresentationApi = apis.get(entityPresentationApiRef);
  const deps = [
    entityPresentationApi,
    JSON.stringify(entityOrRef),
    JSON.stringify(context || null)
  ];
  const presentation = useMemo(
    () => {
      if (!entityPresentationApi) {
        const fallback = defaultEntityPresentation(entityOrRef, context);
        return { snapshot: fallback, promise: Promise.resolve(fallback) };
      }
      return entityPresentationApi.forEntity(
        typeof entityOrRef === "string" || "metadata" in entityOrRef ? entityOrRef : stringifyEntityRef(entityOrRef),
        context
      );
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  return useUpdatingObservable(presentation.snapshot, presentation.update$, [
    presentation
  ]);
}

export { useEntityPresentation };
//# sourceMappingURL=useEntityPresentation.esm.js.map
