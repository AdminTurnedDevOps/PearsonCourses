import { stringifyEntityRef, DEFAULT_NAMESPACE } from '@backstage/catalog-model';
import get from 'lodash/get';

function defaultEntityPresentation(entityOrRef, context) {
  const { kind, namespace, name, title, description, displayName, type } = getParts(entityOrRef);
  const entityRef = stringifyEntityRef({
    kind: kind || "unknown",
    namespace: namespace || DEFAULT_NAMESPACE,
    name: name || "unknown"
  });
  const shortRef = getShortRef({ kind, namespace, name, context });
  const primary = [displayName, title, shortRef].find(
    (candidate) => candidate && typeof candidate === "string"
  );
  const secondary = [
    primary !== entityRef ? entityRef : void 0,
    type,
    description
  ].filter((candidate) => candidate && typeof candidate === "string").join(" | ");
  return {
    entityRef,
    primaryTitle: primary,
    secondaryTitle: secondary || void 0,
    Icon: void 0
    // leave it up to the presentation API to handle
  };
}
const isString = (value) => Boolean(value) && typeof value === "string";
function getParts(entityOrRef) {
  if (typeof entityOrRef === "string") {
    let colonI = entityOrRef.indexOf(":");
    const slashI = entityOrRef.indexOf("/");
    if (slashI !== -1 && slashI < colonI) {
      colonI = -1;
    }
    const kind = colonI === -1 ? void 0 : entityOrRef.slice(0, colonI);
    const namespace = slashI === -1 ? void 0 : entityOrRef.slice(colonI + 1, slashI);
    const name = entityOrRef.slice(Math.max(colonI + 1, slashI + 1));
    return { kind, namespace, name };
  }
  if (typeof entityOrRef === "object" && entityOrRef !== null) {
    const kind = [get(entityOrRef, "kind")].find(isString);
    const namespace = [
      get(entityOrRef, "metadata.namespace"),
      get(entityOrRef, "namespace")
    ].find(isString);
    const name = [
      get(entityOrRef, "metadata.name"),
      get(entityOrRef, "name")
    ].find(isString);
    const title = [get(entityOrRef, "metadata.title")].find(isString);
    const description = [get(entityOrRef, "metadata.description")].find(
      isString
    );
    const displayName = [get(entityOrRef, "spec.profile.displayName")].find(
      isString
    );
    const type = [get(entityOrRef, "spec.type")].find(isString);
    return { kind, namespace, name, title, description, displayName, type };
  }
  return {};
}
function getShortRef(options) {
  const kind = options.kind?.toLocaleLowerCase("en-US") || "unknown";
  const namespace = options.namespace || DEFAULT_NAMESPACE;
  const name = options.name || "unknown";
  const defaultKindLower = options.context?.defaultKind?.toLocaleLowerCase("en-US");
  const defaultNamespaceLower = options.context?.defaultNamespace?.toLocaleLowerCase("en-US");
  let result = name;
  if (defaultNamespaceLower && namespace.toLocaleLowerCase("en-US") !== defaultNamespaceLower || namespace !== DEFAULT_NAMESPACE) {
    result = `${namespace}/${result}`;
  }
  if (defaultKindLower && kind.toLocaleLowerCase("en-US") !== defaultKindLower) {
    result = `${kind}:${result}`;
  }
  return result;
}

export { defaultEntityPresentation };
//# sourceMappingURL=defaultEntityPresentation.esm.js.map
