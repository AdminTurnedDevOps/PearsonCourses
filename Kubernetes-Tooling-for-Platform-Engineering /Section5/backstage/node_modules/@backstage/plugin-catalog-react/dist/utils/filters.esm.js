import { EntityTagFilter, EntityOwnerFilter, EntityLifecycleFilter, EntityNamespaceFilter, EntityUserFilter, EntityOrphanFilter, EntityTextFilter, UserListFilter } from '../filters.esm.js';

function isEntityTextFilter(t) {
  return !!t.getFullTextFilters;
}
function reduceCatalogFilters(filters) {
  const condensedFilters = filters.reduce(
    (compoundFilter, filter) => {
      return {
        ...compoundFilter,
        ...filter.getCatalogFilters ? filter.getCatalogFilters() : {}
      };
    },
    {}
  );
  const fullTextFilter = filters.find(isEntityTextFilter)?.getFullTextFilters();
  return { filter: condensedFilters, fullTextFilter };
}
function reduceBackendCatalogFilters(filters) {
  const backendCatalogFilters = {};
  filters.forEach((filter) => {
    if (filter instanceof EntityTagFilter || filter instanceof EntityOwnerFilter || filter instanceof EntityLifecycleFilter || filter instanceof EntityNamespaceFilter || filter instanceof EntityUserFilter || filter instanceof EntityOrphanFilter || filter instanceof EntityTextFilter || filter instanceof UserListFilter) {
      return;
    }
    Object.assign(backendCatalogFilters, filter.getCatalogFilters?.() || {});
  });
  return backendCatalogFilters;
}
function reduceEntityFilters(filters) {
  return (entity) => filters.every(
    (filter) => !filter.filterEntity || filter.filterEntity(entity)
  );
}

export { reduceBackendCatalogFilters, reduceCatalogFilters, reduceEntityFilters };
//# sourceMappingURL=filters.esm.js.map
