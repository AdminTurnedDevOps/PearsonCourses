{"version":3,"file":"useRelatedEntities.esm.js","sources":["../../src/hooks/useRelatedEntities.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, parseEntityRef } from '@backstage/catalog-model';\nimport { useApi } from '@backstage/core-plugin-api';\nimport useAsync from 'react-use/esm/useAsync';\nimport { catalogApiRef } from '../api';\n\n/**\n * Fetches all entities that appear in the entity's relations, optionally\n * filtered by relation type and kind.\n *\n * @public\n */\nexport function useRelatedEntities(\n  entity: Entity,\n  relationFilter: { type?: string; kind?: string },\n): {\n  entities: Entity[] | undefined;\n  loading: boolean;\n  error: Error | undefined;\n} {\n  const filterByTypeLower = relationFilter?.type?.toLocaleLowerCase('en-US');\n  const filterByKindLower = relationFilter?.kind?.toLocaleLowerCase('en-US');\n  const catalogApi = useApi(catalogApiRef);\n\n  const {\n    loading,\n    value: entities,\n    error,\n  } = useAsync(async () => {\n    const relations = entity.relations?.filter(\n      r =>\n        (!filterByTypeLower ||\n          r.type.toLocaleLowerCase('en-US') === filterByTypeLower) &&\n        (!filterByKindLower ||\n          parseEntityRef(r.targetRef).kind === filterByKindLower),\n    );\n\n    if (!relations?.length) {\n      return [];\n    }\n\n    const { items } = await catalogApi.getEntitiesByRefs({\n      entityRefs: relations.map(r => r.targetRef),\n    });\n\n    return items.filter((x): x is Entity => Boolean(x));\n  }, [entity, filterByTypeLower, filterByKindLower]);\n\n  return {\n    entities,\n    loading,\n    error,\n  };\n}\n"],"names":[],"mappings":";;;;;AA2BgB,SAAA,kBAAA,CACd,QACA,cAKA,EAAA;AACA,EAAA,MAAM,iBAAoB,GAAA,cAAA,EAAgB,IAAM,EAAA,iBAAA,CAAkB,OAAO,CAAA;AACzE,EAAA,MAAM,iBAAoB,GAAA,cAAA,EAAgB,IAAM,EAAA,iBAAA,CAAkB,OAAO,CAAA;AACzE,EAAM,MAAA,UAAA,GAAa,OAAO,aAAa,CAAA;AAEvC,EAAM,MAAA;AAAA,IACJ,OAAA;AAAA,IACA,KAAO,EAAA,QAAA;AAAA,IACP;AAAA,GACF,GAAI,SAAS,YAAY;AACvB,IAAM,MAAA,SAAA,GAAY,OAAO,SAAW,EAAA,MAAA;AAAA,MAClC,CACG,CAAA,KAAA,CAAA,CAAC,iBACA,IAAA,CAAA,CAAE,KAAK,iBAAkB,CAAA,OAAO,CAAM,KAAA,iBAAA,MACvC,CAAC,iBACA,IAAA,cAAA,CAAe,CAAE,CAAA,SAAS,EAAE,IAAS,KAAA,iBAAA;AAAA,KAC3C;AAEA,IAAI,IAAA,CAAC,WAAW,MAAQ,EAAA;AACtB,MAAA,OAAO,EAAC;AAAA;AAGV,IAAA,MAAM,EAAE,KAAA,EAAU,GAAA,MAAM,WAAW,iBAAkB,CAAA;AAAA,MACnD,UAAY,EAAA,SAAA,CAAU,GAAI,CAAA,CAAA,CAAA,KAAK,EAAE,SAAS;AAAA,KAC3C,CAAA;AAED,IAAA,OAAO,MAAM,MAAO,CAAA,CAAC,CAAmB,KAAA,OAAA,CAAQ,CAAC,CAAC,CAAA;AAAA,GACjD,EAAA,CAAC,MAAQ,EAAA,iBAAA,EAAmB,iBAAiB,CAAC,CAAA;AAEjD,EAAO,OAAA;AAAA,IACL,QAAA;AAAA,IACA,OAAA;AAAA,IACA;AAAA,GACF;AACF;;;;"}