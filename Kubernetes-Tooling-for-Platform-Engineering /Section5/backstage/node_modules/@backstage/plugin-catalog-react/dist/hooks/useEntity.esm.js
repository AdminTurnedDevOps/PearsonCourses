import { stringifyEntityRef } from '@backstage/catalog-model';
import { AnalyticsContext } from '@backstage/core-plugin-api';
import { createVersionedContext, createVersionedValueMap, useVersionedContext } from '@backstage/version-bridge';
import React from 'react';

const NewEntityContext = createVersionedContext(
  "entity-context"
);
const AsyncEntityProvider = (props) => {
  const { children, entity, loading, error, refresh } = props;
  const value = { entity, loading, error, refresh };
  return /* @__PURE__ */ React.createElement(NewEntityContext.Provider, { value: createVersionedValueMap({ 1: value }) }, /* @__PURE__ */ React.createElement(
    AnalyticsContext,
    {
      attributes: {
        ...entity ? { entityRef: stringifyEntityRef(entity) } : void 0
      }
    },
    children
  ));
};
const EntityProvider = (props) => /* @__PURE__ */ React.createElement(
  AsyncEntityProvider,
  {
    entity: props.entity,
    loading: !Boolean(props.entity),
    error: void 0,
    refresh: void 0,
    children: props.children
  }
);
function useEntity() {
  const versionedHolder = useVersionedContext(
    "entity-context"
  );
  if (!versionedHolder) {
    throw new Error("Entity context is not available");
  }
  const value = versionedHolder.atVersion(1);
  if (!value) {
    throw new Error("EntityContext v1 not available");
  }
  if (!value.entity) {
    throw new Error(
      "useEntity hook is being called outside of an EntityLayout where the entity has not been loaded. If this is intentional, please use useAsyncEntity instead."
    );
  }
  return { entity: value.entity };
}
function useAsyncEntity() {
  const versionedHolder = useVersionedContext(
    "entity-context"
  );
  if (!versionedHolder) {
    throw new Error("Entity context is not available");
  }
  const value = versionedHolder.atVersion(1);
  if (!value) {
    throw new Error("EntityContext v1 not available");
  }
  const { entity, loading, error, refresh } = value;
  return { entity, loading, error, refresh };
}

export { AsyncEntityProvider, EntityProvider, useAsyncEntity, useEntity };
//# sourceMappingURL=useEntity.esm.js.map
