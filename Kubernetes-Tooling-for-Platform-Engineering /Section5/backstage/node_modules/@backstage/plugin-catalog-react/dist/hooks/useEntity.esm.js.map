{"version":3,"file":"useEntity.esm.js","sources":["../../src/hooks/useEntity.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { AnalyticsContext } from '@backstage/core-plugin-api';\nimport {\n  createVersionedContext,\n  createVersionedValueMap,\n  useVersionedContext,\n} from '@backstage/version-bridge';\nimport React, { ReactNode } from 'react';\n\n/** @public */\nexport type EntityLoadingStatus<TEntity extends Entity = Entity> = {\n  entity?: TEntity;\n  loading: boolean;\n  error?: Error;\n  refresh?: VoidFunction;\n};\n\n// This context has support for multiple concurrent versions of this package.\n// It is currently used in parallel with the old context in order to provide\n// a smooth transition, but will eventually be the only context we use.\nconst NewEntityContext = createVersionedContext<{ 1: EntityLoadingStatus }>(\n  'entity-context',\n);\n\n/**\n * Properties for the AsyncEntityProvider component.\n *\n * @public\n */\nexport interface AsyncEntityProviderProps {\n  children: ReactNode;\n  entity?: Entity;\n  loading: boolean;\n  error?: Error;\n  refresh?: VoidFunction;\n}\n\n/**\n * Provides a loaded entity to be picked up by the `useEntity` hook.\n *\n * @public\n */\nexport const AsyncEntityProvider = (props: AsyncEntityProviderProps) => {\n  const { children, entity, loading, error, refresh } = props;\n  const value = { entity, loading, error, refresh };\n  // We provide both the old and the new context, since\n  // consumers might be doing things like `useContext(EntityContext)`\n  return (\n    <NewEntityContext.Provider value={createVersionedValueMap({ 1: value })}>\n      <AnalyticsContext\n        attributes={{\n          ...(entity ? { entityRef: stringifyEntityRef(entity) } : undefined),\n        }}\n      >\n        {children}\n      </AnalyticsContext>\n    </NewEntityContext.Provider>\n  );\n};\n\n/**\n * Properties for the EntityProvider component.\n *\n * @public\n */\nexport interface EntityProviderProps {\n  children: ReactNode;\n  entity?: Entity;\n}\n\n/**\n * Provides an entity to be picked up by the `useEntity` hook.\n *\n * @public\n */\nexport const EntityProvider = (props: EntityProviderProps) => (\n  <AsyncEntityProvider\n    entity={props.entity}\n    loading={!Boolean(props.entity)}\n    error={undefined}\n    refresh={undefined}\n    children={props.children}\n  />\n);\n\n/**\n * Grab the current entity from the context, throws if the entity has not yet been loaded\n * or is not available.\n *\n * @public\n */\nexport function useEntity<TEntity extends Entity = Entity>(): {\n  entity: TEntity;\n} {\n  const versionedHolder = useVersionedContext<{ 1: EntityLoadingStatus }>(\n    'entity-context',\n  );\n\n  if (!versionedHolder) {\n    throw new Error('Entity context is not available');\n  }\n\n  const value = versionedHolder.atVersion(1);\n  if (!value) {\n    throw new Error('EntityContext v1 not available');\n  }\n\n  if (!value.entity) {\n    throw new Error(\n      'useEntity hook is being called outside of an EntityLayout where the entity has not been loaded. If this is intentional, please use useAsyncEntity instead.',\n    );\n  }\n\n  return { entity: value.entity as TEntity };\n}\n\n/**\n * Grab the current entity from the context, provides loading state and errors, and the ability to refresh.\n *\n * @public\n */\nexport function useAsyncEntity<\n  TEntity extends Entity = Entity,\n>(): EntityLoadingStatus<TEntity> {\n  const versionedHolder = useVersionedContext<{ 1: EntityLoadingStatus }>(\n    'entity-context',\n  );\n\n  if (!versionedHolder) {\n    throw new Error('Entity context is not available');\n  }\n  const value = versionedHolder.atVersion(1);\n  if (!value) {\n    throw new Error('EntityContext v1 not available');\n  }\n\n  const { entity, loading, error, refresh } = value;\n  return { entity: entity as TEntity, loading, error, refresh };\n}\n"],"names":[],"mappings":";;;;;AAmCA,MAAM,gBAAmB,GAAA,sBAAA;AAAA,EACvB;AACF,CAAA;AAoBa,MAAA,mBAAA,GAAsB,CAAC,KAAoC,KAAA;AACtE,EAAA,MAAM,EAAE,QAAU,EAAA,MAAA,EAAQ,OAAS,EAAA,KAAA,EAAO,SAAY,GAAA,KAAA;AACtD,EAAA,MAAM,KAAQ,GAAA,EAAE,MAAQ,EAAA,OAAA,EAAS,OAAO,OAAQ,EAAA;AAGhD,EACE,uBAAA,KAAA,CAAA,aAAA,CAAC,gBAAiB,CAAA,QAAA,EAAjB,EAA0B,KAAA,EAAO,wBAAwB,EAAE,CAAA,EAAG,KAAM,EAAC,CACpE,EAAA,kBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,gBAAA;AAAA,IAAA;AAAA,MACC,UAAY,EAAA;AAAA,QACV,GAAI,MAAS,GAAA,EAAE,WAAW,kBAAmB,CAAA,MAAM,GAAM,GAAA,KAAA;AAAA;AAC3D,KAAA;AAAA,IAEC;AAAA,GAEL,CAAA;AAEJ;AAiBa,MAAA,cAAA,GAAiB,CAAC,KAC7B,qBAAA,KAAA,CAAA,aAAA;AAAA,EAAC,mBAAA;AAAA,EAAA;AAAA,IACC,QAAQ,KAAM,CAAA,MAAA;AAAA,IACd,OAAS,EAAA,CAAC,OAAQ,CAAA,KAAA,CAAM,MAAM,CAAA;AAAA,IAC9B,KAAO,EAAA,KAAA,CAAA;AAAA,IACP,OAAS,EAAA,KAAA,CAAA;AAAA,IACT,UAAU,KAAM,CAAA;AAAA;AAClB;AASK,SAAS,SAEd,GAAA;AACA,EAAA,MAAM,eAAkB,GAAA,mBAAA;AAAA,IACtB;AAAA,GACF;AAEA,EAAA,IAAI,CAAC,eAAiB,EAAA;AACpB,IAAM,MAAA,IAAI,MAAM,iCAAiC,CAAA;AAAA;AAGnD,EAAM,MAAA,KAAA,GAAQ,eAAgB,CAAA,SAAA,CAAU,CAAC,CAAA;AACzC,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAM,MAAA,IAAI,MAAM,gCAAgC,CAAA;AAAA;AAGlD,EAAI,IAAA,CAAC,MAAM,MAAQ,EAAA;AACjB,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA;AAGF,EAAO,OAAA,EAAE,MAAQ,EAAA,KAAA,CAAM,MAAkB,EAAA;AAC3C;AAOO,SAAS,cAEkB,GAAA;AAChC,EAAA,MAAM,eAAkB,GAAA,mBAAA;AAAA,IACtB;AAAA,GACF;AAEA,EAAA,IAAI,CAAC,eAAiB,EAAA;AACpB,IAAM,MAAA,IAAI,MAAM,iCAAiC,CAAA;AAAA;AAEnD,EAAM,MAAA,KAAA,GAAQ,eAAgB,CAAA,SAAA,CAAU,CAAC,CAAA;AACzC,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAM,MAAA,IAAI,MAAM,gCAAgC,CAAA;AAAA;AAGlD,EAAA,MAAM,EAAE,MAAA,EAAQ,OAAS,EAAA,KAAA,EAAO,SAAY,GAAA,KAAA;AAC5C,EAAA,OAAO,EAAE,MAAA,EAA2B,OAAS,EAAA,KAAA,EAAO,OAAQ,EAAA;AAC9D;;;;"}