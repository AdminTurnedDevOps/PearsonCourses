import { useMemo, useState, useEffect, useRef } from 'react';
import useAsync from 'react-use/esm/useAsync';
import isEqual from 'lodash/isEqual';
import sortBy from 'lodash/sortBy';
import { useApi } from '@backstage/core-plugin-api';
import { catalogApiRef } from '../api.esm.js';
import { useEntityList } from './useEntityListProvider.esm.js';
import { EntityTypeFilter } from '../filters.esm.js';

function useEntityTypeFilter() {
  const catalogApi = useApi(catalogApiRef);
  const {
    filters: { kind: kindFilter, type: typeFilter },
    queryParameters: { type: typeParameter },
    updateFilters
  } = useEntityList();
  const flattenedQueryTypes = useMemo(
    () => [typeParameter].flat().filter(Boolean),
    [typeParameter]
  );
  const [selectedTypes, setSelectedTypes] = useState(
    flattenedQueryTypes.length ? flattenedQueryTypes : typeFilter?.getTypes() ?? []
  );
  useEffect(() => {
    if (flattenedQueryTypes.length) {
      setSelectedTypes(flattenedQueryTypes);
    }
  }, [flattenedQueryTypes]);
  const [availableTypes, setAvailableTypes] = useState([]);
  const kind = useMemo(() => kindFilter?.value, [kindFilter]);
  const {
    error,
    loading,
    value: facets
  } = useAsync(async () => {
    if (kind) {
      const items = await catalogApi.getEntityFacets({
        filter: { kind },
        facets: ["spec.type"]
      }).then((response) => response.facets["spec.type"] || []);
      return items;
    }
    return [];
  }, [kind, catalogApi]);
  const facetsRef = useRef(facets);
  useEffect(() => {
    const oldFacets = facetsRef.current;
    facetsRef.current = facets;
    if (loading || !kind || oldFacets === facets || !facets) {
      return;
    }
    const newTypes = [
      ...new Set(
        sortBy(facets, (f) => -f.count).map(
          (f) => f.value.toLocaleLowerCase("en-US")
        )
      )
    ];
    setAvailableTypes(newTypes);
    const stillValidTypes = selectedTypes.filter(
      (value) => newTypes.includes(value)
    );
    if (!isEqual(selectedTypes, stillValidTypes)) {
      setSelectedTypes(stillValidTypes);
    }
  }, [loading, kind, selectedTypes, setSelectedTypes, facets]);
  useEffect(() => {
    updateFilters({
      type: selectedTypes.length ? new EntityTypeFilter(selectedTypes) : void 0
    });
  }, [selectedTypes, updateFilters]);
  return {
    loading,
    error,
    availableTypes,
    selectedTypes,
    setSelectedTypes
  };
}

export { useEntityTypeFilter };
//# sourceMappingURL=useEntityTypeFilter.esm.js.map
