{"version":3,"file":"useEntityOwnership.esm.js","sources":["../../src/hooks/useEntityOwnership.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  RELATION_OWNED_BY,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { identityApiRef, useApi } from '@backstage/core-plugin-api';\nimport { useMemo } from 'react';\nimport useAsync from 'react-use/esm/useAsync';\nimport { getEntityRelations } from '../utils/getEntityRelations';\n\n/**\n * Returns a function that checks whether the currently signed-in user is an\n * owner of a given entity. When the hook is initially mounted, the loading\n * flag will be true and the results returned from the function will always be\n * false.\n *\n * @public\n *\n * @returns a function that checks if the signed in user owns an entity\n */\nexport function useEntityOwnership(): {\n  loading: boolean;\n  isOwnedEntity: (entity: Entity) => boolean;\n} {\n  const identityApi = useApi(identityApiRef);\n\n  // Trigger load only on mount\n  const { loading, value: refs } = useAsync(\n    async () => {\n      const { ownershipEntityRefs } = await identityApi.getBackstageIdentity();\n      return ownershipEntityRefs;\n    },\n    // load only on mount\n    [],\n  );\n\n  const isOwnedEntity = useMemo(() => {\n    const myOwnerRefs = new Set(refs ?? []);\n\n    return (entity: Entity) => {\n      const entityOwnerRefs = getEntityRelations(entity, RELATION_OWNED_BY).map(\n        stringifyEntityRef,\n      );\n      for (const ref of entityOwnerRefs) {\n        if (myOwnerRefs.has(ref)) {\n          return true;\n        }\n      }\n      return false;\n    };\n  }, [refs]);\n\n  return { loading, isOwnedEntity };\n}\n"],"names":[],"mappings":";;;;;;AAoCO,SAAS,kBAGd,GAAA;AACA,EAAM,MAAA,WAAA,GAAc,OAAO,cAAc,CAAA;AAGzC,EAAA,MAAM,EAAE,OAAA,EAAS,KAAO,EAAA,IAAA,EAAS,GAAA,QAAA;AAAA,IAC/B,YAAY;AACV,MAAA,MAAM,EAAE,mBAAA,EAAwB,GAAA,MAAM,YAAY,oBAAqB,EAAA;AACvE,MAAO,OAAA,mBAAA;AAAA,KACT;AAAA;AAAA,IAEA;AAAC,GACH;AAEA,EAAM,MAAA,aAAA,GAAgB,QAAQ,MAAM;AAClC,IAAA,MAAM,WAAc,GAAA,IAAI,GAAI,CAAA,IAAA,IAAQ,EAAE,CAAA;AAEtC,IAAA,OAAO,CAAC,MAAmB,KAAA;AACzB,MAAA,MAAM,eAAkB,GAAA,kBAAA,CAAmB,MAAQ,EAAA,iBAAiB,CAAE,CAAA,GAAA;AAAA,QACpE;AAAA,OACF;AACA,MAAA,KAAA,MAAW,OAAO,eAAiB,EAAA;AACjC,QAAI,IAAA,WAAA,CAAY,GAAI,CAAA,GAAG,CAAG,EAAA;AACxB,UAAO,OAAA,IAAA;AAAA;AACT;AAEF,MAAO,OAAA,KAAA;AAAA,KACT;AAAA,GACF,EAAG,CAAC,IAAI,CAAC,CAAA;AAET,EAAO,OAAA,EAAE,SAAS,aAAc,EAAA;AAClC;;;;"}