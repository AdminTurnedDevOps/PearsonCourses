{"version":3,"file":"useStarredEntities.esm.js","sources":["../../src/hooks/useStarredEntities.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  CompoundEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { useApi } from '@backstage/core-plugin-api';\nimport { useCallback, useMemo } from 'react';\nimport useObservable from 'react-use/esm/useObservable';\nimport { starredEntitiesApiRef } from '../apis';\n\nfunction getEntityRef(\n  entityOrRef: Entity | CompoundEntityRef | string,\n): string {\n  return typeof entityOrRef === 'string'\n    ? entityOrRef\n    : stringifyEntityRef(entityOrRef);\n}\n\n/** @public */\nexport function useStarredEntities(): {\n  starredEntities: Set<string>;\n  toggleStarredEntity: (\n    entityOrRef: Entity | CompoundEntityRef | string,\n  ) => void;\n  isStarredEntity: (\n    entityOrRef: Entity | CompoundEntityRef | string,\n  ) => boolean;\n} {\n  const starredEntitiesApi = useApi(starredEntitiesApiRef);\n\n  const starredEntities = useObservable(\n    useMemo(() => starredEntitiesApi.starredEntitie$(), [starredEntitiesApi]),\n    new Set<string>(),\n  );\n\n  const isStarredEntity = useCallback(\n    (entityOrRef: Entity | CompoundEntityRef | string) =>\n      starredEntities.has(getEntityRef(entityOrRef)),\n    [starredEntities],\n  );\n\n  const toggleStarredEntity = useCallback(\n    (entityOrRef: Entity | CompoundEntityRef | string) =>\n      starredEntitiesApi.toggleStarred(getEntityRef(entityOrRef)).then(),\n    [starredEntitiesApi],\n  );\n\n  return {\n    starredEntities,\n    toggleStarredEntity,\n    isStarredEntity,\n  };\n}\n"],"names":[],"mappings":";;;;;;;;;AA0BA,SAAS,aACP,WACQ,EAAA;AACR,EAAA,OAAO,OAAO,WAAA,KAAgB,QAC1B,GAAA,WAAA,GACA,mBAAmB,WAAW,CAAA;AACpC;AAGO,SAAS,kBAQd,GAAA;AACA,EAAM,MAAA,kBAAA,GAAqB,OAAO,qBAAqB,CAAA;AAEvD,EAAA,MAAM,eAAkB,GAAA,aAAA;AAAA,IACtB,QAAQ,MAAM,kBAAA,CAAmB,iBAAmB,EAAA,CAAC,kBAAkB,CAAC,CAAA;AAAA,wBACpE,GAAY;AAAA,GAClB;AAEA,EAAA,MAAM,eAAkB,GAAA,WAAA;AAAA,IACtB,CAAC,WACC,KAAA,eAAA,CAAgB,GAAI,CAAA,YAAA,CAAa,WAAW,CAAC,CAAA;AAAA,IAC/C,CAAC,eAAe;AAAA,GAClB;AAEA,EAAA,MAAM,mBAAsB,GAAA,WAAA;AAAA,IAC1B,CAAC,gBACC,kBAAmB,CAAA,aAAA,CAAc,aAAa,WAAW,CAAC,EAAE,IAAK,EAAA;AAAA,IACnE,CAAC,kBAAkB;AAAA,GACrB;AAEA,EAAO,OAAA;AAAA,IACL,eAAA;AAAA,IACA,mBAAA;AAAA,IACA;AAAA,GACF;AACF;;;;"}