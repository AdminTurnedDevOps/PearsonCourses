import { stringifyEntityRef } from '@backstage/catalog-model';
import { useApi } from '@backstage/core-plugin-api';
import { useState, useEffect, useCallback } from 'react';
import '../apis/EntityPresentationApi/EntityPresentationApi.esm.js';
import 'lodash/get';
import { starredEntitiesApiRef } from '../apis/StarredEntitiesApi/StarredEntitiesApi.esm.js';
import 'zen-observable';

function getEntityRef(entityOrRef) {
  return typeof entityOrRef === "string" ? entityOrRef : stringifyEntityRef(entityOrRef);
}
function useStarredEntity(entityOrRef) {
  const starredEntitiesApi = useApi(starredEntitiesApiRef);
  const [isStarredEntity, setIsStarredEntity] = useState(false);
  useEffect(() => {
    const subscription = starredEntitiesApi.starredEntitie$().subscribe({
      next(starredEntities) {
        setIsStarredEntity(starredEntities.has(getEntityRef(entityOrRef)));
      }
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [entityOrRef, starredEntitiesApi]);
  const toggleStarredEntity = useCallback(
    () => starredEntitiesApi.toggleStarred(getEntityRef(entityOrRef)).then(),
    [entityOrRef, starredEntitiesApi]
  );
  return {
    toggleStarredEntity,
    isStarredEntity
  };
}

export { useStarredEntity };
//# sourceMappingURL=useStarredEntity.esm.js.map
