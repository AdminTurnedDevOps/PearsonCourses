import { stringifyEntityRef } from '@backstage/catalog-model';
import { useApi } from '@backstage/core-plugin-api';
import { useMemo, useCallback } from 'react';
import useObservable from 'react-use/esm/useObservable';
import '../apis/EntityPresentationApi/EntityPresentationApi.esm.js';
import 'lodash/get';
import { starredEntitiesApiRef } from '../apis/StarredEntitiesApi/StarredEntitiesApi.esm.js';
import 'zen-observable';

function getEntityRef(entityOrRef) {
  return typeof entityOrRef === "string" ? entityOrRef : stringifyEntityRef(entityOrRef);
}
function useStarredEntities() {
  const starredEntitiesApi = useApi(starredEntitiesApiRef);
  const starredEntities = useObservable(
    useMemo(() => starredEntitiesApi.starredEntitie$(), [starredEntitiesApi]),
    /* @__PURE__ */ new Set()
  );
  const isStarredEntity = useCallback(
    (entityOrRef) => starredEntities.has(getEntityRef(entityOrRef)),
    [starredEntities]
  );
  const toggleStarredEntity = useCallback(
    (entityOrRef) => starredEntitiesApi.toggleStarred(getEntityRef(entityOrRef)).then(),
    [starredEntitiesApi]
  );
  return {
    starredEntities,
    toggleStarredEntity,
    isStarredEntity
  };
}

export { useStarredEntities };
//# sourceMappingURL=useStarredEntities.esm.js.map
