import { createApiFactory } from '@backstage/frontend-plugin-api';
import { InMemoryCatalogClient } from '@backstage/catalog-client/testUtils';
import { catalogApiRef } from '@backstage/plugin-catalog-react';

function simpleMock(ref, mockFactory) {
  return (partialImpl) => {
    const mock = mockFactory();
    if (partialImpl) {
      for (const [key, impl] of Object.entries(partialImpl)) {
        if (typeof impl === "function") {
          mock[key].mockImplementation(impl);
        } else {
          mock[key] = impl;
        }
      }
    }
    return Object.assign(mock, {
      factory: createApiFactory({
        api: ref,
        deps: {},
        factory: () => mock
      })
    });
  };
}
function catalogApiMock(options) {
  return new InMemoryCatalogClient(options);
}
((catalogApiMock2) => {
  catalogApiMock2.factory = (options) => createApiFactory({
    api: catalogApiRef,
    deps: {},
    factory: () => new InMemoryCatalogClient(options)
  });
  catalogApiMock2.mock = simpleMock(catalogApiRef, () => ({
    getEntities: jest.fn(),
    getEntitiesByRefs: jest.fn(),
    queryEntities: jest.fn(),
    getEntityAncestors: jest.fn(),
    getEntityByRef: jest.fn(),
    removeEntityByUid: jest.fn(),
    refreshEntity: jest.fn(),
    getEntityFacets: jest.fn(),
    getLocationById: jest.fn(),
    getLocationByRef: jest.fn(),
    addLocation: jest.fn(),
    removeLocationById: jest.fn(),
    getLocationByEntity: jest.fn(),
    validateEntity: jest.fn()
  }));
})(catalogApiMock || (catalogApiMock = {}));

export { catalogApiMock };
//# sourceMappingURL=catalogApiMock.esm.js.map
