import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { getComponentData } from '@backstage/core-plugin-api';
import kebabCase from 'lodash/kebabCase';
import startCase from 'lodash/startCase';
import React from 'react';
import '../blueprints/EntityCardBlueprint.esm.js';
import { EntityContentBlueprint } from '../blueprints/EntityContentBlueprint.esm.js';

function convertLegacyEntityContentExtension(LegacyExtension, overrides) {
  const element = /* @__PURE__ */ React.createElement(LegacyExtension, null);
  const extName = getComponentData(element, "core.extensionName");
  if (!extName) {
    throw new Error("Extension has no name");
  }
  const mountPoint = getComponentData(
    element,
    "core.mountPoint"
  );
  const plugin = getComponentData(element, "core.plugin");
  const pluginId = plugin?.getId();
  const match = extName.match(/^Entity(.*)Content$/);
  const infix = match?.[1] ?? extName;
  let name = infix;
  if (pluginId && name.toLocaleLowerCase("en-US").startsWith(pluginId.toLocaleLowerCase("en-US"))) {
    name = name.slice(pluginId.length);
    if (!name) {
      name = void 0;
    }
  }
  name = name && kebabCase(name);
  return EntityContentBlueprint.make({
    name: overrides?.name ?? name,
    params: {
      filter: overrides?.filter,
      defaultPath: overrides?.defaultPath ?? `/${kebabCase(infix)}`,
      defaultTitle: overrides?.defaultTitle ?? startCase(infix),
      routeRef: mountPoint && convertLegacyRouteRef(mountPoint),
      loader: async () => compatWrapper(element)
    }
  });
}

export { convertLegacyEntityContentExtension };
//# sourceMappingURL=convertLegacyEntityContentExtension.esm.js.map
