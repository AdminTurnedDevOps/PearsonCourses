import { compatWrapper } from '@backstage/core-compat-api';
import { getComponentData } from '@backstage/core-plugin-api';
import React from 'react';
import { EntityCardBlueprint } from '../blueprints/EntityCardBlueprint.esm.js';
import '../blueprints/EntityContentBlueprint.esm.js';
import kebabCase from 'lodash/kebabCase';

function convertLegacyEntityCardExtension(LegacyExtension, overrides) {
  const element = /* @__PURE__ */ React.createElement(LegacyExtension, null);
  const extName = getComponentData(element, "core.extensionName");
  if (!extName) {
    throw new Error("Extension has no name");
  }
  const plugin = getComponentData(element, "core.plugin");
  const pluginId = plugin?.getId();
  const match = extName.match(/^Entity(.*)Card$/);
  const infix = match?.[1] ?? extName;
  let name = infix;
  if (pluginId && name.toLocaleLowerCase("en-US").startsWith(pluginId.toLocaleLowerCase("en-US"))) {
    name = name.slice(pluginId.length);
    if (!name) {
      name = void 0;
    }
  }
  name = name && kebabCase(name);
  return EntityCardBlueprint.make({
    name: overrides?.name ?? name,
    params: {
      filter: overrides?.filter,
      loader: async () => compatWrapper(element)
    }
  });
}

export { convertLegacyEntityCardExtension };
//# sourceMappingURL=convertLegacyEntityCardExtension.esm.js.map
