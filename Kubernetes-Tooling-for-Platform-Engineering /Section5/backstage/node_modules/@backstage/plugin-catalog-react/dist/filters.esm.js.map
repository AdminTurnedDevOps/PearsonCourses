{"version":3,"file":"filters.esm.js","sources":["../src/filters.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  parseEntityRef,\n  RELATION_OWNED_BY,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { AlphaEntity } from '@backstage/catalog-model/alpha';\nimport { EntityFilter, UserListFilterKind } from './types';\nimport { getEntityRelations } from './utils/getEntityRelations';\n\n/**\n * Filter entities based on Kind.\n * @public\n */\nexport class EntityKindFilter implements EntityFilter {\n  constructor(readonly value: string, readonly label: string) {}\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { kind: this.value };\n  }\n\n  toQueryValue(): string {\n    return this.value;\n  }\n}\n\n/**\n * Filters entities based on type\n * @public\n */\nexport class EntityTypeFilter implements EntityFilter {\n  constructor(readonly value: string | string[]) {}\n\n  // Simplify `string | string[]` for consumers, always returns an array\n  getTypes(): string[] {\n    return Array.isArray(this.value) ? this.value : [this.value];\n  }\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { 'spec.type': this.getTypes() };\n  }\n\n  toQueryValue(): string[] {\n    return this.getTypes();\n  }\n}\n\n/**\n * Filters entities based on tag.\n * @public\n */\nexport class EntityTagFilter implements EntityFilter {\n  constructor(readonly values: string[]) {}\n\n  filterEntity(entity: Entity): boolean {\n    return this.values.every(v => (entity.metadata.tags ?? []).includes(v));\n  }\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { 'metadata.tags': this.values };\n  }\n\n  toQueryValue(): string[] {\n    return this.values;\n  }\n}\n\n/**\n * Filters entities where the text matches spec, title or tags.\n * @public\n */\nexport class EntityTextFilter implements EntityFilter {\n  constructor(readonly value: string) {}\n\n  filterEntity(entity: Entity): boolean {\n    const words = this.toUpperArray(this.value.split(/\\s/));\n    const exactMatch = this.toUpperArray([entity.metadata.tags]);\n    const partialMatch = this.toUpperArray([\n      entity.metadata.name,\n      entity.metadata.title,\n      (entity.spec?.profile as { displayName?: string })?.displayName,\n    ]);\n\n    for (const word of words) {\n      if (\n        exactMatch.every(m => m !== word) &&\n        partialMatch.every(m => !m.includes(word))\n      ) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  getFullTextFilters() {\n    return {\n      term: this.value,\n      // Update this to be more dynamic based on table columns.\n      fields: ['metadata.name', 'metadata.title', 'spec.profile.displayName'],\n    };\n  }\n\n  toQueryValue() {\n    return this.value;\n  }\n\n  private toUpperArray(\n    value: Array<string | string[] | undefined>,\n  ): Array<string> {\n    return value\n      .flat()\n      .filter((m): m is string => Boolean(m))\n      .map(m => m.toLocaleUpperCase('en-US'));\n  }\n}\n\n/**\n * Filter matching entities that are owned by group.\n * @public\n *\n * CAUTION: This class may contain both full and partial entity refs.\n */\nexport class EntityOwnerFilter implements EntityFilter {\n  readonly values: string[];\n  constructor(values: string[]) {\n    this.values = values.reduce((fullRefs, ref) => {\n      // Attempt to remove bad entity references here.\n      try {\n        fullRefs.push(\n          stringifyEntityRef(parseEntityRef(ref, { defaultKind: 'Group' })),\n        );\n        return fullRefs;\n      } catch (err) {\n        return fullRefs;\n      }\n    }, [] as string[]);\n  }\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { 'relations.ownedBy': this.values };\n  }\n\n  filterEntity(entity: Entity): boolean {\n    return this.values.some(v =>\n      getEntityRelations(entity, RELATION_OWNED_BY).some(\n        o => stringifyEntityRef(o) === v,\n      ),\n    );\n  }\n\n  /**\n   * Get the URL query parameter value. May be a mix of full and humanized entity refs.\n   * @returns list of entity refs.\n   */\n  toQueryValue(): string[] {\n    return this.values;\n  }\n}\n\n/**\n * Filters entities on lifecycle.\n * @public\n */\nexport class EntityLifecycleFilter implements EntityFilter {\n  constructor(readonly values: string[]) {}\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { 'spec.lifecycle': this.values };\n  }\n\n  filterEntity(entity: Entity): boolean {\n    return this.values.some(v => entity.spec?.lifecycle === v);\n  }\n\n  toQueryValue(): string[] {\n    return this.values;\n  }\n}\n\n/**\n * Filters entities to those within the given namespace(s).\n * @public\n */\nexport class EntityNamespaceFilter implements EntityFilter {\n  constructor(readonly values: string[]) {}\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    return { 'metadata.namespace': this.values };\n  }\n  filterEntity(entity: Entity): boolean {\n    return this.values.some(v => entity.metadata.namespace === v);\n  }\n\n  toQueryValue(): string[] {\n    return this.values;\n  }\n}\n\n/**\n * @public\n */\nexport class EntityUserFilter implements EntityFilter {\n  private constructor(\n    readonly value: UserListFilterKind,\n    readonly refs?: string[],\n  ) {}\n\n  static owned(ownershipEntityRefs: string[]) {\n    return new EntityUserFilter('owned', ownershipEntityRefs);\n  }\n\n  static all() {\n    return new EntityUserFilter('all');\n  }\n\n  static starred(starredEntityRefs: string[]) {\n    return new EntityUserFilter('starred', starredEntityRefs);\n  }\n\n  getCatalogFilters(): Record<string, string[]> {\n    if (this.value === 'owned') {\n      return { 'relations.ownedBy': this.refs ?? [] };\n    }\n    if (this.value === 'starred') {\n      return {\n        'metadata.name': this.refs?.map(e => parseEntityRef(e).name) ?? [],\n      };\n    }\n    return {};\n  }\n\n  filterEntity(entity: Entity) {\n    if (this.value === 'starred') {\n      return this.refs?.includes(stringifyEntityRef(entity)) ?? true;\n    }\n    // used only for retro-compatibility with non paginated data.\n    // This is supposed to return always true for paginated\n    // owned entities, since the filters are applied server side.\n    if (this.value === 'owned') {\n      const relations = getEntityRelations(entity, RELATION_OWNED_BY);\n\n      return (\n        this.refs?.some(v =>\n          relations.some(o => stringifyEntityRef(o) === v),\n        ) ?? false\n      );\n    }\n    return true;\n  }\n\n  toQueryValue(): string {\n    return this.value;\n  }\n}\n\n/**\n * Filters entities based on whatever the user has starred or owns them.\n * @deprecated use EntityUserFilter\n * @public\n */\nexport class UserListFilter implements EntityFilter {\n  constructor(\n    readonly value: UserListFilterKind,\n    readonly isOwnedEntity: (entity: Entity) => boolean,\n    readonly isStarredEntity: (entity: Entity) => boolean,\n  ) {}\n\n  filterEntity(entity: Entity): boolean {\n    switch (this.value) {\n      case 'owned':\n        return this.isOwnedEntity(entity);\n      case 'starred':\n        return this.isStarredEntity(entity);\n      default:\n        return true;\n    }\n  }\n\n  toQueryValue(): string {\n    return this.value;\n  }\n}\n\n/**\n * Filters entities based if it is an orphan or not.\n * @public\n */\nexport class EntityOrphanFilter implements EntityFilter {\n  constructor(readonly value: boolean) {}\n\n  getCatalogFilters(): Record<string, string | string[]> {\n    if (this.value) {\n      return { 'metadata.annotations.backstage.io/orphan': String(this.value) };\n    }\n    return {};\n  }\n\n  filterEntity(entity: Entity): boolean {\n    const orphan = entity.metadata.annotations?.['backstage.io/orphan'];\n    return orphan !== undefined && this.value.toString() === orphan;\n  }\n}\n\n/**\n * Filters entities based on if it has errors or not.\n * @public\n */\nexport class EntityErrorFilter implements EntityFilter {\n  constructor(readonly value: boolean) {}\n\n  filterEntity(entity: Entity): boolean {\n    const error =\n      ((entity as AlphaEntity)?.status?.items?.length as number) > 0;\n    return error !== undefined && this.value === error;\n  }\n}\n"],"names":[],"mappings":"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"}