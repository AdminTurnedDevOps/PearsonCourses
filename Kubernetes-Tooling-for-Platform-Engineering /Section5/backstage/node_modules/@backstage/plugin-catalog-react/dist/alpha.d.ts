/// <reference types="react" />
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import { RouteRef, ExtensionDefinition } from '@backstage/frontend-plugin-api';
import * as React from 'react';
import { ComponentType } from 'react';
import * as _backstage_catalog_model from '@backstage/catalog-model';
import { Entity } from '@backstage/catalog-model';
import * as _backstage_core_plugin_api_alpha from '@backstage/core-plugin-api/alpha';
import { ResourcePermission } from '@backstage/plugin-permission-common';

/**
 * Returns true if the `owner` argument is a direct owner on the `entity` argument.
 *
 * @alpha
 * @remarks
 *
 * Note that this ownership is not the same as using the claims in the auth-resolver, it only will take into account ownership as expressed by direct entity relations.
 * It doesn't know anything about the additional groups that a user might belong to which the claims contain.
 */
declare function isOwnerOf(owner: Entity, entity: Entity): boolean;

/**
 * @alpha
 * A blueprint for creating cards for the entity pages in the catalog.
 */
declare const EntityCardBlueprint: _backstage_frontend_plugin_api.ExtensionBlueprint<{
    kind: "entity-card";
    name: undefined;
    params: {
        loader: () => Promise<JSX.Element>;
        filter?: string | ((entity: _backstage_catalog_model.Entity) => boolean) | undefined;
    };
    output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<React.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
        optional: true;
    }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
        optional: true;
    }>;
    inputs: {};
    config: {
        filter: string | undefined;
    };
    configInput: {
        filter?: string | undefined;
    };
    dataRefs: {
        filterFunction: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {}>;
        filterExpression: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {}>;
    };
}>;

/**
 * @alpha
 * Creates an EntityContent extension.
 */
declare const EntityContentBlueprint: _backstage_frontend_plugin_api.ExtensionBlueprint<{
    kind: "entity-content";
    name: undefined;
    params: {
        loader: () => Promise<JSX.Element>;
        defaultPath: string;
        defaultTitle: string;
        routeRef?: RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams> | undefined;
        filter?: string | ((entity: _backstage_catalog_model.Entity) => boolean) | undefined;
    };
    output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<React.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
        optional: true;
    }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-content-title", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
        optional: true;
    }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
        optional: true;
    }>;
    inputs: {};
    config: {
        path: string | undefined;
        title: string | undefined;
        filter: string | undefined;
    };
    configInput: {
        filter?: string | undefined;
        title?: string | undefined;
        path?: string | undefined;
    };
    dataRefs: {
        title: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-content-title", {}>;
        filterFunction: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {}>;
        filterExpression: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {}>;
    };
}>;

/** @alpha */
declare function convertLegacyEntityCardExtension(LegacyExtension: ComponentType<{}>, overrides?: {
    name?: string;
    filter?: typeof EntityCardBlueprint.dataRefs.filterFunction.T | typeof EntityCardBlueprint.dataRefs.filterExpression.T;
}): ExtensionDefinition;

/** @alpha */
declare function convertLegacyEntityContentExtension(LegacyExtension: ComponentType<{}>, overrides?: {
    name?: string;
    filter?: typeof EntityContentBlueprint.dataRefs.filterFunction.T | typeof EntityContentBlueprint.dataRefs.filterExpression.T;
    defaultPath?: string;
    defaultTitle?: string;
}): ExtensionDefinition;

/** @alpha */
declare const catalogReactTranslationRef: _backstage_core_plugin_api_alpha.TranslationRef<"catalog-react", {
    readonly "catalogFilter.title": "Filters";
    readonly "catalogFilter.buttonTitle": "Filters";
    readonly "entityKindPicker.title": "Kind";
    readonly "entityKindPicker.errorMessage": "Failed to load entity kinds";
    readonly "entityLifecyclePicker.title": "Lifecycle";
    readonly "entityNamespacePicker.title": "Namespace";
    readonly "entityOwnerPicker.title": "Owner";
    readonly "entityProcessingStatusPicker.title": "Processing Status";
    readonly "entityTagPicker.title": "Tags";
    readonly "entityPeekAheadPopover.title": "Drill into the entity to see all of the tags.";
    readonly "entityPeekAheadPopover.entityCardActionsTitle": "Show details";
    readonly "entityPeekAheadPopover.emailCardAction.title": "Email {{email}}";
    readonly "entityPeekAheadPopover.emailCardAction.subTitle": "mailto {{email}}";
    readonly "entitySearchBar.placeholder": "Search";
    readonly "entityTypePicker.title": "Type";
    readonly "entityTypePicker.errorMessage": "Failed to load entity types";
    readonly "entityTypePicker.optionAllTitle": "all";
    readonly "favoriteEntity.addToFavorites": "Add to favorites";
    readonly "favoriteEntity.removeFromFavorites": "Remove from favorites";
    readonly "inspectEntityDialog.title": "Entity Inspector";
    readonly "inspectEntityDialog.closeButtonTitle": "Close";
    readonly "inspectEntityDialog.ancestryPage.title": "Ancestry";
    readonly "inspectEntityDialog.colocatedPage.title": "Colocated";
    readonly "inspectEntityDialog.colocatedPage.description": "These are the entities that are colocated with this entity - as in, they originated from the same data source (e.g. came from the same YAML file), or from the same origin (e.g. the originally registered URL).";
    readonly "inspectEntityDialog.colocatedPage.alertNoLocation": "Entity had no location information.";
    readonly "inspectEntityDialog.colocatedPage.alertNoEntity": "There were no other entities on this location.";
    readonly "inspectEntityDialog.jsonPage.title": "Entity as JSON";
    readonly "inspectEntityDialog.jsonPage.description": "This is the raw entity data as received from the catalog, on JSON form.";
    readonly "inspectEntityDialog.overviewPage.title": "Overview";
    readonly "inspectEntityDialog.yamlPage.title": "Entity as YAML";
    readonly "inspectEntityDialog.yamlPage.description": "This is the raw entity data as received from the catalog, on YAML form.";
    readonly "unregisterEntityDialog.title": "Are you sure you want to unregister this entity?";
    readonly "unregisterEntityDialog.cancelButtonTitle": "Cancel";
    readonly "unregisterEntityDialog.deleteButtonTitle": "Delete Entity";
    readonly "unregisterEntityDialog.deleteEntitySuccessMessage": "Removed entity {{entityName}}";
    readonly "unregisterEntityDialog.onlyDeleteStateTitle": "This entity does not seem to originate from a registered location. You therefore only have the option to delete it outright from the catalog.";
    readonly "unregisterEntityDialog.errorStateTitle": "Internal error: Unknown state";
    readonly "unregisterEntityDialog.bootstrapState.title": "You cannot unregister this entity, since it originates from a protected Backstage configuration (location \"{{location}}\"). If you believe this is in error, please contact the {{appTitle}} integrator.";
    readonly "unregisterEntityDialog.bootstrapState.advancedDescription": "You have the option to delete the entity itself from the catalog. Note that this should only be done if you know that the catalog file has been deleted at, or moved from, its origin location. If that is not the case, the entity will reappear shortly as the next refresh round is performed by the catalog.";
    readonly "unregisterEntityDialog.bootstrapState.advancedOptions": "Advanced Options";
    readonly "unregisterEntityDialog.unregisterState.title": "This action will unregister the following entities:";
    readonly "unregisterEntityDialog.unregisterState.description": "To undo, just re-register the entity in {{appTitle}}.";
    readonly "unregisterEntityDialog.unregisterState.subTitle": "Located at the following location:";
    readonly "unregisterEntityDialog.unregisterState.advancedDescription": "You also have the option to delete the entity itself from the catalog. Note that this should only be done if you know that the catalog file has been deleted at, or moved from, its origin location. If that is not the case, the entity will reappear shortly as the next refresh round is performed by the catalog.";
    readonly "unregisterEntityDialog.unregisterState.advancedOptions": "Advanced Options";
    readonly "unregisterEntityDialog.unregisterState.unregisterButtonTitle": "Unregister Location";
    readonly "userListPicker.defaultOrgName": "Company";
    readonly "userListPicker.orgFilterAllLabel": "All";
    readonly "userListPicker.personalFilter.title": "Personal";
    readonly "userListPicker.personalFilter.ownedLabel": "Owned";
    readonly "userListPicker.personalFilter.starredLabel": "Starred";
}>;

/**
 * A thin wrapper around the
 * {@link @backstage/plugin-permission-react#usePermission} hook which uses the
 * current entity in context to make an authorization request for the given
 * {@link @backstage/plugin-catalog-common#CatalogEntityPermission}.
 *
 * Note: this hook blocks the permission request until the entity has loaded in
 * context. If you have the entityRef and need concurrent requests, use the
 * `usePermission` hook directly.
 * @alpha
 */
declare function useEntityPermission(permission: ResourcePermission<'catalog-entity'>): {
    loading: boolean;
    allowed: boolean;
    error?: Error;
};

export { EntityCardBlueprint, EntityContentBlueprint, catalogReactTranslationRef, convertLegacyEntityCardExtension, convertLegacyEntityContentExtension, isOwnerOf, useEntityPermission };
