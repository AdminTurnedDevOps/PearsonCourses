{"version":3,"file":"error.cjs.js","sources":["../../src/serialization/error.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject } from '@backstage/types';\nimport {\n  deserializeError as deserializeErrorInternal,\n  serializeError as serializeErrorInternal,\n} from 'serialize-error';\nimport { isError } from '../errors/assertion';\n\n/**\n * The serialized form of an Error.\n *\n * @public\n */\nexport type SerializedError = JsonObject & {\n  /** The name of the exception that was thrown */\n  name: string;\n  /** The message of the exception that was thrown */\n  message: string;\n  /** A stringified stack trace; may not be present */\n  stack?: string;\n  /** A custom code (not necessarily the same as an HTTP response code); may not be present */\n  code?: string;\n};\n\n/**\n * Serializes an error object to a JSON friendly form.\n *\n * @public\n * @param error - The error.\n * @param options - Optional serialization options.\n */\nexport function serializeError(\n  error: Error,\n  options?: {\n    /** Include stack trace in the output (default false) */\n    includeStack?: boolean;\n  },\n): SerializedError {\n  const serialized = serializeErrorInternal(error);\n  const result: SerializedError = {\n    name: 'Unknown',\n    message: '<no reason given>',\n    ...serialized,\n  };\n\n  if (!options?.includeStack) {\n    delete result.stack;\n\n    if (\n      result.cause &&\n      typeof result.cause === 'object' &&\n      'stack' in result.cause\n    ) {\n      delete result.cause.stack;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Deserializes a serialized error object back to an Error.\n *\n * @public\n */\nexport function deserializeError<T extends Error = Error>(\n  data: SerializedError,\n): T {\n  const result = deserializeErrorInternal(data) as T;\n  if (!data.stack) {\n    result.stack = undefined;\n  }\n  return result;\n}\n\n/**\n * Stringifies an error, including its name and message where available.\n *\n * @param error - The error.\n * @public\n */\nexport function stringifyError(error: unknown): string {\n  if (isError(error)) {\n    // Prefer error.toString, but if it's not implemented we use a nicer fallback\n    const str = String(error);\n    return str !== '[object Object]' ? str : `${error.name}: ${error.message}`;\n  }\n\n  return `unknown error '${error}'`;\n}\n"],"names":["serializeErrorInternal","deserializeErrorInternal","isError"],"mappings":";;;;;AA8CgB,SAAA,cAAA,CACd,OACA,OAIiB,EAAA;AACjB,EAAM,MAAA,UAAA,GAAaA,gCAAuB,KAAK,CAAA;AAC/C,EAAA,MAAM,MAA0B,GAAA;AAAA,IAC9B,IAAM,EAAA,SAAA;AAAA,IACN,OAAS,EAAA,mBAAA;AAAA,IACT,GAAG;AAAA,GACL;AAEA,EAAI,IAAA,CAAC,SAAS,YAAc,EAAA;AAC1B,IAAA,OAAO,MAAO,CAAA,KAAA;AAEd,IACE,IAAA,MAAA,CAAO,SACP,OAAO,MAAA,CAAO,UAAU,QACxB,IAAA,OAAA,IAAW,OAAO,KAClB,EAAA;AACA,MAAA,OAAO,OAAO,KAAM,CAAA,KAAA;AAAA;AACtB;AAGF,EAAO,OAAA,MAAA;AACT;AAOO,SAAS,iBACd,IACG,EAAA;AACH,EAAM,MAAA,MAAA,GAASC,kCAAyB,IAAI,CAAA;AAC5C,EAAI,IAAA,CAAC,KAAK,KAAO,EAAA;AACf,IAAA,MAAA,CAAO,KAAQ,GAAA,KAAA,CAAA;AAAA;AAEjB,EAAO,OAAA,MAAA;AACT;AAQO,SAAS,eAAe,KAAwB,EAAA;AACrD,EAAI,IAAAC,iBAAA,CAAQ,KAAK,CAAG,EAAA;AAElB,IAAM,MAAA,GAAA,GAAM,OAAO,KAAK,CAAA;AACxB,IAAO,OAAA,GAAA,KAAQ,oBAAoB,GAAM,GAAA,CAAA,EAAG,MAAM,IAAI,CAAA,EAAA,EAAK,MAAM,OAAO,CAAA,CAAA;AAAA;AAG1E,EAAA,OAAO,kBAAkB,KAAK,CAAA,CAAA,CAAA;AAChC;;;;;;"}