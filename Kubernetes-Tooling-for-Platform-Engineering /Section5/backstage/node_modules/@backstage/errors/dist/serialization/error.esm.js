import { serializeError as serializeError$1, deserializeError as deserializeError$1 } from 'serialize-error';
import { isError } from '../errors/assertion.esm.js';

function serializeError(error, options) {
  const serialized = serializeError$1(error);
  const result = {
    name: "Unknown",
    message: "<no reason given>",
    ...serialized
  };
  if (!options?.includeStack) {
    delete result.stack;
    if (result.cause && typeof result.cause === "object" && "stack" in result.cause) {
      delete result.cause.stack;
    }
  }
  return result;
}
function deserializeError(data) {
  const result = deserializeError$1(data);
  if (!data.stack) {
    result.stack = void 0;
  }
  return result;
}
function stringifyError(error) {
  if (isError(error)) {
    const str = String(error);
    return str !== "[object Object]" ? str : `${error.name}: ${error.message}`;
  }
  return `unknown error '${error}'`;
}

export { deserializeError, serializeError, stringifyError };
//# sourceMappingURL=error.esm.js.map
