import { isError } from './assertion.esm.js';
import { CustomErrorBase } from './CustomErrorBase.esm.js';

class InputError extends CustomErrorBase {
  name = "InputError";
}
class AuthenticationError extends CustomErrorBase {
  name = "AuthenticationError";
}
class NotAllowedError extends CustomErrorBase {
  name = "NotAllowedError";
}
class NotFoundError extends CustomErrorBase {
  name = "NotFoundError";
}
class ConflictError extends CustomErrorBase {
  name = "ConflictError";
}
class NotModifiedError extends CustomErrorBase {
  name = "NotModifiedError";
}
class NotImplementedError extends CustomErrorBase {
  name = "NotImplementedError";
}
class ServiceUnavailableError extends CustomErrorBase {
}
class ForwardedError extends CustomErrorBase {
  constructor(message, cause) {
    super(message, cause);
    this.name = isError(cause) ? cause.name : "Error";
  }
}

export { AuthenticationError, ConflictError, ForwardedError, InputError, NotAllowedError, NotFoundError, NotImplementedError, NotModifiedError, ServiceUnavailableError };
//# sourceMappingURL=common.esm.js.map
