{"version":3,"file":"common.esm.js","sources":["../../src/errors/common.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isError } from './assertion';\nimport { CustomErrorBase } from './CustomErrorBase';\n\n/*\n * A set of common business logic errors.\n *\n * A backend error handler middleware would understand these and translate them\n * to well formed HTTP responses.\n *\n * While these are intentionally analogous to HTTP errors, they are not\n * intended to be thrown by the request handling layer. In those places, please\n * use e.g. the http-errors library.\n */\n\n/**\n * The given inputs are malformed and cannot be processed.\n *\n * @public\n */\nexport class InputError extends CustomErrorBase {\n  name = 'InputError' as const;\n}\n\n/**\n * The request requires authentication, which was not properly supplied.\n *\n * @public\n */\nexport class AuthenticationError extends CustomErrorBase {\n  name = 'AuthenticationError' as const;\n}\n\n/**\n * The authenticated caller is not allowed to perform this request.\n *\n * @public\n */\nexport class NotAllowedError extends CustomErrorBase {\n  name = 'NotAllowedError' as const;\n}\n\n/**\n * The requested resource could not be found.\n *\n * Note that this error usually is used to indicate that an entity with a given\n * ID does not exist, rather than signalling that an entire route is missing.\n *\n * @public\n */\nexport class NotFoundError extends CustomErrorBase {\n  name = 'NotFoundError' as const;\n}\n\n/**\n * The request could not complete due to a conflict in the current state of the\n * resource.\n *\n * @public\n */\nexport class ConflictError extends CustomErrorBase {\n  name = 'ConflictError' as const;\n}\n\n/**\n * The requested resource has not changed since last request.\n *\n * @public\n */\nexport class NotModifiedError extends CustomErrorBase {\n  name = 'NotModifiedError' as const;\n}\n\n/**\n * The server does not support the functionality required to fulfill the request.\n *\n * @public\n */\nexport class NotImplementedError extends CustomErrorBase {\n  name = 'NotImplementedError' as const;\n}\n\n/**\n * The server is not ready to handle the request.\n *\n * @public\n */\nexport class ServiceUnavailableError extends CustomErrorBase {}\n\n/**\n * An error that forwards an underlying cause with additional context in the message.\n *\n * The `name` property of the error will be inherited from the `cause` if\n * possible, and will otherwise be set to `'Error'`.\n *\n * @public\n */\nexport class ForwardedError extends CustomErrorBase {\n  constructor(message: string, cause: Error | unknown) {\n    super(message, cause);\n\n    this.name = isError(cause) ? cause.name : 'Error';\n  }\n}\n"],"names":[],"mappings":";;;AAmCO,MAAM,mBAAmB,eAAgB,CAAA;AAAA,EAC9C,IAAO,GAAA,YAAA;AACT;AAOO,MAAM,4BAA4B,eAAgB,CAAA;AAAA,EACvD,IAAO,GAAA,qBAAA;AACT;AAOO,MAAM,wBAAwB,eAAgB,CAAA;AAAA,EACnD,IAAO,GAAA,iBAAA;AACT;AAUO,MAAM,sBAAsB,eAAgB,CAAA;AAAA,EACjD,IAAO,GAAA,eAAA;AACT;AAQO,MAAM,sBAAsB,eAAgB,CAAA;AAAA,EACjD,IAAO,GAAA,eAAA;AACT;AAOO,MAAM,yBAAyB,eAAgB,CAAA;AAAA,EACpD,IAAO,GAAA,kBAAA;AACT;AAOO,MAAM,4BAA4B,eAAgB,CAAA;AAAA,EACvD,IAAO,GAAA,qBAAA;AACT;AAOO,MAAM,gCAAgC,eAAgB,CAAA;AAAC;AAUvD,MAAM,uBAAuB,eAAgB,CAAA;AAAA,EAClD,WAAA,CAAY,SAAiB,KAAwB,EAAA;AACnD,IAAA,KAAA,CAAM,SAAS,KAAK,CAAA;AAEpB,IAAA,IAAA,CAAK,IAAO,GAAA,OAAA,CAAQ,KAAK,CAAA,GAAI,MAAM,IAAO,GAAA,OAAA;AAAA;AAE9C;;;;"}