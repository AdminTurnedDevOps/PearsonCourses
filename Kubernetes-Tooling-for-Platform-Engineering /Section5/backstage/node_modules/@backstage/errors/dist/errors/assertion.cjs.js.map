{"version":3,"file":"assertion.cjs.js","sources":["../../src/errors/assertion.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An object that is shaped like an `Error`.\n *\n * @public\n */\nexport type ErrorLike = {\n  name: string;\n  message: string;\n  stack?: string;\n  [unknownKeys: string]: unknown;\n};\n\n/**\n * Checks whether an unknown value is an {@link ErrorLike} object, which guarantees that it's\n * an object that has at least two string properties: a non-empty `name` and `message`.\n *\n * @public\n * @param value - an unknown value\n * @returns true if the value is an {@link ErrorLike} object, false otherwise\n */\nexport function isError(value: unknown): value is ErrorLike {\n  if (typeof value !== 'object' || value === null || Array.isArray(value)) {\n    return false;\n  }\n  const maybe = value as Partial<ErrorLike>;\n  if (typeof maybe.name !== 'string' || maybe.name === '') {\n    return false;\n  }\n  if (typeof maybe.message !== 'string') {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Asserts that an unknown value is an {@link ErrorLike} object, which guarantees that it's\n * an object that has at least two string properties: a non-empty `name` and `message`.\n *\n * If the value is not an {@link ErrorLike} object, an error is thrown.\n *\n * @public\n * @param value - an unknown value\n */\nexport function assertError(value: unknown): asserts value is ErrorLike {\n  if (typeof value !== 'object' || value === null || Array.isArray(value)) {\n    throw new Error(`Encountered invalid error, not an object, got '${value}'`);\n  }\n  const maybe = value as Partial<ErrorLike>;\n  if (typeof maybe.name !== 'string' || maybe.name === '') {\n    throw new Error(`Encountered error object without a name, got '${value}'`);\n  }\n  if (typeof maybe.message !== 'string') {\n    throw new Error(\n      `Encountered error object without a message, got '${value}'`,\n    );\n  }\n}\n"],"names":[],"mappings":";;AAoCO,SAAS,QAAQ,KAAoC,EAAA;AAC1D,EAAI,IAAA,OAAO,UAAU,QAAY,IAAA,KAAA,KAAU,QAAQ,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AACvE,IAAO,OAAA,KAAA;AAAA;AAET,EAAA,MAAM,KAAQ,GAAA,KAAA;AACd,EAAA,IAAI,OAAO,KAAM,CAAA,IAAA,KAAS,QAAY,IAAA,KAAA,CAAM,SAAS,EAAI,EAAA;AACvD,IAAO,OAAA,KAAA;AAAA;AAET,EAAI,IAAA,OAAO,KAAM,CAAA,OAAA,KAAY,QAAU,EAAA;AACrC,IAAO,OAAA,KAAA;AAAA;AAET,EAAO,OAAA,IAAA;AACT;AAWO,SAAS,YAAY,KAA4C,EAAA;AACtE,EAAI,IAAA,OAAO,UAAU,QAAY,IAAA,KAAA,KAAU,QAAQ,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AACvE,IAAA,MAAM,IAAI,KAAA,CAAM,CAAkD,+CAAA,EAAA,KAAK,CAAG,CAAA,CAAA,CAAA;AAAA;AAE5E,EAAA,MAAM,KAAQ,GAAA,KAAA;AACd,EAAA,IAAI,OAAO,KAAM,CAAA,IAAA,KAAS,QAAY,IAAA,KAAA,CAAM,SAAS,EAAI,EAAA;AACvD,IAAA,MAAM,IAAI,KAAA,CAAM,CAAiD,8CAAA,EAAA,KAAK,CAAG,CAAA,CAAA,CAAA;AAAA;AAE3E,EAAI,IAAA,OAAO,KAAM,CAAA,OAAA,KAAY,QAAU,EAAA;AACrC,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,oDAAoD,KAAK,CAAA,CAAA;AAAA,KAC3D;AAAA;AAEJ;;;;;"}