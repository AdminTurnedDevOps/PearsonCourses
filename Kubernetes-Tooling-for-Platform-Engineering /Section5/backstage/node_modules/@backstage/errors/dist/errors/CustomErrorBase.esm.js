import { stringifyError } from '../serialization/error.esm.js';
import { isError } from './assertion.esm.js';

class CustomErrorBase extends Error {
  /**
   * An inner error that caused this error to be thrown, if any.
   */
  cause;
  constructor(message, cause) {
    let fullMessage = message;
    if (cause !== void 0) {
      const causeStr = stringifyError(cause);
      if (fullMessage) {
        fullMessage += `; caused by ${causeStr}`;
      } else {
        fullMessage = `caused by ${causeStr}`;
      }
    }
    super(fullMessage);
    Error.captureStackTrace?.(this, this.constructor);
    if (!this.name || this.name === "Error") {
      const baseName = this.constructor.name;
      if (baseName !== "Error") {
        this.name = this.constructor.name;
      }
    }
    this.cause = isError(cause) ? cause : void 0;
  }
}

export { CustomErrorBase };
//# sourceMappingURL=CustomErrorBase.esm.js.map
