{"version":3,"file":"CustomErrorBase.cjs.js","sources":["../../src/errors/CustomErrorBase.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyError } from '../serialization/error';\nimport { isError } from './assertion';\n\n/**\n * A base class that custom Error classes can inherit from.\n *\n * @public\n * @example\n *\n * ```ts\n * class MyCustomError extends CustomErrorBase {\n *  name = 'MyCustomError' as const;\n * }\n *\n * const e = new MyCustomError('Some message', cause);\n * // e.name === 'MyCustomError'\n * // e.message === 'Some message'\n * // e.cause === cause\n * // e.stack is set if the runtime supports it\n * ```\n */\nexport class CustomErrorBase extends Error {\n  /**\n   * An inner error that caused this error to be thrown, if any.\n   */\n  readonly cause?: Error | undefined;\n\n  constructor(message?: string, cause?: Error | unknown) {\n    let fullMessage = message;\n    if (cause !== undefined) {\n      const causeStr = stringifyError(cause);\n      if (fullMessage) {\n        fullMessage += `; caused by ${causeStr}`;\n      } else {\n        fullMessage = `caused by ${causeStr}`;\n      }\n    }\n\n    super(fullMessage);\n\n    Error.captureStackTrace?.(this, this.constructor);\n\n    if (!this.name || this.name === 'Error') {\n      const baseName = this.constructor.name;\n      if (baseName !== 'Error') {\n        this.name = this.constructor.name;\n      }\n    }\n\n    this.cause = isError(cause) ? cause : undefined;\n  }\n}\n"],"names":["stringifyError","isError"],"mappings":";;;;;AAqCO,MAAM,wBAAwB,KAAM,CAAA;AAAA;AAAA;AAAA;AAAA,EAIhC,KAAA;AAAA,EAET,WAAA,CAAY,SAAkB,KAAyB,EAAA;AACrD,IAAA,IAAI,WAAc,GAAA,OAAA;AAClB,IAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,MAAM,MAAA,QAAA,GAAWA,qBAAe,KAAK,CAAA;AACrC,MAAA,IAAI,WAAa,EAAA;AACf,QAAA,WAAA,IAAe,eAAe,QAAQ,CAAA,CAAA;AAAA,OACjC,MAAA;AACL,QAAA,WAAA,GAAc,aAAa,QAAQ,CAAA,CAAA;AAAA;AACrC;AAGF,IAAA,KAAA,CAAM,WAAW,CAAA;AAEjB,IAAM,KAAA,CAAA,iBAAA,GAAoB,IAAM,EAAA,IAAA,CAAK,WAAW,CAAA;AAEhD,IAAA,IAAI,CAAC,IAAA,CAAK,IAAQ,IAAA,IAAA,CAAK,SAAS,OAAS,EAAA;AACvC,MAAM,MAAA,QAAA,GAAW,KAAK,WAAY,CAAA,IAAA;AAClC,MAAA,IAAI,aAAa,OAAS,EAAA;AACxB,QAAK,IAAA,CAAA,IAAA,GAAO,KAAK,WAAY,CAAA,IAAA;AAAA;AAC/B;AAGF,IAAA,IAAA,CAAK,KAAQ,GAAAC,iBAAA,CAAQ,KAAK,CAAA,GAAI,KAAQ,GAAA,KAAA,CAAA;AAAA;AAE1C;;;;"}