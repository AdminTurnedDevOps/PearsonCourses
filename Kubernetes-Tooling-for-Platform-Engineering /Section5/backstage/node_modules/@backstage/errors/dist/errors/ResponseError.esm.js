import { deserializeError } from '../serialization/error.esm.js';
import { parseErrorResponseBody } from '../serialization/response.esm.js';

class ResponseError extends Error {
  /**
   * The actual response, as seen by the client.
   *
   * Note that the body of this response is always consumed. Its parsed form is
   * in the `body` field.
   */
  response;
  /**
   * The parsed JSON error body, as sent by the server.
   */
  body;
  /**
   * The Error cause, as seen by the remote server. This is parsed out of the
   * JSON error body.
   *
   * This error always has the plain Error constructor, however all
   * serializable enumerable fields on the remote error including its name are
   * preserved. Therefore, if you want to check the error type, use its name
   * property rather than checking typeof or its constructor or prototype.
   */
  cause;
  statusCode;
  statusText;
  /**
   * Constructs a ResponseError based on a failed response.
   *
   * Assumes that the response has already been checked to be not ok. This
   * function consumes the body of the response, and assumes that it hasn't
   * been consumed before.
   */
  static async fromResponse(response) {
    const data = await parseErrorResponseBody(response);
    const statusCode = data.response.statusCode || response.status;
    const statusText = response.statusText;
    const message = `Request failed with ${statusCode} ${statusText}`;
    const cause = deserializeError(data.error);
    return new ResponseError({
      message,
      response,
      data,
      cause,
      statusCode,
      statusText
    });
  }
  constructor(opts) {
    super(opts.message);
    this.name = "ResponseError";
    this.response = opts.response;
    this.body = opts.data;
    this.cause = opts.cause;
    this.statusCode = opts.statusCode;
    this.statusText = opts.statusText;
  }
}

export { ResponseError };
//# sourceMappingURL=ResponseError.esm.js.map
