{"version":3,"file":"ResponseError.cjs.js","sources":["../../src/errors/ResponseError.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deserializeError } from '../serialization/error';\nimport {\n  ErrorResponseBody,\n  parseErrorResponseBody,\n} from '../serialization/response';\nimport { ConsumedResponse } from './types';\n\n/**\n * An error thrown as the result of a failed server request.\n *\n * The server is expected to respond on the ErrorResponseBody format.\n *\n * @public\n */\nexport class ResponseError extends Error {\n  /**\n   * The actual response, as seen by the client.\n   *\n   * Note that the body of this response is always consumed. Its parsed form is\n   * in the `body` field.\n   */\n  readonly response: ConsumedResponse;\n\n  /**\n   * The parsed JSON error body, as sent by the server.\n   */\n  readonly body: ErrorResponseBody;\n\n  /**\n   * The Error cause, as seen by the remote server. This is parsed out of the\n   * JSON error body.\n   *\n   * This error always has the plain Error constructor, however all\n   * serializable enumerable fields on the remote error including its name are\n   * preserved. Therefore, if you want to check the error type, use its name\n   * property rather than checking typeof or its constructor or prototype.\n   */\n  readonly cause: Error;\n\n  readonly statusCode: number;\n\n  readonly statusText: string;\n  /**\n   * Constructs a ResponseError based on a failed response.\n   *\n   * Assumes that the response has already been checked to be not ok. This\n   * function consumes the body of the response, and assumes that it hasn't\n   * been consumed before.\n   */\n  static async fromResponse(\n    response: ConsumedResponse & { text(): Promise<string> },\n  ): Promise<ResponseError> {\n    const data = await parseErrorResponseBody(response);\n\n    const statusCode = data.response.statusCode || response.status;\n    const statusText = response.statusText;\n    const message = `Request failed with ${statusCode} ${statusText}`;\n    const cause = deserializeError(data.error);\n\n    return new ResponseError({\n      message,\n      response,\n      data,\n      cause,\n      statusCode,\n      statusText,\n    });\n  }\n\n  private constructor(opts: {\n    message: string;\n    response: ConsumedResponse;\n    data: ErrorResponseBody;\n    cause: Error;\n    statusCode: number;\n    statusText: string;\n  }) {\n    super(opts.message);\n\n    this.name = 'ResponseError';\n    this.response = opts.response;\n    this.body = opts.data;\n    this.cause = opts.cause;\n    this.statusCode = opts.statusCode;\n    this.statusText = opts.statusText;\n  }\n}\n"],"names":["response","parseErrorResponseBody","deserializeError"],"mappings":";;;;;AA8BO,MAAM,sBAAsB,KAAM,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO9B,QAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,KAAA;AAAA,EAEA,UAAA;AAAA,EAEA,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQT,aAAa,aACXA,UACwB,EAAA;AACxB,IAAM,MAAA,IAAA,GAAO,MAAMC,+BAAA,CAAuBD,UAAQ,CAAA;AAElD,IAAA,MAAM,UAAa,GAAA,IAAA,CAAK,QAAS,CAAA,UAAA,IAAcA,UAAS,CAAA,MAAA;AACxD,IAAA,MAAM,aAAaA,UAAS,CAAA,UAAA;AAC5B,IAAA,MAAM,OAAU,GAAA,CAAA,oBAAA,EAAuB,UAAU,CAAA,CAAA,EAAI,UAAU,CAAA,CAAA;AAC/D,IAAM,MAAA,KAAA,GAAQE,sBAAiB,CAAA,IAAA,CAAK,KAAK,CAAA;AAEzC,IAAA,OAAO,IAAI,aAAc,CAAA;AAAA,MACvB,OAAA;AAAA,gBACAF,UAAA;AAAA,MACA,IAAA;AAAA,MACA,KAAA;AAAA,MACA,UAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA;AACH,EAEQ,YAAY,IAOjB,EAAA;AACD,IAAA,KAAA,CAAM,KAAK,OAAO,CAAA;AAElB,IAAA,IAAA,CAAK,IAAO,GAAA,eAAA;AACZ,IAAA,IAAA,CAAK,WAAW,IAAK,CAAA,QAAA;AACrB,IAAA,IAAA,CAAK,OAAO,IAAK,CAAA,IAAA;AACjB,IAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,KAAA;AAClB,IAAA,IAAA,CAAK,aAAa,IAAK,CAAA,UAAA;AACvB,IAAA,IAAA,CAAK,aAAa,IAAK,CAAA,UAAA;AAAA;AAE3B;;;;"}