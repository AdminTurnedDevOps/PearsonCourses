{"version":3,"file":"alpha.cjs.js","sources":["../src/alpha.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createExtensionPoint,\n  createServiceFactory,\n  createServiceRef,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\nimport { DocumentTypeInfo } from '@backstage/plugin-search-common';\nimport {\n  IndexBuilder,\n  RegisterCollatorParameters,\n  RegisterDecoratorParameters,\n  Scheduler,\n  SearchEngine,\n} from '@backstage/plugin-search-backend-node';\n\n/**\n * @alpha\n * Options for the init method on {@link SearchIndexService}.\n */\nexport type SearchIndexServiceInitOptions = {\n  searchEngine: SearchEngine;\n  collators: RegisterCollatorParameters[];\n  decorators: RegisterDecoratorParameters[];\n};\n\n/**\n * @alpha\n * Interface for implementation of index service.\n */\nexport interface SearchIndexService {\n  /**\n   * Initializes state in preparation for starting the search index service\n   */\n  init(options: SearchIndexServiceInitOptions): void;\n\n  /**\n   * Starts indexing process\n   */\n  start(): Promise<void>;\n\n  /**\n   * Stops indexing process\n   */\n  stop(): Promise<void>;\n\n  /**\n   * Returns an index types list.\n   */\n  getDocumentTypes(): Record<string, DocumentTypeInfo>;\n}\n\n/**\n * @alpha\n * Interface for search index registry extension point.\n */\nexport interface SearchIndexRegistryExtensionPoint {\n  addCollator(options: RegisterCollatorParameters): void;\n  addDecorator(options: RegisterDecoratorParameters): void;\n}\n\n/**\n * @alpha\n * Interface for search engine registry extension point.\n */\nexport interface SearchEngineRegistryExtensionPoint {\n  setSearchEngine(searchEngine: SearchEngine): void;\n}\n\ntype DefaultSearchIndexServiceOptions = {\n  logger: LoggerService;\n};\n\n/**\n * @alpha\n * Responsible for register the indexing task and start the schedule.\n */\nclass DefaultSearchIndexService implements SearchIndexService {\n  private readonly logger: LoggerService;\n  private indexBuilder: IndexBuilder | null = null;\n  private scheduler: Scheduler | null = null;\n\n  private constructor(options: DefaultSearchIndexServiceOptions) {\n    this.logger = options.logger;\n  }\n\n  static fromConfig(options: DefaultSearchIndexServiceOptions) {\n    return new DefaultSearchIndexService(options);\n  }\n\n  init(options: SearchIndexServiceInitOptions): void {\n    this.indexBuilder = new IndexBuilder({\n      logger: this.logger,\n      searchEngine: options.searchEngine,\n    });\n\n    options.collators.forEach(collator =>\n      this.indexBuilder?.addCollator(collator),\n    );\n\n    options.decorators.forEach(decorator =>\n      this.indexBuilder?.addDecorator(decorator),\n    );\n  }\n\n  async start(): Promise<void> {\n    if (!this.indexBuilder) {\n      throw new Error('IndexBuilder is not initialized, call init first');\n    }\n    const { scheduler } = await this.indexBuilder.build();\n    this.scheduler = scheduler;\n    this.scheduler!.start();\n  }\n\n  async stop(): Promise<void> {\n    if (this.scheduler) {\n      this.scheduler.stop();\n      this.scheduler = null;\n    }\n  }\n\n  getDocumentTypes(): Record<string, DocumentTypeInfo> {\n    return this.indexBuilder?.getDocumentTypes() ?? {};\n  }\n}\n\n/**\n * @alpha\n * Service that builds a search index.\n */\nexport const searchIndexServiceRef = createServiceRef<SearchIndexService>({\n  id: 'search.index.service',\n  defaultFactory: async service =>\n    createServiceFactory({\n      service,\n      deps: {\n        logger: coreServices.logger,\n      },\n      factory({ logger }) {\n        return DefaultSearchIndexService.fromConfig({\n          logger,\n        });\n      },\n    }),\n});\n\n/**\n * @alpha\n * Extension point for register a search engine.\n */\nexport const searchEngineRegistryExtensionPoint =\n  createExtensionPoint<SearchEngineRegistryExtensionPoint>({\n    id: 'search.engine.registry',\n  });\n\n/**\n * @alpha\n * Extension point for registering collators and decorators\n */\nexport const searchIndexRegistryExtensionPoint =\n  createExtensionPoint<SearchIndexRegistryExtensionPoint>({\n    id: 'search.index.registry',\n  });\n"],"names":["IndexBuilder","createServiceRef","createServiceFactory","coreServices","createExtensionPoint"],"mappings":";;;;;AA6FA,MAAM,yBAAwD,CAAA;AAAA,EAC3C,MAAA;AAAA,EACT,YAAoC,GAAA,IAAA;AAAA,EACpC,SAA8B,GAAA,IAAA;AAAA,EAE9B,YAAY,OAA2C,EAAA;AAC7D,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA;AAAA;AACxB,EAEA,OAAO,WAAW,OAA2C,EAAA;AAC3D,IAAO,OAAA,IAAI,0BAA0B,OAAO,CAAA;AAAA;AAC9C,EAEA,KAAK,OAA8C,EAAA;AACjD,IAAK,IAAA,CAAA,YAAA,GAAe,IAAIA,oCAAa,CAAA;AAAA,MACnC,QAAQ,IAAK,CAAA,MAAA;AAAA,MACb,cAAc,OAAQ,CAAA;AAAA,KACvB,CAAA;AAED,IAAA,OAAA,CAAQ,SAAU,CAAA,OAAA;AAAA,MAAQ,CACxB,QAAA,KAAA,IAAA,CAAK,YAAc,EAAA,WAAA,CAAY,QAAQ;AAAA,KACzC;AAEA,IAAA,OAAA,CAAQ,UAAW,CAAA,OAAA;AAAA,MAAQ,CACzB,SAAA,KAAA,IAAA,CAAK,YAAc,EAAA,YAAA,CAAa,SAAS;AAAA,KAC3C;AAAA;AACF,EAEA,MAAM,KAAuB,GAAA;AAC3B,IAAI,IAAA,CAAC,KAAK,YAAc,EAAA;AACtB,MAAM,MAAA,IAAI,MAAM,kDAAkD,CAAA;AAAA;AAEpE,IAAA,MAAM,EAAE,SAAU,EAAA,GAAI,MAAM,IAAA,CAAK,aAAa,KAAM,EAAA;AACpD,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA;AACjB,IAAA,IAAA,CAAK,UAAW,KAAM,EAAA;AAAA;AACxB,EAEA,MAAM,IAAsB,GAAA;AAC1B,IAAA,IAAI,KAAK,SAAW,EAAA;AAClB,MAAA,IAAA,CAAK,UAAU,IAAK,EAAA;AACpB,MAAA,IAAA,CAAK,SAAY,GAAA,IAAA;AAAA;AACnB;AACF,EAEA,gBAAqD,GAAA;AACnD,IAAA,OAAO,IAAK,CAAA,YAAA,EAAc,gBAAiB,EAAA,IAAK,EAAC;AAAA;AAErD;AAMO,MAAM,wBAAwBC,iCAAqC,CAAA;AAAA,EACxE,EAAI,EAAA,sBAAA;AAAA,EACJ,cAAA,EAAgB,OAAM,OAAA,KACpBC,qCAAqB,CAAA;AAAA,IACnB,OAAA;AAAA,IACA,IAAM,EAAA;AAAA,MACJ,QAAQC,6BAAa,CAAA;AAAA,KACvB;AAAA,IACA,OAAA,CAAQ,EAAE,MAAA,EAAU,EAAA;AAClB,MAAA,OAAO,0BAA0B,UAAW,CAAA;AAAA,QAC1C;AAAA,OACD,CAAA;AAAA;AACH,GACD;AACL,CAAC;AAMM,MAAM,qCACXC,qCAAyD,CAAA;AAAA,EACvD,EAAI,EAAA;AACN,CAAC;AAMI,MAAM,oCACXA,qCAAwD,CAAA;AAAA,EACtD,EAAI,EAAA;AACN,CAAC;;;;;;"}