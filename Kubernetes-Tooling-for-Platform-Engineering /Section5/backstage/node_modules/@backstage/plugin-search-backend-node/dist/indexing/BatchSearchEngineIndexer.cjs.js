'use strict';

var errors = require('@backstage/errors');
var stream = require('stream');

class BatchSearchEngineIndexer extends stream.Writable {
  batchSize;
  currentBatch = [];
  constructor(options) {
    super({ objectMode: true });
    this.batchSize = options.batchSize;
  }
  /**
   * Encapsulates initialization logic.
   * @internal
   */
  async _construct(done) {
    try {
      await this.initialize();
      done();
    } catch (e) {
      errors.assertError(e);
      done(e);
    }
  }
  /**
   * Encapsulates batch stream write logic.
   * @internal
   */
  async _write(doc, _e, done) {
    this.currentBatch.push(doc);
    if (this.currentBatch.length < this.batchSize) {
      done();
      return;
    }
    try {
      await this.index(this.currentBatch);
      this.currentBatch = [];
      done();
    } catch (e) {
      errors.assertError(e);
      done(e);
    }
  }
  /**
   * Encapsulates finalization and final error handling logic.
   * @internal
   */
  async _final(done) {
    try {
      if (this.currentBatch.length) {
        await this.index(this.currentBatch);
        this.currentBatch = [];
      }
      await this.finalize();
      done();
    } catch (e) {
      errors.assertError(e);
      done(e);
    }
  }
}

exports.BatchSearchEngineIndexer = BatchSearchEngineIndexer;
//# sourceMappingURL=BatchSearchEngineIndexer.cjs.js.map
