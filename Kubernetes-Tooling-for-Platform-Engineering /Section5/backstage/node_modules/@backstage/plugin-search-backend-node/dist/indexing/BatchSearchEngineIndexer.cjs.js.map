{"version":3,"file":"BatchSearchEngineIndexer.cjs.js","sources":["../../src/indexing/BatchSearchEngineIndexer.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertError } from '@backstage/errors';\nimport { IndexableDocument } from '@backstage/plugin-search-common';\nimport { Writable } from 'stream';\n\n/**\n * Options for {@link BatchSearchEngineIndexer}\n * @public\n */\nexport type BatchSearchEngineOptions = {\n  batchSize: number;\n};\n\n/**\n * Base class encapsulating batch-based stream processing. Useful as a base\n * class for search engine indexers.\n * @public\n */\nexport abstract class BatchSearchEngineIndexer extends Writable {\n  private batchSize: number;\n  private currentBatch: IndexableDocument[] = [];\n\n  constructor(options: BatchSearchEngineOptions) {\n    super({ objectMode: true });\n    this.batchSize = options.batchSize;\n  }\n\n  /**\n   * Receives an array of indexable documents (of size this.batchSize) which\n   * should be written to the search engine. This method won't be called again\n   * at least until it resolves.\n   */\n  public abstract index(documents: IndexableDocument[]): Promise<void>;\n\n  /**\n   * Any asynchronous setup tasks can be performed here.\n   */\n  public abstract initialize(): Promise<void>;\n\n  /**\n   * Any asynchronous teardown tasks can be performed here.\n   */\n  public abstract finalize(): Promise<void>;\n\n  /**\n   * Encapsulates initialization logic.\n   * @internal\n   */\n  async _construct(done: (error?: Error | null | undefined) => void) {\n    try {\n      await this.initialize();\n      done();\n    } catch (e) {\n      assertError(e);\n      done(e);\n    }\n  }\n\n  /**\n   * Encapsulates batch stream write logic.\n   * @internal\n   */\n  async _write(\n    doc: IndexableDocument,\n    _e: any,\n    done: (error?: Error | null) => void,\n  ) {\n    this.currentBatch.push(doc);\n    if (this.currentBatch.length < this.batchSize) {\n      done();\n      return;\n    }\n\n    try {\n      await this.index(this.currentBatch);\n      this.currentBatch = [];\n      done();\n    } catch (e) {\n      assertError(e);\n      done(e);\n    }\n  }\n\n  /**\n   * Encapsulates finalization and final error handling logic.\n   * @internal\n   */\n  async _final(done: (error?: Error | null) => void) {\n    try {\n      // Index any remaining documents.\n      if (this.currentBatch.length) {\n        await this.index(this.currentBatch);\n        this.currentBatch = [];\n      }\n      await this.finalize();\n      done();\n    } catch (e) {\n      assertError(e);\n      done(e);\n    }\n  }\n}\n"],"names":["Writable","assertError"],"mappings":";;;;;AAiCO,MAAe,iCAAiCA,eAAS,CAAA;AAAA,EACtD,SAAA;AAAA,EACA,eAAoC,EAAC;AAAA,EAE7C,YAAY,OAAmC,EAAA;AAC7C,IAAM,KAAA,CAAA,EAAE,UAAY,EAAA,IAAA,EAAM,CAAA;AAC1B,IAAA,IAAA,CAAK,YAAY,OAAQ,CAAA,SAAA;AAAA;AAC3B;AAAA;AAAA;AAAA;AAAA,EAuBA,MAAM,WAAW,IAAkD,EAAA;AACjE,IAAI,IAAA;AACF,MAAA,MAAM,KAAK,UAAW,EAAA;AACtB,MAAK,IAAA,EAAA;AAAA,aACE,CAAG,EAAA;AACV,MAAAC,kBAAA,CAAY,CAAC,CAAA;AACb,MAAA,IAAA,CAAK,CAAC,CAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,MAAA,CACJ,GACA,EAAA,EAAA,EACA,IACA,EAAA;AACA,IAAK,IAAA,CAAA,YAAA,CAAa,KAAK,GAAG,CAAA;AAC1B,IAAA,IAAI,IAAK,CAAA,YAAA,CAAa,MAAS,GAAA,IAAA,CAAK,SAAW,EAAA;AAC7C,MAAK,IAAA,EAAA;AACL,MAAA;AAAA;AAGF,IAAI,IAAA;AACF,MAAM,MAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,YAAY,CAAA;AAClC,MAAA,IAAA,CAAK,eAAe,EAAC;AACrB,MAAK,IAAA,EAAA;AAAA,aACE,CAAG,EAAA;AACV,MAAAA,kBAAA,CAAY,CAAC,CAAA;AACb,MAAA,IAAA,CAAK,CAAC,CAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,OAAO,IAAsC,EAAA;AACjD,IAAI,IAAA;AAEF,MAAI,IAAA,IAAA,CAAK,aAAa,MAAQ,EAAA;AAC5B,QAAM,MAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,YAAY,CAAA;AAClC,QAAA,IAAA,CAAK,eAAe,EAAC;AAAA;AAEvB,MAAA,MAAM,KAAK,QAAS,EAAA;AACpB,MAAK,IAAA,EAAA;AAAA,aACE,CAAG,EAAA;AACV,MAAAA,kBAAA,CAAY,CAAC,CAAA;AACb,MAAA,IAAA,CAAK,CAAC,CAAA;AAAA;AACR;AAEJ;;;;"}