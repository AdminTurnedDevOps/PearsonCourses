'use strict';

var lunr = require('lunr');
var BatchSearchEngineIndexer = require('../indexing/BatchSearchEngineIndexer.cjs.js');
require('@backstage/errors');
require('stream');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var lunr__default = /*#__PURE__*/_interopDefaultCompat(lunr);

class LunrSearchEngineIndexer extends BatchSearchEngineIndexer.BatchSearchEngineIndexer {
  schemaInitialized = false;
  builder;
  docStore = {};
  constructor() {
    super({ batchSize: 1e3 });
    this.builder = new lunr__default.default.Builder();
    this.builder.pipeline.add(lunr__default.default.trimmer, lunr__default.default.stopWordFilter, lunr__default.default.stemmer);
    this.builder.searchPipeline.add(lunr__default.default.stemmer);
    this.builder.metadataWhitelist = ["position"];
  }
  // No async initialization required.
  async initialize() {
  }
  async finalize() {
  }
  async index(documents) {
    if (!this.schemaInitialized) {
      Object.keys(documents[0]).forEach((field) => {
        this.builder.field(field);
      });
      this.builder.ref("location");
      this.schemaInitialized = true;
    }
    documents.forEach((document) => {
      this.builder.add(document);
      this.docStore[document.location] = document;
    });
  }
  buildIndex() {
    return this.builder.build();
  }
  getDocumentStore() {
    return this.docStore;
  }
}

exports.LunrSearchEngineIndexer = LunrSearchEngineIndexer;
//# sourceMappingURL=LunrSearchEngineIndexer.cjs.js.map
