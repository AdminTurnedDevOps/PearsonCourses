'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var pluginSearchBackendNode = require('@backstage/plugin-search-backend-node');

class DefaultSearchIndexService {
  logger;
  indexBuilder = null;
  scheduler = null;
  constructor(options) {
    this.logger = options.logger;
  }
  static fromConfig(options) {
    return new DefaultSearchIndexService(options);
  }
  init(options) {
    this.indexBuilder = new pluginSearchBackendNode.IndexBuilder({
      logger: this.logger,
      searchEngine: options.searchEngine
    });
    options.collators.forEach(
      (collator) => this.indexBuilder?.addCollator(collator)
    );
    options.decorators.forEach(
      (decorator) => this.indexBuilder?.addDecorator(decorator)
    );
  }
  async start() {
    if (!this.indexBuilder) {
      throw new Error("IndexBuilder is not initialized, call init first");
    }
    const { scheduler } = await this.indexBuilder.build();
    this.scheduler = scheduler;
    this.scheduler.start();
  }
  async stop() {
    if (this.scheduler) {
      this.scheduler.stop();
      this.scheduler = null;
    }
  }
  getDocumentTypes() {
    return this.indexBuilder?.getDocumentTypes() ?? {};
  }
}
const searchIndexServiceRef = backendPluginApi.createServiceRef({
  id: "search.index.service",
  defaultFactory: async (service) => backendPluginApi.createServiceFactory({
    service,
    deps: {
      logger: backendPluginApi.coreServices.logger
    },
    factory({ logger }) {
      return DefaultSearchIndexService.fromConfig({
        logger
      });
    }
  })
});
const searchEngineRegistryExtensionPoint = backendPluginApi.createExtensionPoint({
  id: "search.engine.registry"
});
const searchIndexRegistryExtensionPoint = backendPluginApi.createExtensionPoint({
  id: "search.index.registry"
});

exports.searchEngineRegistryExtensionPoint = searchEngineRegistryExtensionPoint;
exports.searchIndexRegistryExtensionPoint = searchIndexRegistryExtensionPoint;
exports.searchIndexServiceRef = searchIndexServiceRef;
//# sourceMappingURL=alpha.cjs.js.map
