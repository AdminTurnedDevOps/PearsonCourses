{"version":3,"file":"NewlineDelimitedJsonCollatorFactory.cjs.js","sources":["../../src/collators/NewlineDelimitedJsonCollatorFactory.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { DocumentCollatorFactory } from '@backstage/plugin-search-common';\nimport { Permission } from '@backstage/plugin-permission-common';\nimport { Readable } from 'stream';\nimport { parse as parseNdjson } from 'ndjson';\nimport { LoggerService, UrlReaderService } from '@backstage/backend-plugin-api';\n\n/**\n * Options for instantiate NewlineDelimitedJsonCollatorFactory\n * @public\n */\nexport type NewlineDelimitedJsonCollatorFactoryOptions = {\n  type: string;\n  searchPattern: string;\n  reader: UrlReaderService;\n  logger: LoggerService;\n  visibilityPermission?: Permission;\n};\n\n/**\n * Factory class producing a collator that can be used to index documents\n * sourced from the latest newline delimited JSON file matching a given search\n * pattern. \"Latest\" is determined by the name of the file (last alphabetically\n * is considered latest).\n *\n * @remarks\n * The reader provided must implement the `search()` method as well as the\n * `readUrl` method whose response includes the `stream()` method. Naturally,\n * the reader must also be configured to understand the given search pattern.\n *\n * @example\n * Here's an example configuration using Google Cloud Storage, which would\n * return the latest file under the `bucket` GCS bucket with files like\n * `xyz-2021.ndjson` or `xyz-2022.ndjson`.\n * ```ts\n * indexBuilder.addCollator({\n *   schedule,\n *   factory: NewlineDelimitedJsonCollatorFactory.fromConfig(env.config, {\n *     type: 'techdocs',\n *     searchPattern: 'https://storage.cloud.google.com/bucket/xyz-*',\n *     reader: env.reader,\n *     logger: env.logger,\n *   })\n * });\n * ```\n *\n * @public\n */\nexport class NewlineDelimitedJsonCollatorFactory\n  implements DocumentCollatorFactory\n{\n  readonly type: string;\n\n  public readonly visibilityPermission: Permission | undefined;\n\n  private constructor(\n    type: string,\n    private readonly searchPattern: string,\n    private readonly reader: UrlReaderService,\n    private readonly logger: LoggerService,\n    visibilityPermission: Permission | undefined,\n  ) {\n    this.type = type;\n    this.visibilityPermission = visibilityPermission;\n  }\n\n  /**\n   * Returns a NewlineDelimitedJsonCollatorFactory instance from configuration\n   * and a set of options.\n   */\n  static fromConfig(\n    _config: Config,\n    options: NewlineDelimitedJsonCollatorFactoryOptions,\n  ): NewlineDelimitedJsonCollatorFactory {\n    return new NewlineDelimitedJsonCollatorFactory(\n      options.type,\n      options.searchPattern,\n      options.reader,\n      options.logger.child({ documentType: options.type }),\n      options.visibilityPermission,\n    );\n  }\n\n  /**\n   * Returns the \"latest\" URL for the given search pattern (e.g. the one at the\n   * end of the list, sorted alphabetically).\n   */\n  private async lastUrl(): Promise<string | undefined> {\n    try {\n      // Search for files matching the given pattern, then sort/reverse. The\n      // first item in the list will be the \"latest\" file.\n      this.logger.info(\n        `Attempting to find latest .ndjson matching ${this.searchPattern}`,\n      );\n      const { files } = await this.reader.search(this.searchPattern);\n      const candidates = files\n        .filter(file => file.url.endsWith('.ndjson'))\n        .sort((a, b) => a.url.localeCompare(b.url))\n        .reverse();\n\n      return candidates[0]?.url;\n    } catch (e) {\n      this.logger.error(`Could not search for ${this.searchPattern}`, e);\n      throw e;\n    }\n  }\n\n  async getCollator(): Promise<Readable> {\n    // Search for files matching the given pattern.\n    const lastUrl = await this.lastUrl();\n\n    // Abort if no such file could be found.\n    if (!lastUrl) {\n      const noMatchingFile = `Could not find an .ndjson file matching ${this.searchPattern}`;\n      this.logger.error(noMatchingFile);\n      throw new Error(noMatchingFile);\n    } else {\n      this.logger.info(`Using latest .ndjson file ${lastUrl}`);\n    }\n\n    // Use the UrlReader to try and stream the file.\n    const readerResponse = await this.reader.readUrl!(lastUrl);\n    const stream = readerResponse.stream!();\n\n    // Use ndjson's parser to turn the raw file into an object-mode stream.\n    return stream.pipe(parseNdjson());\n  }\n}\n"],"names":["parseNdjson"],"mappings":";;;;AAgEO,MAAM,mCAEb,CAAA;AAAA,EAKU,WACN,CAAA,IAAA,EACiB,aACA,EAAA,MAAA,EACA,QACjB,oBACA,EAAA;AAJiB,IAAA,IAAA,CAAA,aAAA,GAAA,aAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AACA,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AAGjB,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AACZ,IAAA,IAAA,CAAK,oBAAuB,GAAA,oBAAA;AAAA;AAC9B,EAbS,IAAA;AAAA,EAEO,oBAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBhB,OAAO,UACL,CAAA,OAAA,EACA,OACqC,EAAA;AACrC,IAAA,OAAO,IAAI,mCAAA;AAAA,MACT,OAAQ,CAAA,IAAA;AAAA,MACR,OAAQ,CAAA,aAAA;AAAA,MACR,OAAQ,CAAA,MAAA;AAAA,MACR,QAAQ,MAAO,CAAA,KAAA,CAAM,EAAE,YAAc,EAAA,OAAA,CAAQ,MAAM,CAAA;AAAA,MACnD,OAAQ,CAAA;AAAA,KACV;AAAA;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,OAAuC,GAAA;AACnD,IAAI,IAAA;AAGF,MAAA,IAAA,CAAK,MAAO,CAAA,IAAA;AAAA,QACV,CAAA,2CAAA,EAA8C,KAAK,aAAa,CAAA;AAAA,OAClE;AACA,MAAM,MAAA,EAAE,OAAU,GAAA,MAAM,KAAK,MAAO,CAAA,MAAA,CAAO,KAAK,aAAa,CAAA;AAC7D,MAAM,MAAA,UAAA,GAAa,MAChB,MAAO,CAAA,CAAA,IAAA,KAAQ,KAAK,GAAI,CAAA,QAAA,CAAS,SAAS,CAAC,CAAA,CAC3C,KAAK,CAAC,CAAA,EAAG,MAAM,CAAE,CAAA,GAAA,CAAI,cAAc,CAAE,CAAA,GAAG,CAAC,CAAA,CACzC,OAAQ,EAAA;AAEX,MAAO,OAAA,UAAA,CAAW,CAAC,CAAG,EAAA,GAAA;AAAA,aACf,CAAG,EAAA;AACV,MAAA,IAAA,CAAK,OAAO,KAAM,CAAA,CAAA,qBAAA,EAAwB,IAAK,CAAA,aAAa,IAAI,CAAC,CAAA;AACjE,MAAM,MAAA,CAAA;AAAA;AACR;AACF,EAEA,MAAM,WAAiC,GAAA;AAErC,IAAM,MAAA,OAAA,GAAU,MAAM,IAAA,CAAK,OAAQ,EAAA;AAGnC,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAM,MAAA,cAAA,GAAiB,CAA2C,wCAAA,EAAA,IAAA,CAAK,aAAa,CAAA,CAAA;AACpF,MAAK,IAAA,CAAA,MAAA,CAAO,MAAM,cAAc,CAAA;AAChC,MAAM,MAAA,IAAI,MAAM,cAAc,CAAA;AAAA,KACzB,MAAA;AACL,MAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,CAA6B,0BAAA,EAAA,OAAO,CAAE,CAAA,CAAA;AAAA;AAIzD,IAAA,MAAM,cAAiB,GAAA,MAAM,IAAK,CAAA,MAAA,CAAO,QAAS,OAAO,CAAA;AACzD,IAAM,MAAA,MAAA,GAAS,eAAe,MAAQ,EAAA;AAGtC,IAAO,OAAA,MAAA,CAAO,IAAK,CAAAA,YAAA,EAAa,CAAA;AAAA;AAEpC;;;;"}