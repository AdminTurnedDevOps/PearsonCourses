/// <reference types="node" />
import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import * as _backstage_plugin_auth_node from '@backstage/plugin-auth-node';
import { IncomingHttpHeaders } from 'http';

/** @public */
declare const authModuleOauth2ProxyProvider: _backstage_backend_plugin_api.BackendFeature;

/**
 * JWT header extraction result, containing the raw value and the parsed JWT
 * payload.
 *
 * @public
 */
type OAuth2ProxyResult<JWTPayload = {}> = {
    /**
     * The parsed payload of the `accessToken`. The token is only parsed, not verified.
     *
     * @deprecated Access through the `headers` instead. This will be removed in a future release.
     */
    fullProfile: JWTPayload;
    /**
     * The token received via the X-OAUTH2-PROXY-ID-TOKEN header. Will be an empty string
     * if the header is not set. Note the this is typically an OpenID Connect token.
     *
     * @deprecated Access through the `headers` instead. This will be removed in a future release.
     */
    accessToken: string;
    /**
     * The headers of the incoming request from the OAuth2 proxy. This will include
     * both the headers set by the client as well as the ones added by the OAuth2 proxy.
     * You should only trust the headers that are injected by the OAuth2 proxy.
     *
     * Useful headers to use to complete the sign-in are for example `x-forwarded-user`
     * and `x-forwarded-email`. See the OAuth2 proxy documentation for more information
     * about the available headers and how to enable them. In particular it is possible
     * to forward access and identity tokens, which can be user for additional verification
     * and lookups.
     */
    headers: IncomingHttpHeaders;
    /**
     * Provides convenient access to the request headers.
     *
     * This call is simply forwarded to `req.get(name)`.
     */
    getHeader(name: string): string | undefined;
};

/**
 * NOTE: This may come in handy if you're doing work on this provider:
 * plugins/auth-backend/examples/docker-compose.oauth2-proxy.yaml
 *
 * @public
 */
declare const OAUTH2_PROXY_JWT_HEADER = "X-OAUTH2-PROXY-ID-TOKEN";
/** @public */
declare const oauth2ProxyAuthenticator: _backstage_plugin_auth_node.ProxyAuthenticator<Promise<void>, OAuth2ProxyResult, {
    accessToken: string;
}>;

export { OAUTH2_PROXY_JWT_HEADER, type OAuth2ProxyResult, authModuleOauth2ProxyProvider as default, oauth2ProxyAuthenticator };
