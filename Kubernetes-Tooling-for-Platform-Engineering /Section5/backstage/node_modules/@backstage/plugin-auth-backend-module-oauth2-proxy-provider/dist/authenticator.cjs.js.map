{"version":3,"file":"authenticator.cjs.js","sources":["../src/authenticator.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthenticationError } from '@backstage/errors';\nimport { createProxyAuthenticator } from '@backstage/plugin-auth-node';\nimport { decodeJwt } from 'jose';\nimport { OAuth2ProxyResult } from './types';\n\n/**\n * NOTE: This may come in handy if you're doing work on this provider:\n * plugins/auth-backend/examples/docker-compose.oauth2-proxy.yaml\n *\n * @public\n */\nexport const OAUTH2_PROXY_JWT_HEADER = 'X-OAUTH2-PROXY-ID-TOKEN';\n\n/** @public */\nexport const oauth2ProxyAuthenticator = createProxyAuthenticator({\n  defaultProfileTransform: async (result: OAuth2ProxyResult) => {\n    return {\n      profile: {\n        email: result.getHeader('x-forwarded-email'),\n        displayName:\n          result.getHeader('x-forwarded-preferred-username') ||\n          result.getHeader('x-forwarded-user'),\n      },\n    };\n  },\n  async initialize() {},\n  async authenticate({ req }) {\n    try {\n      // This unpacking of the JWT is just a utility provided by the\n      // authenticator to make the fields available to the profile transform and\n      // sign-in resolvers. The JWT is already validated by the upstream OAuth2\n      // Proxy, and since OAuth2 Proxy doesn't provide a way to authenticate\n      // forwarded requests, we don't do any additional validation here but\n      // instead trust that there is no way for attackers to bypass the OAuth2\n      // Proxy. We could validate these individual ID tokens for some of the\n      // upstream providers, but that is currently not in scope for this\n      // authenticator.\n      const authHeader = req.header(OAUTH2_PROXY_JWT_HEADER);\n      const jwt = authHeader?.match(/^Bearer[ ]+(\\S+)$/i)?.[1];\n      const decodedJWT = jwt && decodeJwt(jwt);\n\n      const result = {\n        fullProfile: decodedJWT || {},\n        accessToken: jwt || '',\n        headers: req.headers,\n        getHeader(name: string) {\n          if (name.toLocaleLowerCase('en-US') === 'set-cookie') {\n            throw new Error('Access Set-Cookie via the headers object instead');\n          }\n          return req.get(name);\n        },\n      };\n\n      return {\n        result,\n        providerInfo: {\n          accessToken: result.accessToken,\n        },\n      };\n    } catch (e) {\n      throw new AuthenticationError('Authentication failed', e);\n    }\n  },\n});\n"],"names":["createProxyAuthenticator","decodeJwt","AuthenticationError"],"mappings":";;;;;;AA2BO,MAAM,uBAA0B,GAAA;AAGhC,MAAM,2BAA2BA,uCAAyB,CAAA;AAAA,EAC/D,uBAAA,EAAyB,OAAO,MAA8B,KAAA;AAC5D,IAAO,OAAA;AAAA,MACL,OAAS,EAAA;AAAA,QACP,KAAA,EAAO,MAAO,CAAA,SAAA,CAAU,mBAAmB,CAAA;AAAA,QAC3C,aACE,MAAO,CAAA,SAAA,CAAU,gCAAgC,CACjD,IAAA,MAAA,CAAO,UAAU,kBAAkB;AAAA;AACvC,KACF;AAAA,GACF;AAAA,EACA,MAAM,UAAa,GAAA;AAAA,GAAC;AAAA,EACpB,MAAM,YAAA,CAAa,EAAE,GAAA,EAAO,EAAA;AAC1B,IAAI,IAAA;AAUF,MAAM,MAAA,UAAA,GAAa,GAAI,CAAA,MAAA,CAAO,uBAAuB,CAAA;AACrD,MAAA,MAAM,GAAM,GAAA,UAAA,EAAY,KAAM,CAAA,oBAAoB,IAAI,CAAC,CAAA;AACvD,MAAM,MAAA,UAAA,GAAa,GAAO,IAAAC,cAAA,CAAU,GAAG,CAAA;AAEvC,MAAA,MAAM,MAAS,GAAA;AAAA,QACb,WAAA,EAAa,cAAc,EAAC;AAAA,QAC5B,aAAa,GAAO,IAAA,EAAA;AAAA,QACpB,SAAS,GAAI,CAAA,OAAA;AAAA,QACb,UAAU,IAAc,EAAA;AACtB,UAAA,IAAI,IAAK,CAAA,iBAAA,CAAkB,OAAO,CAAA,KAAM,YAAc,EAAA;AACpD,YAAM,MAAA,IAAI,MAAM,kDAAkD,CAAA;AAAA;AAEpE,UAAO,OAAA,GAAA,CAAI,IAAI,IAAI,CAAA;AAAA;AACrB,OACF;AAEA,MAAO,OAAA;AAAA,QACL,MAAA;AAAA,QACA,YAAc,EAAA;AAAA,UACZ,aAAa,MAAO,CAAA;AAAA;AACtB,OACF;AAAA,aACO,CAAG,EAAA;AACV,MAAM,MAAA,IAAIC,0BAAoB,CAAA,uBAAA,EAAyB,CAAC,CAAA;AAAA;AAC1D;AAEJ,CAAC;;;;;"}