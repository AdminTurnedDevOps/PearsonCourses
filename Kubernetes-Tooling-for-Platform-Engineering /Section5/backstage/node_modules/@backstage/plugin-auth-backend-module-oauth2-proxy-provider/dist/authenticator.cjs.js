'use strict';

var errors = require('@backstage/errors');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var jose = require('jose');

const OAUTH2_PROXY_JWT_HEADER = "X-OAUTH2-PROXY-ID-TOKEN";
const oauth2ProxyAuthenticator = pluginAuthNode.createProxyAuthenticator({
  defaultProfileTransform: async (result) => {
    return {
      profile: {
        email: result.getHeader("x-forwarded-email"),
        displayName: result.getHeader("x-forwarded-preferred-username") || result.getHeader("x-forwarded-user")
      }
    };
  },
  async initialize() {
  },
  async authenticate({ req }) {
    try {
      const authHeader = req.header(OAUTH2_PROXY_JWT_HEADER);
      const jwt = authHeader?.match(/^Bearer[ ]+(\S+)$/i)?.[1];
      const decodedJWT = jwt && jose.decodeJwt(jwt);
      const result = {
        fullProfile: decodedJWT || {},
        accessToken: jwt || "",
        headers: req.headers,
        getHeader(name) {
          if (name.toLocaleLowerCase("en-US") === "set-cookie") {
            throw new Error("Access Set-Cookie via the headers object instead");
          }
          return req.get(name);
        }
      };
      return {
        result,
        providerInfo: {
          accessToken: result.accessToken
        }
      };
    } catch (e) {
      throw new errors.AuthenticationError("Authentication failed", e);
    }
  }
});

exports.OAUTH2_PROXY_JWT_HEADER = OAUTH2_PROXY_JWT_HEADER;
exports.oauth2ProxyAuthenticator = oauth2ProxyAuthenticator;
//# sourceMappingURL=authenticator.cjs.js.map
