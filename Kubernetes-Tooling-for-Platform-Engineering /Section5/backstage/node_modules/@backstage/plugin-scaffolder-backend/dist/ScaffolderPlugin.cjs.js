'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var backendCommon = require('@backstage/backend-common');
var integration = require('@backstage/integration');
var alpha$1 = require('@backstage/plugin-catalog-node/alpha');
var alpha = require('@backstage/plugin-scaffolder-node/alpha');
var register = require('./scaffolder/actions/builtin/catalog/register.cjs.js');
var write = require('./scaffolder/actions/builtin/catalog/write.cjs.js');
var fetch = require('./scaffolder/actions/builtin/catalog/fetch.cjs.js');
var log = require('./scaffolder/actions/builtin/debug/log.cjs.js');
var wait = require('./scaffolder/actions/builtin/debug/wait.cjs.js');
var plain = require('./scaffolder/actions/builtin/fetch/plain.cjs.js');
var plainFile = require('./scaffolder/actions/builtin/fetch/plainFile.cjs.js');
var template = require('./scaffolder/actions/builtin/fetch/template.cjs.js');
var templateFile = require('./scaffolder/actions/builtin/fetch/templateFile.cjs.js');
var _delete = require('./scaffolder/actions/builtin/filesystem/delete.cjs.js');
var rename = require('./scaffolder/actions/builtin/filesystem/rename.cjs.js');
var read = require('./scaffolder/actions/builtin/filesystem/read.cjs.js');
require('@backstage/plugin-scaffolder-backend-module-github');
require('@backstage/plugin-scaffolder-backend-module-azure');
require('@backstage/plugin-scaffolder-backend-module-bitbucket');
require('@backstage/plugin-scaffolder-backend-module-bitbucket-cloud');
require('@backstage/plugin-scaffolder-backend-module-bitbucket-server');
require('@backstage/plugin-scaffolder-backend-module-gerrit');
require('@backstage/plugin-scaffolder-backend-module-gitlab');
require('@backstage/plugin-scaffolder-backend-module-gitea');
require('@backstage/errors');
require('./scaffolder/tasks/DatabaseTaskStore.cjs.js');
require('@backstage/types');
require('zen-observable');
require('@backstage/config');
require('lodash');
require('fs-extra');
require('p-queue');
require('./scaffolder/tasks/NunjucksWorkflowRunner.cjs.js');
var router = require('./service/router.cjs.js');
var pluginEventsNode = require('@backstage/plugin-events-node');

const scaffolderPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "scaffolder",
  register(env) {
    const addedActions = new Array();
    env.registerExtensionPoint(alpha.scaffolderActionsExtensionPoint, {
      addActions(...newActions) {
        addedActions.push(...newActions);
      }
    });
    let taskBroker;
    env.registerExtensionPoint(alpha.scaffolderTaskBrokerExtensionPoint, {
      setTaskBroker(newTaskBroker) {
        if (taskBroker) {
          throw new Error("Task broker may only be set once");
        }
        taskBroker = newTaskBroker;
      }
    });
    const additionalTemplateFilters = {};
    const additionalTemplateGlobals = {};
    env.registerExtensionPoint(alpha.scaffolderTemplatingExtensionPoint, {
      addTemplateFilters(newFilters) {
        Object.assign(additionalTemplateFilters, newFilters);
      },
      addTemplateGlobals(newGlobals) {
        Object.assign(additionalTemplateGlobals, newGlobals);
      }
    });
    const autocompleteHandlers = {};
    env.registerExtensionPoint(alpha.scaffolderAutocompleteExtensionPoint, {
      addAutocompleteProvider(provider) {
        autocompleteHandlers[provider.id] = provider.handler;
      }
    });
    const additionalWorkspaceProviders = {};
    env.registerExtensionPoint(alpha.scaffolderWorkspaceProviderExtensionPoint, {
      addProviders(provider) {
        Object.assign(additionalWorkspaceProviders, provider);
      }
    });
    env.registerInit({
      deps: {
        logger: backendPluginApi.coreServices.logger,
        config: backendPluginApi.coreServices.rootConfig,
        lifecycle: backendPluginApi.coreServices.rootLifecycle,
        reader: backendPluginApi.coreServices.urlReader,
        permissions: backendPluginApi.coreServices.permissions,
        database: backendPluginApi.coreServices.database,
        auth: backendPluginApi.coreServices.auth,
        discovery: backendPluginApi.coreServices.discovery,
        httpRouter: backendPluginApi.coreServices.httpRouter,
        httpAuth: backendPluginApi.coreServices.httpAuth,
        catalogClient: alpha$1.catalogServiceRef,
        events: pluginEventsNode.eventsServiceRef
      },
      async init({
        logger,
        config,
        lifecycle,
        reader,
        database,
        auth,
        discovery,
        httpRouter,
        httpAuth,
        catalogClient,
        permissions,
        events
      }) {
        const log$1 = backendCommon.loggerToWinstonLogger(logger);
        const integrations = integration.ScmIntegrations.fromConfig(config);
        const actions = [
          // actions provided from other modules
          ...addedActions,
          // built-in actions for the scaffolder
          plain.createFetchPlainAction({
            reader,
            integrations
          }),
          plainFile.createFetchPlainFileAction({
            reader,
            integrations
          }),
          template.createFetchTemplateAction({
            integrations,
            reader,
            additionalTemplateFilters,
            additionalTemplateGlobals
          }),
          templateFile.createFetchTemplateFileAction({
            integrations,
            reader,
            additionalTemplateFilters,
            additionalTemplateGlobals
          }),
          log.createDebugLogAction(),
          wait.createWaitAction(),
          // todo(blam): maybe these should be a -catalog module?
          register.createCatalogRegisterAction({ catalogClient, integrations, auth }),
          fetch.createFetchCatalogEntityAction({ catalogClient, auth }),
          write.createCatalogWriteAction(),
          _delete.createFilesystemDeleteAction(),
          rename.createFilesystemRenameAction(),
          read.createFilesystemReadDirAction()
        ];
        const actionIds = actions.map((action) => action.id).join(", ");
        log$1.info(
          `Starting scaffolder with the following actions enabled ${actionIds}`
        );
        const router$1 = await router.createRouter({
          logger: log$1,
          config,
          database,
          catalogClient,
          reader,
          lifecycle,
          actions,
          taskBroker,
          additionalTemplateFilters,
          additionalTemplateGlobals,
          auth,
          httpAuth,
          discovery,
          permissions,
          autocompleteHandlers,
          additionalWorkspaceProviders,
          events
        });
        httpRouter.use(router$1);
      }
    });
  }
});

exports.scaffolderPlugin = scaffolderPlugin;
//# sourceMappingURL=ScaffolderPlugin.cjs.js.map
