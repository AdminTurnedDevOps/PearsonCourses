'use strict';

var config = require('@backstage/config');
var lodash = require('lodash');

function isTruthy(value) {
  return lodash.isArray(value) ? value.length > 0 : !!value;
}
function generateExampleOutput(schema) {
  const { examples } = schema;
  if (examples && Array.isArray(examples)) {
    return examples[0];
  }
  if (schema.type === "object") {
    return Object.fromEntries(
      Object.entries(schema.properties ?? {}).map(([key, value]) => [
        key,
        generateExampleOutput(value)
      ])
    );
  } else if (schema.type === "array") {
    const [firstSchema] = [schema.items]?.flat();
    if (firstSchema) {
      return [generateExampleOutput(firstSchema)];
    }
    return [];
  } else if (schema.type === "string") {
    return "<example>";
  } else if (schema.type === "number") {
    return 0;
  } else if (schema.type === "boolean") {
    return false;
  }
  return "<unknown>";
}
const readDuration = (config$1, key, defaultValue) => {
  if (config$1?.has(key)) {
    return config.readDurationFromConfig(config$1, { key });
  }
  return defaultValue;
};

exports.generateExampleOutput = generateExampleOutput;
exports.isTruthy = isTruthy;
exports.readDuration = readDuration;
//# sourceMappingURL=helper.cjs.js.map
