'use strict';

var DatabaseWorkspaceProvider = require('./DatabaseWorkspaceProvider.cjs.js');
var fs = require('fs-extra');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

class DefaultWorkspaceService {
  constructor(task, workspaceProvider, config) {
    this.task = task;
    this.workspaceProvider = workspaceProvider;
    this.config = config;
  }
  static create(task, storage, additionalWorkspaceProviders, config) {
    const workspaceProviderName = config?.getOptionalString(
      "scaffolder.EXPERIMENTAL_workspaceSerializationProvider"
    ) ?? "database";
    const workspaceProvider = additionalWorkspaceProviders?.[workspaceProviderName] ?? DatabaseWorkspaceProvider.DatabaseWorkspaceProvider.create(storage);
    return new DefaultWorkspaceService(task, workspaceProvider, config);
  }
  async serializeWorkspace(options) {
    if (this.isWorkspaceSerializationEnabled()) {
      await this.workspaceProvider.serializeWorkspace({
        path: options.path,
        taskId: this.task.taskId
      });
    }
  }
  async cleanWorkspace() {
    if (this.isWorkspaceSerializationEnabled()) {
      await this.workspaceProvider.cleanWorkspace({ taskId: this.task.taskId });
    }
  }
  async rehydrateWorkspace(options) {
    if (this.isWorkspaceSerializationEnabled()) {
      await fs__default.default.mkdirp(options.targetPath);
      await this.workspaceProvider.rehydrateWorkspace(options);
    }
  }
  isWorkspaceSerializationEnabled() {
    return this.config?.getOptionalBoolean(
      "scaffolder.EXPERIMENTAL_workspaceSerialization"
    ) ?? false;
  }
}

exports.DefaultWorkspaceService = DefaultWorkspaceService;
//# sourceMappingURL=WorkspaceService.cjs.js.map
