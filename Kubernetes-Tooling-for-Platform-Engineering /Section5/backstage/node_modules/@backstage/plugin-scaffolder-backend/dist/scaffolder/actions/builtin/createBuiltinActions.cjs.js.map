{"version":3,"file":"createBuiltinActions.cjs.js","sources":["../../../../src/scaffolder/actions/builtin/createBuiltinActions.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CatalogApi } from '@backstage/catalog-client';\nimport { Config } from '@backstage/config';\nimport {\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  TemplateAction,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport {\n  createCatalogRegisterAction,\n  createCatalogWriteAction,\n  createFetchCatalogEntityAction,\n} from './catalog';\n\nimport { createDebugLogAction, createWaitAction } from './debug';\nimport {\n  createFetchPlainAction,\n  createFetchPlainFileAction,\n  createFetchTemplateAction,\n  createFetchTemplateFileAction,\n} from './fetch';\nimport {\n  createFilesystemDeleteAction,\n  createFilesystemReadDirAction,\n  createFilesystemRenameAction,\n} from './filesystem';\nimport {\n  createGithubActionsDispatchAction,\n  createGithubAutolinksAction,\n  createGithubDeployKeyAction,\n  createGithubEnvironmentAction,\n  createGithubIssuesLabelAction,\n  createGithubRepoCreateAction,\n  createGithubRepoPushAction,\n  createGithubWebhookAction,\n  createPublishGithubAction,\n  createPublishGithubPullRequestAction,\n} from '@backstage/plugin-scaffolder-backend-module-github';\n\nimport { createPublishAzureAction } from '@backstage/plugin-scaffolder-backend-module-azure';\n\nimport { createPublishBitbucketAction } from '@backstage/plugin-scaffolder-backend-module-bitbucket';\n\nimport {\n  createPublishBitbucketCloudAction,\n  createBitbucketPipelinesRunAction,\n  createPublishBitbucketCloudPullRequestAction,\n} from '@backstage/plugin-scaffolder-backend-module-bitbucket-cloud';\n\nimport {\n  createPublishBitbucketServerAction,\n  createPublishBitbucketServerPullRequestAction,\n} from '@backstage/plugin-scaffolder-backend-module-bitbucket-server';\n\nimport {\n  createPublishGerritAction,\n  createPublishGerritReviewAction,\n} from '@backstage/plugin-scaffolder-backend-module-gerrit';\n\nimport {\n  createPublishGitlabAction,\n  createGitlabRepoPushAction,\n  createPublishGitlabMergeRequestAction,\n} from '@backstage/plugin-scaffolder-backend-module-gitlab';\n\nimport { createPublishGiteaAction } from '@backstage/plugin-scaffolder-backend-module-gitea';\nimport { AuthService, UrlReaderService } from '@backstage/backend-plugin-api';\n\n/**\n * The options passed to {@link createBuiltinActions}\n * @public\n */\nexport interface CreateBuiltInActionsOptions {\n  /**\n   * The {@link @backstage/backend-plugin-api#UrlReaderService} interface that will be used in the default actions.\n   */\n  reader: UrlReaderService;\n  /**\n   * The {@link @backstage/integrations#ScmIntegrations} that will be used in the default actions.\n   */\n  integrations: ScmIntegrations;\n  /**\n   * The {@link @backstage/catalog-client#CatalogApi} that will be used in the default actions.\n   */\n  catalogClient: CatalogApi;\n  /**\n   * The {@link @backstage/backend-plugin-api#AuthService} that will be used in the default actions.\n   */\n  auth?: AuthService;\n  /**\n   * The {@link @backstage/config#Config} that will be used in the default actions.\n   */\n  config: Config;\n  /**\n   * Additional custom filters that will be passed to the nunjucks template engine for use in\n   * Template Manifests and also template skeleton files when using `fetch:template`.\n   */\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n}\n\n/**\n * A function to generate create a list of default actions that the scaffolder provides.\n * Is called internally in the default setup, but can be used when adding your own actions or overriding the default ones\n *\n * TODO(blam): version 2 of the scaffolder shouldn't ship with the additional modules. We should ship the basics, and let people install\n * modules for the providers they want to use.\n * @public\n * @returns A list of actions that can be used in the scaffolder\n *\n */\nexport const createBuiltinActions = (\n  options: CreateBuiltInActionsOptions,\n): TemplateAction[] => {\n  const {\n    reader,\n    integrations,\n    catalogClient,\n    auth,\n    config,\n    additionalTemplateFilters,\n    additionalTemplateGlobals,\n  } = options;\n\n  const githubCredentialsProvider: GithubCredentialsProvider =\n    DefaultGithubCredentialsProvider.fromIntegrations(integrations);\n\n  const actions = [\n    createFetchPlainAction({\n      reader,\n      integrations,\n    }),\n    createFetchPlainFileAction({\n      reader,\n      integrations,\n    }),\n    createFetchTemplateAction({\n      integrations,\n      reader,\n      additionalTemplateFilters,\n      additionalTemplateGlobals,\n    }),\n    createFetchTemplateFileAction({\n      integrations,\n      reader,\n      additionalTemplateFilters,\n      additionalTemplateGlobals,\n    }),\n    createPublishGerritAction({\n      integrations,\n      config,\n    }),\n    createPublishGerritReviewAction({\n      integrations,\n      config,\n    }),\n    createPublishGiteaAction({\n      integrations,\n      config,\n    }),\n    createPublishGithubAction({\n      integrations,\n      config,\n      githubCredentialsProvider,\n    }),\n    createPublishGithubPullRequestAction({\n      integrations,\n      githubCredentialsProvider,\n      config,\n    }),\n    createPublishGitlabAction({\n      integrations,\n      config,\n    }),\n    createPublishGitlabMergeRequestAction({\n      integrations,\n    }),\n    createGitlabRepoPushAction({\n      integrations,\n    }),\n    createPublishBitbucketAction({\n      integrations,\n      config,\n    }),\n    createPublishBitbucketCloudAction({\n      integrations,\n      config,\n    }),\n    createPublishBitbucketCloudPullRequestAction({ integrations, config }),\n    createPublishBitbucketServerAction({\n      integrations,\n      config,\n    }),\n    createPublishBitbucketServerPullRequestAction({\n      integrations,\n      config,\n    }),\n    createPublishAzureAction({\n      integrations,\n      config,\n    }),\n    createDebugLogAction(),\n    createWaitAction(),\n    createCatalogRegisterAction({ catalogClient, integrations, auth }),\n    createFetchCatalogEntityAction({ catalogClient, auth }),\n    createCatalogWriteAction(),\n    createFilesystemDeleteAction(),\n    createFilesystemReadDirAction(),\n    createFilesystemRenameAction(),\n    createGithubActionsDispatchAction({\n      integrations,\n      githubCredentialsProvider,\n    }),\n    createGithubWebhookAction({\n      integrations,\n      githubCredentialsProvider,\n    }),\n    createGithubIssuesLabelAction({\n      integrations,\n      githubCredentialsProvider,\n    }),\n    createGithubRepoCreateAction({\n      integrations,\n      githubCredentialsProvider,\n    }),\n    createGithubRepoPushAction({\n      integrations,\n      config,\n      githubCredentialsProvider,\n    }),\n    createGithubEnvironmentAction({\n      integrations,\n      catalogClient,\n    }),\n    createGithubDeployKeyAction({\n      integrations,\n    }),\n    createGithubAutolinksAction({\n      integrations,\n      githubCredentialsProvider,\n    }),\n    createBitbucketPipelinesRunAction({\n      integrations,\n    }),\n  ];\n\n  return actions as TemplateAction[];\n};\n"],"names":["DefaultGithubCredentialsProvider","createFetchPlainAction","createFetchPlainFileAction","createFetchTemplateAction","createFetchTemplateFileAction","createPublishGerritAction","createPublishGerritReviewAction","createPublishGiteaAction","createPublishGithubAction","createPublishGithubPullRequestAction","createPublishGitlabAction","createPublishGitlabMergeRequestAction","createGitlabRepoPushAction","createPublishBitbucketAction","createPublishBitbucketCloudAction","createPublishBitbucketCloudPullRequestAction","createPublishBitbucketServerAction","createPublishBitbucketServerPullRequestAction","createPublishAzureAction","createDebugLogAction","createWaitAction","createCatalogRegisterAction","createFetchCatalogEntityAction","createCatalogWriteAction","createFilesystemDeleteAction","createFilesystemReadDirAction","createFilesystemRenameAction","createGithubActionsDispatchAction","createGithubWebhookAction","createGithubIssuesLabelAction","createGithubRepoCreateAction","createGithubRepoPushAction","createGithubEnvironmentAction","createGithubDeployKeyAction","createGithubAutolinksAction","createBitbucketPipelinesRunAction"],"mappings":"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"}