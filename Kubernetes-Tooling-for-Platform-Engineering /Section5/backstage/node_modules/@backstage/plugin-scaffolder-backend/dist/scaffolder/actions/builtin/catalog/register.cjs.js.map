{"version":3,"file":"register.cjs.js","sources":["../../../../../src/scaffolder/actions/builtin/catalog/register.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport { stringifyEntityRef, Entity } from '@backstage/catalog-model';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { examples } from './register.examples';\nimport { AuthService } from '@backstage/backend-plugin-api';\n\nconst id = 'catalog:register';\n\n/**\n * Registers entities from a catalog descriptor file in the workspace into the software catalog.\n * @public\n */\nexport function createCatalogRegisterAction(options: {\n  catalogClient: CatalogApi;\n  integrations: ScmIntegrations;\n  auth?: AuthService;\n}) {\n  const { catalogClient, integrations, auth } = options;\n\n  return createTemplateAction<\n    | { catalogInfoUrl: string; optional?: boolean }\n    | { repoContentsUrl: string; catalogInfoPath?: string; optional?: boolean }\n  >({\n    id,\n    description:\n      'Registers entities from a catalog descriptor file in the workspace into the software catalog.',\n    examples,\n    schema: {\n      input: {\n        oneOf: [\n          {\n            type: 'object',\n            required: ['catalogInfoUrl'],\n            properties: {\n              catalogInfoUrl: {\n                title: 'Catalog Info URL',\n                description:\n                  'An absolute URL pointing to the catalog info file location',\n                type: 'string',\n              },\n              optional: {\n                title: 'Optional',\n                description:\n                  'Permit the registered location to optionally exist. Default: false',\n                type: 'boolean',\n              },\n            },\n          },\n          {\n            type: 'object',\n            required: ['repoContentsUrl'],\n            properties: {\n              repoContentsUrl: {\n                title: 'Repository Contents URL',\n                description:\n                  'An absolute URL pointing to the root of a repository directory tree',\n                type: 'string',\n              },\n              catalogInfoPath: {\n                title: 'Fetch URL',\n                description:\n                  'A relative path from the repo root pointing to the catalog info file, defaults to /catalog-info.yaml',\n                type: 'string',\n              },\n              optional: {\n                title: 'Optional',\n                description:\n                  'Permit the registered location to optionally exist. Default: false',\n                type: 'boolean',\n              },\n            },\n          },\n        ],\n      },\n      output: {\n        type: 'object',\n        required: ['catalogInfoUrl'],\n        properties: {\n          entityRef: {\n            type: 'string',\n          },\n          catalogInfoUrl: {\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const { input } = ctx;\n\n      let catalogInfoUrl;\n      if ('catalogInfoUrl' in input) {\n        catalogInfoUrl = input.catalogInfoUrl;\n      } else {\n        const { repoContentsUrl, catalogInfoPath = '/catalog-info.yaml' } =\n          input;\n        const integration = integrations.byUrl(repoContentsUrl);\n        if (!integration) {\n          throw new InputError(\n            `No integration found for host ${repoContentsUrl}`,\n          );\n        }\n\n        catalogInfoUrl = integration.resolveUrl({\n          base: repoContentsUrl,\n          url: catalogInfoPath,\n        });\n      }\n\n      ctx.logger.info(`Registering ${catalogInfoUrl} in the catalog`);\n\n      const { token } = (await auth?.getPluginRequestToken({\n        onBehalfOf: await ctx.getInitiatorCredentials(),\n        targetPluginId: 'catalog',\n      })) ?? { token: ctx.secrets?.backstageToken };\n\n      try {\n        // 1st try to register the location, this will throw an error if the location already exists (see catch)\n        await catalogClient.addLocation(\n          {\n            type: 'url',\n            target: catalogInfoUrl,\n          },\n          token ? { token } : {},\n        );\n      } catch (e) {\n        if (!input.optional) {\n          // if optional is false or unset, it is not allowed to register the same location twice, we rethrow the error\n          throw e;\n        }\n      }\n\n      try {\n        // 2nd retry the registration as a dry run, this will not throw an error if the location already exists\n        const result = await catalogClient.addLocation(\n          {\n            dryRun: true,\n            type: 'url',\n            target: catalogInfoUrl,\n          },\n          token ? { token } : {},\n        );\n\n        if (result.entities.length) {\n          const { entities } = result;\n          let entity: Entity | undefined;\n          // prioritise 'Component' type as it is the most central kind of entity\n          entity = entities.find(\n            e =>\n              !e.metadata.name.startsWith('generated-') &&\n              e.kind === 'Component',\n          );\n          if (!entity) {\n            entity = entities.find(\n              e => !e.metadata.name.startsWith('generated-'),\n            );\n          }\n          if (!entity) {\n            entity = entities[0];\n          }\n\n          ctx.output('entityRef', stringifyEntityRef(entity));\n        }\n      } catch (e) {\n        if (!input.optional) {\n          throw e;\n        }\n      }\n\n      ctx.output('catalogInfoUrl', catalogInfoUrl);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","InputError","stringifyEntityRef"],"mappings":"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"}