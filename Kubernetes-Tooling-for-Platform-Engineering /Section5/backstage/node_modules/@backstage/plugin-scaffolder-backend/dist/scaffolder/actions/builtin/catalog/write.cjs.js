'use strict';

var fs = require('fs-extra');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var yaml = require('yaml');
var backendPluginApi = require('@backstage/backend-plugin-api');
var z = require('zod');
var write_examples = require('./write.examples.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

function _interopNamespaceCompat(e) {
  if (e && typeof e === 'object' && 'default' in e) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var yaml__namespace = /*#__PURE__*/_interopNamespaceCompat(yaml);

const id = "catalog:write";
function createCatalogWriteAction() {
  return pluginScaffolderNode.createTemplateAction({
    id,
    description: "Writes the catalog-info.yaml for your template",
    schema: {
      input: z.z.object({
        filePath: z.z.string().optional().describe("Defaults to catalog-info.yaml"),
        // TODO: this should reference an zod entity validator if it existed.
        entity: z.z.record(z.z.any()).describe(
          "You can provide the same values used in the Entity schema."
        )
      })
    },
    examples: write_examples.examples,
    supportsDryRun: true,
    async handler(ctx) {
      const { filePath, entity } = ctx.input;
      const entityRef = ctx.templateInfo?.entityRef;
      const path = filePath ?? "catalog-info.yaml";
      ctx.logger.info(`Writing ${path}`);
      await fs__default.default.outputFile(
        backendPluginApi.resolveSafeChildPath(ctx.workspacePath, path),
        yaml__namespace.stringify({
          ...entity,
          metadata: {
            ...entity.metadata,
            ...entityRef ? {
              annotations: {
                ...entity.metadata.annotations,
                "backstage.io/source-template": entityRef
              }
            } : void 0
          }
        })
      );
    }
  });
}

exports.createCatalogWriteAction = createCatalogWriteAction;
//# sourceMappingURL=write.cjs.js.map
