'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var plain_examples = require('./plain.examples.cjs.js');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');

const ACTION_ID = "fetch:plain";
function createFetchPlainAction(options) {
  const { reader, integrations } = options;
  return pluginScaffolderNode.createTemplateAction({
    id: ACTION_ID,
    examples: plain_examples.examples,
    description: "Downloads content and places it in the workspace, or optionally in a subdirectory specified by the `targetPath` input option.",
    schema: {
      input: {
        type: "object",
        required: ["url"],
        properties: {
          url: {
            title: "Fetch URL",
            description: "Relative path or absolute URL pointing to the directory tree to fetch",
            type: "string"
          },
          targetPath: {
            title: "Target Path",
            description: "Target path within the working directory to download the contents to.",
            type: "string"
          },
          token: {
            title: "Token",
            description: "An optional token to use for authentication when reading the resources.",
            type: "string"
          }
        }
      }
    },
    supportsDryRun: true,
    async handler(ctx) {
      ctx.logger.info("Fetching plain content from remote URL");
      const targetPath = ctx.input.targetPath ?? "./";
      const outputPath = backendPluginApi.resolveSafeChildPath(ctx.workspacePath, targetPath);
      await pluginScaffolderNode.fetchContents({
        reader,
        integrations,
        baseUrl: ctx.templateInfo?.baseUrl,
        fetchUrl: ctx.input.url,
        outputPath,
        token: ctx.input.token
      });
    }
  });
}

exports.ACTION_ID = ACTION_ID;
exports.createFetchPlainAction = createFetchPlainAction;
//# sourceMappingURL=plain.cjs.js.map
