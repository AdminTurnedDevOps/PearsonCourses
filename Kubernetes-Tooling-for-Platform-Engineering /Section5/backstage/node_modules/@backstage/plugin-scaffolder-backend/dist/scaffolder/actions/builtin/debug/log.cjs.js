'use strict';

var fs$1 = require('fs-extra');
var path = require('path');
var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var log_examples = require('./log.examples.cjs.js');
var fs = require('fs');
var z = require('zod');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

const id = "debug:log";
function createDebugLogAction() {
  return pluginScaffolderNode.createTemplateAction({
    id,
    description: "Writes a message into the log and/or lists all files in the workspace.",
    examples: log_examples.examples,
    schema: {
      input: z.z.object({
        message: z.z.string({ description: "Message to output." }).optional(),
        listWorkspace: z.z.union([z.z.boolean(), z.z.enum(["with-filenames", "with-contents"])], {
          description: 'List all files in the workspace. If used with "with-contents", also the file contents are listed.'
        }).optional()
      })
    },
    supportsDryRun: true,
    async handler(ctx) {
      ctx.logger.info(JSON.stringify(ctx.input, null, 2));
      if (ctx.input?.message) {
        ctx.logger.info(ctx.input.message);
      }
      if (ctx.input?.listWorkspace) {
        const files = await recursiveReadDir(ctx.workspacePath);
        ctx.logger.info(
          `Workspace:
${files.map((f) => {
            const relativePath = path.relative(ctx.workspacePath, f);
            if (ctx.input?.listWorkspace === "with-contents") {
              const content = fs__default.default.readFileSync(f, "utf-8");
              return ` - ${relativePath}:

  ${content}`;
            }
            return `  - ${relativePath}`;
          }).join("\n")}`
        );
      }
    }
  });
}
async function recursiveReadDir(dir) {
  const subdirs = await fs$1.readdir(dir);
  const files = await Promise.all(
    subdirs.map(async (subdir) => {
      const res = path.join(dir, subdir);
      return (await fs$1.stat(res)).isDirectory() ? recursiveReadDir(res) : [res];
    })
  );
  return files.reduce((a, f) => a.concat(f), []);
}

exports.createDebugLogAction = createDebugLogAction;
exports.recursiveReadDir = recursiveReadDir;
//# sourceMappingURL=log.cjs.js.map
