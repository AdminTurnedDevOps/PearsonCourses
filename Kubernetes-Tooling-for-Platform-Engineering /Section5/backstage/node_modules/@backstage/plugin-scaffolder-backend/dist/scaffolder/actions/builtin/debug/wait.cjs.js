'use strict';

var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var luxon = require('luxon');
var wait_examples = require('./wait.examples.cjs.js');

const id = "debug:wait";
const MAX_WAIT_TIME_IN_ISO = "T00:10:00";
function createWaitAction(options) {
  const toDuration = (maxWaitTime) => {
    if (maxWaitTime) {
      if (maxWaitTime instanceof luxon.Duration) {
        return maxWaitTime;
      }
      return luxon.Duration.fromObject(maxWaitTime);
    }
    return luxon.Duration.fromISOTime(MAX_WAIT_TIME_IN_ISO);
  };
  return pluginScaffolderNode.createTemplateAction({
    id,
    description: "Waits for a certain period of time.",
    examples: wait_examples.examples,
    schema: {
      input: {
        type: "object",
        properties: {
          minutes: {
            title: "Waiting period in minutes.",
            type: "number"
          },
          seconds: {
            title: "Waiting period in seconds.",
            type: "number"
          },
          milliseconds: {
            title: "Waiting period in milliseconds.",
            type: "number"
          }
        }
      }
    },
    async handler(ctx) {
      const delayTime = luxon.Duration.fromObject(ctx.input);
      const maxWait = toDuration(options?.maxWaitTime);
      if (delayTime.minus(maxWait).toMillis() > 0) {
        throw new Error(
          `Waiting duration is longer than the maximum threshold of ${maxWait.toHuman()}`
        );
      }
      await new Promise((resolve) => {
        const controller = new AbortController();
        const timeoutHandle = setTimeout(abort, delayTime.toMillis());
        ctx.signal?.addEventListener("abort", abort);
        function abort() {
          ctx.signal?.removeEventListener("abort", abort);
          clearTimeout(timeoutHandle);
          controller.abort();
          resolve("finished");
        }
      });
    }
  });
}

exports.createWaitAction = createWaitAction;
//# sourceMappingURL=wait.cjs.js.map
