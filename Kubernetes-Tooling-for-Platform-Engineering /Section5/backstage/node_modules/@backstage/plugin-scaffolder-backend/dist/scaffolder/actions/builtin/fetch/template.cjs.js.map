{"version":3,"file":"template.cjs.js","sources":["../../../../../src/scaffolder/actions/builtin/fetch/template.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { extname } from 'path';\nimport { UrlReaderService } from '@backstage/backend-plugin-api';\nimport { resolveSafeChildPath } from '@backstage/backend-plugin-api';\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport {\n  createTemplateAction,\n  fetchContents,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport globby from 'globby';\nimport fs from 'fs-extra';\nimport { isBinaryFile } from 'isbinaryfile';\nimport { SecureTemplater } from '../../../../lib/templating/SecureTemplater';\nimport { createDefaultFilters } from '../../../../lib/templating/filters';\nimport { examples } from './template.examples';\n\n/**\n * Downloads a skeleton, templates variables into file and directory names and content.\n * Then places the result in the workspace, or optionally in a subdirectory\n * specified by the 'targetPath' input option.\n *\n * @public\n */\nexport function createFetchTemplateAction(options: {\n  reader: UrlReaderService;\n  integrations: ScmIntegrations;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n}) {\n  const {\n    reader,\n    integrations,\n    additionalTemplateFilters,\n    additionalTemplateGlobals,\n  } = options;\n\n  const defaultTemplateFilters = createDefaultFilters({ integrations });\n\n  return createTemplateAction<{\n    url: string;\n    targetPath?: string;\n    values: any;\n    templateFileExtension?: string | boolean;\n\n    // Cookiecutter compat options\n    /**\n     * @deprecated This field is deprecated in favor of copyWithoutTemplating.\n     */\n    copyWithoutRender?: string[];\n    copyWithoutTemplating?: string[];\n    cookiecutterCompat?: boolean;\n    replace?: boolean;\n    trimBlocks?: boolean;\n    lstripBlocks?: boolean;\n    token?: string;\n  }>({\n    id: 'fetch:template',\n    description:\n      'Downloads a skeleton, templates variables into file and directory names and content, and places the result in the workspace, or optionally in a subdirectory specified by the `targetPath` input option.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['url'],\n        properties: {\n          url: {\n            title: 'Fetch URL',\n            description:\n              'Relative path or absolute URL pointing to the directory tree to fetch',\n            type: 'string',\n          },\n          targetPath: {\n            title: 'Target Path',\n            description:\n              'Target path within the working directory to download the contents to. Defaults to the working directory root.',\n            type: 'string',\n          },\n          values: {\n            title: 'Template Values',\n            description: 'Values to pass on to the templating engine',\n            type: 'object',\n          },\n          copyWithoutRender: {\n            title: '[Deprecated] Copy Without Render',\n            description:\n              'An array of glob patterns. Any files or directories which match are copied without being processed as templates.',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          copyWithoutTemplating: {\n            title: 'Copy Without Templating',\n            description:\n              'An array of glob patterns. Contents of matched files or directories are copied without being processed, but paths are subject to rendering.',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          cookiecutterCompat: {\n            title: 'Cookiecutter compatibility mode',\n            description:\n              'Enable features to maximise compatibility with templates built for fetch:cookiecutter',\n            type: 'boolean',\n          },\n          templateFileExtension: {\n            title: 'Template File Extension',\n            description:\n              'If set, only files with the given extension will be templated. If set to `true`, the default extension `.njk` is used.',\n            type: ['string', 'boolean'],\n          },\n          replace: {\n            title: 'Replace files',\n            description:\n              'If set, replace files in targetPath instead of skipping existing ones.',\n            type: 'boolean',\n          },\n          token: {\n            title: 'Token',\n            description:\n              'An optional token to use for authentication when reading the resources.',\n            type: 'string',\n          },\n        },\n      },\n    },\n    supportsDryRun: true,\n    async handler(ctx) {\n      ctx.logger.info('Fetching template content from remote URL');\n\n      const workDir = await ctx.createTemporaryDirectory();\n      const templateDir = resolveSafeChildPath(workDir, 'template');\n\n      const targetPath = ctx.input.targetPath ?? './';\n      const outputDir = resolveSafeChildPath(ctx.workspacePath, targetPath);\n      if (ctx.input.copyWithoutRender && ctx.input.copyWithoutTemplating) {\n        throw new InputError(\n          'Fetch action input copyWithoutRender and copyWithoutTemplating can not be used at the same time',\n        );\n      }\n\n      let copyOnlyPatterns: string[] | undefined;\n      let renderFilename: boolean;\n      if (ctx.input.copyWithoutRender) {\n        ctx.logger.warn(\n          '[Deprecated] copyWithoutRender is deprecated Please use copyWithoutTemplating instead.',\n        );\n        copyOnlyPatterns = ctx.input.copyWithoutRender;\n        renderFilename = false;\n      } else {\n        copyOnlyPatterns = ctx.input.copyWithoutTemplating;\n        renderFilename = true;\n      }\n\n      if (copyOnlyPatterns && !Array.isArray(copyOnlyPatterns)) {\n        throw new InputError(\n          'Fetch action input copyWithoutRender/copyWithoutTemplating must be an Array',\n        );\n      }\n\n      if (\n        ctx.input.templateFileExtension &&\n        (copyOnlyPatterns || ctx.input.cookiecutterCompat)\n      ) {\n        throw new InputError(\n          'Fetch action input extension incompatible with copyWithoutRender/copyWithoutTemplating and cookiecutterCompat',\n        );\n      }\n\n      let extension: string | false = false;\n      if (ctx.input.templateFileExtension) {\n        extension =\n          ctx.input.templateFileExtension === true\n            ? '.njk'\n            : ctx.input.templateFileExtension;\n        if (!extension.startsWith('.')) {\n          extension = `.${extension}`;\n        }\n      }\n\n      await fetchContents({\n        reader,\n        integrations,\n        baseUrl: ctx.templateInfo?.baseUrl,\n        fetchUrl: ctx.input.url,\n        outputPath: templateDir,\n        token: ctx.input.token,\n      });\n\n      ctx.logger.info('Listing files and directories in template');\n      const allEntriesInTemplate = await globby(`**/*`, {\n        cwd: templateDir,\n        dot: true,\n        onlyFiles: false,\n        markDirectories: true,\n        followSymbolicLinks: false,\n      });\n\n      const nonTemplatedEntries = new Set(\n        await globby(copyOnlyPatterns || [], {\n          cwd: templateDir,\n          dot: true,\n          onlyFiles: false,\n          markDirectories: true,\n          followSymbolicLinks: false,\n        }),\n      );\n\n      // Cookiecutter prefixes all parameters in templates with\n      // `cookiecutter.`. To replicate this, we wrap our parameters\n      // in an object with a `cookiecutter` property when compat\n      // mode is enabled.\n      const { cookiecutterCompat, values } = ctx.input;\n      const context = {\n        [cookiecutterCompat ? 'cookiecutter' : 'values']: values,\n      };\n\n      ctx.logger.info(\n        `Processing ${allEntriesInTemplate.length} template files/directories with input values`,\n        ctx.input.values,\n      );\n\n      const renderTemplate = await SecureTemplater.loadRenderer({\n        cookiecutterCompat: ctx.input.cookiecutterCompat,\n        templateFilters: {\n          ...defaultTemplateFilters,\n          ...additionalTemplateFilters,\n        },\n        templateGlobals: additionalTemplateGlobals,\n        nunjucksConfigs: {\n          trimBlocks: ctx.input.trimBlocks,\n          lstripBlocks: ctx.input.lstripBlocks,\n        },\n      });\n\n      for (const location of allEntriesInTemplate) {\n        let renderContents: boolean;\n\n        let localOutputPath = location;\n        if (extension) {\n          renderContents = extname(localOutputPath) === extension;\n          if (renderContents) {\n            localOutputPath = localOutputPath.slice(0, -extension.length);\n          }\n          // extension is mutual exclusive with copyWithoutRender/copyWithoutTemplating,\n          // therefore the output path is always rendered.\n          localOutputPath = renderTemplate(localOutputPath, context);\n        } else {\n          renderContents = !nonTemplatedEntries.has(location);\n          // The logic here is a bit tangled because it depends on two variables.\n          // If renderFilename is true, which means copyWithoutTemplating is used,\n          // then the path is always rendered.\n          // If renderFilename is false, which means copyWithoutRender is used,\n          // then matched file/directory won't be processed, same as before.\n          if (renderFilename) {\n            localOutputPath = renderTemplate(localOutputPath, context);\n          } else {\n            localOutputPath = renderContents\n              ? renderTemplate(localOutputPath, context)\n              : localOutputPath;\n          }\n        }\n\n        if (containsSkippedContent(localOutputPath)) {\n          continue;\n        }\n\n        const outputPath = resolveSafeChildPath(outputDir, localOutputPath);\n        if (fs.existsSync(outputPath) && !ctx.input.replace) {\n          continue;\n        }\n\n        if (!renderContents && !extension) {\n          ctx.logger.info(\n            `Copying file/directory ${location} without processing.`,\n          );\n        }\n\n        if (location.endsWith('/')) {\n          ctx.logger.info(\n            `Writing directory ${location} to template output path.`,\n          );\n          await fs.ensureDir(outputPath);\n        } else {\n          const inputFilePath = resolveSafeChildPath(templateDir, location);\n          const stats = await fs.promises.lstat(inputFilePath);\n\n          if (stats.isSymbolicLink() || (await isBinaryFile(inputFilePath))) {\n            ctx.logger.info(\n              `Copying file binary or symbolic link at ${location}, to template output path.`,\n            );\n            await fs.copy(inputFilePath, outputPath);\n          } else {\n            const statsObj = await fs.stat(inputFilePath);\n            ctx.logger.info(\n              `Writing file ${location} to template output path with mode ${statsObj.mode}.`,\n            );\n            const inputFileContents = await fs.readFile(inputFilePath, 'utf-8');\n            await fs.outputFile(\n              outputPath,\n              renderContents\n                ? renderTemplate(inputFileContents, context)\n                : inputFileContents,\n              { mode: statsObj.mode },\n            );\n          }\n        }\n      }\n\n      ctx.logger.info(`Template result written to ${outputDir}`);\n    },\n  });\n}\n\nfunction containsSkippedContent(localOutputPath: string): boolean {\n  // if the path is empty means that there is a file skipped in the root\n  // if the path starts with a separator it means that the root directory has been skipped\n  // if the path includes // means that there is a subdirectory skipped\n  // All paths returned are considered with / separator because of globby returning the linux separator for all os'.\n  return (\n    localOutputPath === '' ||\n    localOutputPath.startsWith('/') ||\n    localOutputPath.includes('//')\n  );\n}\n"],"names":["createDefaultFilters","createTemplateAction","examples","resolveSafeChildPath","InputError","fetchContents","globby","SecureTemplater","extname","fs","isBinaryFile"],"mappings":"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"}