{"version":3,"file":"logger.cjs.js","sources":["../../../src/scaffolder/tasks/logger.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  LoggerService,\n  RootLoggerService,\n} from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { Format, TransformableInfo } from 'logform';\nimport Transport, { TransportStreamOptions } from 'winston-transport';\nimport { Logger, format, createLogger, transports } from 'winston';\nimport { LEVEL, MESSAGE, SPLAT } from 'triple-beam';\nimport { TaskContext } from '@backstage/plugin-scaffolder-node';\nimport _ from 'lodash';\n\n/**\n * Escapes a given string to be used inside a RegExp.\n *\n * Taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n */\nconst escapeRegExp = (text: string) => {\n  return text.replace(/[.*+?^${}(\\)|[\\]\\\\]/g, '\\\\$&');\n};\n\ninterface WinstonLoggerOptions {\n  meta?: JsonObject;\n  level: string;\n  format: Format;\n  transports: Transport[];\n}\n\n// This is a workaround for being able to preserve the log format of the root logger.\n// Will revisit all of this implementation once we can break the router to use only `LoggerService`.\nexport class BackstageLoggerTransport extends Transport {\n  constructor(\n    private readonly backstageLogger: LoggerService,\n    private readonly taskContext: TaskContext,\n    private readonly stepId: string,\n    opts?: TransportStreamOptions,\n  ) {\n    super(opts);\n  }\n\n  log(info: TransformableInfo, callback: VoidFunction) {\n    if (typeof info !== 'object' || info === null) {\n      callback();\n      return;\n    }\n\n    const message = info[MESSAGE];\n    const level = info[LEVEL];\n    const splat = info[SPLAT];\n\n    switch (level) {\n      case 'error':\n        this.backstageLogger.error(String(message), ...splat);\n        break;\n      case 'warn':\n        this.backstageLogger.warn(String(message), ...splat);\n        break;\n      case 'info':\n        this.backstageLogger.info(String(message), ...splat);\n        break;\n      case 'debug':\n        this.backstageLogger.debug(String(message), ...splat);\n        break;\n      default:\n        this.backstageLogger.info(String(message), ...splat);\n    }\n\n    this.taskContext.emitLog(message, { stepId: this.stepId });\n    callback();\n  }\n}\n\nexport class WinstonLogger implements RootLoggerService {\n  #winston: Logger;\n  #addRedactions?: (redactions: Iterable<string>) => void;\n\n  /**\n   * Creates a {@link WinstonLogger} instance.\n   */\n  static create(options: WinstonLoggerOptions): WinstonLogger {\n    const redacter = WinstonLogger.redacter();\n\n    let logger = createLogger({\n      level: options.level,\n      format: format.combine(options.format, redacter.format),\n      transports: options.transports ?? new transports.Console(),\n    });\n\n    if (options.meta) {\n      logger = logger.child(options.meta);\n    }\n\n    return new WinstonLogger(logger, redacter.add);\n  }\n\n  /**\n   * Creates a winston log formatter for redacting secrets.\n   */\n  static redacter(): {\n    format: Format;\n    add: (redactions: Iterable<string>) => void;\n  } {\n    const redactionSet = new Set<string>();\n\n    let redactionPattern: RegExp | undefined = undefined;\n\n    return {\n      format: format((obj: TransformableInfo) => {\n        if (!redactionPattern || !obj) {\n          return obj;\n        }\n\n        obj[MESSAGE] = obj[MESSAGE]?.replace?.(redactionPattern, '***');\n\n        return obj;\n      })(),\n      add(newRedactions) {\n        let added = 0;\n        for (const redactionToTrim of newRedactions) {\n          // Trimming the string ensures that we don't accdentally get extra\n          // newlines or other whitespace interfering with the redaction; this\n          // can happen for example when using string literals in yaml\n          const redaction = redactionToTrim.trim();\n          // Exclude secrets that are empty or just one character in length. These\n          // typically mean that you are running local dev or tests, or using the\n          // --lax flag which sets things to just 'x'.\n          if (redaction.length <= 1) {\n            continue;\n          }\n          if (!redactionSet.has(redaction)) {\n            redactionSet.add(redaction);\n            added += 1;\n          }\n        }\n        if (added > 0) {\n          const redactions = Array.from(redactionSet)\n            .map(r => escapeRegExp(r))\n            .join('|');\n          redactionPattern = new RegExp(`(${redactions})`, 'g');\n        }\n      },\n    };\n  }\n\n  /**\n   * Creates a pretty printed winston log formatter.\n   */\n  static colorFormat(): Format {\n    const colorizer = format.colorize();\n\n    return format.combine(\n      format.timestamp(),\n      format.colorize({\n        colors: {\n          timestamp: 'dim',\n          prefix: 'blue',\n          field: 'cyan',\n          debug: 'grey',\n        },\n      }),\n      format.printf((info: TransformableInfo) => {\n        const { timestamp, plugin, service } = info;\n        const message = info[MESSAGE];\n        const level = info[LEVEL];\n        const fields = info[SPLAT];\n        const prefix = plugin || service;\n        const timestampColor = colorizer.colorize('timestamp', timestamp);\n        const prefixColor = colorizer.colorize('prefix', prefix);\n\n        const extraFields = Object.entries(fields)\n          .map(\n            ([key, value]) =>\n              `${colorizer.colorize('field', `${key}`)}=${value}`,\n          )\n          .join(' ');\n\n        return `${timestampColor} ${prefixColor} ${level} ${message} ${extraFields}`;\n      }),\n    );\n  }\n\n  private constructor(\n    winston: Logger,\n    addRedactions?: (redactions: Iterable<string>) => void,\n  ) {\n    this.#winston = winston;\n    this.#addRedactions = addRedactions;\n  }\n\n  error(message: string, meta?: JsonObject): void {\n    this.#winston.error(message, meta);\n  }\n\n  warn(message: string, meta?: JsonObject): void {\n    this.#winston.warn(message, meta);\n  }\n\n  info(message: string, meta?: JsonObject): void {\n    this.#winston.info(message, meta);\n  }\n\n  debug(message: string, meta?: JsonObject): void {\n    this.#winston.debug(message, meta);\n  }\n\n  child(meta: JsonObject): LoggerService {\n    return new WinstonLogger(this.#winston.child(meta));\n  }\n\n  addRedactions(redactions: Iterable<string>) {\n    this.#addRedactions?.(redactions);\n  }\n}\n"],"names":["Transport","MESSAGE","LEVEL","SPLAT","createLogger","format","transports"],"mappings":"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"}