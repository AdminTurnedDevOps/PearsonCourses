{"version":3,"file":"TaskWorker.cjs.js","sources":["../../../src/scaffolder/tasks/TaskWorker.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WorkflowRunner } from './types';\nimport {\n  TaskContext,\n  TaskBroker,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport PQueue from 'p-queue';\nimport { NunjucksWorkflowRunner } from './NunjucksWorkflowRunner';\nimport { Logger } from 'winston';\nimport { TemplateActionRegistry } from '../actions';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { assertError, stringifyError } from '@backstage/errors';\nimport { PermissionEvaluator } from '@backstage/plugin-permission-common';\n\n/**\n * TaskWorkerOptions\n *\n * @public\n */\nexport type TaskWorkerOptions = {\n  taskBroker: TaskBroker;\n  runners: {\n    workflowRunner: WorkflowRunner;\n  };\n  concurrentTasksLimit: number;\n  permissions?: PermissionEvaluator;\n  logger?: Logger;\n};\n\n/**\n * CreateWorkerOptions\n *\n * @public\n */\nexport type CreateWorkerOptions = {\n  taskBroker: TaskBroker;\n  actionRegistry: TemplateActionRegistry;\n  integrations: ScmIntegrations;\n  workingDirectory: string;\n  logger: Logger;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  /**\n   * The number of tasks that can be executed at the same time by the worker\n   * @defaultValue 10\n   * @example\n   * ```\n   * {\n   *   concurrentTasksLimit: 1,\n   *   // OR\n   *   concurrentTasksLimit: Infinity\n   * }\n   * ```\n   */\n  concurrentTasksLimit?: number;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  permissions?: PermissionEvaluator;\n};\n\n/**\n * TaskWorker\n *\n * @public\n */\nexport class TaskWorker {\n  private taskQueue: PQueue;\n  private logger: Logger | undefined;\n  private stopWorkers: boolean;\n\n  private constructor(private readonly options: TaskWorkerOptions) {\n    this.stopWorkers = false;\n    this.logger = options.logger;\n    this.taskQueue = new PQueue({\n      concurrency: options.concurrentTasksLimit,\n    });\n  }\n\n  static async create(options: CreateWorkerOptions): Promise<TaskWorker> {\n    const {\n      taskBroker,\n      logger,\n      actionRegistry,\n      integrations,\n      workingDirectory,\n      additionalTemplateFilters,\n      concurrentTasksLimit = 10, // from 1 to Infinity\n      additionalTemplateGlobals,\n      permissions,\n    } = options;\n\n    const workflowRunner = new NunjucksWorkflowRunner({\n      actionRegistry,\n      integrations,\n      logger,\n      workingDirectory,\n      additionalTemplateFilters,\n      additionalTemplateGlobals,\n      permissions,\n    });\n\n    return new TaskWorker({\n      taskBroker: taskBroker,\n      runners: { workflowRunner },\n      concurrentTasksLimit,\n      permissions,\n    });\n  }\n\n  async recoverTasks() {\n    try {\n      await this.options.taskBroker.recoverTasks?.();\n    } catch (err) {\n      this.logger?.error(stringifyError(err));\n    }\n  }\n\n  start() {\n    (async () => {\n      while (!this.stopWorkers) {\n        await new Promise(resolve => setTimeout(resolve, 10000));\n        await this.recoverTasks();\n      }\n    })();\n    (async () => {\n      while (!this.stopWorkers) {\n        await this.onReadyToClaimTask();\n        if (!this.stopWorkers) {\n          const task = await this.options.taskBroker.claim();\n          void this.taskQueue.add(() => this.runOneTask(task));\n        }\n      }\n    })();\n  }\n\n  stop() {\n    this.stopWorkers = true;\n  }\n\n  protected onReadyToClaimTask(): Promise<void> {\n    if (this.taskQueue.pending < this.options.concurrentTasksLimit) {\n      return Promise.resolve();\n    }\n    return new Promise(resolve => {\n      // \"next\" event emits when a task completes\n      // https://github.com/sindresorhus/p-queue#next\n      this.taskQueue.once('next', () => {\n        resolve();\n      });\n    });\n  }\n\n  async runOneTask(task: TaskContext) {\n    try {\n      if (task.spec.apiVersion !== 'scaffolder.backstage.io/v1beta3') {\n        throw new Error(\n          `Unsupported Template apiVersion ${task.spec.apiVersion}`,\n        );\n      }\n\n      const { output } = await this.options.runners.workflowRunner.execute(\n        task,\n      );\n\n      await task.complete('completed', { output });\n    } catch (error) {\n      assertError(error);\n      await task.complete('failed', {\n        error: { name: error.name, message: error.message },\n      });\n    }\n  }\n}\n"],"names":["PQueue","NunjucksWorkflowRunner","stringifyError","assertError"],"mappings":"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"}