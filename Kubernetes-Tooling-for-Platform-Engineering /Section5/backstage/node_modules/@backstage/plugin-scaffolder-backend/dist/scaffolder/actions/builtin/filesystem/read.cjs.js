'use strict';

var pluginScaffolderNode = require('@backstage/plugin-scaffolder-node');
var z = require('zod');
var backendPluginApi = require('@backstage/backend-plugin-api');
var fs = require('fs/promises');
var path = require('path');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var z__default = /*#__PURE__*/_interopDefaultCompat(z);
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var path__default = /*#__PURE__*/_interopDefaultCompat(path);

const contentSchema = z__default.default.object({
  name: z__default.default.string().describe("Name of the file or directory"),
  path: z__default.default.string().describe("path to the file or directory relative to the workspace"),
  fullPath: z__default.default.string().describe("full path to the file or directory")
});
const createFilesystemReadDirAction = () => {
  return pluginScaffolderNode.createTemplateAction({
    id: "fs:readdir",
    description: "Reads files and directories from the workspace",
    supportsDryRun: true,
    schema: {
      input: z__default.default.object({
        paths: z__default.default.array(z__default.default.string().min(1)),
        recursive: z__default.default.boolean().default(false)
      }),
      output: z__default.default.object({
        files: z__default.default.array(contentSchema),
        folders: z__default.default.array(contentSchema)
      })
    },
    async handler(ctx) {
      const files = [];
      const folders = [];
      for (const localPath of ctx.input.paths) {
        const fullWorkspacePath = backendPluginApi.resolveSafeChildPath(
          ctx.workspacePath,
          localPath
        );
        const content = await fs__default.default.readdir(fullWorkspacePath, {
          recursive: ctx.input.recursive,
          withFileTypes: true
        });
        for (const dirent of content) {
          const fullPath = path__default.default.join(dirent.parentPath, dirent.name);
          const element = {
            name: dirent.name,
            path: path__default.default.relative(ctx.workspacePath, fullPath),
            fullPath
          };
          if (dirent.isDirectory()) {
            folders.push(element);
          } else {
            files.push(element);
          }
        }
      }
      ctx.output("files", files);
      ctx.output("folders", folders);
    }
  });
};

exports.createFilesystemReadDirAction = createFilesystemReadDirAction;
//# sourceMappingURL=read.cjs.js.map
