import { stringifyEntityRef, DEFAULT_NAMESPACE, RELATION_PARENT_OF } from '@backstage/catalog-model';
import { getEntityRelations } from '@backstage/plugin-catalog-react';

const getMembersFromGroups = async (groups, catalogApi, relationship = "memberof") => {
  const membersList = groups.length === 0 ? { items: [] } : await catalogApi.getEntities({
    filter: {
      kind: "User",
      [`relations.${relationship.toLocaleLowerCase("en-US")}`]: groups.map(
        (group) => stringifyEntityRef({
          kind: "group",
          namespace: group.namespace.toLocaleLowerCase("en-US"),
          name: group.name.toLocaleLowerCase("en-US")
        })
      )
    }
  });
  return membersList.items;
};
const getDescendantGroupsFromGroup = async (group, catalogApi) => {
  const alreadyQueuedOrExpandedGroupNames = /* @__PURE__ */ new Map();
  const groupRef = {
    kind: group.kind,
    namespace: group.metadata.namespace ?? DEFAULT_NAMESPACE,
    name: group.metadata.name
  };
  const groupQueue = [groupRef];
  const resultantGroupRefs = [];
  while (groupQueue.length > 0) {
    const activeGroupRef = groupQueue.shift();
    const activeGroup = await catalogApi.getEntityByRef(activeGroupRef);
    alreadyQueuedOrExpandedGroupNames.set(
      stringifyEntityRef(activeGroupRef),
      true
    );
    const childGroups = getEntityRelations(activeGroup, RELATION_PARENT_OF, {
      kind: "Group"
    }).filter(
      (currentGroup) => !alreadyQueuedOrExpandedGroupNames.has(
        stringifyEntityRef(currentGroup)
      )
    );
    childGroups.forEach(
      (childGroup) => alreadyQueuedOrExpandedGroupNames.set(
        stringifyEntityRef(childGroup),
        true
      )
    );
    groupQueue.push(...childGroups);
    resultantGroupRefs.push(...childGroups);
  }
  return resultantGroupRefs;
};
const getAllDesendantMembersForGroupEntity = async (groupEntity, catalogApi, relationship = "memberof") => getMembersFromGroups(
  await getDescendantGroupsFromGroup(groupEntity, catalogApi),
  catalogApi,
  relationship
);
const removeDuplicateEntitiesFrom = (entityArray) => {
  const seenEntities = /* @__PURE__ */ new Map();
  return entityArray.filter((entity) => {
    const stringifiedEntity = stringifyEntityRef(entity);
    const isDuplicate = seenEntities.has(stringifiedEntity);
    seenEntities.set(stringifiedEntity, true);
    return !isDuplicate;
  });
};

export { getAllDesendantMembersForGroupEntity, getDescendantGroupsFromGroup, getMembersFromGroups, removeDuplicateEntitiesFrom };
//# sourceMappingURL=helpers.esm.js.map
