{"version":3,"file":"helpers.esm.js","sources":["../../src/helpers/helpers.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CompoundEntityRef,\n  DEFAULT_NAMESPACE,\n  Entity,\n  GroupEntity,\n  RELATION_PARENT_OF,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport {\n  CatalogApi,\n  getEntityRelations,\n} from '@backstage/plugin-catalog-react';\n\nexport const getMembersFromGroups = async (\n  groups: CompoundEntityRef[],\n  catalogApi: CatalogApi,\n  relationship = 'memberof',\n) => {\n  const membersList =\n    groups.length === 0\n      ? { items: [] }\n      : await catalogApi.getEntities({\n          filter: {\n            kind: 'User',\n            [`relations.${relationship.toLocaleLowerCase('en-US')}`]:\n              groups.map(group =>\n                stringifyEntityRef({\n                  kind: 'group',\n                  namespace: group.namespace.toLocaleLowerCase('en-US'),\n                  name: group.name.toLocaleLowerCase('en-US'),\n                }),\n              ),\n          },\n        });\n\n  return membersList.items as UserEntity[];\n};\n\nexport const getDescendantGroupsFromGroup = async (\n  group: GroupEntity,\n  catalogApi: CatalogApi,\n) => {\n  const alreadyQueuedOrExpandedGroupNames = new Map<string, boolean>();\n  const groupRef: CompoundEntityRef = {\n    kind: group.kind,\n    namespace: group.metadata.namespace ?? DEFAULT_NAMESPACE,\n    name: group.metadata.name,\n  };\n\n  const groupQueue = [groupRef];\n  const resultantGroupRefs: CompoundEntityRef[] = [];\n\n  // Continue expanding groups until there are no more\n  while (groupQueue.length > 0) {\n    const activeGroupRef = groupQueue.shift() as CompoundEntityRef;\n    const activeGroup = await catalogApi.getEntityByRef(activeGroupRef);\n    alreadyQueuedOrExpandedGroupNames.set(\n      stringifyEntityRef(activeGroupRef),\n      true,\n    );\n\n    const childGroups = getEntityRelations(activeGroup, RELATION_PARENT_OF, {\n      kind: 'Group',\n    }).filter(\n      currentGroup =>\n        !alreadyQueuedOrExpandedGroupNames.has(\n          stringifyEntityRef(currentGroup),\n        ),\n    );\n    childGroups.forEach(childGroup =>\n      alreadyQueuedOrExpandedGroupNames.set(\n        stringifyEntityRef(childGroup),\n        true,\n      ),\n    );\n\n    groupQueue.push(...childGroups);\n    resultantGroupRefs.push(...childGroups);\n  }\n\n  return resultantGroupRefs;\n};\n\nexport const getAllDesendantMembersForGroupEntity = async (\n  groupEntity: GroupEntity,\n  catalogApi: CatalogApi,\n  relationship = 'memberof',\n) =>\n  getMembersFromGroups(\n    await getDescendantGroupsFromGroup(groupEntity, catalogApi),\n    catalogApi,\n    relationship,\n  );\n\nexport const removeDuplicateEntitiesFrom = (entityArray: Entity[]) => {\n  const seenEntities = new Map<string, boolean>();\n\n  return entityArray.filter(entity => {\n    const stringifiedEntity = stringifyEntityRef(entity);\n    const isDuplicate = seenEntities.has(stringifiedEntity);\n\n    seenEntities.set(stringifiedEntity, true);\n    return !isDuplicate;\n  });\n};\n"],"names":[],"mappings":";;;AA8BO,MAAM,oBAAuB,GAAA,OAClC,MACA,EAAA,UAAA,EACA,eAAe,UACZ,KAAA;AACH,EAAM,MAAA,WAAA,GACJ,MAAO,CAAA,MAAA,KAAW,CACd,GAAA,EAAE,KAAO,EAAA,EAAG,EAAA,GACZ,MAAM,UAAA,CAAW,WAAY,CAAA;AAAA,IAC3B,MAAQ,EAAA;AAAA,MACN,IAAM,EAAA,MAAA;AAAA,MACN,CAAC,aAAa,YAAa,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAA,CAAE,GACrD,MAAO,CAAA,GAAA;AAAA,QAAI,WACT,kBAAmB,CAAA;AAAA,UACjB,IAAM,EAAA,OAAA;AAAA,UACN,SAAW,EAAA,KAAA,CAAM,SAAU,CAAA,iBAAA,CAAkB,OAAO,CAAA;AAAA,UACpD,IAAM,EAAA,KAAA,CAAM,IAAK,CAAA,iBAAA,CAAkB,OAAO;AAAA,SAC3C;AAAA;AACH;AACJ,GACD,CAAA;AAEP,EAAA,OAAO,WAAY,CAAA,KAAA;AACrB;AAEa,MAAA,4BAAA,GAA+B,OAC1C,KAAA,EACA,UACG,KAAA;AACH,EAAM,MAAA,iCAAA,uBAAwC,GAAqB,EAAA;AACnE,EAAA,MAAM,QAA8B,GAAA;AAAA,IAClC,MAAM,KAAM,CAAA,IAAA;AAAA,IACZ,SAAA,EAAW,KAAM,CAAA,QAAA,CAAS,SAAa,IAAA,iBAAA;AAAA,IACvC,IAAA,EAAM,MAAM,QAAS,CAAA;AAAA,GACvB;AAEA,EAAM,MAAA,UAAA,GAAa,CAAC,QAAQ,CAAA;AAC5B,EAAA,MAAM,qBAA0C,EAAC;AAGjD,EAAO,OAAA,UAAA,CAAW,SAAS,CAAG,EAAA;AAC5B,IAAM,MAAA,cAAA,GAAiB,WAAW,KAAM,EAAA;AACxC,IAAA,MAAM,WAAc,GAAA,MAAM,UAAW,CAAA,cAAA,CAAe,cAAc,CAAA;AAClE,IAAkC,iCAAA,CAAA,GAAA;AAAA,MAChC,mBAAmB,cAAc,CAAA;AAAA,MACjC;AAAA,KACF;AAEA,IAAM,MAAA,WAAA,GAAc,kBAAmB,CAAA,WAAA,EAAa,kBAAoB,EAAA;AAAA,MACtE,IAAM,EAAA;AAAA,KACP,CAAE,CAAA,MAAA;AAAA,MACD,CAAA,YAAA,KACE,CAAC,iCAAkC,CAAA,GAAA;AAAA,QACjC,mBAAmB,YAAY;AAAA;AACjC,KACJ;AACA,IAAY,WAAA,CAAA,OAAA;AAAA,MAAQ,gBAClB,iCAAkC,CAAA,GAAA;AAAA,QAChC,mBAAmB,UAAU,CAAA;AAAA,QAC7B;AAAA;AACF,KACF;AAEA,IAAW,UAAA,CAAA,IAAA,CAAK,GAAG,WAAW,CAAA;AAC9B,IAAmB,kBAAA,CAAA,IAAA,CAAK,GAAG,WAAW,CAAA;AAAA;AAGxC,EAAO,OAAA,kBAAA;AACT;AAEO,MAAM,oCAAuC,GAAA,OAClD,WACA,EAAA,UAAA,EACA,eAAe,UAEf,KAAA,oBAAA;AAAA,EACE,MAAM,4BAA6B,CAAA,WAAA,EAAa,UAAU,CAAA;AAAA,EAC1D,UAAA;AAAA,EACA;AACF;AAEW,MAAA,2BAAA,GAA8B,CAAC,WAA0B,KAAA;AACpE,EAAM,MAAA,YAAA,uBAAmB,GAAqB,EAAA;AAE9C,EAAO,OAAA,WAAA,CAAY,OAAO,CAAU,MAAA,KAAA;AAClC,IAAM,MAAA,iBAAA,GAAoB,mBAAmB,MAAM,CAAA;AACnD,IAAM,MAAA,WAAA,GAAc,YAAa,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAEtD,IAAa,YAAA,CAAA,GAAA,CAAI,mBAAmB,IAAI,CAAA;AACxC,IAAA,OAAO,CAAC,WAAA;AAAA,GACT,CAAA;AACH;;;;"}