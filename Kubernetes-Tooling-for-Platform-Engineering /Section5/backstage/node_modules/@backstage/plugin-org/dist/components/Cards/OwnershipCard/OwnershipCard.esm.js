import { InfoCard } from '@backstage/core-components';
import { useEntity } from '@backstage/plugin-catalog-react';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import Switch from '@material-ui/core/Switch';
import Tooltip from '@material-ui/core/Tooltip';
import { makeStyles } from '@material-ui/core/styles';
import React, { useState, useEffect } from 'react';
import { ComponentsGrid } from './ComponentsGrid.esm.js';

const useStyles = makeStyles((theme) => ({
  card: {
    maxHeight: "100%"
  },
  cardContent: {
    display: "flex",
    flexDirection: "column",
    overflow: "hidden"
  },
  list: {
    [theme.breakpoints.down("xs")]: {
      padding: `0 0 12px`
    }
  },
  listItemText: {
    [theme.breakpoints.down("xs")]: {
      paddingRight: 0,
      paddingLeft: 0
    }
  },
  listItemSecondaryAction: {
    [theme.breakpoints.down("xs")]: {
      width: "100%",
      top: "auto",
      right: "auto",
      position: "relative",
      transform: "unset"
    }
  },
  grid: {
    overflowY: "auto",
    marginTop: 0
  }
}));
const OwnershipCard = (props) => {
  const {
    variant,
    entityFilterKind,
    hideRelationsToggle,
    entityLimit = 6
  } = props;
  const relationAggregation = props.relationAggregation ?? props.relationsType;
  const relationsToggle = hideRelationsToggle === void 0 ? false : hideRelationsToggle;
  const classes = useStyles();
  const { entity } = useEntity();
  const defaultRelationAggregation = entity.kind === "User" ? "aggregated" : "direct";
  const [getRelationAggregation, setRelationAggregation] = useState(
    relationAggregation ?? defaultRelationAggregation
  );
  useEffect(() => {
    if (!relationAggregation) {
      setRelationAggregation(defaultRelationAggregation);
    }
  }, [setRelationAggregation, defaultRelationAggregation, relationAggregation]);
  return /* @__PURE__ */ React.createElement(
    InfoCard,
    {
      title: "Ownership",
      variant,
      className: classes.card,
      cardClassName: classes.cardContent
    },
    !relationsToggle && /* @__PURE__ */ React.createElement(List, { dense: true }, /* @__PURE__ */ React.createElement(ListItem, { className: classes.list }, /* @__PURE__ */ React.createElement(ListItemText, { className: classes.listItemText }), /* @__PURE__ */ React.createElement(
      ListItemSecondaryAction,
      {
        className: classes.listItemSecondaryAction
      },
      "Direct Relations",
      /* @__PURE__ */ React.createElement(
        Tooltip,
        {
          placement: "top",
          arrow: true,
          title: `${getRelationAggregation === "direct" ? "Direct" : "Aggregated"} Relations`
        },
        /* @__PURE__ */ React.createElement(
          Switch,
          {
            color: "primary",
            checked: getRelationAggregation !== "direct",
            onChange: () => {
              const updatedRelationAggregation = getRelationAggregation === "direct" ? "aggregated" : "direct";
              setRelationAggregation(updatedRelationAggregation);
            },
            name: "pin",
            inputProps: { "aria-label": "Ownership Type Switch" }
          }
        )
      ),
      "Aggregated Relations"
    ))),
    /* @__PURE__ */ React.createElement(
      ComponentsGrid,
      {
        className: classes.grid,
        entity,
        entityLimit,
        relationAggregation: getRelationAggregation,
        entityFilterKind
      }
    )
  );
};

export { OwnershipCard };
//# sourceMappingURL=OwnershipCard.esm.js.map
