import { ANNOTATION_EDIT_URL, RELATION_MEMBER_OF } from '@backstage/catalog-model';
import { InfoCard, Link, Avatar } from '@backstage/core-components';
import Box from '@material-ui/core/Box';
import Grid from '@material-ui/core/Grid';
import IconButton from '@material-ui/core/IconButton';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Tooltip from '@material-ui/core/Tooltip';
import { useEntity, getEntityRelations, EntityRefLinks } from '@backstage/plugin-catalog-react';
import Alert from '@material-ui/lab/Alert';
import EditIcon from '@material-ui/icons/Edit';
import EmailIcon from '@material-ui/icons/Email';
import GroupIcon from '@material-ui/icons/Group';
import { LinksGroup } from '../../Meta/LinksGroup.esm.js';
import PersonIcon from '@material-ui/icons/Person';
import React from 'react';

const CardTitle = (props) => props.title ? /* @__PURE__ */ React.createElement(Box, { display: "flex", alignItems: "center" }, /* @__PURE__ */ React.createElement(PersonIcon, { fontSize: "inherit" }), /* @__PURE__ */ React.createElement(Box, { ml: 1 }, props.title)) : null;
const UserProfileCard = (props) => {
  const { entity: user } = useEntity();
  if (!user) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, "User not found");
  }
  const entityMetadataEditUrl = user.metadata.annotations?.[ANNOTATION_EDIT_URL];
  const {
    metadata: { name: metaName, description, links },
    spec: { profile }
  } = user;
  const displayName = profile?.displayName ?? metaName;
  const emailHref = profile?.email ? `mailto:${profile.email}` : void 0;
  const memberOfRelations = getEntityRelations(user, RELATION_MEMBER_OF, {
    kind: "Group"
  });
  return /* @__PURE__ */ React.createElement(
    InfoCard,
    {
      title: /* @__PURE__ */ React.createElement(CardTitle, { title: displayName }),
      subheader: description,
      variant: props.variant,
      action: /* @__PURE__ */ React.createElement(React.Fragment, null, entityMetadataEditUrl && /* @__PURE__ */ React.createElement(
        IconButton,
        {
          "aria-label": "Edit",
          title: "Edit Metadata",
          component: Link,
          to: entityMetadataEditUrl
        },
        /* @__PURE__ */ React.createElement(EditIcon, null)
      ))
    },
    /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 3, alignItems: "flex-start" }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12, sm: 2, xl: 1 }, /* @__PURE__ */ React.createElement(Avatar, { displayName, picture: profile?.picture })), /* @__PURE__ */ React.createElement(Grid, { item: true, md: 10, xl: 11 }, /* @__PURE__ */ React.createElement(List, null, profile?.email && /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, { title: "Email" }, /* @__PURE__ */ React.createElement(EmailIcon, null))), /* @__PURE__ */ React.createElement(ListItemText, null, /* @__PURE__ */ React.createElement(Link, { to: emailHref ?? "" }, profile.email))), /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, { title: "Member of" }, /* @__PURE__ */ React.createElement(GroupIcon, null))), /* @__PURE__ */ React.createElement(ListItemText, null, /* @__PURE__ */ React.createElement(
      EntityRefLinks,
      {
        entityRefs: memberOfRelations,
        defaultKind: "Group"
      }
    ))), props?.showLinks && /* @__PURE__ */ React.createElement(LinksGroup, { links }))))
  );
};

export { UserProfileCard };
//# sourceMappingURL=UserProfileCard.esm.js.map
