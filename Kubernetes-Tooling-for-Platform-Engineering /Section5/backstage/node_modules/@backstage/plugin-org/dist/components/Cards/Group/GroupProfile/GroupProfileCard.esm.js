import { stringifyEntityRef, RELATION_PARENT_OF, RELATION_CHILD_OF, ANNOTATION_LOCATION, ANNOTATION_EDIT_URL } from '@backstage/catalog-model';
import { InfoCard, Avatar, Link } from '@backstage/core-components';
import Box from '@material-ui/core/Box';
import Grid from '@material-ui/core/Grid';
import IconButton from '@material-ui/core/IconButton';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Tooltip from '@material-ui/core/Tooltip';
import { catalogApiRef, useEntity, getEntityRelations, EntityRefLinks } from '@backstage/plugin-catalog-react';
import React, { useCallback } from 'react';
import { useApi, alertApiRef } from '@backstage/core-plugin-api';
import AccountTreeIcon from '@material-ui/icons/AccountTree';
import Alert from '@material-ui/lab/Alert';
import CachedIcon from '@material-ui/icons/Cached';
import EditIcon from '@material-ui/icons/Edit';
import EmailIcon from '@material-ui/icons/Email';
import GroupIcon from '@material-ui/icons/Group';
import { LinksGroup } from '../../Meta/LinksGroup.esm.js';
import { useEntityPermission } from '@backstage/plugin-catalog-react/alpha';
import { catalogEntityRefreshPermission } from '@backstage/plugin-catalog-common/alpha';

const CardTitle = (props) => /* @__PURE__ */ React.createElement(Box, { display: "flex", alignItems: "center" }, /* @__PURE__ */ React.createElement(GroupIcon, { fontSize: "inherit" }), /* @__PURE__ */ React.createElement(Box, { ml: 1 }, props.title));
const GroupProfileCard = (props) => {
  const catalogApi = useApi(catalogApiRef);
  const alertApi = useApi(alertApiRef);
  const { entity: group } = useEntity();
  const { allowed: canRefresh } = useEntityPermission(
    catalogEntityRefreshPermission
  );
  const refreshEntity = useCallback(async () => {
    await catalogApi.refreshEntity(stringifyEntityRef(group));
    alertApi.post({
      message: "Refresh scheduled",
      severity: "info",
      display: "transient"
    });
  }, [catalogApi, alertApi, group]);
  if (!group) {
    return /* @__PURE__ */ React.createElement(Alert, { severity: "error" }, "Group not found");
  }
  const {
    metadata: { name, description, title, annotations, links },
    spec: { profile }
  } = group;
  const childRelations = getEntityRelations(group, RELATION_PARENT_OF, {
    kind: "Group"
  });
  const parentRelations = getEntityRelations(group, RELATION_CHILD_OF, {
    kind: "group"
  });
  const entityLocation = annotations?.[ANNOTATION_LOCATION];
  const allowRefresh = entityLocation?.startsWith("url:") || entityLocation?.startsWith("file:");
  const entityMetadataEditUrl = group.metadata.annotations?.[ANNOTATION_EDIT_URL];
  const displayName = profile?.displayName ?? title ?? name;
  const emailHref = profile?.email ? `mailto:${profile.email}` : "#";
  const infoCardAction = entityMetadataEditUrl ? /* @__PURE__ */ React.createElement(
    IconButton,
    {
      "aria-label": "Edit",
      title: "Edit Metadata",
      component: Link,
      to: entityMetadataEditUrl
    },
    /* @__PURE__ */ React.createElement(EditIcon, null)
  ) : /* @__PURE__ */ React.createElement(IconButton, { "aria-label": "Edit", disabled: true, title: "Edit Metadata" }, /* @__PURE__ */ React.createElement(EditIcon, null));
  return /* @__PURE__ */ React.createElement(
    InfoCard,
    {
      title: /* @__PURE__ */ React.createElement(CardTitle, { title: displayName }),
      subheader: description,
      variant: props.variant,
      action: /* @__PURE__ */ React.createElement(React.Fragment, null, allowRefresh && canRefresh && /* @__PURE__ */ React.createElement(
        IconButton,
        {
          "aria-label": "Refresh",
          title: "Schedule entity refresh",
          onClick: refreshEntity
        },
        /* @__PURE__ */ React.createElement(CachedIcon, null)
      ), infoCardAction)
    },
    /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 3 }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12, sm: 2, xl: 1 }, /* @__PURE__ */ React.createElement(Avatar, { displayName, picture: profile?.picture })), /* @__PURE__ */ React.createElement(Grid, { item: true, md: 10, xl: 11 }, /* @__PURE__ */ React.createElement(List, null, profile?.email && /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, { title: "Email" }, /* @__PURE__ */ React.createElement(EmailIcon, null))), /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        primary: /* @__PURE__ */ React.createElement(Link, { to: emailHref }, profile.email),
        secondary: "Email"
      }
    )), /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, { title: "Parent Group" }, /* @__PURE__ */ React.createElement(AccountTreeIcon, null))), /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        primary: parentRelations.length ? /* @__PURE__ */ React.createElement(
          EntityRefLinks,
          {
            entityRefs: parentRelations,
            defaultKind: "Group"
          }
        ) : "N/A",
        secondary: "Parent Group"
      }
    )), /* @__PURE__ */ React.createElement(ListItem, null, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(Tooltip, { title: "Child Groups" }, /* @__PURE__ */ React.createElement(GroupIcon, null))), /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        primary: childRelations.length ? /* @__PURE__ */ React.createElement(
          EntityRefLinks,
          {
            entityRefs: childRelations,
            defaultKind: "Group"
          }
        ) : "N/A",
        secondary: "Child Groups"
      }
    )), props?.showLinks && /* @__PURE__ */ React.createElement(LinksGroup, { links }))))
  );
};

export { GroupProfileCard };
//# sourceMappingURL=GroupProfileCard.esm.js.map
