'use strict';

var fs = require('fs-extra');
var path = require('path');
var compileTemplate = require('lodash/template');
var config = require('@backstage/config');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var compileTemplate__default = /*#__PURE__*/_interopDefaultCompat(compileTemplate);

const HTML_TEMPLATE_NAME = "index.html.tmpl";
async function injectConfigIntoHtml(options) {
  const { rootDir, appConfigs } = options;
  const templatePath = path.resolve(rootDir, HTML_TEMPLATE_NAME);
  if (!await fs__default.default.exists(templatePath)) {
    return void 0;
  }
  const templateContent = await fs__default.default.readFile(
    path.resolve(rootDir, HTML_TEMPLATE_NAME),
    "utf8"
  );
  const config$1 = config.ConfigReader.fromConfigs(appConfigs);
  const templateSource = compileTemplate__default.default(templateContent, {
    interpolate: /<%=([\s\S]+?)%>/g
  });
  const publicPath = resolvePublicPath(config$1);
  const indexHtmlContent = templateSource({
    config: config$1,
    publicPath
  });
  const indexHtmlContentWithConfig = indexHtmlContent.replace(
    "</head>",
    `
<script type="backstage.io/config">
${JSON.stringify(appConfigs, null, 2).replaceAll("<\/script", "").replaceAll("<!--", "")}
<\/script>
</head>`
  );
  return Buffer.from(indexHtmlContentWithConfig, "utf8");
}
function resolvePublicPath(config) {
  const baseUrl = new URL(
    config.getOptionalString("app.baseUrl") ?? "/",
    "http://localhost:7007"
  );
  return baseUrl.pathname.replace(/\/+$/, "");
}

exports.injectConfigIntoHtml = injectConfigIntoHtml;
exports.resolvePublicPath = resolvePublicPath;
//# sourceMappingURL=injectConfigIntoHtml.cjs.js.map
