{"version":3,"file":"readFrontendConfig.cjs.js","sources":["../../../src/lib/config/readFrontendConfig.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { resolve as resolvePath } from 'path';\nimport { AppConfig, Config } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport {\n  ConfigSchema,\n  loadConfigSchema,\n  readEnvConfig,\n} from '@backstage/config-loader';\n\n/**\n * Read config from environment and process the backend config using the\n * schema that is embedded in the frontend build.\n */\nexport async function readFrontendConfig(options: {\n  env: { [name: string]: string | undefined };\n  appDistDir: string;\n  config: Config;\n  schema?: ConfigSchema;\n}): Promise<AppConfig[]> {\n  const { env, appDistDir, config } = options;\n\n  const schemaPath = resolvePath(appDistDir, '.config-schema.json');\n  if (await fs.pathExists(schemaPath)) {\n    const envConfigs = readEnvConfig(env);\n    const serializedSchema = await fs.readJson(schemaPath);\n\n    try {\n      const schema =\n        options.schema ||\n        (await loadConfigSchema({\n          serialized: serializedSchema,\n        }));\n\n      return await schema.process(\n        [...envConfigs, { data: config.get() as JsonObject, context: 'app' }],\n        { visibility: ['frontend'], withDeprecatedKeys: true },\n      );\n    } catch (error) {\n      throw new Error(\n        'Invalid app bundle schema. If this error is unexpected you need to run `yarn build` in the app. ' +\n          `If that doesn't help you should make sure your config schema is correct and rebuild the app bundle again. ` +\n          `Caused by the following schema error, ${error}`,\n      );\n    }\n  }\n\n  return [];\n}\n"],"names":["resolvePath","fs","readEnvConfig","loadConfigSchema"],"mappings":";;;;;;;;;;AA8BA,eAAsB,mBAAmB,OAKhB,EAAA;AACvB,EAAA,MAAM,EAAE,GAAA,EAAK,UAAY,EAAA,MAAA,EAAW,GAAA,OAAA;AAEpC,EAAM,MAAA,UAAA,GAAaA,YAAY,CAAA,UAAA,EAAY,qBAAqB,CAAA;AAChE,EAAA,IAAI,MAAMC,mBAAA,CAAG,UAAW,CAAA,UAAU,CAAG,EAAA;AACnC,IAAM,MAAA,UAAA,GAAaC,2BAAc,GAAG,CAAA;AACpC,IAAA,MAAM,gBAAmB,GAAA,MAAMD,mBAAG,CAAA,QAAA,CAAS,UAAU,CAAA;AAErD,IAAI,IAAA;AACF,MAAA,MAAM,MACJ,GAAA,OAAA,CAAQ,MACP,IAAA,MAAME,6BAAiB,CAAA;AAAA,QACtB,UAAY,EAAA;AAAA,OACb,CAAA;AAEH,MAAA,OAAO,MAAM,MAAO,CAAA,OAAA;AAAA,QAClB,CAAC,GAAG,UAAA,EAAY,EAAE,IAAA,EAAM,OAAO,GAAI,EAAA,EAAiB,OAAS,EAAA,KAAA,EAAO,CAAA;AAAA,QACpE,EAAE,UAAY,EAAA,CAAC,UAAU,CAAA,EAAG,oBAAoB,IAAK;AAAA,OACvD;AAAA,aACO,KAAO,EAAA;AACd,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,qPAE2C,KAAK,CAAA;AAAA,OAClD;AAAA;AACF;AAGF,EAAA,OAAO,EAAC;AACV;;;;"}