'use strict';

var fs = require('fs-extra');
var path = require('path');
var configLoader = require('@backstage/config-loader');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

async function readFrontendConfig(options) {
  const { env, appDistDir, config } = options;
  const schemaPath = path.resolve(appDistDir, ".config-schema.json");
  if (await fs__default.default.pathExists(schemaPath)) {
    const envConfigs = configLoader.readEnvConfig(env);
    const serializedSchema = await fs__default.default.readJson(schemaPath);
    try {
      const schema = options.schema || await configLoader.loadConfigSchema({
        serialized: serializedSchema
      });
      return await schema.process(
        [...envConfigs, { data: config.get(), context: "app" }],
        { visibility: ["frontend"], withDeprecatedKeys: true }
      );
    } catch (error) {
      throw new Error(
        `Invalid app bundle schema. If this error is unexpected you need to run \`yarn build\` in the app. If that doesn't help you should make sure your config schema is correct and rebuild the app bundle again. Caused by the following schema error, ${error}`
      );
    }
  }
  return [];
}

exports.readFrontendConfig = readFrontendConfig;
//# sourceMappingURL=readFrontendConfig.cjs.js.map
