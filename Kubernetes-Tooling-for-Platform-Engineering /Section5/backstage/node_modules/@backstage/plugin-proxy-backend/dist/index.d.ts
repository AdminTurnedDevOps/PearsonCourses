import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { RootConfigService, DiscoveryService } from '@backstage/backend-plugin-api';
import express from 'express';
import { Logger } from 'winston';

/**
 * The proxy backend plugin.
 *
 * @public
 */
declare const proxyPlugin: _backstage_backend_plugin_api.BackendFeature;

/**
 * @public
 * @deprecated Please migrate to the new backend system as this will be removed in the future.
 */
interface RouterOptions {
    logger: Logger;
    config: RootConfigService;
    discovery: DiscoveryService;
    skipInvalidProxies?: boolean;
    reviveConsumedRequestBodies?: boolean;
}
/**
 * Creates a new
 * {@link https://expressjs.com/en/api.html#router | "express router"} that
 * proxies each target configured under the `proxy.endpoints` key of the config.
 *
 * @remarks
 *
 * Example configuration:
 *
 * ```yaml
 * proxy:
 *   endpoints:
 *      # Option 1: Simple URL String
 *     simple-example: http://simple.example.com:8080
 *     # Option 2: `http-proxy-middleware` compatible object
 *     '/larger-example/v1':
 *       target: http://larger.example.com:8080/svc.v1
 *       headers:
 *         Authorization: Bearer ${EXAMPLE_AUTH_TOKEN}
 * ```
 *
 * @see https://backstage.io/docs/plugins/proxying
 * @public
 * @deprecated Please migrate to the new backend system as this will be removed in the future.
 */
declare function createRouter(options: RouterOptions): Promise<express.Router>;

export { type RouterOptions, createRouter, proxyPlugin as default };
