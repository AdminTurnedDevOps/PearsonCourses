{"version":3,"file":"router.cjs.js","sources":["../../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport {\n  createProxyMiddleware,\n  fixRequestBody,\n  Options,\n  RequestHandler,\n} from 'http-proxy-middleware';\nimport { Logger } from 'winston';\nimport http from 'http';\nimport { JsonObject } from '@backstage/types';\nimport {\n  DiscoveryService,\n  HttpRouterService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\n\n// A list of headers that are always forwarded to the proxy targets.\nconst safeForwardHeaders = [\n  // https://fetch.spec.whatwg.org/#cors-safelisted-request-header\n  'cache-control',\n  'content-language',\n  'content-length',\n  'content-type',\n  'expires',\n  'last-modified',\n  'pragma',\n\n  // host is overridden by default. if changeOrigin is configured to false,\n  // we assume this is a intentional and should also be forwarded.\n  'host',\n\n  // other headers that we assume to be ok\n  'accept',\n  'accept-language',\n  'user-agent',\n];\n\n/**\n * @public\n * @deprecated Please migrate to the new backend system as this will be removed in the future.\n */\nexport interface RouterOptions {\n  logger: Logger;\n  config: RootConfigService;\n  discovery: DiscoveryService;\n  skipInvalidProxies?: boolean;\n  reviveConsumedRequestBodies?: boolean;\n}\n\nexport interface ProxyConfig extends Options {\n  allowedMethods?: string[];\n  allowedHeaders?: string[];\n  reviveRequestBody?: boolean;\n}\n\n// Creates a proxy middleware, possibly with defaults added on top of the\n// given config.\nexport function buildMiddleware(\n  pathPrefix: string,\n  logger: Logger,\n  route: string,\n  config: string | ProxyConfig,\n  reviveConsumedRequestBodies?: boolean,\n  httpRouterService?: HttpRouterService,\n): RequestHandler {\n  let fullConfig: ProxyConfig;\n  let credentialsPolicy: string;\n  if (typeof config === 'string') {\n    fullConfig = { target: config };\n    credentialsPolicy = 'require';\n  } else {\n    const { credentials, ...rest } = config as any;\n    fullConfig = rest;\n    credentialsPolicy = credentials ?? 'require';\n  }\n\n  const credentialsPolicyCandidates = [\n    'require',\n    'forward',\n    'dangerously-allow-unauthenticated',\n  ];\n  if (!credentialsPolicyCandidates.includes(credentialsPolicy)) {\n    const valid = credentialsPolicyCandidates.map(c => `'${c}'`).join(', ');\n    throw new Error(\n      `Unknown credentials policy '${credentialsPolicy}' for proxy route '${route}'; expected one of ${valid}`,\n    );\n  }\n\n  if (credentialsPolicy === 'dangerously-allow-unauthenticated') {\n    httpRouterService?.addAuthPolicy({\n      path: route,\n      allow: 'unauthenticated',\n    });\n  }\n\n  // Validate that target is a valid URL.\n  const targetType = typeof fullConfig.target;\n  if (targetType !== 'string') {\n    throw new Error(\n      `Proxy target for route \"${route}\" must be a string, but is of type ${targetType}`,\n    );\n  }\n  try {\n    // eslint-disable-next-line no-new\n    new URL(fullConfig.target! as string);\n  } catch {\n    throw new Error(\n      `Proxy target is not a valid URL: ${fullConfig.target ?? ''}`,\n    );\n  }\n\n  // Default is to do a path rewrite that strips out the proxy's path prefix\n  // and the rest of the route.\n  if (fullConfig.pathRewrite === undefined) {\n    let routeWithSlash = route.endsWith('/') ? route : `${route}/`;\n\n    if (!pathPrefix.endsWith('/') && !routeWithSlash.startsWith('/')) {\n      // Need to insert a / between pathPrefix and routeWithSlash\n      routeWithSlash = `/${routeWithSlash}`;\n    } else if (pathPrefix.endsWith('/') && routeWithSlash.startsWith('/')) {\n      // Never expect this to happen at this point in time as\n      // pathPrefix is set using `getExternalBaseUrl` which \"Returns the\n      // external HTTP base backend URL for a given plugin,\n      // **without a trailing slash.**\". But in case this changes in future, we\n      // need to drop a / on either pathPrefix or routeWithSlash\n      routeWithSlash = routeWithSlash.substring(1);\n    }\n\n    // The ? makes the slash optional for the rewrite, so that a base path without an ending slash\n    // will also be matched (e.g. '/sample' and then requesting just '/api/proxy/sample' without an\n    // ending slash). Otherwise the target gets called with the full '/api/proxy/sample' path\n    // appended.\n    fullConfig.pathRewrite = {\n      [`^${pathPrefix}${routeWithSlash}?`]: '/',\n    };\n  }\n\n  // Default is to update the Host header to the target\n  if (fullConfig.changeOrigin === undefined) {\n    fullConfig.changeOrigin = true;\n  }\n\n  // Attach the logger to the proxy config\n  fullConfig.logProvider = () => logger;\n  // http-proxy-middleware uses this log level to check if it should log the\n  // requests that it proxies. Setting this to the most verbose log level\n  // ensures that it always logs these requests. Our logger ends up deciding\n  // if the logs are displayed or not.\n  fullConfig.logLevel = 'debug';\n\n  // Only return the allowed HTTP headers to not forward unwanted secret headers\n  const requestHeaderAllowList = new Set<string>(\n    [\n      // allow all safe headers\n      ...safeForwardHeaders,\n\n      // allow all headers that are set by the proxy\n      ...((fullConfig.headers && Object.keys(fullConfig.headers)) || []),\n\n      // allow all configured headers\n      ...(fullConfig.allowedHeaders || []),\n    ].map(h => h.toLocaleLowerCase()),\n  );\n\n  if (credentialsPolicy === 'forward') {\n    requestHeaderAllowList.add('authorization');\n  }\n\n  // Use the custom middleware filter to do two things:\n  //  1. Remove any headers not in the allow list to stop them being forwarded\n  //  2. Only permit the allowed HTTP methods if configured\n  //\n  // We are filtering the proxy request headers here rather than in\n  // `onProxyReq` because when global-agent is enabled then `onProxyReq`\n  // fires _after_ the agent has already sent the headers to the proxy\n  // target, causing a ERR_HTTP_HEADERS_SENT crash\n  const filter = (_pathname: string, req: http.IncomingMessage): boolean => {\n    const headerNames = Object.keys(req.headers);\n    headerNames.forEach(h => {\n      if (!requestHeaderAllowList.has(h.toLocaleLowerCase())) {\n        delete req.headers[h];\n      }\n    });\n\n    return fullConfig?.allowedMethods?.includes(req.method!) ?? true;\n  };\n  // Makes http-proxy-middleware logs look nicer and include the mount path\n  filter.toString = () => route;\n\n  // Only forward the allowed HTTP headers to not forward unwanted secret headers\n  const responseHeaderAllowList = new Set<string>(\n    [\n      // allow all safe headers\n      ...safeForwardHeaders,\n\n      // allow all configured headers\n      ...(fullConfig.allowedHeaders || []),\n    ].map(h => h.toLocaleLowerCase()),\n  );\n\n  // only forward the allowed headers in backend->client\n  fullConfig.onProxyRes = (proxyRes: http.IncomingMessage) => {\n    const headerNames = Object.keys(proxyRes.headers);\n\n    headerNames.forEach(h => {\n      if (!responseHeaderAllowList.has(h.toLocaleLowerCase())) {\n        delete proxyRes.headers[h];\n      }\n    });\n  };\n\n  if (reviveConsumedRequestBodies) {\n    fullConfig.onProxyReq = fixRequestBody;\n  }\n\n  return createProxyMiddleware(filter, fullConfig);\n}\n\nfunction readProxyConfig(config: Config, logger: Logger): JsonObject {\n  const endpoints = config\n    .getOptionalConfig('proxy.endpoints')\n    ?.get<JsonObject>();\n  if (endpoints) {\n    return endpoints;\n  }\n\n  const root = config.getOptionalConfig('proxy')?.get<JsonObject>();\n  if (!root) {\n    return {};\n  }\n\n  const rootEndpoints = Object.fromEntries(\n    Object.entries(root).filter(([key]) => key.startsWith('/')),\n  );\n  if (Object.keys(rootEndpoints).length === 0) {\n    return {};\n  }\n\n  logger.warn(\n    \"Configuring proxy endpoints in the root 'proxy' configuration is deprecated. Move this configuration to 'proxy.endpoints' instead.\",\n  );\n\n  return rootEndpoints;\n}\n\n/**\n * Creates a new\n * {@link https://expressjs.com/en/api.html#router | \"express router\"} that\n * proxies each target configured under the `proxy.endpoints` key of the config.\n *\n * @remarks\n *\n * Example configuration:\n *\n * ```yaml\n * proxy:\n *   endpoints:\n *      # Option 1: Simple URL String\n *     simple-example: http://simple.example.com:8080\n *     # Option 2: `http-proxy-middleware` compatible object\n *     '/larger-example/v1':\n *       target: http://larger.example.com:8080/svc.v1\n *       headers:\n *         Authorization: Bearer ${EXAMPLE_AUTH_TOKEN}\n * ```\n *\n * @see https://backstage.io/docs/plugins/proxying\n * @public\n * @deprecated Please migrate to the new backend system as this will be removed in the future.\n */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  return createRouterInternal(options);\n}\n\nexport async function createRouterInternal(\n  options: RouterOptions & { httpRouterService?: HttpRouterService },\n): Promise<express.Router> {\n  const router = Router();\n  let currentRouter = Router();\n\n  const skipInvalidProxies =\n    options.skipInvalidProxies ??\n    options.config.getOptionalBoolean('proxy.skipInvalidProxies') ??\n    false;\n  const reviveConsumedRequestBodies =\n    options.reviveConsumedRequestBodies ??\n    options.config.getOptionalBoolean('proxy.reviveConsumedRequestBodies') ??\n    false;\n  const proxyOptions = {\n    skipInvalidProxies,\n    reviveConsumedRequestBodies,\n    logger: options.logger,\n  };\n\n  const externalUrl = await options.discovery.getExternalBaseUrl('proxy');\n  const { pathname: pathPrefix } = new URL(externalUrl);\n\n  const proxyConfig = readProxyConfig(options.config, options.logger);\n  configureMiddlewares(\n    proxyOptions,\n    currentRouter,\n    pathPrefix,\n    proxyConfig,\n    options.httpRouterService,\n  );\n  router.use((...args) => currentRouter(...args));\n\n  if (options.config.subscribe) {\n    let currentKey = JSON.stringify(proxyConfig);\n\n    options.config.subscribe(() => {\n      const newProxyConfig = readProxyConfig(options.config, options.logger);\n      const newKey = JSON.stringify(newProxyConfig);\n\n      if (currentKey !== newKey) {\n        currentKey = newKey;\n        currentRouter = Router();\n        configureMiddlewares(\n          proxyOptions,\n          currentRouter,\n          pathPrefix,\n          newProxyConfig,\n          options.httpRouterService,\n        );\n      }\n    });\n  }\n\n  options.httpRouterService?.use(router);\n  return router;\n}\n\nfunction configureMiddlewares(\n  options: {\n    reviveConsumedRequestBodies: boolean;\n    skipInvalidProxies: boolean;\n    logger: Logger;\n  },\n  router: express.Router,\n  pathPrefix: string,\n  proxyConfig: any,\n  httpRouterService?: HttpRouterService,\n) {\n  Object.entries<any>(proxyConfig).forEach(([route, proxyRouteConfig]) => {\n    try {\n      router.use(\n        route,\n        buildMiddleware(\n          pathPrefix,\n          options.logger,\n          route,\n          proxyRouteConfig,\n          options.reviveConsumedRequestBodies,\n          httpRouterService,\n        ),\n      );\n    } catch (e) {\n      if (options.skipInvalidProxies) {\n        options.logger.warn(`skipped configuring ${route} due to ${e.message}`);\n      } else {\n        throw e;\n      }\n    }\n  });\n}\n"],"names":["fixRequestBody","createProxyMiddleware","Router"],"mappings":"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"}