'use strict';

var passportOneloginOauth = require('passport-onelogin-oauth');
var pluginAuthNode = require('@backstage/plugin-auth-node');

const oneLoginAuthenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  initialize({ callbackUrl, config }) {
    const clientId = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    const issuer = config.getString("issuer");
    return pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new passportOneloginOauth.Strategy(
        {
          clientID: clientId,
          clientSecret,
          callbackURL: callbackUrl,
          issuer,
          passReqToCallback: false
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            { fullProfile, params, accessToken },
            { refreshToken }
          );
        }
      )
    );
  },
  async start(input, helper) {
    input.scope = "openid";
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent"
    });
  },
  async authenticate(input, helper) {
    return helper.authenticate(input);
  },
  async refresh(input, helper) {
    input.scope = "openid";
    return helper.refresh(input);
  }
});

exports.oneLoginAuthenticator = oneLoginAuthenticator;
//# sourceMappingURL=authenticator.cjs.js.map
