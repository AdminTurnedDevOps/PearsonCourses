import React, { useState } from 'react';
import { createExtension, createExtensionInput, RouterBlueprint, SignInPageBlueprint, coreExtensionData, AppRootWrapperBlueprint, discoveryApiRef, errorApiRef, fetchApiRef, routeResolutionApiRef } from '@backstage/frontend-plugin-api';
import { identityApiRef, useApi, configApiRef } from '@backstage/core-plugin-api';
import { isProtectedApp } from '../packages/core-app-api/src/app/isProtectedApp.esm.js';
import { BrowserRouter } from 'react-router-dom';
import { RouteTracker } from '../packages/frontend-app-api/src/routing/RouteTracker.esm.js';
import { getBasePath } from '../packages/frontend-app-api/src/routing/getBasePath.esm.js';

const AppRoot = createExtension({
  name: "root",
  attachTo: { id: "app", input: "root" },
  inputs: {
    router: createExtensionInput([RouterBlueprint.dataRefs.component], {
      singleton: true,
      optional: true
    }),
    signInPage: createExtensionInput([SignInPageBlueprint.dataRefs.component], {
      singleton: true,
      optional: true
    }),
    children: createExtensionInput([coreExtensionData.reactElement], {
      singleton: true
    }),
    elements: createExtensionInput([coreExtensionData.reactElement]),
    wrappers: createExtensionInput([
      AppRootWrapperBlueprint.dataRefs.component
    ])
  },
  output: [coreExtensionData.reactElement],
  factory({ inputs, apis }) {
    if (isProtectedApp()) {
      const identityApi = apis.get(identityApiRef);
      if (!identityApi) {
        throw new Error("App requires an Identity API implementation");
      }
      const appIdentityProxy = toAppIdentityProxy(identityApi);
      const discoveryApi = apis.get(discoveryApiRef);
      const errorApi = apis.get(errorApiRef);
      const fetchApi = apis.get(fetchApiRef);
      if (!discoveryApi || !errorApi || !fetchApi) {
        throw new Error(
          "App is running in protected mode but missing required APIs"
        );
      }
      appIdentityProxy.enableCookieAuth({
        discoveryApi,
        errorApi,
        fetchApi
      });
    }
    let content = inputs.children.get(
      coreExtensionData.reactElement
    );
    for (const wrapper of inputs.wrappers) {
      const Component = wrapper.get(AppRootWrapperBlueprint.dataRefs.component);
      content = /* @__PURE__ */ React.createElement(Component, null, content);
    }
    return [
      coreExtensionData.reactElement(
        /* @__PURE__ */ React.createElement(
          AppRouter,
          {
            SignInPageComponent: inputs.signInPage?.get(
              SignInPageBlueprint.dataRefs.component
            ),
            RouterComponent: inputs.router?.get(
              RouterBlueprint.dataRefs.component
            ),
            extraElements: inputs.elements?.map(
              (el) => el.get(coreExtensionData.reactElement)
            )
          },
          content
        )
      )
    ];
  }
});
function SignInPageWrapper({
  component: Component,
  appIdentityProxy,
  children
}) {
  const [identityApi, setIdentityApi] = useState();
  const configApi = useApi(configApiRef);
  const basePath = getBasePath(configApi);
  if (!identityApi) {
    return /* @__PURE__ */ React.createElement(Component, { onSignInSuccess: setIdentityApi });
  }
  appIdentityProxy.setTarget(identityApi, {
    signOutTargetUrl: basePath || "/"
  });
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
}
function toAppIdentityProxy(identityApi) {
  if (!("enableCookieAuth" in identityApi)) {
    throw new Error("Unexpected Identity API implementation");
  }
  return identityApi;
}
function DefaultRouter(props) {
  const configApi = useApi(configApiRef);
  const basePath = getBasePath(configApi);
  return /* @__PURE__ */ React.createElement(BrowserRouter, { basename: basePath }, props.children);
}
function AppRouter(props) {
  const {
    children,
    SignInPageComponent,
    RouterComponent = DefaultRouter,
    extraElements = []
  } = props;
  const configApi = useApi(configApiRef);
  const appIdentityProxy = toAppIdentityProxy(useApi(identityApiRef));
  const routeResolutionsApi = useApi(routeResolutionApiRef);
  const basePath = getBasePath(configApi);
  if (!("getRouteObjects" in routeResolutionsApi)) {
    throw new Error("Unexpected route resolution API implementation");
  }
  const routeObjects = routeResolutionsApi.getRouteObjects();
  if (!SignInPageComponent) {
    appIdentityProxy.setTarget(
      {
        getUserId: () => "guest",
        getIdToken: async () => void 0,
        getProfile: () => ({
          email: "guest@example.com",
          displayName: "Guest"
        }),
        getProfileInfo: async () => ({
          email: "guest@example.com",
          displayName: "Guest"
        }),
        getBackstageIdentity: async () => ({
          type: "user",
          userEntityRef: "user:default/guest",
          ownershipEntityRefs: ["user:default/guest"]
        }),
        getCredentials: async () => ({}),
        signOut: async () => {
        }
      },
      { signOutTargetUrl: basePath || "/" }
    );
    return /* @__PURE__ */ React.createElement(RouterComponent, null, /* @__PURE__ */ React.createElement(RouteTracker, { routeObjects }), children);
  }
  return /* @__PURE__ */ React.createElement(RouterComponent, null, ...extraElements, /* @__PURE__ */ React.createElement(RouteTracker, { routeObjects }), /* @__PURE__ */ React.createElement(
    SignInPageWrapper,
    {
      component: SignInPageComponent,
      appIdentityProxy
    },
    children
  ));
}

export { AppRoot, AppRouter };
//# sourceMappingURL=AppRoot.esm.js.map
