import React from 'react';
import { UnifiedThemeProvider, themes } from '@backstage/theme';
import DarkIcon from '@material-ui/icons/Brightness2';
import LightIcon from '@material-ui/icons/WbSunny';
import { ApiBlueprint, createExtensionInput, ThemeBlueprint, createApiFactory, appThemeApiRef } from '@backstage/frontend-plugin-api';
import 'zen-observable';
import '@backstage/core-plugin-api';
import '../packages/core-app-api/src/apis/implementations/auth/saml/types.esm.js';
import { AppThemeSelector } from '../packages/core-app-api/src/apis/implementations/AppThemeApi/AppThemeSelector.esm.js';
import '@backstage/config';

const AppThemeApi = ApiBlueprint.makeWithOverrides({
  name: "app-theme",
  inputs: {
    themes: createExtensionInput([ThemeBlueprint.dataRefs.theme], {
      replaces: [{ id: "app", input: "themes" }]
    })
  },
  factory: (originalFactory, { inputs }) => {
    return originalFactory({
      factory: createApiFactory(
        appThemeApiRef,
        AppThemeSelector.createWithStorage(
          inputs.themes.map((i) => i.get(ThemeBlueprint.dataRefs.theme))
        )
      )
    });
  }
});
const LightTheme = ThemeBlueprint.make({
  name: "light",
  params: {
    theme: {
      id: "light",
      title: "Light Theme",
      variant: "light",
      icon: /* @__PURE__ */ React.createElement(LightIcon, null),
      Provider: ({ children }) => /* @__PURE__ */ React.createElement(UnifiedThemeProvider, { theme: themes.light, children })
    }
  }
});
const DarkTheme = ThemeBlueprint.make({
  name: "dark",
  params: {
    theme: {
      id: "dark",
      title: "Dark Theme",
      variant: "dark",
      icon: /* @__PURE__ */ React.createElement(DarkIcon, null),
      Provider: ({ children }) => /* @__PURE__ */ React.createElement(UnifiedThemeProvider, { theme: themes.dark, children })
    }
  }
});

export { AppThemeApi, DarkTheme, LightTheme };
//# sourceMappingURL=AppThemeApi.esm.js.map
