import { BehaviorSubject } from '../../../lib/subjects.esm.js';

const STORAGE_KEY = "theme";
class AppThemeSelector {
  constructor(themes) {
    this.themes = themes;
  }
  static createWithStorage(themes) {
    const selector = new AppThemeSelector(themes);
    if (!window.localStorage) {
      return selector;
    }
    const initialThemeId = window.localStorage.getItem(STORAGE_KEY) ?? void 0;
    selector.setActiveThemeId(initialThemeId);
    selector.activeThemeId$().subscribe((themeId) => {
      if (themeId) {
        window.localStorage.setItem(STORAGE_KEY, themeId);
      } else {
        window.localStorage.removeItem(STORAGE_KEY);
      }
    });
    window.addEventListener("storage", (event) => {
      if (event.key === STORAGE_KEY) {
        const themeId = localStorage.getItem(STORAGE_KEY) ?? void 0;
        selector.setActiveThemeId(themeId);
      }
    });
    return selector;
  }
  activeThemeId;
  subject = new BehaviorSubject(void 0);
  getInstalledThemes() {
    return this.themes.slice();
  }
  activeThemeId$() {
    return this.subject;
  }
  getActiveThemeId() {
    return this.activeThemeId;
  }
  setActiveThemeId(themeId) {
    this.activeThemeId = themeId;
    this.subject.next(themeId);
  }
}

export { AppThemeSelector };
//# sourceMappingURL=AppThemeSelector.esm.js.map
