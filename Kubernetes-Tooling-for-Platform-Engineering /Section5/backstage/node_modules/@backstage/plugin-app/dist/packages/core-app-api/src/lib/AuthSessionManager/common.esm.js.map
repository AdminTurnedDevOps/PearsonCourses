{"version":3,"file":"common.esm.js","sources":["../../../../../../../../packages/core-app-api/src/lib/AuthSessionManager/common.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SessionScopesFunc } from './types';\n\nexport function hasScopes(\n  searched: Set<string>,\n  searchFor: Set<string>,\n): boolean {\n  for (const scope of searchFor) {\n    if (!searched.has(scope)) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype ScopeHelperOptions<T> = {\n  sessionScopes: SessionScopesFunc<T> | undefined;\n  defaultScopes?: Set<string>;\n};\n\nexport class SessionScopeHelper<T> {\n  constructor(private readonly options: ScopeHelperOptions<T>) {}\n\n  sessionExistsAndHasScope(\n    session: T | undefined,\n    scopes?: Set<string>,\n  ): boolean {\n    if (!session) {\n      return false;\n    }\n    if (!scopes) {\n      return true;\n    }\n    if (this.options.sessionScopes === undefined) {\n      return true;\n    }\n    const sessionScopes = this.options.sessionScopes(session);\n    return hasScopes(sessionScopes, scopes);\n  }\n\n  getExtendedScope(session: T | undefined, scopes?: Set<string>) {\n    const newScope = new Set(this.options.defaultScopes);\n    if (session && this.options.sessionScopes !== undefined) {\n      const sessionScopes = this.options.sessionScopes(session);\n      for (const scope of sessionScopes) {\n        newScope.add(scope);\n      }\n    }\n    if (scopes) {\n      for (const scope of scopes) {\n        newScope.add(scope);\n      }\n    }\n    return newScope;\n  }\n}\n"],"names":[],"mappings":"AAkBgB,SAAA,SAAA,CACd,UACA,SACS,EAAA;AACT,EAAA,KAAA,MAAW,SAAS,SAAW,EAAA;AAC7B,IAAA,IAAI,CAAC,QAAA,CAAS,GAAI,CAAA,KAAK,CAAG,EAAA;AACxB,MAAO,OAAA,KAAA;AAAA;AACT;AAEF,EAAO,OAAA,IAAA;AACT;AAOO,MAAM,kBAAsB,CAAA;AAAA,EACjC,YAA6B,OAAgC,EAAA;AAAhC,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AAAA;AAAiC,EAE9D,wBAAA,CACE,SACA,MACS,EAAA;AACT,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAO,OAAA,KAAA;AAAA;AAET,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAO,OAAA,IAAA;AAAA;AAET,IAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,KAAkB,KAAW,CAAA,EAAA;AAC5C,MAAO,OAAA,IAAA;AAAA;AAET,IAAA,MAAM,aAAgB,GAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,CAAc,OAAO,CAAA;AACxD,IAAO,OAAA,SAAA,CAAU,eAAe,MAAM,CAAA;AAAA;AACxC,EAEA,gBAAA,CAAiB,SAAwB,MAAsB,EAAA;AAC7D,IAAA,MAAM,QAAW,GAAA,IAAI,GAAI,CAAA,IAAA,CAAK,QAAQ,aAAa,CAAA;AACnD,IAAA,IAAI,OAAW,IAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,KAAkB,KAAW,CAAA,EAAA;AACvD,MAAA,MAAM,aAAgB,GAAA,IAAA,CAAK,OAAQ,CAAA,aAAA,CAAc,OAAO,CAAA;AACxD,MAAA,KAAA,MAAW,SAAS,aAAe,EAAA;AACjC,QAAA,QAAA,CAAS,IAAI,KAAK,CAAA;AAAA;AACpB;AAEF,IAAA,IAAI,MAAQ,EAAA;AACV,MAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AAC1B,QAAA,QAAA,CAAS,IAAI,KAAK,CAAA;AAAA;AACpB;AAEF,IAAO,OAAA,QAAA;AAAA;AAEX;;;;"}