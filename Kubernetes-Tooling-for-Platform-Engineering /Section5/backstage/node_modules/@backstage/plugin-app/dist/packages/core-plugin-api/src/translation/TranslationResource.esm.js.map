{"version":3,"file":"TranslationResource.esm.js","sources":["../../../../../../../packages/core-plugin-api/src/translation/TranslationResource.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TranslationMessages,\n  TranslationRef,\n} from '@backstage/core-plugin-api/alpha';\n\n/** @alpha */\nexport interface TranslationResource<TId extends string = string> {\n  $$type: '@backstage/TranslationResource';\n  id: TId;\n}\n\n/** @internal */\nexport type InternalTranslationResourceLoader = () => Promise<{\n  messages: { [key in string]: string | null };\n}>;\n\n/** @internal */\nexport interface InternalTranslationResource<TId extends string = string>\n  extends TranslationResource<TId> {\n  version: 'v1';\n  resources: Array<{\n    language: string;\n    loader: InternalTranslationResourceLoader;\n  }>;\n}\n\n/** @internal */\nexport function toInternalTranslationResource<TId extends string>(\n  resource: TranslationResource<TId>,\n): InternalTranslationResource<TId> {\n  const r = resource as InternalTranslationResource<TId>;\n  if (r.$$type !== '@backstage/TranslationResource') {\n    throw new Error(`Invalid translation resource, bad type '${r.$$type}'`);\n  }\n  if (r.version !== 'v1') {\n    throw new Error(`Invalid translation resource, bad version '${r.version}'`);\n  }\n\n  return r;\n}\n\n/** @alpha */\nexport interface TranslationResourceOptions<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default:\n        | TranslationMessages<TId>\n        | { [key in keyof TMessages]: string | null };\n    }>;\n  },\n> {\n  ref: TranslationRef<TId, TMessages>;\n\n  translations: TTranslations;\n}\n\n/** @alpha */\nexport function createTranslationResource<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TTranslations extends {\n    [language in string]: () => Promise<{\n      default:\n        | TranslationMessages<TId>\n        | { [key in keyof TMessages]: string | null };\n    }>;\n  },\n>(\n  options: TranslationResourceOptions<TId, TMessages, TTranslations>,\n): TranslationResource<TId> {\n  return {\n    $$type: '@backstage/TranslationResource',\n    version: 'v1',\n    id: options.ref.id,\n    resources: Object.entries(options.translations).map(\n      ([language, loader]) => ({\n        language,\n        loader: () =>\n          loader().then(m => {\n            const value = m.default;\n            return {\n              messages:\n                value?.$$type === '@backstage/TranslationMessages'\n                  ? value.messages\n                  : value,\n            };\n          }),\n      }),\n    ),\n  } as InternalTranslationResource<TId>;\n}\n"],"names":[],"mappings":"AA2CO,SAAS,8BACd,QACkC,EAAA;AAClC,EAAA,MAAM,CAAI,GAAA,QAAA;AACV,EAAI,IAAA,CAAA,CAAE,WAAW,gCAAkC,EAAA;AACjD,IAAA,MAAM,IAAI,KAAA,CAAM,CAA2C,wCAAA,EAAA,CAAA,CAAE,MAAM,CAAG,CAAA,CAAA,CAAA;AAAA;AAExE,EAAI,IAAA,CAAA,CAAE,YAAY,IAAM,EAAA;AACtB,IAAA,MAAM,IAAI,KAAA,CAAM,CAA8C,2CAAA,EAAA,CAAA,CAAE,OAAO,CAAG,CAAA,CAAA,CAAA;AAAA;AAG5E,EAAO,OAAA,CAAA;AACT;;;;"}