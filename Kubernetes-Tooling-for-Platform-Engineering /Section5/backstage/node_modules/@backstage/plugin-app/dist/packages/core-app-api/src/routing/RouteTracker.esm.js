import React, { useEffect } from 'react';
import { useLocation, matchRoutes } from 'react-router-dom';
import { AnalyticsContext, useAnalytics } from '@backstage/core-plugin-api';

const getExtensionContext = (pathname, routes) => {
  try {
    const matches = matchRoutes(routes, { pathname });
    const routeMatch = matches?.filter((match) => match?.route.routeRefs?.size > 0).pop();
    const routeObject = routeMatch?.route;
    if (!routeObject) {
      return void 0;
    }
    if (routeObject.path === "" && pathname !== "/") {
      return void 0;
    }
    let routeRef;
    if (routeObject.routeRefs.size === 1) {
      routeRef = routeObject.routeRefs.values().next().value;
    }
    let plugin;
    if (routeObject.plugins.size === 1) {
      plugin = routeObject.plugins.values().next().value;
    }
    const params = Object.entries(
      routeMatch?.params || {}
    ).reduce((acc, [key, value]) => {
      if (value !== void 0 && key !== "*") {
        acc[key] = value;
      }
      return acc;
    }, {});
    return {
      extension: "App",
      pluginId: plugin?.getId() || "root",
      ...routeRef ? { routeRef: routeRef.id } : {},
      _routeNodeType: routeObject.element,
      params
    };
  } catch {
    return void 0;
  }
};
const TrackNavigation = ({
  pathname,
  search,
  hash,
  attributes
}) => {
  const analytics = useAnalytics();
  useEffect(() => {
    analytics.captureEvent("navigate", `${pathname}${search}${hash}`, {
      attributes
    });
  }, [analytics, pathname, search, hash, attributes]);
  return null;
};
const RouteTracker = ({
  routeObjects
}) => {
  const { pathname, search, hash } = useLocation();
  const { params, ...attributes } = getExtensionContext(
    pathname,
    routeObjects
  ) || { params: {} };
  return /* @__PURE__ */ React.createElement(AnalyticsContext, { attributes }, /* @__PURE__ */ React.createElement(
    TrackNavigation,
    {
      pathname,
      search,
      hash,
      attributes: params
    }
  ));
};

export { RouteTracker };
//# sourceMappingURL=RouteTracker.esm.js.map
