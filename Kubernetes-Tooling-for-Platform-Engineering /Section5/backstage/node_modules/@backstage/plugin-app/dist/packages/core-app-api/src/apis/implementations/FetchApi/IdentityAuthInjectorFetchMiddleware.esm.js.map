{"version":3,"file":"IdentityAuthInjectorFetchMiddleware.esm.js","sources":["../../../../../../../../../packages/core-app-api/src/apis/implementations/FetchApi/IdentityAuthInjectorFetchMiddleware.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { IdentityApi } from '@backstage/core-plugin-api';\nimport { FetchMiddleware } from './types';\n\n/**\n * A fetch middleware, which injects a Backstage token header when the user is\n * signed in.\n */\nexport class IdentityAuthInjectorFetchMiddleware implements FetchMiddleware {\n  static create(options: {\n    identityApi: IdentityApi;\n    config?: Config;\n    urlPrefixAllowlist?: string[];\n    allowUrl?: (url: string) => boolean;\n    header?: {\n      name: string;\n      value: (backstageToken: string) => string;\n    };\n  }): IdentityAuthInjectorFetchMiddleware {\n    const matcher = buildMatcher(options);\n    const headerName = options.header?.name || 'authorization';\n    const headerValue = options.header?.value || (token => `Bearer ${token}`);\n\n    return new IdentityAuthInjectorFetchMiddleware(\n      options.identityApi,\n      matcher,\n      headerName,\n      headerValue,\n    );\n  }\n\n  constructor(\n    public readonly identityApi: IdentityApi,\n    public readonly allowUrl: (url: string) => boolean,\n    public readonly headerName: string,\n    public readonly headerValue: (pluginId: string) => string,\n  ) {}\n\n  apply(next: typeof fetch): typeof fetch {\n    return async (input, init) => {\n      // Skip this middleware if the header already exists, or if the URL\n      // doesn't match any of the allowlist items, or if there was no token.\n      // NOTE(freben): The \"as any\" casts here and below are because of subtle\n      // undici type differences that happened in a node types bump. Those are\n      // immaterial to the code at hand at runtime, as the global fetch and\n      // Request are always taken from the same place.\n      const request = new Request(input as any, init);\n      const { token } = await this.identityApi.getCredentials();\n      if (\n        request.headers.get(this.headerName) ||\n        typeof token !== 'string' ||\n        !token ||\n        !this.allowUrl(request.url)\n      ) {\n        return next(input as any, init);\n      }\n\n      request.headers.set(this.headerName, this.headerValue(token));\n      return next(request);\n    };\n  }\n}\n\nfunction buildMatcher(options: {\n  config?: Config;\n  urlPrefixAllowlist?: string[];\n  allowUrl?: (url: string) => boolean;\n}): (url: string) => boolean {\n  if (options.allowUrl) {\n    return options.allowUrl;\n  } else if (options.urlPrefixAllowlist) {\n    return buildPrefixMatcher(options.urlPrefixAllowlist);\n  } else if (options.config) {\n    return buildPrefixMatcher([options.config.getString('backend.baseUrl')]);\n  }\n  return () => false;\n}\n\nfunction buildPrefixMatcher(prefixes: string[]): (url: string) => boolean {\n  const trimmedPrefixes = prefixes.map(prefix => prefix.replace(/\\/$/, ''));\n  return url =>\n    trimmedPrefixes.some(\n      prefix => url === prefix || url.startsWith(`${prefix}/`),\n    );\n}\n"],"names":[],"mappings":"AAwBO,MAAM,mCAA+D,CAAA;AAAA,EAuB1E,WACkB,CAAA,WAAA,EACA,QACA,EAAA,UAAA,EACA,WAChB,EAAA;AAJgB,IAAA,IAAA,CAAA,WAAA,GAAA,WAAA;AACA,IAAA,IAAA,CAAA,QAAA,GAAA,QAAA;AACA,IAAA,IAAA,CAAA,UAAA,GAAA,UAAA;AACA,IAAA,IAAA,CAAA,WAAA,GAAA,WAAA;AAAA;AACf,EA3BH,OAAO,OAAO,OAS0B,EAAA;AACtC,IAAM,MAAA,OAAA,GAAU,aAAa,OAAO,CAAA;AACpC,IAAM,MAAA,UAAA,GAAa,OAAQ,CAAA,MAAA,EAAQ,IAAQ,IAAA,eAAA;AAC3C,IAAA,MAAM,cAAc,OAAQ,CAAA,MAAA,EAAQ,KAAU,KAAA,CAAA,KAAA,KAAS,UAAU,KAAK,CAAA,CAAA,CAAA;AAEtE,IAAA,OAAO,IAAI,mCAAA;AAAA,MACT,OAAQ,CAAA,WAAA;AAAA,MACR,OAAA;AAAA,MACA,UAAA;AAAA,MACA;AAAA,KACF;AAAA;AACF,EASA,MAAM,IAAkC,EAAA;AACtC,IAAO,OAAA,OAAO,OAAO,IAAS,KAAA;AAO5B,MAAA,MAAM,OAAU,GAAA,IAAI,OAAQ,CAAA,KAAA,EAAc,IAAI,CAAA;AAC9C,MAAA,MAAM,EAAE,KAAM,EAAA,GAAI,MAAM,IAAA,CAAK,YAAY,cAAe,EAAA;AACxD,MAAA,IACE,QAAQ,OAAQ,CAAA,GAAA,CAAI,IAAK,CAAA,UAAU,KACnC,OAAO,KAAA,KAAU,QACjB,IAAA,CAAC,SACD,CAAC,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,GAAG,CAC1B,EAAA;AACA,QAAO,OAAA,IAAA,CAAK,OAAc,IAAI,CAAA;AAAA;AAGhC,MAAA,OAAA,CAAQ,QAAQ,GAAI,CAAA,IAAA,CAAK,YAAY,IAAK,CAAA,WAAA,CAAY,KAAK,CAAC,CAAA;AAC5D,MAAA,OAAO,KAAK,OAAO,CAAA;AAAA,KACrB;AAAA;AAEJ;AAEA,SAAS,aAAa,OAIO,EAAA;AAC3B,EAAA,IAAI,QAAQ,QAAU,EAAA;AACpB,IAAA,OAAO,OAAQ,CAAA,QAAA;AAAA,GACjB,MAAA,IAAW,QAAQ,kBAAoB,EAAA;AACrC,IAAO,OAAA,kBAAA,CAAmB,QAAQ,kBAAkB,CAAA;AAAA,GACtD,MAAA,IAAW,QAAQ,MAAQ,EAAA;AACzB,IAAA,OAAO,mBAAmB,CAAC,OAAA,CAAQ,OAAO,SAAU,CAAA,iBAAiB,CAAC,CAAC,CAAA;AAAA;AAEzE,EAAA,OAAO,MAAM,KAAA;AACf;AAEA,SAAS,mBAAmB,QAA8C,EAAA;AACxE,EAAM,MAAA,eAAA,GAAkB,SAAS,GAAI,CAAA,CAAA,MAAA,KAAU,OAAO,OAAQ,CAAA,KAAA,EAAO,EAAE,CAAC,CAAA;AACxE,EAAA,OAAO,SACL,eAAgB,CAAA,IAAA;AAAA,IACd,YAAU,GAAQ,KAAA,MAAA,IAAU,IAAI,UAAW,CAAA,CAAA,EAAG,MAAM,CAAG,CAAA,CAAA;AAAA,GACzD;AACJ;;;;"}