import React, { useMemo } from 'react';
import { useRoutes } from 'react-router-dom';
import { attachComponentData, useApp, useElementFilter } from '@backstage/core-plugin-api';
import { isReactRouterBeta } from '../app/isReactRouterBeta.esm.js';

let warned = false;
const FlatRoutes = (props) => {
  const app = useApp();
  const { NotFoundErrorPage } = app.getComponents();
  const isBeta = useMemo(() => isReactRouterBeta(), []);
  const routes = useElementFilter(
    props.children,
    (elements) => elements.getElements().flatMap((child) => {
      let path = child.props.path;
      if (path === "") {
        return [];
      }
      path = path?.replace(/\/\*$/, "") ?? "/";
      let element = isBeta ? child : child.props.element;
      if (!isBeta && !element) {
        element = child;
        if (!warned && process.env.NODE_ENV !== "test") {
          console.warn(
            "DEPRECATION WARNING: All elements within <FlatRoutes> must be of type <Route> with an element prop. Existing usages of <Navigate key=[path] to=[to] /> should be replaced with <Route path=[path] element={<Navigate to=[to] />} />."
          );
          warned = true;
        }
      }
      return [
        {
          // Each route matches any sub route, except for the explicit root path
          path,
          element,
          children: child.props.children ? [
            // These are the children of each route, which we all add in under a catch-all
            // subroute in order to make them available to `useOutlet`
            {
              path: path === "/" ? "/" : "*",
              // The root path must require an exact match
              element: child.props.children
            }
          ] : void 0
        }
      ];
    }).sort((a, b) => b.path.localeCompare(a.path)).map((obj) => ({ ...obj, path: obj.path === "/" ? "/" : `${obj.path}/*` }))
  );
  const withNotFound = [
    ...routes,
    {
      path: "*",
      element: /* @__PURE__ */ React.createElement(NotFoundErrorPage, null)
    }
  ];
  return useRoutes(withNotFound);
};
attachComponentData(FlatRoutes, "core.type", "FlatRoutes");

export { FlatRoutes };
//# sourceMappingURL=FlatRoutes.esm.js.map
