'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');

exports.bitbucketSignInResolvers = void 0;
((bitbucketSignInResolvers2) => {
  bitbucketSignInResolvers2.userIdMatchingUserEntityAnnotation = pluginAuthNode.createSignInResolverFactory(
    {
      create() {
        return async (info, ctx) => {
          const { result } = info;
          const id = result.fullProfile.id;
          if (!id) {
            throw new Error("Bitbucket user profile does not contain an ID");
          }
          return ctx.signInWithCatalogUser({
            annotations: {
              "bitbucket.org/user-id": id
            }
          });
        };
      }
    }
  );
  bitbucketSignInResolvers2.usernameMatchingUserEntityAnnotation = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const { result } = info;
        const username = result.fullProfile.username;
        if (!username) {
          throw new Error(
            "Bitbucket user profile does not contain a Username"
          );
        }
        return ctx.signInWithCatalogUser({
          annotations: {
            "bitbucket.org/username": username
          }
        });
      };
    }
  });
})(exports.bitbucketSignInResolvers || (exports.bitbucketSignInResolvers = {}));
//# sourceMappingURL=resolvers.cjs.js.map
