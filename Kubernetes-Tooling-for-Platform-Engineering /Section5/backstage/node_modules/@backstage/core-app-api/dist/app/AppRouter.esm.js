import React, { useContext, useState } from 'react';
import { attachComponentData, useApp, useApi, configApiRef } from '@backstage/core-plugin-api';
import { InternalAppContext } from './InternalAppContext.esm.js';
import { isReactRouterBeta } from './isReactRouterBeta.esm.js';
import { RouteTracker } from '../routing/RouteTracker.esm.js';
import { Routes, Route } from 'react-router-dom';

function getBasePath(configApi) {
  if (!isReactRouterBeta()) {
    return "";
  }
  return readBasePath(configApi);
}
function readBasePath(configApi) {
  let { pathname } = new URL(
    configApi.getOptionalString("app.baseUrl") ?? "/",
    "http://sample.dev"
    // baseUrl can be specified as just a path
  );
  pathname = pathname.replace(/\/*$/, "");
  return pathname;
}
function SignInPageWrapper({
  component: Component,
  appIdentityProxy,
  children
}) {
  const [identityApi, setIdentityApi] = useState();
  const configApi = useApi(configApiRef);
  const basePath = readBasePath(configApi);
  if (!identityApi) {
    return /* @__PURE__ */ React.createElement(Component, { onSignInSuccess: setIdentityApi });
  }
  appIdentityProxy.setTarget(identityApi, {
    signOutTargetUrl: basePath || "/"
  });
  return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
}
function AppRouter(props) {
  const { Router: RouterComponent, SignInPage: SignInPageComponent } = useApp().getComponents();
  const configApi = useApi(configApiRef);
  const basePath = readBasePath(configApi);
  const mountPath = `${basePath}/*`;
  const internalAppContext = useContext(InternalAppContext);
  if (!internalAppContext) {
    throw new Error("AppRouter must be rendered within the AppProvider");
  }
  const { routeObjects, appIdentityProxy } = internalAppContext;
  if (!SignInPageComponent) {
    appIdentityProxy.setTarget(
      {
        getUserId: () => "guest",
        getIdToken: async () => void 0,
        getProfile: () => ({
          email: "guest@example.com",
          displayName: "Guest"
        }),
        getProfileInfo: async () => ({
          email: "guest@example.com",
          displayName: "Guest"
        }),
        getBackstageIdentity: async () => ({
          type: "user",
          userEntityRef: "user:default/guest",
          ownershipEntityRefs: ["user:default/guest"]
        }),
        getCredentials: async () => ({}),
        signOut: async () => {
        }
      },
      { signOutTargetUrl: basePath || "/" }
    );
    if (isReactRouterBeta()) {
      return /* @__PURE__ */ React.createElement(RouterComponent, null, /* @__PURE__ */ React.createElement(RouteTracker, { routeObjects }), /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(Route, { path: mountPath, element: /* @__PURE__ */ React.createElement(React.Fragment, null, props.children) })));
    }
    return /* @__PURE__ */ React.createElement(RouterComponent, { basename: basePath }, /* @__PURE__ */ React.createElement(RouteTracker, { routeObjects }), props.children);
  }
  if (isReactRouterBeta()) {
    return /* @__PURE__ */ React.createElement(RouterComponent, null, /* @__PURE__ */ React.createElement(RouteTracker, { routeObjects }), /* @__PURE__ */ React.createElement(
      SignInPageWrapper,
      {
        component: SignInPageComponent,
        appIdentityProxy
      },
      /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(Route, { path: mountPath, element: /* @__PURE__ */ React.createElement(React.Fragment, null, props.children) }))
    ));
  }
  return /* @__PURE__ */ React.createElement(RouterComponent, { basename: basePath }, /* @__PURE__ */ React.createElement(RouteTracker, { routeObjects }), /* @__PURE__ */ React.createElement(
    SignInPageWrapper,
    {
      component: SignInPageComponent,
      appIdentityProxy
    },
    props.children
  ));
}
attachComponentData(AppRouter, "core.type", "AppRouter");

export { AppRouter, getBasePath };
//# sourceMappingURL=AppRouter.esm.js.map
