import { DirectAuthConnector } from '../../../../lib/AuthConnector/DirectAuthConnector.esm.js';
import 'zen-observable';
import '@backstage/core-plugin-api';
import { StaticAuthSessionManager } from '../../../../lib/AuthSessionManager/StaticAuthSessionManager.esm.js';
import { AuthSessionStore } from '../../../../lib/AuthSessionManager/AuthSessionStore.esm.js';
import { samlSessionSchema } from './types.esm.js';

const DEFAULT_PROVIDER = {
  id: "saml",
  title: "SAML",
  icon: () => null
};
class SamlAuth {
  constructor(sessionManager) {
    this.sessionManager = sessionManager;
  }
  static create(options) {
    const {
      discoveryApi,
      environment = "development",
      provider = DEFAULT_PROVIDER
    } = options;
    const connector = new DirectAuthConnector({
      discoveryApi,
      environment,
      provider
    });
    const sessionManager = new StaticAuthSessionManager({
      connector
    });
    const authSessionStore = new AuthSessionStore({
      manager: sessionManager,
      storageKey: `${provider.id}Session`,
      schema: samlSessionSchema
    });
    return new SamlAuth(authSessionStore);
  }
  sessionState$() {
    return this.sessionManager.sessionState$();
  }
  async signIn() {
    await this.getBackstageIdentity({});
  }
  async signOut() {
    await this.sessionManager.removeSession();
  }
  async getBackstageIdentity(options = {}) {
    const session = await this.sessionManager.getSession(options);
    return session?.backstageIdentity;
  }
  async getProfile(options = {}) {
    const session = await this.sessionManager.getSession(options);
    return session?.profile;
  }
}

export { SamlAuth as default };
//# sourceMappingURL=SamlAuth.esm.js.map
