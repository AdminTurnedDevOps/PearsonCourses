import OAuth2 from '../oauth2/OAuth2.esm.js';

const DEFAULT_PROVIDER = {
  id: "microsoft",
  title: "Microsoft",
  icon: () => null
};
class MicrosoftAuth {
  oauth2;
  configApi;
  environment;
  provider;
  oauthRequestApi;
  discoveryApi;
  scopeTransform;
  static MicrosoftGraphID = "00000003-0000-0000-c000-000000000000";
  static create(options) {
    return new MicrosoftAuth(options);
  }
  constructor(options) {
    const {
      configApi,
      environment = "development",
      provider = DEFAULT_PROVIDER,
      oauthRequestApi,
      discoveryApi,
      defaultScopes = [
        "openid",
        "offline_access",
        "profile",
        "email",
        "User.Read"
      ],
      scopeTransform = (scopes) => scopes.concat("offline_access")
    } = options;
    this.configApi = configApi;
    this.environment = environment;
    this.provider = provider;
    this.oauthRequestApi = oauthRequestApi;
    this.discoveryApi = discoveryApi;
    this.scopeTransform = scopeTransform;
    this.oauth2 = {
      [MicrosoftAuth.MicrosoftGraphID]: OAuth2.create({
        configApi: this.configApi,
        discoveryApi: this.discoveryApi,
        oauthRequestApi: this.oauthRequestApi,
        provider: this.provider,
        environment: this.environment,
        scopeTransform: this.scopeTransform,
        defaultScopes
      })
    };
  }
  microsoftGraph() {
    return this.oauth2[MicrosoftAuth.MicrosoftGraphID];
  }
  static resourceForScopes(scope) {
    const audiences = [
      ...new Set(
        scope.split(" ").map(MicrosoftAuth.resourceForScope).filter((aud) => aud !== "openid")
      )
    ];
    if (audiences.length > 1) {
      return Promise.reject(
        new Error(
          `Requested access token with scopes from multiple Azure resources: ${audiences.join(
            ", "
          )}. Access tokens can only have a single audience.`
        )
      );
    }
    const audience = audiences[0] ?? MicrosoftAuth.MicrosoftGraphID;
    return Promise.resolve(audience);
  }
  static resourceForScope(scope) {
    const groups = scope.match(/^(?<resourceURI>.*)\/(?<scp>[^\/]*)$/)?.groups;
    if (groups) {
      const { resourceURI } = groups;
      const aud = resourceURI.replace(/^api:\/\//, "");
      return aud;
    }
    switch (scope) {
      case "email":
      case "openid":
      case "offline_access":
      case "profile": {
        return "openid";
      }
      default:
        return MicrosoftAuth.MicrosoftGraphID;
    }
  }
  async getAccessToken(scope, options) {
    const aud = scope === void 0 ? MicrosoftAuth.MicrosoftGraphID : await MicrosoftAuth.resourceForScopes(
      Array.isArray(scope) ? scope.join(" ") : scope
    );
    if (!(aud in this.oauth2)) {
      this.oauth2[aud] = OAuth2.create({
        configApi: this.configApi,
        discoveryApi: this.discoveryApi,
        oauthRequestApi: this.oauthRequestApi,
        provider: this.provider,
        environment: this.environment,
        scopeTransform: this.scopeTransform
      });
    }
    return this.oauth2[aud].getAccessToken(scope, options);
  }
  getIdToken(options) {
    return this.microsoftGraph().getIdToken(options);
  }
  getProfile(options) {
    return this.microsoftGraph().getProfile(options);
  }
  getBackstageIdentity(options) {
    return this.microsoftGraph().getBackstageIdentity(options);
  }
  signIn() {
    return this.microsoftGraph().signIn();
  }
  signOut() {
    return this.microsoftGraph().signOut();
  }
  sessionState$() {
    return this.microsoftGraph().sessionState$();
  }
}

export { MicrosoftAuth as default };
//# sourceMappingURL=MicrosoftAuth.esm.js.map
