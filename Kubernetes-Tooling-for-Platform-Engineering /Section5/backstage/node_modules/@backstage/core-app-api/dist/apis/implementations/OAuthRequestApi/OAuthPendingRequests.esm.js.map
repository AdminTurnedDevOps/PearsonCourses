{"version":3,"file":"OAuthPendingRequests.esm.js","sources":["../../../../src/apis/implementations/OAuthRequestApi/OAuthPendingRequests.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from '@backstage/types';\nimport { BehaviorSubject } from '../../../lib/subjects';\n\ntype RequestQueueEntry<ResultType> = {\n  scopes: Set<string>;\n  resolve: (value: ResultType | PromiseLike<ResultType>) => void;\n  reject: (reason: Error) => void;\n};\n\nexport type PendingRequest<ResultType> = {\n  scopes: Set<string> | undefined;\n  resolve: (value: ResultType) => void;\n  reject: (reason: Error) => void;\n};\n\nexport function hasScopes(\n  searched: Set<string>,\n  searchFor: Set<string>,\n): boolean {\n  for (const scope of searchFor) {\n    if (!searched.has(scope)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function joinScopes(\n  scopes: Set<string>,\n  ...moreScopess: Set<string>[]\n): Set<string> {\n  const result = new Set(scopes);\n\n  for (const moreScopes of moreScopess) {\n    for (const scope of moreScopes) {\n      result.add(scope);\n    }\n  }\n\n  return result;\n}\n\n/**\n * The OAuthPendingRequests class is a utility for managing and observing\n * a stream of requests for oauth scopes for a single provider, and resolving\n * them correctly once requests are fulfilled.\n */\nexport class OAuthPendingRequests<ResultType> {\n  private requests: RequestQueueEntry<ResultType>[] = [];\n  private subject = new BehaviorSubject<PendingRequest<ResultType>>(\n    this.getCurrentPending(),\n  );\n\n  request(scopes: Set<string>): Promise<ResultType> {\n    return new Promise((resolve, reject) => {\n      this.requests.push({ scopes, resolve, reject });\n\n      this.subject.next(this.getCurrentPending());\n    });\n  }\n\n  resolve(scopes: Set<string>, result: ResultType): void {\n    this.requests = this.requests.filter(request => {\n      if (hasScopes(scopes, request.scopes)) {\n        request.resolve(result);\n        return false;\n      }\n      return true;\n    });\n\n    this.subject.next(this.getCurrentPending());\n  }\n\n  reject(error: Error) {\n    this.requests.forEach(request => request.reject(error));\n    this.requests = [];\n\n    this.subject.next(this.getCurrentPending());\n  }\n\n  pending(): Observable<PendingRequest<ResultType>> {\n    return this.subject;\n  }\n\n  private getCurrentPending(): PendingRequest<ResultType> {\n    const currentScopes =\n      this.requests.length === 0\n        ? undefined\n        : this.requests\n            .slice(1)\n            .reduce(\n              (acc, current) => joinScopes(acc, current.scopes),\n              this.requests[0].scopes,\n            );\n\n    return {\n      scopes: currentScopes,\n      resolve: (value: ResultType) => {\n        if (currentScopes) {\n          this.resolve(currentScopes, value);\n        }\n      },\n      reject: (reason: Error) => {\n        if (currentScopes) {\n          this.reject(reason);\n        }\n      },\n    };\n  }\n}\n"],"names":[],"mappings":";;AA+BgB,SAAA,SAAA,CACd,UACA,SACS,EAAA;AACT,EAAA,KAAA,MAAW,SAAS,SAAW,EAAA;AAC7B,IAAA,IAAI,CAAC,QAAA,CAAS,GAAI,CAAA,KAAK,CAAG,EAAA;AACxB,MAAO,OAAA,KAAA;AAAA;AACT;AAEF,EAAO,OAAA,IAAA;AACT;AAEgB,SAAA,UAAA,CACd,WACG,WACU,EAAA;AACb,EAAM,MAAA,MAAA,GAAS,IAAI,GAAA,CAAI,MAAM,CAAA;AAE7B,EAAA,KAAA,MAAW,cAAc,WAAa,EAAA;AACpC,IAAA,KAAA,MAAW,SAAS,UAAY,EAAA;AAC9B,MAAA,MAAA,CAAO,IAAI,KAAK,CAAA;AAAA;AAClB;AAGF,EAAO,OAAA,MAAA;AACT;AAOO,MAAM,oBAAiC,CAAA;AAAA,EACpC,WAA4C,EAAC;AAAA,EAC7C,UAAU,IAAI,eAAA;AAAA,IACpB,KAAK,iBAAkB;AAAA,GACzB;AAAA,EAEA,QAAQ,MAA0C,EAAA;AAChD,IAAA,OAAO,IAAI,OAAA,CAAQ,CAAC,OAAA,EAAS,MAAW,KAAA;AACtC,MAAA,IAAA,CAAK,SAAS,IAAK,CAAA,EAAE,MAAQ,EAAA,OAAA,EAAS,QAAQ,CAAA;AAE9C,MAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,IAAK,CAAA,iBAAA,EAAmB,CAAA;AAAA,KAC3C,CAAA;AAAA;AACH,EAEA,OAAA,CAAQ,QAAqB,MAA0B,EAAA;AACrD,IAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,CAAW,OAAA,KAAA;AAC9C,MAAA,IAAI,SAAU,CAAA,MAAA,EAAQ,OAAQ,CAAA,MAAM,CAAG,EAAA;AACrC,QAAA,OAAA,CAAQ,QAAQ,MAAM,CAAA;AACtB,QAAO,OAAA,KAAA;AAAA;AAET,MAAO,OAAA,IAAA;AAAA,KACR,CAAA;AAED,IAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,IAAK,CAAA,iBAAA,EAAmB,CAAA;AAAA;AAC5C,EAEA,OAAO,KAAc,EAAA;AACnB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,CAAA,OAAA,KAAW,OAAQ,CAAA,MAAA,CAAO,KAAK,CAAC,CAAA;AACtD,IAAA,IAAA,CAAK,WAAW,EAAC;AAEjB,IAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,IAAK,CAAA,iBAAA,EAAmB,CAAA;AAAA;AAC5C,EAEA,OAAkD,GAAA;AAChD,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd,EAEQ,iBAAgD,GAAA;AACtD,IAAM,MAAA,aAAA,GACJ,IAAK,CAAA,QAAA,CAAS,MAAW,KAAA,CAAA,GACrB,SACA,IAAK,CAAA,QAAA,CACF,KAAM,CAAA,CAAC,CACP,CAAA,MAAA;AAAA,MACC,CAAC,GAAK,EAAA,OAAA,KAAY,UAAW,CAAA,GAAA,EAAK,QAAQ,MAAM,CAAA;AAAA,MAChD,IAAA,CAAK,QAAS,CAAA,CAAC,CAAE,CAAA;AAAA,KACnB;AAER,IAAO,OAAA;AAAA,MACL,MAAQ,EAAA,aAAA;AAAA,MACR,OAAA,EAAS,CAAC,KAAsB,KAAA;AAC9B,QAAA,IAAI,aAAe,EAAA;AACjB,UAAK,IAAA,CAAA,OAAA,CAAQ,eAAe,KAAK,CAAA;AAAA;AACnC,OACF;AAAA,MACA,MAAA,EAAQ,CAAC,MAAkB,KAAA;AACzB,QAAA,IAAI,aAAe,EAAA;AACjB,UAAA,IAAA,CAAK,OAAO,MAAM,CAAA;AAAA;AACpB;AACF,KACF;AAAA;AAEJ;;;;"}