{"version":3,"file":"OktaAuth.esm.js","sources":["../../../../../src/apis/implementations/auth/okta/OktaAuth.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { oktaAuthApiRef } from '@backstage/core-plugin-api';\nimport { OAuth2 } from '../oauth2';\nimport { OAuthApiCreateOptions } from '../types';\n\nconst DEFAULT_PROVIDER = {\n  id: 'okta',\n  title: 'Okta',\n  icon: () => null,\n};\n\nconst OKTA_OIDC_SCOPES: Set<String> = new Set([\n  'openid',\n  'profile',\n  'email',\n  'phone',\n  'address',\n  'groups',\n  'offline_access',\n]);\n\nconst OKTA_SCOPE_PREFIX: string = 'okta.';\n\n/**\n * Implements the OAuth flow to Okta products.\n *\n * @public\n */\nexport default class OktaAuth {\n  static create(options: OAuthApiCreateOptions): typeof oktaAuthApiRef.T {\n    const {\n      configApi,\n      discoveryApi,\n      environment = 'development',\n      provider = DEFAULT_PROVIDER,\n      oauthRequestApi,\n      defaultScopes = ['openid', 'email', 'profile', 'offline_access'],\n    } = options;\n\n    return OAuth2.create({\n      configApi,\n      discoveryApi,\n      oauthRequestApi,\n      provider,\n      environment,\n      defaultScopes,\n      scopeTransform(scopes) {\n        return scopes.map(scope => {\n          if (OKTA_OIDC_SCOPES.has(scope)) {\n            return scope;\n          }\n\n          if (scope.startsWith(OKTA_SCOPE_PREFIX)) {\n            return scope;\n          }\n\n          return `${OKTA_SCOPE_PREFIX}${scope}`;\n        });\n      },\n    });\n  }\n}\n"],"names":[],"mappings":";;AAoBA,MAAM,gBAAmB,GAAA;AAAA,EACvB,EAAI,EAAA,MAAA;AAAA,EACJ,KAAO,EAAA,MAAA;AAAA,EACP,MAAM,MAAM;AACd,CAAA;AAEA,MAAM,gBAAA,uBAAoC,GAAI,CAAA;AAAA,EAC5C,QAAA;AAAA,EACA,SAAA;AAAA,EACA,OAAA;AAAA,EACA,OAAA;AAAA,EACA,SAAA;AAAA,EACA,QAAA;AAAA,EACA;AACF,CAAC,CAAA;AAED,MAAM,iBAA4B,GAAA,OAAA;AAOlC,MAAqB,QAAS,CAAA;AAAA,EAC5B,OAAO,OAAO,OAAyD,EAAA;AACrE,IAAM,MAAA;AAAA,MACJ,SAAA;AAAA,MACA,YAAA;AAAA,MACA,WAAc,GAAA,aAAA;AAAA,MACd,QAAW,GAAA,gBAAA;AAAA,MACX,eAAA;AAAA,MACA,aAAgB,GAAA,CAAC,QAAU,EAAA,OAAA,EAAS,WAAW,gBAAgB;AAAA,KAC7D,GAAA,OAAA;AAEJ,IAAA,OAAO,OAAO,MAAO,CAAA;AAAA,MACnB,SAAA;AAAA,MACA,YAAA;AAAA,MACA,eAAA;AAAA,MACA,QAAA;AAAA,MACA,WAAA;AAAA,MACA,aAAA;AAAA,MACA,eAAe,MAAQ,EAAA;AACrB,QAAO,OAAA,MAAA,CAAO,IAAI,CAAS,KAAA,KAAA;AACzB,UAAI,IAAA,gBAAA,CAAiB,GAAI,CAAA,KAAK,CAAG,EAAA;AAC/B,YAAO,OAAA,KAAA;AAAA;AAGT,UAAI,IAAA,KAAA,CAAM,UAAW,CAAA,iBAAiB,CAAG,EAAA;AACvC,YAAO,OAAA,KAAA;AAAA;AAGT,UAAO,OAAA,CAAA,EAAG,iBAAiB,CAAA,EAAG,KAAK,CAAA,CAAA;AAAA,SACpC,CAAA;AAAA;AACH,KACD,CAAA;AAAA;AAEL;;;;"}