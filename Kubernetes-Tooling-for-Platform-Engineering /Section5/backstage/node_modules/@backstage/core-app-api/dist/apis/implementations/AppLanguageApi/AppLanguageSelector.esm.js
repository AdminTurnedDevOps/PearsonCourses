import { BehaviorSubject } from '../../../lib/subjects.esm.js';
import '@backstage/core-plugin-api';

const STORAGE_KEY = "language";
const DEFAULT_LANGUAGE = "en";
class AppLanguageSelector {
  static create(options) {
    const languages = options?.availableLanguages ?? [DEFAULT_LANGUAGE];
    if (languages.length !== new Set(languages).size) {
      throw new Error(
        `Supported languages may not contain duplicates, got '${languages.join(
          "', '"
        )}'`
      );
    }
    if (!languages.includes(DEFAULT_LANGUAGE)) {
      throw new Error(`Supported languages must include '${DEFAULT_LANGUAGE}'`);
    }
    const initialLanguage = options?.defaultLanguage ?? DEFAULT_LANGUAGE;
    if (!languages.includes(initialLanguage)) {
      throw new Error(
        `Initial language must be one of the supported languages, got '${initialLanguage}'`
      );
    }
    return new AppLanguageSelector(languages, initialLanguage);
  }
  static createWithStorage(options) {
    const selector = AppLanguageSelector.create(options);
    if (!window.localStorage) {
      return selector;
    }
    const storedLanguage = window.localStorage.getItem(STORAGE_KEY);
    const { languages } = selector.getAvailableLanguages();
    if (storedLanguage && languages.includes(storedLanguage)) {
      selector.setLanguage(storedLanguage);
    }
    selector.language$().subscribe(({ language }) => {
      if (language !== window.localStorage.getItem(STORAGE_KEY)) {
        window.localStorage.setItem(STORAGE_KEY, language);
      }
    });
    window.addEventListener("storage", (event) => {
      if (event.key === STORAGE_KEY) {
        const language = localStorage.getItem(STORAGE_KEY) ?? void 0;
        if (language) {
          selector.setLanguage(language);
        }
      }
    });
    return selector;
  }
  #languages;
  #language;
  #subject;
  constructor(languages, initialLanguage) {
    this.#languages = languages;
    this.#language = initialLanguage;
    this.#subject = new BehaviorSubject({
      language: this.#language
    });
  }
  getAvailableLanguages() {
    return { languages: this.#languages.slice() };
  }
  setLanguage(language) {
    const lng = language ?? DEFAULT_LANGUAGE;
    if (lng === this.#language) {
      return;
    }
    if (lng && !this.#languages.includes(lng)) {
      throw new Error(
        `Failed to change language to '${lng}', available languages are '${this.#languages.join(
          "', '"
        )}'`
      );
    }
    this.#language = lng;
    this.#subject.next({ language: lng });
  }
  getLanguage() {
    return { language: this.#language };
  }
  language$() {
    return this.#subject;
  }
}

export { AppLanguageSelector, DEFAULT_LANGUAGE };
//# sourceMappingURL=AppLanguageSelector.esm.js.map
