{"version":3,"file":"MicrosoftAuth.esm.js","sources":["../../../../../src/apis/implementations/auth/microsoft/MicrosoftAuth.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  microsoftAuthApiRef,\n  AuthRequestOptions,\n  AuthProviderInfo,\n  ConfigApi,\n  DiscoveryApi,\n  OAuthRequestApi,\n} from '@backstage/core-plugin-api';\nimport { OAuth2, OAuth2CreateOptions } from '../oauth2';\n\nconst DEFAULT_PROVIDER = {\n  id: 'microsoft',\n  title: 'Microsoft',\n  icon: () => null,\n};\n\n/**\n * Implements the OAuth flow to Microsoft products.\n *\n * @public\n */\nexport default class MicrosoftAuth {\n  private oauth2: { [aud: string]: OAuth2 };\n  private configApi: ConfigApi | undefined;\n  private environment: string;\n  private provider: AuthProviderInfo;\n  private oauthRequestApi: OAuthRequestApi;\n  private discoveryApi: DiscoveryApi;\n  private scopeTransform: (scopes: string[]) => string[];\n\n  private static MicrosoftGraphID = '00000003-0000-0000-c000-000000000000';\n\n  static create(options: OAuth2CreateOptions): typeof microsoftAuthApiRef.T {\n    return new MicrosoftAuth(options);\n  }\n  private constructor(options: OAuth2CreateOptions) {\n    const {\n      configApi,\n      environment = 'development',\n      provider = DEFAULT_PROVIDER,\n      oauthRequestApi,\n      discoveryApi,\n      defaultScopes = [\n        'openid',\n        'offline_access',\n        'profile',\n        'email',\n        'User.Read',\n      ],\n      scopeTransform = scopes => scopes.concat('offline_access'),\n    } = options;\n\n    this.configApi = configApi;\n    this.environment = environment;\n    this.provider = provider;\n    this.oauthRequestApi = oauthRequestApi;\n    this.discoveryApi = discoveryApi;\n    this.scopeTransform = scopeTransform;\n\n    this.oauth2 = {\n      [MicrosoftAuth.MicrosoftGraphID]: OAuth2.create({\n        configApi: this.configApi,\n        discoveryApi: this.discoveryApi,\n        oauthRequestApi: this.oauthRequestApi,\n        provider: this.provider,\n        environment: this.environment,\n        scopeTransform: this.scopeTransform,\n        defaultScopes,\n      }),\n    };\n  }\n\n  private microsoftGraph(): OAuth2 {\n    return this.oauth2[MicrosoftAuth.MicrosoftGraphID];\n  }\n\n  private static resourceForScopes(scope: string): Promise<string> {\n    const audiences = [\n      ...new Set(\n        scope\n          .split(' ')\n          .map(MicrosoftAuth.resourceForScope)\n          .filter(aud => aud !== 'openid'),\n      ),\n    ];\n\n    if (audiences.length > 1) {\n      return Promise.reject(\n        new Error(\n          `Requested access token with scopes from multiple Azure resources: ${audiences.join(\n            ', ',\n          )}. Access tokens can only have a single audience.`,\n        ),\n      );\n    }\n    const audience = audiences[0] ?? MicrosoftAuth.MicrosoftGraphID;\n    return Promise.resolve(audience);\n  }\n\n  private static resourceForScope(scope: string): string {\n    const groups = scope.match(/^(?<resourceURI>.*)\\/(?<scp>[^\\/]*)$/)?.groups;\n    if (groups) {\n      const { resourceURI } = groups;\n      const aud = resourceURI.replace(/^api:\\/\\//, '');\n      return aud;\n    }\n    switch (scope) {\n      case 'email':\n      case 'openid':\n      case 'offline_access':\n      case 'profile': {\n        return 'openid';\n      }\n      default:\n        return MicrosoftAuth.MicrosoftGraphID;\n    }\n  }\n\n  async getAccessToken(\n    scope?: string | string[],\n    options?: AuthRequestOptions,\n  ): Promise<string> {\n    const aud =\n      scope === undefined\n        ? MicrosoftAuth.MicrosoftGraphID\n        : await MicrosoftAuth.resourceForScopes(\n            Array.isArray(scope) ? scope.join(' ') : scope,\n          );\n    if (!(aud in this.oauth2)) {\n      this.oauth2[aud] = OAuth2.create({\n        configApi: this.configApi,\n        discoveryApi: this.discoveryApi,\n        oauthRequestApi: this.oauthRequestApi,\n        provider: this.provider,\n        environment: this.environment,\n        scopeTransform: this.scopeTransform,\n      });\n    }\n    return this.oauth2[aud].getAccessToken(scope, options);\n  }\n\n  getIdToken(options?: AuthRequestOptions) {\n    return this.microsoftGraph().getIdToken(options);\n  }\n\n  getProfile(options?: AuthRequestOptions) {\n    return this.microsoftGraph().getProfile(options);\n  }\n\n  getBackstageIdentity(options?: AuthRequestOptions) {\n    return this.microsoftGraph().getBackstageIdentity(options);\n  }\n\n  signIn() {\n    return this.microsoftGraph().signIn();\n  }\n\n  signOut() {\n    return this.microsoftGraph().signOut();\n  }\n\n  sessionState$() {\n    return this.microsoftGraph().sessionState$();\n  }\n}\n"],"names":[],"mappings":"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"}