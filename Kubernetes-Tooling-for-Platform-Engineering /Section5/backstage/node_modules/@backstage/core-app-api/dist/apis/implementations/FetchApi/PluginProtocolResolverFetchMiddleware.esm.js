function join(left, right) {
  if (!right || right === "/") {
    return left;
  }
  return `${left.replace(/\/$/, "")}/${right.replace(/^\//, "")}`;
}
class PluginProtocolResolverFetchMiddleware {
  constructor(discoveryApi) {
    this.discoveryApi = discoveryApi;
  }
  apply(next) {
    return async (input, init) => {
      const request = new Request(input, init);
      const prefix = "plugin://";
      if (!request.url.startsWith(prefix)) {
        return next(input, init);
      }
      const { hostname, pathname, search, hash, username, password } = new URL(
        `http://${request.url.substring(prefix.length)}`
      );
      let base = await this.discoveryApi.getBaseUrl(hostname);
      if (username || password) {
        const baseUrl = new URL(base);
        const authority = `${username}${password ? `:${password}` : ""}@`;
        base = `${baseUrl.protocol}//${authority}${baseUrl.host}${baseUrl.pathname}`;
      }
      const target = `${join(base, pathname)}${search}${hash}`;
      return next(
        target,
        typeof input === "string" || isUrl(input) ? init : input
      );
    };
  }
}
function isUrl(a) {
  return typeof a === "object" && a?.constructor === URL;
}

export { PluginProtocolResolverFetchMiddleware };
//# sourceMappingURL=PluginProtocolResolverFetchMiddleware.esm.js.map
