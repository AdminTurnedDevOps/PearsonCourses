{"version":3,"file":"FetchMiddlewares.esm.js","sources":["../../../../src/apis/implementations/FetchApi/FetchMiddlewares.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { DiscoveryApi, IdentityApi } from '@backstage/core-plugin-api';\nimport { IdentityAuthInjectorFetchMiddleware } from './IdentityAuthInjectorFetchMiddleware';\nimport { PluginProtocolResolverFetchMiddleware } from './PluginProtocolResolverFetchMiddleware';\nimport { FetchMiddleware } from './types';\n\n/**\n * A collection of common middlewares for the FetchApi.\n *\n * @public\n */\nexport class FetchMiddlewares {\n  /**\n   * Handles translation from `plugin://` URLs to concrete http(s) URLs based on\n   * the discovery API.\n   *\n   * @remarks\n   *\n   * If the request is for `plugin://catalog/entities?filter=x=y`, the discovery\n   * API will be queried for `'catalog'`. If it returned\n   * `https://backstage.example.net/api/catalog`, the resulting query would be\n   * `https://backstage.example.net/api/catalog/entities?filter=x=y`.\n   *\n   * If the incoming URL protocol was not `plugin`, the request is just passed\n   * through verbatim to the underlying implementation.\n   */\n  static resolvePluginProtocol(options: {\n    discoveryApi: DiscoveryApi;\n  }): FetchMiddleware {\n    return new PluginProtocolResolverFetchMiddleware(options.discoveryApi);\n  }\n\n  /**\n   * Injects a Backstage token header when the user is signed in.\n   *\n   * @remarks\n   *\n   * Per default, an `Authorization: Bearer <token>` is generated. This can be\n   * customized using the `header` option.\n   *\n   * The header injection only happens on allowlisted URLs. Per default, if the\n   * `config` option is passed in, the `backend.baseUrl` is allowlisted, unless\n   * the `urlPrefixAllowlist` or `allowUrl` options are passed in, in which case\n   * they take precedence. If you pass in neither config nor an\n   * allowlist/callback, the middleware will have no effect since effectively no\n   * request will match the (nonexistent) rules.\n   */\n  static injectIdentityAuth(options: {\n    identityApi: IdentityApi;\n    config?: Config;\n    urlPrefixAllowlist?: string[];\n    allowUrl?: (url: string) => boolean;\n    header?: {\n      name: string;\n      value: (backstageToken: string) => string;\n    };\n  }): FetchMiddleware {\n    return IdentityAuthInjectorFetchMiddleware.create(options);\n  }\n\n  private constructor() {}\n}\n"],"names":[],"mappings":";;;AA2BO,MAAM,gBAAiB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAe5B,OAAO,sBAAsB,OAET,EAAA;AAClB,IAAO,OAAA,IAAI,qCAAsC,CAAA,OAAA,CAAQ,YAAY,CAAA;AAAA;AACvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,OAAO,mBAAmB,OASN,EAAA;AAClB,IAAO,OAAA,mCAAA,CAAoC,OAAO,OAAO,CAAA;AAAA;AAC3D,EAEQ,WAAc,GAAA;AAAA;AACxB;;;;"}