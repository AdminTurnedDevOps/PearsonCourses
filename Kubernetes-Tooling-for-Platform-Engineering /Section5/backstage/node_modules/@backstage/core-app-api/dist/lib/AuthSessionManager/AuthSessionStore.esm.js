import { SessionScopeHelper } from './common.esm.js';

class AuthSessionStore {
  manager;
  storageKey;
  schema;
  sessionShouldRefreshFunc;
  helper;
  constructor(options) {
    const {
      manager,
      storageKey,
      schema,
      sessionScopes,
      sessionShouldRefresh = () => false
    } = options;
    this.manager = manager;
    this.storageKey = storageKey;
    this.schema = schema;
    this.sessionShouldRefreshFunc = sessionShouldRefresh;
    this.helper = new SessionScopeHelper({
      sessionScopes,
      defaultScopes: /* @__PURE__ */ new Set()
    });
  }
  setSession(session) {
    this.manager.setSession(session);
    this.saveSession(session);
  }
  async getSession(options) {
    const { scopes } = options;
    const session = this.loadSession();
    if (this.helper.sessionExistsAndHasScope(session, scopes)) {
      const shouldRefresh = this.sessionShouldRefreshFunc(session);
      if (!shouldRefresh) {
        this.manager.setSession(session);
        return session;
      }
    }
    const newSession = await this.manager.getSession(options);
    this.saveSession(newSession);
    return newSession;
  }
  async removeSession() {
    localStorage.removeItem(this.storageKey);
    await this.manager.removeSession();
  }
  sessionState$() {
    return this.manager.sessionState$();
  }
  loadSession() {
    try {
      const sessionJson = localStorage.getItem(this.storageKey);
      if (sessionJson) {
        const session = JSON.parse(sessionJson, (_key, value) => {
          if (value?.__type === "Set") {
            return new Set(value.__value);
          }
          return value;
        });
        try {
          return this.schema.parse(session);
        } catch (e) {
          console.log(
            `Failed to load session from local storage because it did not conform to the expected schema, ${e}`
          );
          throw e;
        }
      }
      return void 0;
    } catch (error) {
      localStorage.removeItem(this.storageKey);
      return void 0;
    }
  }
  saveSession(session) {
    if (session === void 0) {
      localStorage.removeItem(this.storageKey);
      return;
    }
    try {
      this.schema.parse(session);
    } catch (e) {
      console.warn(
        `Failed to save session to local storage because it did not conform to the expected schema, ${e}`
      );
      return;
    }
    localStorage.setItem(
      this.storageKey,
      JSON.stringify(session, (_key, value) => {
        if (value instanceof Set) {
          return {
            __type: "Set",
            __value: Array.from(value)
          };
        }
        return value;
      })
    );
  }
}

export { AuthSessionStore };
//# sourceMappingURL=AuthSessionStore.esm.js.map
