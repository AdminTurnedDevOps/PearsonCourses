{"version":3,"file":"subjects.esm.js","sources":["../../src/lib/subjects.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Observable } from '@backstage/types';\nimport ObservableImpl from 'zen-observable';\n\n// TODO(Rugvip): These are stopgap and probably incomplete implementations of subjects.\n// If we add a more complete Observables library they should be replaced.\n\n/**\n * A basic implementation of ReactiveX publish subjects.\n *\n * A subject is a convenient way to create an observable when you want\n * to fan out a single value to all subscribers.\n *\n * See http://reactivex.io/documentation/subject.html\n */\nexport class PublishSubject<T>\n  implements Observable<T>, ZenObservable.SubscriptionObserver<T>\n{\n  private isClosed = false;\n  private terminatingError?: Error;\n\n  private readonly observable = new ObservableImpl<T>(subscriber => {\n    if (this.isClosed) {\n      if (this.terminatingError) {\n        subscriber.error(this.terminatingError);\n      } else {\n        subscriber.complete();\n      }\n      return () => {};\n    }\n\n    this.subscribers.add(subscriber);\n    return () => {\n      this.subscribers.delete(subscriber);\n    };\n  });\n\n  private readonly subscribers = new Set<\n    ZenObservable.SubscriptionObserver<T>\n  >();\n\n  [Symbol.observable]() {\n    return this;\n  }\n\n  get closed() {\n    return this.isClosed;\n  }\n\n  next(value: T) {\n    if (this.isClosed) {\n      throw new Error('PublishSubject is closed');\n    }\n    this.subscribers.forEach(subscriber => subscriber.next(value));\n  }\n\n  error(error: Error) {\n    if (this.isClosed) {\n      throw new Error('PublishSubject is closed');\n    }\n    this.isClosed = true;\n    this.terminatingError = error;\n    this.subscribers.forEach(subscriber => subscriber.error(error));\n  }\n\n  complete() {\n    if (this.isClosed) {\n      throw new Error('PublishSubject is closed');\n    }\n    this.isClosed = true;\n    this.subscribers.forEach(subscriber => subscriber.complete());\n  }\n\n  subscribe(observer: ZenObservable.Observer<T>): ZenObservable.Subscription;\n  subscribe(\n    onNext: (value: T) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription;\n  subscribe(\n    onNext: ZenObservable.Observer<T> | ((value: T) => void),\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription {\n    const observer =\n      typeof onNext === 'function'\n        ? {\n            next: onNext,\n            error: onError,\n            complete: onComplete,\n          }\n        : onNext;\n\n    return this.observable.subscribe(observer);\n  }\n}\n\n/**\n * A basic implementation of ReactiveX behavior subjects.\n *\n * A subject is a convenient way to create an observable when you want\n * to fan out a single value to all subscribers.\n *\n * The BehaviorSubject will emit the most recently emitted value or error\n * whenever a new observer subscribes to the subject.\n *\n * See http://reactivex.io/documentation/subject.html\n */\n\nexport class BehaviorSubject<T>\n  implements Observable<T>, ZenObservable.SubscriptionObserver<T>\n{\n  private isClosed: boolean;\n  private currentValue: T;\n  private terminatingError: Error | undefined;\n  private readonly observable: Observable<T>;\n\n  constructor(value: T) {\n    this.isClosed = false;\n    this.currentValue = value;\n    this.terminatingError = undefined;\n    this.observable = new ObservableImpl<T>(subscriber => {\n      if (this.isClosed) {\n        if (this.terminatingError) {\n          subscriber.error(this.terminatingError);\n        } else {\n          subscriber.complete();\n        }\n        return () => {};\n      }\n\n      subscriber.next(this.currentValue);\n\n      this.subscribers.add(subscriber);\n      return () => {\n        this.subscribers.delete(subscriber);\n      };\n    });\n  }\n\n  private readonly subscribers = new Set<\n    ZenObservable.SubscriptionObserver<T>\n  >();\n\n  [Symbol.observable]() {\n    return this;\n  }\n\n  get closed() {\n    return this.isClosed;\n  }\n\n  next(value: T) {\n    if (this.isClosed) {\n      throw new Error('BehaviorSubject is closed');\n    }\n    this.currentValue = value;\n    this.subscribers.forEach(subscriber => subscriber.next(value));\n  }\n\n  error(error: Error) {\n    if (this.isClosed) {\n      throw new Error('BehaviorSubject is closed');\n    }\n    this.isClosed = true;\n    this.terminatingError = error;\n    this.subscribers.forEach(subscriber => subscriber.error(error));\n  }\n\n  complete() {\n    if (this.isClosed) {\n      throw new Error('BehaviorSubject is closed');\n    }\n    this.isClosed = true;\n    this.subscribers.forEach(subscriber => subscriber.complete());\n  }\n\n  subscribe(observer: ZenObservable.Observer<T>): ZenObservable.Subscription;\n  subscribe(\n    onNext: (value: T) => void,\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription;\n  subscribe(\n    onNext: ZenObservable.Observer<T> | ((value: T) => void),\n    onError?: (error: any) => void,\n    onComplete?: () => void,\n  ): ZenObservable.Subscription {\n    const observer =\n      typeof onNext === 'function'\n        ? {\n            next: onNext,\n            error: onError,\n            complete: onComplete,\n          }\n        : onNext;\n\n    return this.observable.subscribe(observer);\n  }\n}\n"],"names":[],"mappings":"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"}