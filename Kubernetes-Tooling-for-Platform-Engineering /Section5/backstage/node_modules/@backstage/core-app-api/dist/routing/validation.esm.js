import { joinPaths } from './helpers.esm.js';

function validateRouteParameters(routePaths, routeParents) {
  const notLeafRoutes = new Set(routeParents.values());
  notLeafRoutes.delete(void 0);
  for (const route of routeParents.keys()) {
    if (notLeafRoutes.has(route)) {
      continue;
    }
    let currentRouteRef = route;
    let fullPath = "";
    while (currentRouteRef) {
      const path = routePaths.get(currentRouteRef);
      if (path === void 0) {
        throw new Error(`No path for ${currentRouteRef}`);
      }
      fullPath = joinPaths(path, fullPath);
      currentRouteRef = routeParents.get(currentRouteRef);
    }
    const params = fullPath.match(/:(\w+)/g);
    if (params) {
      for (let j = 0; j < params.length; j++) {
        for (let i = j + 1; i < params.length; i++) {
          if (params[i] === params[j]) {
            throw new Error(
              `Parameter ${params[i]} is duplicated in path ${fullPath}`
            );
          }
        }
      }
    }
  }
}
function validateRouteBindings(routeBindings, plugins) {
  for (const plugin of plugins) {
    if (!plugin.externalRoutes) {
      continue;
    }
    for (const [name, externalRouteRef] of Object.entries(
      plugin.externalRoutes
    )) {
      if (externalRouteRef.optional) {
        continue;
      }
      if (!routeBindings.has(externalRouteRef)) {
        throw new Error(
          `External route '${name}' of the '${plugin.getId()}' plugin must be bound to a target route. See https://backstage.io/link?bind-routes for details.`
        );
      }
    }
  }
}

export { validateRouteBindings, validateRouteParameters };
//# sourceMappingURL=validation.esm.js.map
