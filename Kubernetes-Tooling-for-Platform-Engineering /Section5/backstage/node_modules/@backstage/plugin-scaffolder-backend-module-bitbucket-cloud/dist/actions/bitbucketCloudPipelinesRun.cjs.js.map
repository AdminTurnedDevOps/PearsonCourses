{"version":3,"file":"bitbucketCloudPipelinesRun.cjs.js","sources":["../../src/actions/bitbucketCloudPipelinesRun.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { examples } from './bitbucketCloudPipelinesRun.examples';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport * as inputProps from './inputProperties';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { getAuthorizationHeader } from './helpers';\n\nconst id = 'bitbucket:pipelines:run';\n/**\n * Creates a new action that triggers a run of a bitbucket pipeline\n *\n * @public\n */\nexport const createBitbucketPipelinesRunAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction<{\n    workspace: string;\n    repo_slug: string;\n    body?: object;\n    token?: string;\n  }>({\n    id,\n    description: 'Run a bitbucket cloud pipeline',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['workspace', 'repo_slug'],\n        properties: {\n          workspace: inputProps.workspace,\n          repo_slug: inputProps.repo_slug,\n          body: inputProps.pipelinesRunBody,\n          token: inputProps.token,\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          buildNumber: {\n            title: 'Build number',\n            type: 'number',\n          },\n          repoUrl: {\n            title: 'A URL to the pipeline repositry',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the pipeline',\n            type: 'string',\n          },\n        },\n      },\n    },\n    supportsDryRun: false,\n    async handler(ctx) {\n      const { workspace, repo_slug, body, token } = ctx.input;\n      const host = 'bitbucket.org';\n      const integrationConfig = integrations.bitbucketCloud.byHost(host);\n\n      const authorization = getAuthorizationHeader(\n        token ? { token } : integrationConfig!.config,\n      );\n      let response: Response;\n      try {\n        response = await fetch(\n          `https://api.bitbucket.org/2.0/repositories/${workspace}/${repo_slug}/pipelines`,\n          {\n            method: 'POST',\n            headers: {\n              Authorization: authorization,\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(body) ?? {},\n          },\n        );\n      } catch (e) {\n        throw new Error(`Unable to run pipeline, ${e}`);\n      }\n\n      if (response.status !== 201) {\n        throw new Error(\n          `Unable to run pipeline, ${response.status} ${\n            response.statusText\n          }, ${await response.text()}`,\n        );\n      }\n\n      const responseObject = await response.json();\n\n      ctx.output('buildNumber', responseObject.build_number);\n      ctx.output('repoUrl', responseObject.repository.links.html.href);\n      ctx.output(\n        'pipelinesUrl',\n        `${responseObject.repository.links.html.href}/pipelines`,\n      );\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","inputProps.workspace","inputProps.repo_slug","inputProps.pipelinesRunBody","inputProps.token","getAuthorizationHeader"],"mappings":"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"}