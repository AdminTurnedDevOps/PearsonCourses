{"version":3,"file":"bitbucketCloudPullRequest.cjs.js","sources":["../../src/actions/bitbucketCloudPullRequest.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport {\n  createTemplateAction,\n  getRepoSourceDirectory,\n  commitAndPushBranch,\n  addFiles,\n  cloneRepo,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { Config } from '@backstage/config';\nimport fs from 'fs-extra';\nimport { getAuthorizationHeader } from './helpers';\nimport { examples } from './bitbucketCloudPullRequest.examples';\n\nconst createPullRequest = async (opts: {\n  workspace: string;\n  repo: string;\n  title: string;\n  description?: string;\n  targetBranch: string;\n  sourceBranch: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const {\n    workspace,\n    repo,\n    title,\n    description,\n    targetBranch,\n    sourceBranch,\n    authorization,\n    apiBaseUrl,\n  } = opts;\n\n  let response: Response;\n  const data: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      title: title,\n      summary: {\n        raw: description,\n      },\n      state: 'OPEN',\n      source: {\n        branch: {\n          name: sourceBranch,\n        },\n      },\n      destination: {\n        branch: {\n          name: targetBranch,\n        },\n      },\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}/pullrequests`,\n      data,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create pull-reqeusts, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create pull requests, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n  return r.links.html.href;\n};\n\nconst findBranches = async (opts: {\n  workspace: string;\n  repo: string;\n  branchName: string;\n  authorization: string;\n  apiBaseUrl: string;\n}) => {\n  const { workspace, repo, branchName, authorization, apiBaseUrl } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}/refs/branches?q=${encodeURIComponent(\n        `name = \"${branchName}\"`,\n      )}`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to get branches, ${e}`);\n  }\n\n  if (response.status !== 200) {\n    throw new Error(\n      `Unable to get branches, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  const r = await response.json();\n\n  return r.values[0];\n};\nconst createBranch = async (opts: {\n  workspace: string;\n  repo: string;\n  branchName: string;\n  authorization: string;\n  apiBaseUrl: string;\n  startBranch: string;\n}) => {\n  const {\n    workspace,\n    repo,\n    branchName,\n    authorization,\n    apiBaseUrl,\n    startBranch,\n  } = opts;\n\n  let response: Response;\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify({\n      name: branchName,\n      target: {\n        hash: startBranch,\n      },\n    }),\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}/refs/branches`,\n      options,\n    );\n  } catch (e) {\n    throw new Error(`Unable to create branch, ${e}`);\n  }\n\n  if (response.status !== 201) {\n    throw new Error(\n      `Unable to create branch, ${response.status} ${\n        response.statusText\n      }, ${await response.text()}`,\n    );\n  }\n\n  return await response.json();\n};\nconst getDefaultBranch = async (opts: {\n  workspace: string;\n  repo: string;\n  authorization: string;\n  apiBaseUrl: string;\n}): Promise<string> => {\n  const { workspace, repo, authorization, apiBaseUrl } = opts;\n  let response: Response;\n\n  const options: RequestInit = {\n    method: 'GET',\n    headers: {\n      Authorization: authorization,\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    response = await fetch(\n      `${apiBaseUrl}/repositories/${workspace}/${repo}`,\n      options,\n    );\n  } catch (error) {\n    throw error;\n  }\n\n  const { mainbranch } = await response.json();\n  const defaultBranch = mainbranch.name;\n  if (!defaultBranch) {\n    throw new Error(`Could not fetch default branch for ${workspace}/${repo}`);\n  }\n  return defaultBranch;\n};\n/**\n * Creates a Bitbucket Cloud Pull Request action.\n * @public\n */\nexport function createPublishBitbucketCloudPullRequestAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    title: string;\n    description?: string;\n    targetBranch?: string;\n    sourceBranch: string;\n    token?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n  }>({\n    id: 'publish:bitbucketCloud:pull-request',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'title', 'sourceBranch'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n          },\n          title: {\n            title: 'Pull Request title',\n            type: 'string',\n            description: 'The title for the pull request',\n          },\n          description: {\n            title: 'Pull Request Description',\n            type: 'string',\n            description: 'The description of the pull request',\n          },\n          targetBranch: {\n            title: 'Target Branch',\n            type: 'string',\n            description: `Branch of repository to apply changes to. The default value is 'master'`,\n          },\n          sourceBranch: {\n            title: 'Source Branch',\n            type: 'string',\n            description: 'Branch of repository to copy changes from',\n          },\n          token: {\n            title: 'Authorization Token',\n            type: 'string',\n            description:\n              'The token to use for authorization to BitBucket Cloud',\n          },\n          gitAuthorName: {\n            title: 'Author Name',\n            type: 'string',\n            description: `Sets the author name for the commit. The default value is 'Scaffolder'`,\n          },\n          gitAuthorEmail: {\n            title: 'Author Email',\n            type: 'string',\n            description: `Sets the author email for the commit.`,\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          pullRequestUrl: {\n            title: 'A URL to the pull request with the provider',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        title,\n        description,\n        targetBranch,\n        sourceBranch,\n        gitAuthorName,\n        gitAuthorEmail,\n      } = ctx.input;\n\n      const { workspace, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!workspace) {\n        throw new InputError(\n          `Invalid URL provider was included in the repo URL to create ${ctx.input.repoUrl}, missing workspace`,\n        );\n      }\n\n      const integrationConfig = integrations.bitbucketCloud.byHost(host);\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const authorization = getAuthorizationHeader(\n        ctx.input.token ? { token: ctx.input.token } : integrationConfig.config,\n      );\n\n      const apiBaseUrl = integrationConfig.config.apiBaseUrl;\n\n      let finalTargetBranch = targetBranch;\n      if (!finalTargetBranch) {\n        finalTargetBranch = await getDefaultBranch({\n          workspace,\n          repo,\n          authorization,\n          apiBaseUrl,\n        });\n      }\n\n      const sourceBranchRef = await findBranches({\n        workspace,\n        repo,\n        branchName: sourceBranch,\n        authorization,\n        apiBaseUrl,\n      });\n\n      if (!sourceBranchRef) {\n        // create branch\n        ctx.logger.info(\n          `source branch not found -> creating branch named: ${sourceBranch}`,\n        );\n\n        await createBranch({\n          workspace,\n          repo,\n          branchName: sourceBranch,\n          authorization,\n          apiBaseUrl,\n          startBranch: finalTargetBranch,\n        });\n\n        const remoteUrl = `https://${host}/${workspace}/${repo}.git`;\n\n        let auth;\n\n        if (ctx.input.token) {\n          auth = {\n            username: 'x-token-auth',\n            password: ctx.input.token,\n          };\n        } else {\n          if (\n            !integrationConfig.config.username ||\n            !integrationConfig.config.appPassword\n          ) {\n            throw new Error(\n              'Credentials for Bitbucket Cloud integration required for this action.',\n            );\n          }\n\n          auth = {\n            username: integrationConfig.config.username,\n            password: integrationConfig.config.appPassword,\n          };\n        }\n\n        const gitAuthorInfo = {\n          name:\n            gitAuthorName ||\n            config.getOptionalString('scaffolder.defaultAuthor.name'),\n          email:\n            gitAuthorEmail ||\n            config.getOptionalString('scaffolder.defaultAuthor.email'),\n        };\n\n        const tempDir = await ctx.createTemporaryDirectory();\n        const sourceDir = getRepoSourceDirectory(ctx.workspacePath, undefined);\n        await cloneRepo({\n          url: remoteUrl,\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          ref: sourceBranch,\n        });\n\n        // copy files\n        fs.cpSync(sourceDir, tempDir, {\n          recursive: true,\n          filter: path => {\n            return !(path.indexOf('.git') > -1);\n          },\n        });\n\n        await addFiles({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          filepath: '.',\n        });\n\n        await commitAndPushBranch({\n          dir: tempDir,\n          auth,\n          logger: ctx.logger,\n          commitMessage:\n            description ??\n            config.getOptionalString('scaffolder.defaultCommitMessage') ??\n            '',\n          gitAuthorInfo,\n          branch: sourceBranch,\n        });\n      }\n\n      const pullRequestUrl = await createPullRequest({\n        workspace,\n        repo,\n        title,\n        description,\n        targetBranch: finalTargetBranch,\n        sourceBranch,\n        authorization,\n        apiBaseUrl,\n      });\n\n      ctx.output('pullRequestUrl', pullRequestUrl);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","getAuthorizationHeader","getRepoSourceDirectory","cloneRepo","fs","addFiles","commitAndPushBranch"],"mappings":"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"}