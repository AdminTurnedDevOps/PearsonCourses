{"version":3,"file":"context.esm.js","sources":["../src/context.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n  Dispatch,\n  SetStateAction,\n  useContext,\n  useState,\n  memo,\n  ReactNode,\n  useEffect,\n} from 'react';\nimport useAsync, { AsyncState } from 'react-use/esm/useAsync';\nimport useAsyncRetry from 'react-use/esm/useAsyncRetry';\n\nimport {\n  CompoundEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport {\n  createVersionedContext,\n  createVersionedValueMap,\n} from '@backstage/version-bridge';\n\nimport {\n  AnalyticsContext,\n  configApiRef,\n  useApi,\n} from '@backstage/core-plugin-api';\n\nimport { techdocsApiRef } from './api';\nimport { TechDocsEntityMetadata, TechDocsMetadata } from './types';\n\nimport { toLowercaseEntityRefMaybe } from './helpers';\n\nconst areEntityRefsEqual = (\n  prevEntityRef: CompoundEntityRef,\n  nextEntityRef: CompoundEntityRef,\n) => {\n  return (\n    stringifyEntityRef(prevEntityRef) === stringifyEntityRef(nextEntityRef)\n  );\n};\n\n/**\n * @public type for the value of the TechDocsReaderPageContext\n */\nexport type TechDocsReaderPageValue = {\n  metadata: AsyncState<TechDocsMetadata>;\n  entityRef: CompoundEntityRef;\n  entityMetadata: AsyncState<TechDocsEntityMetadata>;\n  shadowRoot?: ShadowRoot;\n  setShadowRoot: Dispatch<SetStateAction<ShadowRoot | undefined>>;\n  title: string;\n  setTitle: Dispatch<SetStateAction<string>>;\n  subtitle: string;\n  setSubtitle: Dispatch<SetStateAction<string>>;\n  /**\n   * @deprecated property can be passed down directly to the `TechDocsReaderPageContent` instead.\n   */\n  onReady?: () => void;\n};\n\nconst defaultTechDocsReaderPageValue: TechDocsReaderPageValue = {\n  title: '',\n  subtitle: '',\n  setTitle: () => {},\n  setSubtitle: () => {},\n  setShadowRoot: () => {},\n  metadata: { loading: true },\n  entityMetadata: { loading: true },\n  entityRef: { kind: '', name: '', namespace: '' },\n};\n\nconst TechDocsReaderPageContext = createVersionedContext<{\n  1: TechDocsReaderPageValue;\n}>('techdocs-reader-page-context');\n\n/**\n * render function for {@link TechDocsReaderPageProvider}\n *\n * @public\n */\nexport type TechDocsReaderPageProviderRenderFunction = (\n  value: TechDocsReaderPageValue,\n) => JSX.Element;\n\n/**\n * Props for {@link TechDocsReaderPageProvider}\n *\n * @public\n */\nexport type TechDocsReaderPageProviderProps = {\n  entityRef: CompoundEntityRef;\n  children: TechDocsReaderPageProviderRenderFunction | ReactNode;\n};\n\n/**\n * A context to store the reader page state\n * @public\n */\nexport const TechDocsReaderPageProvider = memo(\n  (props: TechDocsReaderPageProviderProps) => {\n    const { entityRef, children } = props;\n\n    const techdocsApi = useApi(techdocsApiRef);\n    const config = useApi(configApiRef);\n\n    const entityMetadata = useAsync(async () => {\n      return techdocsApi.getEntityMetadata(entityRef);\n    }, [entityRef]);\n\n    const metadata = useAsyncRetry(async () => {\n      return techdocsApi.getTechDocsMetadata(entityRef);\n    }, [entityRef]);\n\n    const [title, setTitle] = useState(defaultTechDocsReaderPageValue.title);\n    const [subtitle, setSubtitle] = useState(\n      defaultTechDocsReaderPageValue.subtitle,\n    );\n    const [shadowRoot, setShadowRoot] = useState<ShadowRoot | undefined>(\n      defaultTechDocsReaderPageValue.shadowRoot,\n    );\n\n    useEffect(() => {\n      if (shadowRoot && !metadata.value && !metadata.loading) {\n        metadata.retry();\n      }\n    }, [\n      metadata.value,\n      metadata.loading,\n      shadowRoot,\n      metadata.retry,\n      metadata,\n    ]);\n\n    const value: TechDocsReaderPageValue = {\n      metadata,\n      entityRef: toLowercaseEntityRefMaybe(entityRef, config),\n      entityMetadata,\n      shadowRoot,\n      setShadowRoot,\n      title,\n      setTitle,\n      subtitle,\n      setSubtitle,\n    };\n    const versionedValue = createVersionedValueMap({ 1: value });\n\n    return (\n      <AnalyticsContext\n        attributes={{ entityRef: stringifyEntityRef(entityRef) }}\n      >\n        <TechDocsReaderPageContext.Provider value={versionedValue}>\n          {children instanceof Function ? children(value) : children}\n        </TechDocsReaderPageContext.Provider>\n      </AnalyticsContext>\n    );\n  },\n  (prevProps, nextProps) => {\n    return areEntityRefsEqual(prevProps.entityRef, nextProps.entityRef);\n  },\n);\n\n/**\n * Hook used to get access to shared state between reader page components.\n * @public\n */\nexport const useTechDocsReaderPage = () => {\n  const versionedContext = useContext(TechDocsReaderPageContext);\n\n  if (versionedContext === undefined) {\n    return defaultTechDocsReaderPageValue;\n  }\n\n  const context = versionedContext.atVersion(1);\n  if (context === undefined) {\n    throw new Error('No context found for version 1.');\n  }\n\n  return context;\n};\n"],"names":[],"mappings":"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"}