const TechDocsAddonLocations = Object.freeze({
  /**
   * These addons fill up the header from the right, on the same line as the
   * title.
   */
  Header: "Header",
  /**
   * These addons appear below the header and above all content; tooling addons
   * can be inserted for convenience.
   */
  Subheader: "Subheader",
  /**
   * These addons are items added to the settings menu list and are designed to make
   * the reader experience customizable, for example accessibility options
   */
  Settings: "Settings",
  /**
   * These addons appear left of the content and above the navigation.
   */
  PrimarySidebar: "PrimarySidebar",
  /**
   * These addons appear right of the content and above the table of contents.
   */
  SecondarySidebar: "SecondarySidebar",
  /**
   * A virtual location which allows mutation of all content within the shadow
   * root by transforming DOM nodes. These addons should return null on render.
   */
  Content: "Content"
  /**
   * todo(backstage/community): This is a proposed virtual location which would
   * help implement a common addon pattern in which many instances of a given
   * element in markdown would be dynamically replaced at render-time based on
   * attributes provided on that element, for example:
   *
   * ```md
   * ## For Fun
   * <TechDocsAddon>CatGif</TechDocsAddon>
   *
   * ## Component Metadata
   * <TechDocsAddon entityRef="default:component/some-component-name">CatalogEntityCard</TechDocsAddon>
   *
   * ## System Metadata
   * <TechDocsAddon entityRef="default:system/some-system-name">CatalogEntityCard</TechDocsAddon>
   * ```
   *
   * Could correspond to a TechDocs addon named `CatalogEntityCard` with
   * location `TechDocsAddonLocations.COMPONENT`, whose `component` would be
   * the react component that would be rendered in place of all instances of
   * the markdown illustrated above.
   *
   * The `@backstage/plugin-techdocs-react` package would need to be updated to, in
   * cases where such addons had been registered, find all instances of the
   * the `<TechDocsAddon>` tag whose `textContent` corresponded with the name of the
   * addon, then replace them with component instances of the addon component,
   * passing any attributes from the tag as props to the component.
   */
  // Component: 'Component',
});

export { TechDocsAddonLocations };
//# sourceMappingURL=types.esm.js.map
