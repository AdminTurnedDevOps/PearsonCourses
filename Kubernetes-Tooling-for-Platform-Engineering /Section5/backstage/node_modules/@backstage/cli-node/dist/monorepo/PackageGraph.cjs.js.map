{"version":3,"file":"PackageGraph.cjs.js","sources":["../../src/monorepo/PackageGraph.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\nimport { getPackages, Package } from '@manypkg/get-packages';\nimport { paths } from '../util';\nimport { PackageRole } from '../roles';\nimport { GitUtils } from '../git';\nimport { Lockfile } from './Lockfile';\nimport { JsonValue } from '@backstage/types';\n\n/**\n * Known fields in Backstage package.json files.\n *\n * @public\n */\nexport interface BackstagePackageJson {\n  name: string;\n  version: string;\n  private?: boolean;\n\n  main?: string;\n  module?: string;\n  types?: string;\n\n  scripts?: {\n    [key: string]: string;\n  };\n  // The `bundled` field is a field known within Backstage, it means\n  // that the package bundles all of its dependencies in its build output.\n  bundled?: boolean;\n\n  backstage?: {\n    role?: PackageRole;\n    moved?: string;\n\n    /**\n     * If set to `true`, the package will be treated as an internal package\n     * where any imports will be inlined into the consuming package.\n     *\n     * When set to `true`, the top-level `private` field must be set to `true`\n     * as well.\n     */\n    inline?: boolean;\n\n    /**\n     * The ID of the plugin if this is a plugin package. Must always be set for plugin and module packages, and may be set for library packages. A `null` value means that the package is explicitly not a plugin package.\n     */\n    pluginId?: string | null;\n\n    /**\n     * The parent plugin package of a module. Must always and only be set for module packages.\n     */\n    pluginPackage?: string;\n\n    /**\n     * All packages that are part of the plugin. Must always and only be set for plugin packages and plugin library packages.\n     */\n    pluginPackages?: string[];\n  };\n\n  exports?: JsonValue;\n  typesVersions?: Record<string, Record<string, string[]>>;\n\n  files?: string[];\n\n  publishConfig?: {\n    access?: 'public' | 'restricted';\n    directory?: string;\n    registry?: string;\n  };\n\n  repository?:\n    | string\n    | {\n        type: string;\n        url: string;\n        directory: string;\n      };\n\n  dependencies?: {\n    [key: string]: string;\n  };\n  peerDependencies?: {\n    [key: string]: string;\n  };\n  devDependencies?: {\n    [key: string]: string;\n  };\n  optionalDependencies?: {\n    [key: string]: string;\n  };\n}\n\n/**\n * A local Backstage monorepo package\n *\n * @public\n */\nexport type BackstagePackage = {\n  dir: string;\n  packageJson: BackstagePackageJson;\n};\n\n/**\n * A local package in the monorepo package graph.\n *\n * @public\n */\nexport type PackageGraphNode = {\n  /** The name of the package */\n  name: string;\n  /** The directory of the package */\n  dir: string;\n  /** The package data of the package itself */\n  packageJson: BackstagePackageJson;\n\n  /** All direct local dependencies of the package */\n  allLocalDependencies: Map<string, PackageGraphNode>;\n  /** All direct local dependencies that will be present in the published package */\n  publishedLocalDependencies: Map<string, PackageGraphNode>;\n  /** Local dependencies */\n  localDependencies: Map<string, PackageGraphNode>;\n  /** Local devDependencies */\n  localDevDependencies: Map<string, PackageGraphNode>;\n  /** Local optionalDependencies */\n  localOptionalDependencies: Map<string, PackageGraphNode>;\n\n  /** All direct incoming local dependencies of the package */\n  allLocalDependents: Map<string, PackageGraphNode>;\n  /** All direct incoming local dependencies that will be present in the published package */\n  publishedLocalDependents: Map<string, PackageGraphNode>;\n  /** Incoming local dependencies */\n  localDependents: Map<string, PackageGraphNode>;\n  /** Incoming local devDependencies */\n  localDevDependents: Map<string, PackageGraphNode>;\n  /** Incoming local optionalDependencies */\n  localOptionalDependents: Map<string, PackageGraphNode>;\n};\n\n/**\n * Represents a local Backstage monorepo package graph.\n *\n * @public\n */\nexport class PackageGraph extends Map<string, PackageGraphNode> {\n  /**\n   * Lists all local packages in a monorepo.\n   */\n  static async listTargetPackages(): Promise<BackstagePackage[]> {\n    const { packages } = await getPackages(paths.targetDir);\n\n    return packages as BackstagePackage[];\n  }\n\n  /**\n   * Creates a package graph from a list of local packages.\n   */\n  static fromPackages(packages: Package[]): PackageGraph {\n    const graph = new PackageGraph();\n\n    // Add all local packages to the graph\n    for (const pkg of packages) {\n      const name = pkg.packageJson.name;\n      const existingPkg = graph.get(name);\n      if (existingPkg) {\n        throw new Error(\n          `Duplicate package name '${name}' at ${pkg.dir} and ${existingPkg.dir}`,\n        );\n      }\n\n      graph.set(name, {\n        name,\n        dir: pkg.dir,\n        packageJson: pkg.packageJson as BackstagePackageJson,\n\n        allLocalDependencies: new Map(),\n        publishedLocalDependencies: new Map(),\n        localDependencies: new Map(),\n        localDevDependencies: new Map(),\n        localOptionalDependencies: new Map(),\n\n        allLocalDependents: new Map(),\n        publishedLocalDependents: new Map(),\n        localDependents: new Map(),\n        localDevDependents: new Map(),\n        localOptionalDependents: new Map(),\n      });\n    }\n\n    // Populate the local dependency structure\n    for (const node of graph.values()) {\n      for (const depName of Object.keys(node.packageJson.dependencies || {})) {\n        const depPkg = graph.get(depName);\n        if (depPkg) {\n          node.allLocalDependencies.set(depName, depPkg);\n          node.publishedLocalDependencies.set(depName, depPkg);\n          node.localDependencies.set(depName, depPkg);\n\n          depPkg.allLocalDependents.set(node.name, node);\n          depPkg.publishedLocalDependents.set(node.name, node);\n          depPkg.localDependents.set(node.name, node);\n        }\n      }\n      for (const depName of Object.keys(\n        node.packageJson.devDependencies || {},\n      )) {\n        const depPkg = graph.get(depName);\n        if (depPkg) {\n          node.allLocalDependencies.set(depName, depPkg);\n          node.localDevDependencies.set(depName, depPkg);\n\n          depPkg.allLocalDependents.set(node.name, node);\n          depPkg.localDevDependents.set(node.name, node);\n        }\n      }\n      for (const depName of Object.keys(\n        node.packageJson.optionalDependencies || {},\n      )) {\n        const depPkg = graph.get(depName);\n        if (depPkg) {\n          node.allLocalDependencies.set(depName, depPkg);\n          node.publishedLocalDependencies.set(depName, depPkg);\n          node.localOptionalDependencies.set(depName, depPkg);\n\n          depPkg.allLocalDependents.set(node.name, node);\n          depPkg.publishedLocalDependents.set(node.name, node);\n          depPkg.localOptionalDependents.set(node.name, node);\n        }\n      }\n    }\n\n    return graph;\n  }\n\n  /**\n   * Traverses the package graph and collects a set of package names.\n   *\n   * The traversal starts at the provided list names, and continues\n   * throughout all the names returned by the `collectFn`, which is\n   * called once for each seen package.\n   */\n  collectPackageNames(\n    startingPackageNames: string[],\n    collectFn: (pkg: PackageGraphNode) => Iterable<string> | undefined,\n  ): Set<string> {\n    const targets = new Set<string>();\n    const searchNames = startingPackageNames.slice();\n\n    while (searchNames.length) {\n      const name = searchNames.pop()!;\n\n      if (targets.has(name)) {\n        continue;\n      }\n\n      const node = this.get(name);\n      if (!node) {\n        throw new Error(`Package '${name}' not found`);\n      }\n\n      targets.add(name);\n\n      const collected = collectFn(node);\n      if (collected) {\n        searchNames.push(...collected);\n      }\n    }\n\n    return targets;\n  }\n\n  /**\n   * Lists all packages that have changed since a given git ref.\n   *\n   * @remarks\n   *\n   * If the `analyzeLockfile` option is set to true, the change detection will\n   * also consider changes to the dependency management lockfile.\n   */\n  async listChangedPackages(options: {\n    ref: string;\n    analyzeLockfile?: boolean;\n  }) {\n    const changedFiles = await GitUtils.listChangedFiles(options.ref);\n\n    const dirMap = new Map(\n      Array.from(this.values()).map(pkg => [\n        // relative from root, convert to posix, and add a / at the end\n        path\n          .relative(paths.targetRoot, pkg.dir)\n          .split(path.sep)\n          .join(path.posix.sep) + path.posix.sep,\n        pkg,\n      ]),\n    );\n    const packageDirs = Array.from(dirMap.keys());\n\n    const result = new Array<PackageGraphNode>();\n    let searchIndex = 0;\n\n    changedFiles.sort();\n    packageDirs.sort();\n\n    for (const packageDir of packageDirs) {\n      // Skip through changes that appear before our package dir\n      while (\n        searchIndex < changedFiles.length &&\n        changedFiles[searchIndex] < packageDir\n      ) {\n        searchIndex += 1;\n      }\n\n      // Check if we arrived at a match, otherwise we move on to the next package dir\n      if (changedFiles[searchIndex]?.startsWith(packageDir)) {\n        searchIndex += 1;\n\n        result.push(dirMap.get(packageDir)!);\n\n        // Skip through the rest of the changed files for the same package\n        while (changedFiles[searchIndex]?.startsWith(packageDir)) {\n          searchIndex += 1;\n        }\n      }\n    }\n\n    if (changedFiles.includes('yarn.lock') && options.analyzeLockfile) {\n      // Load the lockfile in the working tree and the one at the ref and diff them\n      let thisLockfile: Lockfile;\n      let otherLockfile: Lockfile;\n      try {\n        thisLockfile = await Lockfile.load(\n          paths.resolveTargetRoot('yarn.lock'),\n        );\n        otherLockfile = Lockfile.parse(\n          await GitUtils.readFileAtRef('yarn.lock', options.ref),\n        );\n      } catch (error) {\n        console.warn(\n          `Failed to read lockfiles, assuming all packages have changed, ${error}`,\n        );\n        return Array.from(this.values());\n      }\n      const diff = thisLockfile.diff(otherLockfile);\n\n      // Create a simplified dependency graph only keeps track of package names\n      const graph = thisLockfile.createSimplifiedDependencyGraph();\n\n      // Merge the dependency graph from the other lockfile into this one in\n      // order to be able to detect removals accurately.\n      {\n        const otherGraph = thisLockfile.createSimplifiedDependencyGraph();\n        for (const [name, dependencies] of otherGraph) {\n          const node = graph.get(name);\n          if (node) {\n            dependencies.forEach(d => node.add(d));\n          } else {\n            graph.set(name, dependencies);\n          }\n        }\n      }\n\n      // The check is simplified by only considering the package names rather\n      // than the exact version range queries that were changed.\n      // TODO(Rugvip): Use a more exact check\n      const changedPackages = new Set(\n        [...diff.added, ...diff.changed, ...diff.removed].map(e => e.name),\n      );\n\n      // Starting with our set of changed packages from the diff, we loop through\n      // the full graph and add any package that has a dependency on a changed package.\n      // We keep looping until all transitive dependencies have been detected.\n      let changed = false;\n      do {\n        changed = false;\n        for (const [name, dependencies] of graph) {\n          if (changedPackages.has(name)) {\n            continue;\n          }\n          for (const dep of dependencies) {\n            if (changedPackages.has(dep)) {\n              changed = true;\n              changedPackages.add(name);\n              break;\n            }\n          }\n        }\n      } while (changed);\n\n      // Add all local packages that had a transitive dependency change to the result set\n      for (const node of this.values()) {\n        if (changedPackages.has(node.name) && !result.includes(node)) {\n          result.push(node);\n        }\n      }\n    }\n\n    return result;\n  }\n}\n"],"names":["getPackages","paths","GitUtils","path","Lockfile"],"mappings":"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"}