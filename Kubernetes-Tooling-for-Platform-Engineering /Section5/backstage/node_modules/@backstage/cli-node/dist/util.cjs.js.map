{"version":3,"file":"util.cjs.js","sources":["../src/util.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ChildProcess,\n  execFile as execFileCb,\n  spawn,\n  SpawnOptions,\n} from 'child_process';\nimport { promisify } from 'util';\nimport { findPaths } from '@backstage/cli-common';\nimport { ExitCodeError } from './errors';\n\nexport const execFile = promisify(execFileCb);\n\n/* eslint-disable-next-line no-restricted-syntax */\nexport const paths = findPaths(__dirname);\n\n/**\n * A function that can be used to log data from a child process\n *\n * @public\n */\nexport type LogFunc = (data: Buffer) => void;\n\n/**\n * Options for running a child process\n *\n * @public\n */\nexport type SpawnOptionsPartialEnv = Omit<SpawnOptions, 'env'> & {\n  env?: Partial<NodeJS.ProcessEnv>;\n  // Pipe stdout to this log function\n  stdoutLogFunc?: LogFunc;\n  // Pipe stderr to this log function\n  stderrLogFunc?: LogFunc;\n};\n\n// Runs a child command, returning a promise that is only resolved if the child exits with code 0.\nexport async function run(\n  name: string,\n  args: string[] = [],\n  options: SpawnOptionsPartialEnv = {},\n) {\n  const { stdoutLogFunc, stderrLogFunc } = options;\n  const env: NodeJS.ProcessEnv = {\n    ...process.env,\n    FORCE_COLOR: 'true',\n    ...(options.env ?? {}),\n  };\n\n  const stdio = [\n    'inherit',\n    stdoutLogFunc ? 'pipe' : 'inherit',\n    stderrLogFunc ? 'pipe' : 'inherit',\n  ] as ('inherit' | 'pipe')[];\n\n  const child = spawn(name, args, {\n    stdio,\n    shell: true,\n    ...options,\n    env,\n  });\n\n  if (stdoutLogFunc && child.stdout) {\n    child.stdout.on('data', stdoutLogFunc);\n  }\n  if (stderrLogFunc && child.stderr) {\n    child.stderr.on('data', stderrLogFunc);\n  }\n\n  await waitForExit(child, name);\n}\n\nasync function waitForExit(\n  child: ChildProcess & { exitCode: number | null },\n  name?: string,\n): Promise<void> {\n  if (typeof child.exitCode === 'number') {\n    if (child.exitCode) {\n      throw new ExitCodeError(child.exitCode, name);\n    }\n    return;\n  }\n\n  await new Promise<void>((resolve, reject) => {\n    child.once('error', error => reject(error));\n    child.once('exit', code => {\n      if (code) {\n        reject(new ExitCodeError(code, name));\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n"],"names":["promisify","execFileCb","findPaths"],"mappings":";;;;;;;AA0Ba,MAAA,QAAA,GAAWA,eAAUC,sBAAU;AAG/B,MAAA,KAAA,GAAQC,oBAAU,SAAS;;;;;"}