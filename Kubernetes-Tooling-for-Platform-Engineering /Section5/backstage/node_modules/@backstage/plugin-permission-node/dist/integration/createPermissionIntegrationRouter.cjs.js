'use strict';

var express = require('express');
var Router = require('express-promise-router');
var zod = require('zod');
var zodToJsonSchema = require('zod-to-json-schema');
var errors = require('@backstage/errors');
var backendCommon = require('@backstage/backend-common');
var pluginPermissionCommon = require('@backstage/plugin-permission-common');
var util = require('./util.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var express__default = /*#__PURE__*/_interopDefaultCompat(express);
var Router__default = /*#__PURE__*/_interopDefaultCompat(Router);
var zodToJsonSchema__default = /*#__PURE__*/_interopDefaultCompat(zodToJsonSchema);

const permissionCriteriaSchema = zod.z.lazy(
  () => zod.z.union([
    zod.z.object({ anyOf: zod.z.array(permissionCriteriaSchema).nonempty() }),
    zod.z.object({ allOf: zod.z.array(permissionCriteriaSchema).nonempty() }),
    zod.z.object({ not: permissionCriteriaSchema }),
    zod.z.object({
      rule: zod.z.string(),
      resourceType: zod.z.string(),
      params: zod.z.record(zod.z.any()).optional()
    })
  ])
);
const applyConditionsRequestSchema = zod.z.object({
  items: zod.z.array(
    zod.z.object({
      id: zod.z.string(),
      resourceRef: zod.z.string(),
      resourceType: zod.z.string(),
      conditions: permissionCriteriaSchema
    })
  )
});
const applyConditions = (criteria, resource, getRule) => {
  if (resource === void 0) {
    return false;
  }
  if (util.isAndCriteria(criteria)) {
    return criteria.allOf.every(
      (child) => applyConditions(child, resource, getRule)
    );
  } else if (util.isOrCriteria(criteria)) {
    return criteria.anyOf.some(
      (child) => applyConditions(child, resource, getRule)
    );
  } else if (util.isNotCriteria(criteria)) {
    return !applyConditions(criteria.not, resource, getRule);
  }
  const rule = getRule(criteria.rule);
  const result = rule.paramsSchema?.safeParse(criteria.params);
  if (result && !result.success) {
    throw new errors.InputError(`Parameters to rule are invalid`, result.error);
  }
  return rule.apply(resource, criteria.params ?? {});
};
const createConditionAuthorizer = (rules) => {
  const getRule = util.createGetRule(rules);
  return (decision, resource) => {
    if (decision.result === pluginPermissionCommon.AuthorizeResult.CONDITIONAL) {
      return applyConditions(decision.conditions, resource, getRule);
    }
    return decision.result === pluginPermissionCommon.AuthorizeResult.ALLOW;
  };
};
function createPermissionIntegrationRouter(options) {
  const optionsWithResources = options;
  const allOptions = [
    optionsWithResources.resources ? optionsWithResources.resources : options
  ].flat();
  const allRules = allOptions.flatMap(
    (option) => option.rules || []
  );
  const allPermissions = Array.from(
    new Map(
      [
        ...options.permissions || [],
        ...optionsWithResources.resources?.flatMap((o) => o.permissions || []) || []
      ].map((i) => [i.name, i])
    ).values()
  );
  const allResourceTypes = allOptions.reduce((acc, option) => {
    if (isCreatePermissionIntegrationRouterResourceOptions(
      option
    )) {
      acc.push(
        option.resourceType
      );
    }
    return acc;
  }, []);
  const router = Router__default.default();
  router.use(express__default.default.json());
  router.get("/.well-known/backstage/permissions/metadata", (_, res) => {
    const serializedRules = allRules.map(
      (rule) => ({
        name: rule.name,
        description: rule.description,
        resourceType: rule.resourceType,
        paramsSchema: zodToJsonSchema__default.default(rule.paramsSchema ?? zod.z.object({}))
      })
    );
    const responseJson = {
      permissions: allPermissions,
      rules: serializedRules
    };
    return res.json(responseJson);
  });
  router.post(
    "/.well-known/backstage/permissions/apply-conditions",
    async (req, res) => {
      const ruleMapByResourceType = {};
      const getResourcesByResourceType = {};
      for (let option of allOptions) {
        option = option;
        if (isCreatePermissionIntegrationRouterResourceOptions(option)) {
          ruleMapByResourceType[option.resourceType] = util.createGetRule(
            option.rules
          );
          getResourcesByResourceType[option.resourceType] = option.getResources;
        }
      }
      const assertValidResourceTypes = (requests) => {
        const invalidResourceTypes = requests.filter((request) => !allResourceTypes.includes(request.resourceType)).map((request) => request.resourceType);
        if (invalidResourceTypes.length) {
          throw new errors.InputError(
            `Unexpected resource types: ${invalidResourceTypes.join(", ")}.`
          );
        }
      };
      const parseResult = applyConditionsRequestSchema.safeParse(req.body);
      if (!parseResult.success) {
        throw new errors.InputError(parseResult.error.toString());
      }
      const body = parseResult.data;
      assertValidResourceTypes(body.items);
      const resourceRefsByResourceType = body.items.reduce((acc, item) => {
        if (!acc[item.resourceType]) {
          acc[item.resourceType] = /* @__PURE__ */ new Set();
        }
        acc[item.resourceType].add(item.resourceRef);
        return acc;
      }, {});
      const resourcesByResourceType = {};
      for (const resourceType of Object.keys(resourceRefsByResourceType)) {
        const getResources = getResourcesByResourceType[resourceType];
        if (!getResources) {
          throw new errors.NotImplementedError(
            `This plugin does not expose any permission rule or can't evaluate the conditions request for ${resourceType}`
          );
        }
        const resourceRefs = Array.from(
          resourceRefsByResourceType[resourceType]
        );
        const resources = await getResources(resourceRefs);
        resourceRefs.forEach((resourceRef, index) => {
          if (!resourcesByResourceType[resourceType]) {
            resourcesByResourceType[resourceType] = {};
          }
          resourcesByResourceType[resourceType][resourceRef] = resources[index];
        });
      }
      return res.json({
        items: body.items.map((request) => ({
          id: request.id,
          result: applyConditions(
            request.conditions,
            resourcesByResourceType[request.resourceType][request.resourceRef],
            ruleMapByResourceType[request.resourceType]
          ) ? pluginPermissionCommon.AuthorizeResult.ALLOW : pluginPermissionCommon.AuthorizeResult.DENY
        }))
      });
    }
  );
  router.use(backendCommon.errorHandler());
  return router;
}
function isCreatePermissionIntegrationRouterResourceOptions(options) {
  return options.resourceType !== void 0;
}

exports.createConditionAuthorizer = createConditionAuthorizer;
exports.createPermissionIntegrationRouter = createPermissionIntegrationRouter;
//# sourceMappingURL=createPermissionIntegrationRouter.cjs.js.map
