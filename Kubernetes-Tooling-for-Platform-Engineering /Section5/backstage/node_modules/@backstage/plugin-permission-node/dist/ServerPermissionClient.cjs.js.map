{"version":3,"file":"ServerPermissionClient.cjs.js","sources":["../src/ServerPermissionClient.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TokenManager,\n  createLegacyAuthAdapters,\n} from '@backstage/backend-common';\nimport {\n  AuthService,\n  BackstageCredentials,\n  BackstageServicePrincipal,\n  DiscoveryService,\n  PermissionsService,\n  PermissionsServiceRequestOptions,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport {\n  AuthorizePermissionRequest,\n  AuthorizePermissionResponse,\n  AuthorizeResult,\n  DefinitivePolicyDecision,\n  Permission,\n  PermissionClient,\n  PolicyDecision,\n  QueryPermissionRequest,\n} from '@backstage/plugin-permission-common';\n\n/**\n * A thin wrapper around\n * {@link @backstage/plugin-permission-common#PermissionClient} that allows all\n * service-to-service requests.\n * @public\n */\nexport class ServerPermissionClient implements PermissionsService {\n  readonly #auth: AuthService;\n  readonly #permissionClient: PermissionClient;\n  readonly #permissionEnabled: boolean;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      discovery: DiscoveryService;\n      /** @deprecated This option will be removed in the future, provide a the auth option instead */\n      tokenManager?: TokenManager;\n      auth?: AuthService;\n    },\n  ) {\n    const { discovery, tokenManager } = options;\n    const permissionClient = new PermissionClient({ discovery, config });\n    const permissionEnabled =\n      config.getOptionalBoolean('permission.enabled') ?? false;\n\n    if (\n      permissionEnabled &&\n      tokenManager &&\n      (tokenManager as any).isInsecureServerTokenManager\n    ) {\n      throw new Error(\n        'Service-to-service authentication must be configured before enabling permissions. Read more here https://backstage.io/docs/auth/service-to-service-auth',\n      );\n    }\n\n    const { auth } = createLegacyAuthAdapters(options);\n\n    return new ServerPermissionClient({\n      auth,\n      permissionClient,\n      permissionEnabled,\n    });\n  }\n\n  private constructor(options: {\n    auth: AuthService;\n    permissionClient: PermissionClient;\n    permissionEnabled: boolean;\n  }) {\n    this.#auth = options.auth;\n    this.#permissionClient = options.permissionClient;\n    this.#permissionEnabled = options.permissionEnabled;\n  }\n\n  async authorizeConditional(\n    queries: QueryPermissionRequest[],\n    options?: PermissionsServiceRequestOptions,\n  ): Promise<PolicyDecision[]> {\n    const credentials = await this.#getIncomingCredentials(options);\n    if (credentials && this.#auth.isPrincipal(credentials, 'service')) {\n      return this.#servicePrincipalDecision(queries, credentials);\n    } else if (!this.#permissionEnabled) {\n      return queries.map(_ => ({ result: AuthorizeResult.ALLOW }));\n    }\n\n    return this.#permissionClient.authorizeConditional(\n      queries,\n      await this.#getRequestOptions(options),\n    );\n  }\n\n  async authorize(\n    requests: AuthorizePermissionRequest[],\n    options?: PermissionsServiceRequestOptions,\n  ): Promise<AuthorizePermissionResponse[]> {\n    const credentials = await this.#getIncomingCredentials(options);\n    if (credentials && this.#auth.isPrincipal(credentials, 'service')) {\n      return this.#servicePrincipalDecision(requests, credentials);\n    } else if (!this.#permissionEnabled) {\n      return requests.map(_ => ({ result: AuthorizeResult.ALLOW }));\n    }\n\n    return this.#permissionClient.authorize(\n      requests,\n      await this.#getRequestOptions(options),\n    );\n  }\n\n  async #getRequestOptions(\n    options?: PermissionsServiceRequestOptions,\n  ): Promise<{ token?: string } | undefined> {\n    if (options && 'credentials' in options) {\n      if (this.#auth.isPrincipal(options.credentials, 'none')) {\n        return {};\n      }\n\n      return this.#auth.getPluginRequestToken({\n        onBehalfOf: options.credentials,\n        targetPluginId: 'permission',\n      });\n    }\n\n    return options;\n  }\n\n  async #getIncomingCredentials(\n    options?: PermissionsServiceRequestOptions,\n  ): Promise<BackstageCredentials | undefined> {\n    if (options && 'credentials' in options) {\n      return options.credentials;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * For service principals, we can always make an immediate definitive decision\n   * based on their associated access restrictions (if any).\n   */\n  #servicePrincipalDecision(\n    input: { permission: Permission }[],\n    credentials: BackstageCredentials<BackstageServicePrincipal>,\n  ): DefinitivePolicyDecision[] {\n    const { permissionNames, permissionAttributes } =\n      credentials.principal.accessRestrictions ?? {};\n\n    return input.map(item => {\n      if (permissionNames && !permissionNames.includes(item.permission.name)) {\n        return { result: AuthorizeResult.DENY };\n      }\n\n      if (permissionAttributes?.action) {\n        const action = item.permission.attributes?.action;\n        if (!action || !permissionAttributes.action.includes(action)) {\n          return { result: AuthorizeResult.DENY };\n        }\n      }\n\n      return { result: AuthorizeResult.ALLOW };\n    });\n  }\n}\n"],"names":["PermissionClient","createLegacyAuthAdapters","AuthorizeResult"],"mappings":"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"}