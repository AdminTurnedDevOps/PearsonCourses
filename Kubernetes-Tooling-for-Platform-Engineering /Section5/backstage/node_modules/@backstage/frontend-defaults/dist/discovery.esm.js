import { ConfigReader } from '@backstage/config';

function readPackageDetectionConfig(config) {
  const packages = config.getOptional("app.experimental.packages");
  if (packages === void 0 || packages === null) {
    return void 0;
  }
  if (typeof packages === "string") {
    if (packages !== "all") {
      throw new Error(
        `Invalid app.experimental.packages mode, got '${packages}', expected 'all'`
      );
    }
    return {};
  }
  if (typeof packages !== "object" || Array.isArray(packages)) {
    throw new Error(
      "Invalid config at 'app.experimental.packages', expected object"
    );
  }
  const packagesConfig = new ConfigReader(
    packages,
    "app.experimental.packages"
  );
  return {
    include: packagesConfig.getOptionalStringArray("include"),
    exclude: packagesConfig.getOptionalStringArray("exclude")
  };
}
function getAvailableFeatures(config) {
  const discovered = window["__@backstage/discovered__"];
  const detection = readPackageDetectionConfig(config);
  if (!detection) {
    return [];
  }
  return discovered?.modules.filter(({ name }) => {
    if (detection.exclude?.includes(name)) {
      return false;
    }
    if (detection.include && !detection.include.includes(name)) {
      return false;
    }
    return true;
  }).map((m) => m.default).filter(isBackstageFeature) ?? [];
}
function isBackstageFeature(obj) {
  if (obj !== null && typeof obj === "object" && "$$type" in obj) {
    return obj.$$type === "@backstage/FrontendPlugin" || obj.$$type === "@backstage/FrontendModule" || // TODO: Remove this once the old plugin type and extension overrides
    // are no longer supported
    obj.$$type === "@backstage/BackstagePlugin" || obj.$$type === "@backstage/ExtensionOverrides";
  }
  return false;
}

export { getAvailableFeatures };
//# sourceMappingURL=discovery.esm.js.map
