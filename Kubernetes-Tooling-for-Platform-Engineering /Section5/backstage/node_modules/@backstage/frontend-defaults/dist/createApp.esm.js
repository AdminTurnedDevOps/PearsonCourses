import React from 'react';
import { stringifyError } from '@backstage/errors';
import { defaultConfigLoaderSync } from './core-app-api/src/app/defaultConfigLoader.esm.js';
import { overrideBaseUrlConfigs } from './core-app-api/src/app/overrideBaseUrlConfigs.esm.js';
import { getAvailableFeatures } from './discovery.esm.js';
import { ConfigReader } from '@backstage/config';
import appPlugin from '@backstage/plugin-app';
import { createSpecializedApp } from '@backstage/frontend-app-api';

function createApp(options) {
  let suspenseFallback = options?.loadingComponent;
  if (suspenseFallback === void 0) {
    suspenseFallback = "Loading...";
  }
  async function appLoader() {
    const config = await options?.configLoader?.().then((c) => c.config) ?? ConfigReader.fromConfigs(
      overrideBaseUrlConfigs(defaultConfigLoaderSync())
    );
    const discoveredFeatures = getAvailableFeatures(config);
    const providedFeatures = [];
    for (const entry of options?.features ?? []) {
      if ("load" in entry) {
        try {
          const result = await entry.load({ config });
          providedFeatures.push(...result.features);
        } catch (e) {
          throw new Error(
            `Failed to read frontend features from loader '${entry.getLoaderName()}', ${stringifyError(
              e
            )}`
          );
        }
      } else {
        providedFeatures.push(entry);
      }
    }
    const app = createSpecializedApp({
      config,
      features: [appPlugin, ...discoveredFeatures, ...providedFeatures],
      bindRoutes: options?.bindRoutes
    }).createRoot();
    return { default: () => app };
  }
  return {
    createRoot() {
      const LazyApp = React.lazy(appLoader);
      return /* @__PURE__ */ React.createElement(React.Suspense, { fallback: suspenseFallback }, /* @__PURE__ */ React.createElement(LazyApp, null));
    }
  };
}

export { createApp };
//# sourceMappingURL=createApp.esm.js.map
