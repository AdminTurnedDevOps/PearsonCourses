import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { LoggerService, DiscoveryService, RootConfigService, AuthService, HttpAuthService, UserInfoService } from '@backstage/backend-plugin-api';
import express from 'express';
import { IdentityApi } from '@backstage/plugin-auth-node';
import { PermissionPolicy } from '@backstage/plugin-permission-node';

/**
 * Permission plugin
 *
 * @public
 */
declare const permissionPlugin: _backstage_backend_plugin_api.BackendFeature;

/**
 * Options required when constructing a new {@link express#Router} using
 * {@link createRouter}.
 *
 * @public
 * @deprecated Please migrate to the new backend system as this will be removed in the future.
 */
interface RouterOptions {
    logger: LoggerService;
    discovery: DiscoveryService;
    policy: PermissionPolicy;
    identity?: IdentityApi;
    config: RootConfigService;
    auth?: AuthService;
    httpAuth?: HttpAuthService;
    userInfo?: UserInfoService;
}
/**
 * Creates a new {@link express#Router} which provides the backend API
 * for the permission system.
 *
 * @deprecated Please migrate to the new backend system as this will be removed in the future.
 * @public
 */
declare function createRouter(options: RouterOptions): Promise<express.Router>;

export { type RouterOptions, createRouter, permissionPlugin as default };
