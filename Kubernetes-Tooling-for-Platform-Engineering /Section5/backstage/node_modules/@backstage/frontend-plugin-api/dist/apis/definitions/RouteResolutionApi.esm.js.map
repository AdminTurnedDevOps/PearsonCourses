{"version":3,"file":"RouteResolutionApi.esm.js","sources":["../../../src/apis/definitions/RouteResolutionApi.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnyRouteRefParams,\n  RouteRef,\n  SubRouteRef,\n  ExternalRouteRef,\n} from '../../routing';\nimport { createApiRef } from '@backstage/core-plugin-api';\n\n/**\n * TS magic for handling route parameters.\n *\n * @remarks\n *\n * The extra TS magic here is to require a single params argument if the RouteRef\n * had at least one param defined, but require 0 arguments if there are no params defined.\n * Without this we'd have to pass in empty object to all parameter-less RouteRefs\n * just to make TypeScript happy, or we would have to make the argument optional in\n * which case you might forget to pass it in when it is actually required.\n *\n * @public\n */\nexport type RouteFunc<TParams extends AnyRouteRefParams> = (\n  ...[params]: TParams extends undefined\n    ? readonly []\n    : readonly [params: TParams]\n) => string;\n\n/**\n * @public\n */\nexport type RouteResolutionApiResolveOptions = {\n  /**\n   * An absolute path to use as a starting point when resolving the route.\n   * If no path is provided the route will be resolved from the root of the app.\n   */\n  sourcePath?: string;\n};\n\n/**\n * @public\n */\nexport interface RouteResolutionApi {\n  resolve<TParams extends AnyRouteRefParams>(\n    anyRouteRef:\n      | RouteRef<TParams>\n      | SubRouteRef<TParams>\n      | ExternalRouteRef<TParams>,\n    options?: RouteResolutionApiResolveOptions,\n  ): RouteFunc<TParams> | undefined;\n}\n\n/**\n * The `ApiRef` of {@link RouteResolutionApi}.\n *\n * @public\n */\nexport const routeResolutionApiRef = createApiRef<RouteResolutionApi>({\n  id: 'core.route-resolution',\n});\n"],"names":[],"mappings":";;AAwEO,MAAM,wBAAwB,YAAiC,CAAA;AAAA,EACpE,EAAI,EAAA;AACN,CAAC;;;;"}