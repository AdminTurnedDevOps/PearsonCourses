{"version":3,"file":"AnalyticsApi.esm.js","sources":["../../../src/apis/definitions/AnalyticsApi.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '@backstage/core-plugin-api';\nimport { AnalyticsContextValue } from '../../analytics/types';\n\n/**\n * Represents an event worth tracking in an analytics system that could inform\n * how users of a Backstage instance are using its features.\n *\n * @public\n */\nexport type AnalyticsEvent = {\n  /**\n   * A string that identifies the event being tracked by the type of action the\n   * event represents. Be careful not to encode extra metadata in this string\n   * that should instead be placed in the Analytics Context or attributes.\n   * Examples include:\n   *\n   * - view\n   * - click\n   * - filter\n   * - search\n   * - hover\n   * - scroll\n   */\n  action: string;\n\n  /**\n   * A string that uniquely identifies the object that the action is being\n   * taken on. Examples include:\n   *\n   * - The path of the page viewed\n   * - The url of the link clicked\n   * - The value that was filtered by\n   * - The text that was searched for\n   */\n  subject: string;\n\n  /**\n   * An optional numeric value relevant to the event that could be aggregated\n   * by analytics tools. Examples include:\n   *\n   * - The index or position of the clicked element in an ordered list\n   * - The percentage of an element that has been scrolled through\n   * - The amount of time that has elapsed since a fixed point\n   * - A satisfaction score on a fixed scale\n   */\n  value?: number;\n\n  /**\n   * Optional, additional attributes (representing dimensions or metrics)\n   * specific to the event that could be forwarded on to analytics systems.\n   */\n  attributes?: AnalyticsEventAttributes;\n\n  /**\n   * Contextual metadata relating to where the event was captured and by whom.\n   * This could include information about the route, plugin, or extension in\n   * which an event was captured.\n   */\n  context: AnalyticsContextValue;\n};\n\n/**\n * A structure allowing other arbitrary metadata to be provided by analytics\n * event emitters.\n *\n * @public\n */\nexport type AnalyticsEventAttributes = {\n  [attribute in string]: string | boolean | number;\n};\n\n/**\n * Represents a tracker with methods that can be called to track events in a\n * configured analytics service.\n *\n * @public\n */\nexport type AnalyticsTracker = {\n  captureEvent: (\n    action: string,\n    subject: string,\n    options?: {\n      value?: number;\n      attributes?: AnalyticsEventAttributes;\n    },\n  ) => void;\n};\n\n/**\n * The Analytics API is used to track user behavior in a Backstage instance.\n *\n * @remarks\n *\n * To instrument your App or Plugin, retrieve an analytics tracker using the\n * useAnalytics() hook. This will return a pre-configured AnalyticsTracker\n * with relevant methods for instrumentation.\n *\n * @public\n */\nexport type AnalyticsApi = {\n  /**\n   * Primary event handler responsible for compiling and forwarding events to\n   * an analytics system.\n   */\n  captureEvent(event: AnalyticsEvent): void;\n};\n\n/**\n * The API reference of {@link AnalyticsApi}.\n *\n * @public\n */\nexport const analyticsApiRef: ApiRef<AnalyticsApi> = createApiRef({\n  id: 'core.analytics',\n});\n"],"names":[],"mappings":";;AAgIO,MAAM,kBAAwC,YAAa,CAAA;AAAA,EAChE,EAAI,EAAA;AACN,CAAC;;;;"}