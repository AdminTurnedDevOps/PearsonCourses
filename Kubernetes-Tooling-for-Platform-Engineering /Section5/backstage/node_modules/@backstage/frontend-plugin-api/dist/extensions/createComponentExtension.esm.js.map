{"version":3,"file":"createComponentExtension.esm.js","sources":["../../src/extensions/createComponentExtension.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { lazy, ComponentType } from 'react';\nimport { createExtension, createExtensionDataRef } from '../wiring';\nimport { ComponentRef } from '../components';\n\n/** @public */\nexport function createComponentExtension<TProps extends {}>(options: {\n  ref: ComponentRef<TProps>;\n  name?: string;\n  disabled?: boolean;\n  loader:\n    | {\n        lazy: () => Promise<ComponentType<TProps>>;\n      }\n    | {\n        sync: () => ComponentType<TProps>;\n      };\n}) {\n  return createExtension({\n    kind: 'component',\n    name: options.name ?? options.ref.id,\n    attachTo: { id: 'api:app/components', input: 'components' },\n    disabled: options.disabled,\n    output: [createComponentExtension.componentDataRef],\n    factory() {\n      if ('sync' in options.loader) {\n        return [\n          createComponentExtension.componentDataRef({\n            ref: options.ref,\n            impl: options.loader.sync() as ComponentType,\n          }),\n        ];\n      }\n      const lazyLoader = options.loader.lazy;\n      const ExtensionComponent = lazy(() =>\n        lazyLoader().then(Component => ({\n          default: Component,\n        })),\n      ) as unknown as ComponentType;\n\n      return [\n        createComponentExtension.componentDataRef({\n          ref: options.ref,\n          impl: ExtensionComponent,\n        }),\n      ];\n    },\n  });\n}\n\n/** @public */\nexport namespace createComponentExtension {\n  export const componentDataRef = createExtensionDataRef<{\n    ref: ComponentRef;\n    impl: ComponentType;\n  }>().with({ id: 'core.component.component' });\n}\n"],"names":["createComponentExtension"],"mappings":";;;;;AAqBO,SAAS,yBAA4C,OAWzD,EAAA;AACD,EAAA,OAAO,eAAgB,CAAA;AAAA,IACrB,IAAM,EAAA,WAAA;AAAA,IACN,IAAM,EAAA,OAAA,CAAQ,IAAQ,IAAA,OAAA,CAAQ,GAAI,CAAA,EAAA;AAAA,IAClC,QAAU,EAAA,EAAE,EAAI,EAAA,oBAAA,EAAsB,OAAO,YAAa,EAAA;AAAA,IAC1D,UAAU,OAAQ,CAAA,QAAA;AAAA,IAClB,MAAA,EAAQ,CAAC,wBAAA,CAAyB,gBAAgB,CAAA;AAAA,IAClD,OAAU,GAAA;AACR,MAAI,IAAA,MAAA,IAAU,QAAQ,MAAQ,EAAA;AAC5B,QAAO,OAAA;AAAA,UACL,yBAAyB,gBAAiB,CAAA;AAAA,YACxC,KAAK,OAAQ,CAAA,GAAA;AAAA,YACb,IAAA,EAAM,OAAQ,CAAA,MAAA,CAAO,IAAK;AAAA,WAC3B;AAAA,SACH;AAAA;AAEF,MAAM,MAAA,UAAA,GAAa,QAAQ,MAAO,CAAA,IAAA;AAClC,MAAA,MAAM,kBAAqB,GAAA,IAAA;AAAA,QAAK,MAC9B,UAAA,EAAa,CAAA,IAAA,CAAK,CAAc,SAAA,MAAA;AAAA,UAC9B,OAAS,EAAA;AAAA,SACT,CAAA;AAAA,OACJ;AAEA,MAAO,OAAA;AAAA,QACL,yBAAyB,gBAAiB,CAAA;AAAA,UACxC,KAAK,OAAQ,CAAA,GAAA;AAAA,UACb,IAAM,EAAA;AAAA,SACP;AAAA,OACH;AAAA;AACF,GACD,CAAA;AACH;AAAA,CAGO,CAAUA,yBAAV,KAAA;AACE,EAAMA,yBAAAA,CAAA,mBAAmB,sBAG7B,EAAA,CAAE,KAAK,EAAE,EAAA,EAAI,4BAA4B,CAAA;AAAA,CAJ7B,EAAA,wBAAA,KAAA,wBAAA,GAAA,EAAA,CAAA,CAAA;;;;"}