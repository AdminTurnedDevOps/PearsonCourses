import { lazy } from 'react';
import '../wiring/coreExtensionData.esm.js';
import { createExtension } from '../wiring/createExtension.esm.js';
import { createExtensionDataRef } from '../wiring/createExtensionDataRef.esm.js';

function createComponentExtension(options) {
  return createExtension({
    kind: "component",
    name: options.name ?? options.ref.id,
    attachTo: { id: "api:app/components", input: "components" },
    disabled: options.disabled,
    output: [createComponentExtension.componentDataRef],
    factory() {
      if ("sync" in options.loader) {
        return [
          createComponentExtension.componentDataRef({
            ref: options.ref,
            impl: options.loader.sync()
          })
        ];
      }
      const lazyLoader = options.loader.lazy;
      const ExtensionComponent = lazy(
        () => lazyLoader().then((Component) => ({
          default: Component
        }))
      );
      return [
        createComponentExtension.componentDataRef({
          ref: options.ref,
          impl: ExtensionComponent
        })
      ];
    }
  });
}
((createComponentExtension2) => {
  createComponentExtension2.componentDataRef = createExtensionDataRef().with({ id: "core.component.component" });
})(createComponentExtension || (createComponentExtension = {}));

export { createComponentExtension };
//# sourceMappingURL=createComponentExtension.esm.js.map
