{"version":3,"file":"createExtensionDataRef.esm.js","sources":["../../src/wiring/createExtensionDataRef.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @public */\nexport type ExtensionDataValue<TData, TId extends string> = {\n  readonly $$type: '@backstage/ExtensionDataValue';\n  readonly id: TId;\n  readonly value: TData;\n};\n\n/** @public */\nexport type ExtensionDataRef<\n  TData,\n  TId extends string = string,\n  TConfig extends { optional?: true } = {},\n> = {\n  readonly $$type: '@backstage/ExtensionDataRef';\n  readonly id: TId;\n  readonly T: TData;\n  readonly config: TConfig;\n};\n\n/** @public */\nexport type ExtensionDataRefToValue<TDataRef extends AnyExtensionDataRef> =\n  TDataRef extends ExtensionDataRef<infer IData, infer IId, any>\n    ? ExtensionDataValue<IData, IId>\n    : never;\n\n/** @public */\nexport type AnyExtensionDataRef = ExtensionDataRef<\n  unknown,\n  string,\n  { optional?: true }\n>;\n\n/** @public */\nexport interface ConfigurableExtensionDataRef<\n  TData,\n  TId extends string,\n  TConfig extends { optional?: true } = {},\n> extends ExtensionDataRef<TData, TId, TConfig> {\n  optional(): ConfigurableExtensionDataRef<\n    TData,\n    TId,\n    TConfig & { optional: true }\n  >;\n  (t: TData): ExtensionDataValue<TData, TId>;\n}\n\n/**\n * @public\n * @deprecated Use the following form instead: `createExtensionDataRef<Type>().with({ id: 'core.foo' })`\n */\nexport function createExtensionDataRef<TData>(\n  id: string,\n): ConfigurableExtensionDataRef<TData, string>;\n/** @public */\nexport function createExtensionDataRef<TData>(): {\n  with<TId extends string>(options: {\n    id: TId;\n  }): ConfigurableExtensionDataRef<TData, TId>;\n};\nexport function createExtensionDataRef<TData>(id?: string):\n  | ConfigurableExtensionDataRef<TData, string>\n  | {\n      with<TId extends string>(options: {\n        id: TId;\n      }): ConfigurableExtensionDataRef<TData, TId>;\n    } {\n  const createRef = <TId extends string>(refId: TId) =>\n    Object.assign(\n      (value: TData): ExtensionDataValue<TData, TId> => ({\n        $$type: '@backstage/ExtensionDataValue',\n        id: refId,\n        value,\n      }),\n      {\n        id: refId,\n        $$type: '@backstage/ExtensionDataRef',\n        config: {},\n        optional() {\n          return {\n            ...this,\n            config: { ...this.config, optional: true },\n          };\n        },\n        toString() {\n          const optional = Boolean(this.config.optional);\n          return `ExtensionDataRef{id=${refId},optional=${optional}}`;\n        },\n      } as ConfigurableExtensionDataRef<TData, TId, { optional?: true }>,\n    );\n  if (id) {\n    return createRef(id);\n  }\n  return {\n    with<TId extends string>(options: { id: TId }) {\n      return createRef(options.id);\n    },\n  };\n}\n"],"names":[],"mappings":"AA2EO,SAAS,uBAA8B,EAMxC,EAAA;AACJ,EAAM,MAAA,SAAA,GAAY,CAAqB,KAAA,KACrC,MAAO,CAAA,MAAA;AAAA,IACL,CAAC,KAAkD,MAAA;AAAA,MACjD,MAAQ,EAAA,+BAAA;AAAA,MACR,EAAI,EAAA,KAAA;AAAA,MACJ;AAAA,KACF,CAAA;AAAA,IACA;AAAA,MACE,EAAI,EAAA,KAAA;AAAA,MACJ,MAAQ,EAAA,6BAAA;AAAA,MACR,QAAQ,EAAC;AAAA,MACT,QAAW,GAAA;AACT,QAAO,OAAA;AAAA,UACL,GAAG,IAAA;AAAA,UACH,QAAQ,EAAE,GAAG,IAAK,CAAA,MAAA,EAAQ,UAAU,IAAK;AAAA,SAC3C;AAAA,OACF;AAAA,MACA,QAAW,GAAA;AACT,QAAA,MAAM,QAAW,GAAA,OAAA,CAAQ,IAAK,CAAA,MAAA,CAAO,QAAQ,CAAA;AAC7C,QAAO,OAAA,CAAA,oBAAA,EAAuB,KAAK,CAAA,UAAA,EAAa,QAAQ,CAAA,CAAA,CAAA;AAAA;AAC1D;AACF,GACF;AACF,EAAA,IAAI,EAAI,EAAA;AACN,IAAA,OAAO,UAAU,EAAE,CAAA;AAAA;AAErB,EAAO,OAAA;AAAA,IACL,KAAyB,OAAsB,EAAA;AAC7C,MAAO,OAAA,SAAA,CAAU,QAAQ,EAAE,CAAA;AAAA;AAC7B,GACF;AACF;;;;"}