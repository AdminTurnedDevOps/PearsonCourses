import { resolveExtensionDefinition } from './resolveExtensionDefinition.esm.js';
import { OpaqueFrontendPlugin } from '../frontend-internal/src/wiring/InternalFrontendPlugin.esm.js';
import { OpaqueExtensionDefinition } from '../frontend-internal/src/wiring/InternalExtensionDefinition.esm.js';

function createFrontendPlugin(options) {
  const extensions = new Array();
  const extensionDefinitionsById = /* @__PURE__ */ new Map();
  for (const def of options.extensions ?? []) {
    const internal = OpaqueExtensionDefinition.toInternal(def);
    const ext = resolveExtensionDefinition(def, { namespace: options.id });
    extensions.push(ext);
    extensionDefinitionsById.set(ext.id, {
      ...internal,
      namespace: options.id
    });
  }
  if (extensions.length !== extensionDefinitionsById.size) {
    const extensionIds = extensions.map((e) => e.id);
    const duplicates = Array.from(
      new Set(
        extensionIds.filter((id, index) => extensionIds.indexOf(id) !== index)
      )
    );
    throw new Error(
      `Plugin '${options.id}' provided duplicate extensions: ${duplicates.join(
        ", "
      )}`
    );
  }
  return OpaqueFrontendPlugin.createInstance("v1", {
    id: options.id,
    routes: options.routes ?? {},
    externalRoutes: options.externalRoutes ?? {},
    featureFlags: options.featureFlags ?? [],
    extensions,
    getExtension(id) {
      const ext = extensionDefinitionsById.get(id);
      if (!ext) {
        throw new Error(
          `Attempted to get non-existent extension '${id}' from plugin '${options.id}'`
        );
      }
      return ext;
    },
    toString() {
      return `Plugin{id=${options.id}}`;
    },
    withOverrides(overrides) {
      const overriddenExtensionIds = new Set(
        overrides.extensions.map(
          (e) => resolveExtensionDefinition(e, { namespace: options.id }).id
        )
      );
      const nonOverriddenExtensions = (options.extensions ?? []).filter(
        (e) => !overriddenExtensionIds.has(
          resolveExtensionDefinition(e, { namespace: options.id }).id
        )
      );
      return createFrontendPlugin({
        ...options,
        extensions: [...nonOverriddenExtensions, ...overrides.extensions]
      });
    }
  });
}

export { createFrontendPlugin };
//# sourceMappingURL=createFrontendPlugin.esm.js.map
