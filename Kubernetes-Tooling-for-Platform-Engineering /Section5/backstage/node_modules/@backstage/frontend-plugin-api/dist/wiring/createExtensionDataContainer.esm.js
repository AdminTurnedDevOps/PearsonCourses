function createExtensionDataContainer(values, declaredRefs) {
  const container = /* @__PURE__ */ new Map();
  const verifyRefs = declaredRefs && new Map(declaredRefs.map((ref) => [ref.id, ref]));
  for (const output of values) {
    if (verifyRefs) {
      if (!verifyRefs.delete(output.id)) {
        throw new Error(
          `extension data '${output.id}' was provided but not declared`
        );
      }
    }
    container.set(output.id, output);
  }
  const remainingRefs = verifyRefs && Array.from(verifyRefs.values()).filter((ref) => !ref.config.optional);
  if (remainingRefs && remainingRefs.length > 0) {
    throw new Error(
      `missing required extension data value(s) '${remainingRefs.map((ref) => ref.id).join(", ")}'`
    );
  }
  return {
    get(ref) {
      return container.get(ref.id)?.value;
    },
    [Symbol.iterator]() {
      return container.values();
    }
  };
}

export { createExtensionDataContainer };
//# sourceMappingURL=createExtensionDataContainer.esm.js.map
