import { resolveExtensionDefinition } from './resolveExtensionDefinition.esm.js';
import { OpaqueExtensionDefinition } from '../frontend-internal/src/wiring/InternalExtensionDefinition.esm.js';

function createFrontendModule(options) {
  const { pluginId } = options;
  const extensions = new Array();
  const extensionDefinitionsById = /* @__PURE__ */ new Map();
  for (const def of options.extensions ?? []) {
    const internal = OpaqueExtensionDefinition.toInternal(def);
    const ext = resolveExtensionDefinition(def, { namespace: pluginId });
    extensions.push(ext);
    extensionDefinitionsById.set(ext.id, {
      ...internal,
      namespace: pluginId
    });
  }
  if (extensions.length !== extensionDefinitionsById.size) {
    const extensionIds = extensions.map((e) => e.id);
    const duplicates = Array.from(
      new Set(
        extensionIds.filter((id, index) => extensionIds.indexOf(id) !== index)
      )
    );
    throw new Error(
      `Plugin '${pluginId}' provided duplicate extensions: ${duplicates.join(
        ", "
      )}`
    );
  }
  return {
    $$type: "@backstage/FrontendModule",
    version: "v1",
    pluginId,
    featureFlags: options.featureFlags ?? [],
    extensions,
    toString() {
      return `Module{pluginId=${pluginId}}`;
    }
  };
}

export { createFrontendModule };
//# sourceMappingURL=createFrontendModule.esm.js.map
