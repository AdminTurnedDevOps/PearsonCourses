import { createExtension, ctxParamsSymbol } from './createExtension.esm.js';
import { createExtensionDataContainer } from './createExtensionDataContainer.esm.js';
import { resolveInputOverrides } from './resolveInputOverrides.esm.js';

function createExtensionBlueprint(options) {
  return {
    dataRefs: options.dataRefs,
    make(args) {
      return createExtension({
        kind: options.kind,
        name: args.name ?? options.name,
        attachTo: args.attachTo ?? options.attachTo,
        disabled: args.disabled ?? options.disabled,
        inputs: options.inputs,
        output: options.output,
        config: options.config,
        factory: (ctx) => options.factory(
          { ...args.params, ...ctx[ctxParamsSymbol] },
          ctx
        )
      });
    },
    makeWithOverrides(args) {
      return createExtension({
        kind: options.kind,
        name: args.name ?? options.name,
        attachTo: args.attachTo ?? options.attachTo,
        disabled: args.disabled ?? options.disabled,
        inputs: { ...args.inputs, ...options.inputs },
        output: args.output ?? options.output,
        config: options.config || args.config ? {
          schema: {
            ...options.config?.schema,
            ...args.config?.schema
          }
        } : void 0,
        factory: (ctx) => {
          const { node, config, inputs, apis } = ctx;
          return args.factory(
            (innerParams, innerContext) => {
              return createExtensionDataContainer(
                options.factory(
                  { ...innerParams, ...ctx[ctxParamsSymbol] },
                  {
                    apis,
                    node,
                    config: innerContext?.config ?? config,
                    inputs: resolveInputOverrides(
                      options.inputs,
                      inputs,
                      innerContext?.inputs
                    )
                  }
                ),
                options.output
              );
            },
            {
              apis,
              node,
              config,
              inputs
            }
          );
        }
      });
    }
  };
}

export { createExtensionBlueprint };
//# sourceMappingURL=createExtensionBlueprint.esm.js.map
