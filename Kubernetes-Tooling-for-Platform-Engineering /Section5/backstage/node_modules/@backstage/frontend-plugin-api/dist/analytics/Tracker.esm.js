import { getOrCreateGlobalSingleton } from '@backstage/version-bridge';

const globalEvents = getOrCreateGlobalSingleton(
  "core-plugin-api:analytics-tracker-events",
  () => ({
    mostRecentGatheredNavigation: void 0,
    mostRecentRoutableExtensionRender: void 0,
    beforeUnloadRegistered: false
  })
);
const routableExtensionRenderedEvent = "_ROUTABLE-EXTENSION-RENDERED";
class Tracker {
  constructor(analyticsApi, context = {
    pluginId: "root",
    extensionId: "App"
  }) {
    this.analyticsApi = analyticsApi;
    this.context = context;
    if (!globalEvents.beforeUnloadRegistered) {
      addEventListener(
        "beforeunload",
        () => {
          if (globalEvents.mostRecentGatheredNavigation) {
            this.analyticsApi.captureEvent({
              ...globalEvents.mostRecentGatheredNavigation,
              ...globalEvents.mostRecentRoutableExtensionRender
            });
            globalEvents.mostRecentGatheredNavigation = void 0;
            globalEvents.mostRecentRoutableExtensionRender = void 0;
          }
        },
        { once: true, passive: true }
      );
      globalEvents.beforeUnloadRegistered = true;
    }
  }
  setContext(context) {
    this.context = context;
  }
  captureEvent(action, subject, {
    value,
    attributes
  } = {}) {
    const context = this.context;
    if (action === routableExtensionRenderedEvent) {
      if (globalEvents.mostRecentGatheredNavigation) {
        globalEvents.mostRecentRoutableExtensionRender = {
          context: {
            ...context,
            extensionId: "App"
          }
        };
      }
      return;
    }
    if (globalEvents.mostRecentGatheredNavigation) {
      try {
        this.analyticsApi.captureEvent({
          ...globalEvents.mostRecentGatheredNavigation,
          ...globalEvents.mostRecentRoutableExtensionRender
        });
      } catch (e) {
        console.warn("Error during analytics event capture. %o", e);
      }
      globalEvents.mostRecentGatheredNavigation = void 0;
      globalEvents.mostRecentRoutableExtensionRender = void 0;
    }
    if (action === "navigate" && context.pluginId === "root") {
      globalEvents.mostRecentGatheredNavigation = {
        action,
        subject,
        value,
        attributes,
        context
      };
      return;
    }
    try {
      this.analyticsApi.captureEvent({
        action,
        subject,
        value,
        attributes,
        context
      });
    } catch (e) {
      console.warn("Error during analytics event capture. %o", e);
    }
  }
}

export { Tracker, routableExtensionRenderedEvent };
//# sourceMappingURL=Tracker.esm.js.map
