{"version":3,"file":"Tracker.esm.js","sources":["../../src/analytics/Tracker.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getOrCreateGlobalSingleton } from '@backstage/version-bridge';\nimport {\n  AnalyticsApi,\n  AnalyticsEventAttributes,\n  AnalyticsTracker,\n} from '../apis';\nimport { AnalyticsContextValue } from './';\n\ntype TempGlobalEvents = {\n  /**\n   * Stores the most recent \"gathered\" mountpoint navigation.\n   */\n  mostRecentGatheredNavigation?: {\n    action: string;\n    subject: string;\n    value?: number;\n    attributes?: AnalyticsEventAttributes;\n    context: AnalyticsContextValue;\n  };\n  /**\n   * Stores the most recent routable extension render.\n   */\n  mostRecentRoutableExtensionRender?: {\n    context: AnalyticsContextValue;\n  };\n  /**\n   * Tracks whether or not a beforeunload event listener has already been\n   * registered.\n   */\n  beforeUnloadRegistered: boolean;\n};\n\n/**\n * Temporary global store for select event data. Used to make `navigate` events\n * more accurate when gathered mountpoints are used.\n */\nconst globalEvents = getOrCreateGlobalSingleton<TempGlobalEvents>(\n  'core-plugin-api:analytics-tracker-events',\n  () => ({\n    mostRecentGatheredNavigation: undefined,\n    mostRecentRoutableExtensionRender: undefined,\n    beforeUnloadRegistered: false,\n  }),\n);\n\n/**\n * Internal-only event representing when a routable extension is rendered.\n */\nexport const routableExtensionRenderedEvent = '_ROUTABLE-EXTENSION-RENDERED';\n\nexport class Tracker implements AnalyticsTracker {\n  constructor(\n    private readonly analyticsApi: AnalyticsApi,\n    private context: AnalyticsContextValue = {\n      pluginId: 'root',\n      extensionId: 'App',\n    },\n  ) {\n    // Only register a single beforeunload event across all trackers.\n    if (!globalEvents.beforeUnloadRegistered) {\n      // Before the page unloads, attempt to capture any deferred navigation\n      // events that haven't yet been captured.\n      addEventListener(\n        'beforeunload',\n        () => {\n          if (globalEvents.mostRecentGatheredNavigation) {\n            this.analyticsApi.captureEvent({\n              ...globalEvents.mostRecentGatheredNavigation,\n              ...globalEvents.mostRecentRoutableExtensionRender,\n            });\n            globalEvents.mostRecentGatheredNavigation = undefined;\n            globalEvents.mostRecentRoutableExtensionRender = undefined;\n          }\n        },\n        { once: true, passive: true },\n      );\n\n      // Prevent duplicate handlers from being registered.\n      globalEvents.beforeUnloadRegistered = true;\n    }\n  }\n\n  setContext(context: AnalyticsContextValue) {\n    this.context = context;\n  }\n\n  captureEvent(\n    action: string,\n    subject: string,\n    {\n      value,\n      attributes,\n    }: { value?: number; attributes?: AnalyticsEventAttributes } = {},\n  ) {\n    // Never pass internal \"_routeNodeType\" context value.\n    const context = this.context;\n\n    // Never fire the special \"_routable-extension-rendered\" internal event.\n    if (action === routableExtensionRenderedEvent) {\n      // But keep track of it if we're delaying a `navigate` event for a\n      // a gathered route node type.\n      if (globalEvents.mostRecentGatheredNavigation) {\n        globalEvents.mostRecentRoutableExtensionRender = {\n          context: {\n            ...context,\n            extensionId: 'App',\n          },\n        };\n      }\n      return;\n    }\n\n    // If we are about to fire a real event, and we have an un-fired gathered\n    // mountpoint navigation on the global store, we need to fire the navigate\n    // event first, so this real event happens accurately after the navigation.\n    if (globalEvents.mostRecentGatheredNavigation) {\n      try {\n        this.analyticsApi.captureEvent({\n          ...globalEvents.mostRecentGatheredNavigation,\n          ...globalEvents.mostRecentRoutableExtensionRender,\n        });\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Error during analytics event capture. %o', e);\n      }\n\n      // Clear the global stores.\n      globalEvents.mostRecentGatheredNavigation = undefined;\n      globalEvents.mostRecentRoutableExtensionRender = undefined;\n    }\n\n    // Never directly fire a navigation event on a gathered route with default\n    // contextual details.\n    if (action === 'navigate' && context.pluginId === 'root') {\n      // Instead, set it on the global store.\n      globalEvents.mostRecentGatheredNavigation = {\n        action,\n        subject,\n        value,\n        attributes,\n        context,\n      };\n      return;\n    }\n\n    try {\n      this.analyticsApi.captureEvent({\n        action,\n        subject,\n        value,\n        attributes,\n        context,\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn('Error during analytics event capture. %o', e);\n    }\n  }\n}\n"],"names":[],"mappings":";;AAoDA,MAAM,YAAe,GAAA,0BAAA;AAAA,EACnB,0CAAA;AAAA,EACA,OAAO;AAAA,IACL,4BAA8B,EAAA,KAAA,CAAA;AAAA,IAC9B,iCAAmC,EAAA,KAAA,CAAA;AAAA,IACnC,sBAAwB,EAAA;AAAA,GAC1B;AACF,CAAA;AAKO,MAAM,8BAAiC,GAAA;AAEvC,MAAM,OAAoC,CAAA;AAAA,EAC/C,WAAA,CACmB,cACT,OAAiC,GAAA;AAAA,IACvC,QAAU,EAAA,MAAA;AAAA,IACV,WAAa,EAAA;AAAA,GAEf,EAAA;AALiB,IAAA,IAAA,CAAA,YAAA,GAAA,YAAA;AACT,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AAMR,IAAI,IAAA,CAAC,aAAa,sBAAwB,EAAA;AAGxC,MAAA,gBAAA;AAAA,QACE,cAAA;AAAA,QACA,MAAM;AACJ,UAAA,IAAI,aAAa,4BAA8B,EAAA;AAC7C,YAAA,IAAA,CAAK,aAAa,YAAa,CAAA;AAAA,cAC7B,GAAG,YAAa,CAAA,4BAAA;AAAA,cAChB,GAAG,YAAa,CAAA;AAAA,aACjB,CAAA;AACD,YAAA,YAAA,CAAa,4BAA+B,GAAA,KAAA,CAAA;AAC5C,YAAA,YAAA,CAAa,iCAAoC,GAAA,KAAA,CAAA;AAAA;AACnD,SACF;AAAA,QACA,EAAE,IAAA,EAAM,IAAM,EAAA,OAAA,EAAS,IAAK;AAAA,OAC9B;AAGA,MAAA,YAAA,CAAa,sBAAyB,GAAA,IAAA;AAAA;AACxC;AACF,EAEA,WAAW,OAAgC,EAAA;AACzC,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA;AAAA;AACjB,EAEA,YAAA,CACE,QACA,OACA,EAAA;AAAA,IACE,KAAA;AAAA,IACA;AAAA,GACF,GAA+D,EAC/D,EAAA;AAEA,IAAA,MAAM,UAAU,IAAK,CAAA,OAAA;AAGrB,IAAA,IAAI,WAAW,8BAAgC,EAAA;AAG7C,MAAA,IAAI,aAAa,4BAA8B,EAAA;AAC7C,QAAA,YAAA,CAAa,iCAAoC,GAAA;AAAA,UAC/C,OAAS,EAAA;AAAA,YACP,GAAG,OAAA;AAAA,YACH,WAAa,EAAA;AAAA;AACf,SACF;AAAA;AAEF,MAAA;AAAA;AAMF,IAAA,IAAI,aAAa,4BAA8B,EAAA;AAC7C,MAAI,IAAA;AACF,QAAA,IAAA,CAAK,aAAa,YAAa,CAAA;AAAA,UAC7B,GAAG,YAAa,CAAA,4BAAA;AAAA,UAChB,GAAG,YAAa,CAAA;AAAA,SACjB,CAAA;AAAA,eACM,CAAG,EAAA;AAEV,QAAQ,OAAA,CAAA,IAAA,CAAK,4CAA4C,CAAC,CAAA;AAAA;AAI5D,MAAA,YAAA,CAAa,4BAA+B,GAAA,KAAA,CAAA;AAC5C,MAAA,YAAA,CAAa,iCAAoC,GAAA,KAAA,CAAA;AAAA;AAKnD,IAAA,IAAI,MAAW,KAAA,UAAA,IAAc,OAAQ,CAAA,QAAA,KAAa,MAAQ,EAAA;AAExD,MAAA,YAAA,CAAa,4BAA+B,GAAA;AAAA,QAC1C,MAAA;AAAA,QACA,OAAA;AAAA,QACA,KAAA;AAAA,QACA,UAAA;AAAA,QACA;AAAA,OACF;AACA,MAAA;AAAA;AAGF,IAAI,IAAA;AACF,MAAA,IAAA,CAAK,aAAa,YAAa,CAAA;AAAA,QAC7B,MAAA;AAAA,QACA,OAAA;AAAA,QACA,KAAA;AAAA,QACA,UAAA;AAAA,QACA;AAAA,OACD,CAAA;AAAA,aACM,CAAG,EAAA;AAEV,MAAQ,OAAA,CAAA,IAAA,CAAK,4CAA4C,CAAC,CAAA;AAAA;AAC5D;AAEJ;;;;"}