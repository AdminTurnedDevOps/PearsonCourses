'use strict';

async function fetchProfile(options) {
  const { host, accessToken } = options;
  let whoAmIResponse;
  try {
    whoAmIResponse = await fetch(
      `https://${host}/plugins/servlet/applinks/whoami`,
      {
        headers: {
          Authorization: `Bearer ${accessToken}`
        }
      }
    );
  } catch (e) {
    throw new Error(`Failed to retrieve the username of the logged in user`);
  }
  const username = whoAmIResponse.headers.get("X-Ausername");
  if (!username) {
    throw new Error(`Failed to retrieve the username of the logged in user`);
  }
  let userResponse;
  try {
    userResponse = await fetch(
      `https://${host}/rest/api/latest/users/${username}?avatarSize=256`,
      {
        headers: {
          Authorization: `Bearer ${accessToken}`
        }
      }
    );
  } catch (e) {
    throw new Error(`Failed to retrieve the user '${username}'`);
  }
  if (!userResponse.ok) {
    throw new Error(`Failed to retrieve the user '${username}'`);
  }
  const user = await userResponse.json();
  const passportProfile = {
    provider: "bitbucketServer",
    id: user.id.toString(),
    displayName: user.displayName,
    username: user.name,
    emails: [
      {
        value: user.emailAddress
      }
    ]
  };
  if (user.avatarUrl) {
    passportProfile.photos = [{ value: `https://${host}${user.avatarUrl}` }];
  }
  return passportProfile;
}

exports.fetchProfile = fetchProfile;
//# sourceMappingURL=helpers.cjs.js.map
