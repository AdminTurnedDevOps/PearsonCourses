'use strict';

var passportOauth2 = require('passport-oauth2');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var helpers = require('./helpers.cjs.js');

const bitbucketServerAuthenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  initialize({ callbackUrl, config }) {
    const clientID = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    const host = config.getString("host");
    const callbackURL = config.getOptionalString("callbackUrl") ?? callbackUrl;
    const helper = pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new passportOauth2.Strategy(
        {
          clientID,
          clientSecret,
          callbackURL,
          authorizationURL: `https://${host}/rest/oauth2/latest/authorize`,
          tokenURL: `https://${host}/rest/oauth2/latest/token`
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            { fullProfile, params, accessToken },
            { refreshToken }
          );
        }
      )
    );
    return { helper, host };
  },
  async start(input, { helper }) {
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent"
    });
  },
  async authenticate(input, { helper, host }) {
    const result = await helper.authenticate(input);
    const fullProfile = await helpers.fetchProfile({
      host,
      accessToken: result.session.accessToken
    });
    return { ...result, fullProfile };
  },
  async refresh(input, { helper, host }) {
    const result = await helper.refresh(input);
    const fullProfile = await helpers.fetchProfile({
      host,
      accessToken: result.session.accessToken
    });
    return { ...result, fullProfile };
  }
});

exports.bitbucketServerAuthenticator = bitbucketServerAuthenticator;
//# sourceMappingURL=authenticator.cjs.js.map
