{"version":3,"file":"helpers.cjs.js","sources":["../src/helpers.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PassportProfile } from '@backstage/plugin-auth-node';\n\nexport async function fetchProfile(options: {\n  host: string;\n  accessToken: string;\n}): Promise<PassportProfile> {\n  const { host, accessToken } = options;\n  // Get current user name\n  let whoAmIResponse;\n  try {\n    whoAmIResponse = await fetch(\n      `https://${host}/plugins/servlet/applinks/whoami`,\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      },\n    );\n  } catch (e) {\n    throw new Error(`Failed to retrieve the username of the logged in user`);\n  }\n\n  // A response.ok check here would be worthless as the Bitbucket API always returns 200 OK for this call\n  const username = whoAmIResponse.headers.get('X-Ausername');\n  if (!username) {\n    throw new Error(`Failed to retrieve the username of the logged in user`);\n  }\n\n  let userResponse;\n  try {\n    userResponse = await fetch(\n      `https://${host}/rest/api/latest/users/${username}?avatarSize=256`,\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      },\n    );\n  } catch (e) {\n    throw new Error(`Failed to retrieve the user '${username}'`);\n  }\n\n  if (!userResponse.ok) {\n    throw new Error(`Failed to retrieve the user '${username}'`);\n  }\n\n  const user = await userResponse.json();\n\n  const passportProfile = {\n    provider: 'bitbucketServer',\n    id: user.id.toString(),\n    displayName: user.displayName,\n    username: user.name,\n    emails: [\n      {\n        value: user.emailAddress,\n      },\n    ],\n  } as PassportProfile;\n\n  if (user.avatarUrl) {\n    passportProfile.photos = [{ value: `https://${host}${user.avatarUrl}` }];\n  }\n\n  return passportProfile;\n}\n"],"names":[],"mappings":";;AAkBA,eAAsB,aAAa,OAGN,EAAA;AAC3B,EAAM,MAAA,EAAE,IAAM,EAAA,WAAA,EAAgB,GAAA,OAAA;AAE9B,EAAI,IAAA,cAAA;AACJ,EAAI,IAAA;AACF,IAAA,cAAA,GAAiB,MAAM,KAAA;AAAA,MACrB,WAAW,IAAI,CAAA,gCAAA,CAAA;AAAA,MACf;AAAA,QACE,OAAS,EAAA;AAAA,UACP,aAAA,EAAe,UAAU,WAAW,CAAA;AAAA;AACtC;AACF,KACF;AAAA,WACO,CAAG,EAAA;AACV,IAAM,MAAA,IAAI,MAAM,CAAuD,qDAAA,CAAA,CAAA;AAAA;AAIzE,EAAA,MAAM,QAAW,GAAA,cAAA,CAAe,OAAQ,CAAA,GAAA,CAAI,aAAa,CAAA;AACzD,EAAA,IAAI,CAAC,QAAU,EAAA;AACb,IAAM,MAAA,IAAI,MAAM,CAAuD,qDAAA,CAAA,CAAA;AAAA;AAGzE,EAAI,IAAA,YAAA;AACJ,EAAI,IAAA;AACF,IAAA,YAAA,GAAe,MAAM,KAAA;AAAA,MACnB,CAAA,QAAA,EAAW,IAAI,CAAA,uBAAA,EAA0B,QAAQ,CAAA,eAAA,CAAA;AAAA,MACjD;AAAA,QACE,OAAS,EAAA;AAAA,UACP,aAAA,EAAe,UAAU,WAAW,CAAA;AAAA;AACtC;AACF,KACF;AAAA,WACO,CAAG,EAAA;AACV,IAAA,MAAM,IAAI,KAAA,CAAM,CAAgC,6BAAA,EAAA,QAAQ,CAAG,CAAA,CAAA,CAAA;AAAA;AAG7D,EAAI,IAAA,CAAC,aAAa,EAAI,EAAA;AACpB,IAAA,MAAM,IAAI,KAAA,CAAM,CAAgC,6BAAA,EAAA,QAAQ,CAAG,CAAA,CAAA,CAAA;AAAA;AAG7D,EAAM,MAAA,IAAA,GAAO,MAAM,YAAA,CAAa,IAAK,EAAA;AAErC,EAAA,MAAM,eAAkB,GAAA;AAAA,IACtB,QAAU,EAAA,iBAAA;AAAA,IACV,EAAA,EAAI,IAAK,CAAA,EAAA,CAAG,QAAS,EAAA;AAAA,IACrB,aAAa,IAAK,CAAA,WAAA;AAAA,IAClB,UAAU,IAAK,CAAA,IAAA;AAAA,IACf,MAAQ,EAAA;AAAA,MACN;AAAA,QACE,OAAO,IAAK,CAAA;AAAA;AACd;AACF,GACF;AAEA,EAAA,IAAI,KAAK,SAAW,EAAA;AAClB,IAAgB,eAAA,CAAA,MAAA,GAAS,CAAC,EAAE,KAAO,EAAA,CAAA,QAAA,EAAW,IAAI,CAAG,EAAA,IAAA,CAAK,SAAS,CAAA,CAAA,EAAI,CAAA;AAAA;AAGzE,EAAO,OAAA,eAAA;AACT;;;;"}