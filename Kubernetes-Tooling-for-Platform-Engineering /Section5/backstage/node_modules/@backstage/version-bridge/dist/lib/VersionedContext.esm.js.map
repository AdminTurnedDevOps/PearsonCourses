{"version":3,"file":"VersionedContext.esm.js","sources":["../../src/lib/VersionedContext.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContext, useContext, Context } from 'react';\nimport { getOrCreateGlobalSingleton } from './globalObject';\nimport { createVersionedValueMap, VersionedValue } from './VersionedValue';\n\n/**\n * Get the existing or create a new versioned React context that's\n * stored inside a global singleton.\n *\n * @param key - A key that uniquely identifies the context.\n * @public\n * @example\n *\n * ```ts\n * const MyContext = createVersionedContext<{ 1: string }>('my-context');\n *\n * const MyContextProvider = ({children}) => (\n *   <MyContext.Provider value={createVersionedValueMap({ 1: 'value-for-version-1' })}>\n *     {children}\n *   <MyContext.Provider>\n * )\n * ```\n */\nexport function createVersionedContext<\n  Versions extends { [version in number]: unknown },\n>(key: string): Context<VersionedValue<Versions> | undefined> {\n  return getOrCreateGlobalSingleton(key, () =>\n    createContext<VersionedValue<Versions> | undefined>(undefined),\n  );\n}\n\n/**\n * A hook that simplifies the consumption of a versioned contexts that's\n * stored inside a global singleton.\n *\n * @param key - A key that uniquely identifies the context.\n * @public\n * @example\n *\n * ```ts\n * const versionedHolder = useVersionedContext<{ 1: string }>('my-context');\n *\n * if (!versionedHolder) {\n *   throw new Error('My context is not available!')\n * }\n *\n * const myValue = versionedHolder.atVersion(1);\n *\n * // ...\n * ```\n */\nexport function useVersionedContext<\n  Versions extends { [version in number]: unknown },\n>(key: string): VersionedValue<Versions> | undefined {\n  return useContext(createVersionedContext<Versions>(key));\n}\n\n/**\n * Creates a helper for writing tests towards multiple different\n * combinations of versions provided from a context.\n *\n * @param key - A key that uniquely identifies the context.\n * @public\n * @example\n *\n * ```ts\n * const context = createVersionedContextForTesting('my-context');\n *\n * afterEach(() => {\n *   context.reset();\n * });\n *\n * it('should work when provided with version 1', () => {\n *   context.set({1: 'value-for-version-1'})\n *\n *   // ...\n * })\n * ```\n */\nexport function createVersionedContextForTesting(key: string) {\n  return {\n    set(versions: { [version in number]: unknown }) {\n      (globalThis as any)[`__@backstage/${key}__`] = createContext(\n        createVersionedValueMap(versions),\n      );\n    },\n    reset() {\n      delete (globalThis as any)[`__@backstage/${key}__`];\n    },\n  };\n}\n"],"names":[],"mappings":";;;;AAsCO,SAAS,uBAEd,GAA4D,EAAA;AAC5D,EAAO,OAAA,0BAAA;AAAA,IAA2B,GAAA;AAAA,IAAK,MACrC,cAAoD,KAAS,CAAA,CAAA;AAAA,GAC/D,CAAA;AACF,CAAA;AAsBO,SAAS,oBAEd,GAAmD,EAAA;AACnD,EAAO,OAAA,UAAA,CAAW,sBAAiC,CAAA,GAAG,CAAC,CAAA,CAAA;AACzD,CAAA;AAwBO,SAAS,iCAAiC,GAAa,EAAA;AAC5D,EAAO,OAAA;AAAA,IACL,IAAI,QAA4C,EAAA;AAC9C,MAAC,UAAmB,CAAA,CAAA,aAAA,EAAgB,GAAG,CAAA,EAAA,CAAI,CAAI,GAAA,aAAA;AAAA,QAC7C,wBAAwB,QAAQ,CAAA;AAAA,OAClC,CAAA;AAAA,KACF;AAAA,IACA,KAAQ,GAAA;AACN,MAAQ,OAAA,UAAA,CAAmB,CAAgB,aAAA,EAAA,GAAG,CAAI,EAAA,CAAA,CAAA,CAAA;AAAA,KACpD;AAAA,GACF,CAAA;AACF;;;;"}