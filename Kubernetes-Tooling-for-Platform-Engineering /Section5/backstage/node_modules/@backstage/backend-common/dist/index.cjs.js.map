{"version":3,"file":"index.cjs.js","sources":["../../backend-defaults/src/entrypoints/rootHttpRouter/http/config.ts","../../backend-defaults/src/entrypoints/discovery/HostDiscovery.ts","../../backend-defaults/src/entrypoints/cache/types.ts","../../backend-defaults/src/entrypoints/cache/CacheClient.ts","../../backend-defaults/src/entrypoints/cache/CacheManager.ts","../../backend-defaults/src/entrypoints/database/connectors/defaultNameOverride.ts","../../backend-defaults/src/entrypoints/database/connectors/mergeDatabaseConfig.ts","../../backend-defaults/src/entrypoints/database/connectors/mysql.ts","../../backend-defaults/src/entrypoints/database/connectors/defaultSchemaOverride.ts","../../backend-defaults/src/entrypoints/database/connectors/postgres.ts","../../backend-defaults/src/entrypoints/database/connectors/sqlite3.ts","../../backend-defaults/src/entrypoints/database/DatabaseManager.ts","../src/deprecated/hot.ts","../../backend-defaults/src/lib/escapeRegExp.ts","../../backend-defaults/src/entrypoints/rootLogger/WinstonLogger.ts","../src/deprecated/logging/globalLoggers.ts","../src/deprecated/logging/createRootLogger.ts","../../backend-defaults/src/entrypoints/rootConfig/createConfigSecretEnumerator.ts","../src/deprecated/config/ObservableConfigProxy.ts","../src/deprecated/config/urls.ts","../src/deprecated/config/config.ts","../src/deprecated/scm/git.ts","../src/deprecated/tokens/ServerTokenManager.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/readHelmetOptions.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/readCorsOptions.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/applyInternalErrorFilter.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/MiddlewareFactory.ts","../src/deprecated/middleware/errorHandler.ts","../src/deprecated/middleware/notFoundHandler.ts","../src/deprecated/middleware/requestLoggingHandler.ts","../src/deprecated/middleware/statusCheckHandler.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/getGeneratedCertificate.ts","../../backend-defaults/src/entrypoints/rootHttpRouter/http/createHttpServer.ts","../src/deprecated/service/lib/ServiceBuilderImpl.ts","../src/deprecated/service/createServiceBuilder.ts","../src/deprecated/service/createStatusCheckRouter.ts","../src/deprecated/util/DockerContainerRunner.ts","../src/deprecated/util/KubernetesContainerRunner.ts","../src/deprecated/index.ts","../src/compat/cache/cacheToPluginCacheManager.ts","../src/compat/logging/loggerToWinstonLogger.ts","../src/compat/legacy/legacy.ts","../../backend-defaults/src/entrypoints/auth/helpers.ts","../src/compat/auth/createLegacyAuthAdapters.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { HttpServerOptions } from './types';\n\nconst DEFAULT_PORT = 7007;\nconst DEFAULT_HOST = '';\n\n/**\n * Reads {@link HttpServerOptions} from a {@link @backstage/config#Config} object.\n *\n * @public\n * @remarks\n *\n * The provided configuration object should contain the `listen` and\n * additional keys directly.\n *\n * @example\n * ```ts\n * const opts = readHttpServerOptions(config.getConfig('backend'));\n * ```\n */\nexport function readHttpServerOptions(config?: Config): HttpServerOptions {\n  return {\n    listen: readHttpListenOptions(config),\n    https: readHttpsOptions(config),\n  };\n}\n\nfunction readHttpListenOptions(config?: Config): HttpServerOptions['listen'] {\n  const listen = config?.getOptional('listen');\n  if (typeof listen === 'string') {\n    const parts = String(listen).split(':');\n    const port = parseInt(parts[parts.length - 1], 10);\n    if (!isNaN(port)) {\n      if (parts.length === 1) {\n        return { port, host: DEFAULT_HOST };\n      }\n      if (parts.length === 2) {\n        return { host: parts[0], port };\n      }\n    }\n    throw new Error(\n      `Unable to parse listen address ${listen}, expected <port> or <host>:<port>`,\n    );\n  }\n\n  // Workaround to allow empty string\n  const host = config?.getOptional('listen.host') ?? DEFAULT_HOST;\n  if (typeof host !== 'string') {\n    config?.getOptionalString('listen.host'); // will throw\n    throw new Error('unreachable');\n  }\n\n  return {\n    port: config?.getOptionalNumber('listen.port') ?? DEFAULT_PORT,\n    host,\n  };\n}\n\nfunction readHttpsOptions(config?: Config): HttpServerOptions['https'] {\n  const https = config?.getOptional('https');\n  if (https === true) {\n    const baseUrl = config!.getString('baseUrl');\n    let hostname;\n    try {\n      hostname = new URL(baseUrl).hostname;\n    } catch (error) {\n      throw new Error(`Invalid baseUrl \"${baseUrl}\"`);\n    }\n\n    return { certificate: { type: 'generated', hostname } };\n  }\n\n  const cc = config?.getOptionalConfig('https');\n  if (!cc) {\n    return undefined;\n  }\n\n  return {\n    certificate: {\n      type: 'pem',\n      cert: cc.getString('certificate.cert'),\n      key: cc.getString('certificate.key'),\n    },\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  DiscoveryService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport { readHttpServerOptions } from '../rootHttpRouter/http/config';\n\ntype Target = string | { internal: string; external: string };\n\n/**\n * HostDiscovery is a basic PluginEndpointDiscovery implementation\n * that can handle plugins that are hosted in a single or multiple deployments.\n *\n * The deployment may be scaled horizontally, as long as the external URL\n * is the same for all instances. However, internal URLs will always be\n * resolved to the same host, so there won't be any balancing of internal traffic.\n *\n * @public\n */\nexport class HostDiscovery implements DiscoveryService {\n  /**\n   * Creates a new HostDiscovery discovery instance by reading\n   * from the `backend` config section, specifically the `.baseUrl` for\n   * discovering the external URL, and the `.listen` and `.https` config\n   * for the internal one.\n   *\n   * Can be overridden in config by providing a target and corresponding plugins in `discovery.endpoints`.\n   * eg.\n   *\n   * ```yaml\n   * discovery:\n   *  endpoints:\n   *    - target: https://internal.example.com/internal-catalog\n   *      plugins: [catalog]\n   *    - target: https://internal.example.com/secure/api/{{pluginId}}\n   *      plugins: [auth, permission]\n   *    - target:\n   *        internal: https://internal.example.com/search\n   *        external: https://example.com/search\n   *      plugins: [search]\n   * ```\n   *\n   * The fixed base path is `/api`, meaning the default full internal\n   * path for the `catalog` plugin will be `http://localhost:7007/api/catalog`.\n   */\n  static fromConfig(config: RootConfigService) {\n    const basePath = '/api';\n    const externalBaseUrl = config\n      .getString('backend.baseUrl')\n      .replace(/\\/+$/, '');\n\n    const {\n      listen: { host: listenHost = '::', port: listenPort },\n    } = readHttpServerOptions(config.getConfig('backend'));\n    const protocol = config.has('backend.https') ? 'https' : 'http';\n\n    // Translate bind-all to localhost, and support IPv6\n    let host = listenHost;\n    if (host === '::' || host === '') {\n      // We use localhost instead of ::1, since IPv6-compatible systems should default\n      // to using IPv6 when they see localhost, but if the system doesn't support IPv6\n      // things will still work.\n      host = 'localhost';\n    } else if (host === '0.0.0.0') {\n      host = '127.0.0.1';\n    }\n    if (host.includes(':')) {\n      host = `[${host}]`;\n    }\n\n    const internalBaseUrl = `${protocol}://${host}:${listenPort}`;\n\n    return new HostDiscovery(\n      internalBaseUrl + basePath,\n      externalBaseUrl + basePath,\n      config.getOptionalConfig('discovery'),\n    );\n  }\n\n  private constructor(\n    private readonly internalBaseUrl: string,\n    private readonly externalBaseUrl: string,\n    private readonly discoveryConfig: Config | undefined,\n  ) {}\n\n  private getTargetFromConfig(pluginId: string, type: 'internal' | 'external') {\n    const endpoints = this.discoveryConfig?.getOptionalConfigArray('endpoints');\n\n    const target = endpoints\n      ?.find(endpoint => endpoint.getStringArray('plugins').includes(pluginId))\n      ?.get<Target>('target');\n\n    if (!target) {\n      const baseUrl =\n        type === 'external' ? this.externalBaseUrl : this.internalBaseUrl;\n\n      return `${baseUrl}/${encodeURIComponent(pluginId)}`;\n    }\n\n    if (typeof target === 'string') {\n      return target.replace(\n        /\\{\\{\\s*pluginId\\s*\\}\\}/g,\n        encodeURIComponent(pluginId),\n      );\n    }\n\n    return target[type].replace(\n      /\\{\\{\\s*pluginId\\s*\\}\\}/g,\n      encodeURIComponent(pluginId),\n    );\n  }\n\n  async getBaseUrl(pluginId: string): Promise<string> {\n    return this.getTargetFromConfig(pluginId, 'internal');\n  }\n\n  async getExternalBaseUrl(pluginId: string): Promise<string> {\n    return this.getTargetFromConfig(pluginId, 'external');\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { HumanDuration, durationToMilliseconds } from '@backstage/types';\n\n/**\n * Options given when constructing a {@link CacheManager}.\n *\n * @public\n */\nexport type CacheManagerOptions = {\n  /**\n   * An optional logger for use by the PluginCacheManager.\n   */\n  logger?: LoggerService;\n\n  /**\n   * An optional handler for connection errors emitted from the underlying data\n   * store.\n   */\n  onError?: (err: Error) => void;\n};\n\nexport function ttlToMilliseconds(ttl: number | HumanDuration): number {\n  return typeof ttl === 'number' ? ttl : durationToMilliseconds(ttl);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheService,\n  CacheServiceOptions,\n  CacheServiceSetOptions,\n} from '@backstage/backend-plugin-api';\nimport { JsonValue } from '@backstage/types';\nimport { createHash } from 'crypto';\nimport Keyv from 'keyv';\nimport { ttlToMilliseconds } from './types';\n\nexport type CacheClientFactory = (options: CacheServiceOptions) => Keyv;\n\n/**\n * A basic, concrete implementation of the CacheService, suitable for almost\n * all uses in Backstage.\n */\nexport class DefaultCacheClient implements CacheService {\n  #client: Keyv;\n  #clientFactory: CacheClientFactory;\n  #options: CacheServiceOptions;\n\n  constructor(\n    client: Keyv,\n    clientFactory: CacheClientFactory,\n    options: CacheServiceOptions,\n  ) {\n    this.#client = client;\n    this.#clientFactory = clientFactory;\n    this.#options = options;\n  }\n\n  async get<TValue extends JsonValue>(\n    key: string,\n  ): Promise<TValue | undefined> {\n    const k = this.getNormalizedKey(key);\n    const value = await this.#client.get(k);\n    return value as TValue | undefined;\n  }\n\n  async set(\n    key: string,\n    value: JsonValue,\n    opts: CacheServiceSetOptions = {},\n  ): Promise<void> {\n    const k = this.getNormalizedKey(key);\n    const ttl =\n      opts.ttl !== undefined ? ttlToMilliseconds(opts.ttl) : undefined;\n    await this.#client.set(k, value, ttl);\n  }\n\n  async delete(key: string): Promise<void> {\n    const k = this.getNormalizedKey(key);\n    await this.#client.delete(k);\n  }\n\n  withOptions(options: CacheServiceOptions): CacheService {\n    const newOptions = { ...this.#options, ...options };\n    return new DefaultCacheClient(\n      this.#clientFactory(newOptions),\n      this.#clientFactory,\n      newOptions,\n    );\n  }\n\n  /**\n   * Ensures keys are well-formed for any/all cache stores.\n   */\n  private getNormalizedKey(candidateKey: string): string {\n    // Remove potentially invalid characters.\n    const wellFormedKey = Buffer.from(candidateKey).toString('base64');\n\n    // Memcache in particular doesn't do well with keys > 250 bytes.\n    // Padded because a plugin ID is also prepended to the key.\n    if (wellFormedKey.length < 200) {\n      return wellFormedKey;\n    }\n\n    return createHash('sha256').update(candidateKey).digest('base64');\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheService,\n  CacheServiceOptions,\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport Keyv from 'keyv';\nimport { DefaultCacheClient } from './CacheClient';\nimport { CacheManagerOptions, ttlToMilliseconds } from './types';\nimport { durationToMilliseconds } from '@backstage/types';\n\ntype StoreFactory = (pluginId: string, defaultTtl: number | undefined) => Keyv;\n\n/**\n * Implements a Cache Manager which will automatically create new cache clients\n * for plugins when requested. All requested cache clients are created with the\n * connection details provided.\n *\n * @public\n */\nexport class CacheManager {\n  /**\n   * Keys represent supported `backend.cache.store` values, mapped to factories\n   * that return Keyv instances appropriate to the store.\n   */\n  private readonly storeFactories = {\n    redis: this.createRedisStoreFactory(),\n    memcache: this.createMemcacheStoreFactory(),\n    memory: this.createMemoryStoreFactory(),\n  };\n\n  private readonly logger?: LoggerService;\n  private readonly store: keyof CacheManager['storeFactories'];\n  private readonly connection: string;\n  private readonly useRedisSets: boolean;\n  private readonly errorHandler: CacheManagerOptions['onError'];\n  private readonly defaultTtl?: number;\n\n  /**\n   * Creates a new {@link CacheManager} instance by reading from the `backend`\n   * config section, specifically the `.cache` key.\n   *\n   * @param config - The loaded application configuration.\n   */\n  static fromConfig(\n    config: RootConfigService,\n    options: CacheManagerOptions = {},\n  ): CacheManager {\n    // If no `backend.cache` config is provided, instantiate the CacheManager\n    // with an in-memory cache client.\n    const store = config.getOptionalString('backend.cache.store') || 'memory';\n    const defaultTtlConfig = config.getOptional('backend.cache.defaultTtl');\n    const connectionString =\n      config.getOptionalString('backend.cache.connection') || '';\n    const useRedisSets =\n      config.getOptionalBoolean('backend.cache.useRedisSets') ?? true;\n    const logger = options.logger?.child({\n      type: 'cacheManager',\n    });\n\n    let defaultTtl: number | undefined;\n    if (defaultTtlConfig !== undefined && defaultTtlConfig !== null) {\n      if (typeof defaultTtlConfig === 'number') {\n        defaultTtl = defaultTtlConfig;\n      } else if (\n        typeof defaultTtlConfig === 'object' &&\n        !Array.isArray(defaultTtlConfig)\n      ) {\n        defaultTtl = durationToMilliseconds(defaultTtlConfig);\n      } else {\n        throw new Error(\n          `Invalid configuration backend.cache.defaultTtl: ${defaultTtlConfig}, expected milliseconds number or HumanDuration object`,\n        );\n      }\n    }\n\n    return new CacheManager(\n      store,\n      connectionString,\n      useRedisSets,\n      options.onError,\n      logger,\n      defaultTtl,\n    );\n  }\n\n  /** @internal */\n  constructor(\n    store: string,\n    connectionString: string,\n    useRedisSets: boolean,\n    errorHandler: CacheManagerOptions['onError'],\n    logger?: LoggerService,\n    defaultTtl?: number,\n  ) {\n    if (!this.storeFactories.hasOwnProperty(store)) {\n      throw new Error(`Unknown cache store: ${store}`);\n    }\n    this.logger = logger;\n    this.store = store as keyof CacheManager['storeFactories'];\n    this.connection = connectionString;\n    this.useRedisSets = useRedisSets;\n    this.errorHandler = errorHandler;\n    this.defaultTtl = defaultTtl;\n  }\n\n  /**\n   * Generates a PluginCacheManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the cache manager should be created for.\n   *        Plugin names should be unique.\n   */\n  forPlugin(pluginId: string): CacheService {\n    const clientFactory = (options: CacheServiceOptions) => {\n      const ttl = options.defaultTtl ?? this.defaultTtl;\n      return this.getClientWithTtl(\n        pluginId,\n        ttl !== undefined ? ttlToMilliseconds(ttl) : undefined,\n      );\n    };\n\n    return new DefaultCacheClient(clientFactory({}), clientFactory, {});\n  }\n\n  private getClientWithTtl(pluginId: string, ttl: number | undefined): Keyv {\n    return this.storeFactories[this.store](pluginId, ttl);\n  }\n\n  private createRedisStoreFactory(): StoreFactory {\n    const KeyvRedis = require('@keyv/redis');\n    let store: typeof KeyvRedis | undefined;\n    return (pluginId, defaultTtl) => {\n      if (!store) {\n        store = new KeyvRedis(this.connection, {\n          useRedisSets: this.useRedisSets,\n        });\n        // Always provide an error handler to avoid stopping the process\n        store.on('error', (err: Error) => {\n          this.logger?.error('Failed to create redis cache client', err);\n          this.errorHandler?.(err);\n        });\n      }\n      return new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        store,\n        emitErrors: false,\n        useRedisSets: this.useRedisSets,\n      });\n    };\n  }\n\n  private createMemcacheStoreFactory(): StoreFactory {\n    const KeyvMemcache = require('@keyv/memcache');\n    let store: typeof KeyvMemcache | undefined;\n    return (pluginId, defaultTtl) => {\n      if (!store) {\n        store = new KeyvMemcache(this.connection);\n        // Always provide an error handler to avoid stopping the process\n        store.on('error', (err: Error) => {\n          this.logger?.error('Failed to create memcache cache client', err);\n          this.errorHandler?.(err);\n        });\n      }\n      return new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        emitErrors: false,\n        store,\n      });\n    };\n  }\n\n  private createMemoryStoreFactory(): StoreFactory {\n    const store = new Map();\n    return (pluginId, defaultTtl) =>\n      new Keyv({\n        namespace: pluginId,\n        ttl: defaultTtl,\n        emitErrors: false,\n        store,\n      });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\n\n/**\n * Provides a partial knex config with database name override.\n *\n * Default override for knex database drivers which accept ConnectionConfig\n * with `connection.database` as the database name field.\n *\n * @param name - database name to get config override for\n */\nexport default function defaultNameOverride(\n  name: string,\n): Partial<Knex.Config> {\n  return {\n    connection: {\n      database: name,\n    },\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { merge } from 'lodash';\n\n/**\n * Merges database objects together\n *\n * @public\n * @param config - The base config. The input is not modified\n * @param overrides - Any additional overrides\n */\nexport function mergeDatabaseConfig(config: any, ...overrides: any[]) {\n  return merge({}, config, ...overrides);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LifecycleService, LoggerService } from '@backstage/backend-plugin-api';\nimport { Config, ConfigReader } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport { JsonObject } from '@backstage/types';\nimport knexFactory, { Knex } from 'knex';\nimport { merge, omit } from 'lodash';\nimport limiterFactory from 'p-limit';\nimport yn from 'yn';\nimport { Connector } from '../types';\nimport defaultNameOverride from './defaultNameOverride';\nimport { mergeDatabaseConfig } from './mergeDatabaseConfig';\n\n// Limits the number of concurrent DDL operations to 1\nconst ddlLimiter = limiterFactory(1);\n\n/**\n * Creates a knex mysql database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createMysqlDatabaseClient(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  const knexConfig = buildMysqlDatabaseConfig(dbConfig, overrides);\n  const database = knexFactory(knexConfig);\n  return database;\n}\n\n/**\n * Builds a knex mysql database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function buildMysqlDatabaseConfig(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  return mergeDatabaseConfig(\n    dbConfig.get(),\n    {\n      connection: getMysqlConnectionConfig(dbConfig, !!overrides),\n      useNullAsDefault: true,\n    },\n    overrides,\n  );\n}\n\n/**\n * Gets the mysql connection config\n *\n * @param dbConfig - The database config\n * @param parseConnectionString - Flag to explicitly control connection string parsing\n */\nexport function getMysqlConnectionConfig(\n  dbConfig: Config,\n  parseConnectionString?: boolean,\n): Knex.MySqlConnectionConfig | string {\n  const connection = dbConfig.get('connection') as any;\n  const isConnectionString =\n    typeof connection === 'string' || connection instanceof String;\n  const autoParse = typeof parseConnectionString !== 'boolean';\n\n  const shouldParseConnectionString = autoParse\n    ? isConnectionString\n    : parseConnectionString && isConnectionString;\n\n  return shouldParseConnectionString\n    ? parseMysqlConnectionString(connection as string)\n    : connection;\n}\n\n/**\n * Parses a mysql connection string.\n *\n * e.g. mysql://examplename:somepassword@examplehost:3306/dbname\n * @param connectionString - The mysql connection string\n */\nexport function parseMysqlConnectionString(\n  connectionString: string,\n): Knex.MySqlConnectionConfig {\n  try {\n    const {\n      protocol,\n      username,\n      password,\n      port,\n      hostname,\n      pathname,\n      searchParams,\n    } = new URL(connectionString);\n\n    if (protocol !== 'mysql:') {\n      throw new Error(`Unknown protocol ${protocol}`);\n    } else if (!username || !password) {\n      throw new Error(`Missing username/password`);\n    } else if (!pathname.match(/^\\/[^/]+$/)) {\n      throw new Error(`Expected single path segment`);\n    }\n\n    const result: Knex.MySqlConnectionConfig = {\n      user: username,\n      password,\n      host: hostname,\n      port: Number(port || 3306),\n      database: decodeURIComponent(pathname.substring(1)),\n    };\n\n    const ssl = searchParams.get('ssl');\n    if (ssl) {\n      result.ssl = ssl;\n    }\n\n    const debug = searchParams.get('debug');\n    if (debug) {\n      result.debug = yn(debug);\n    }\n\n    return result;\n  } catch (e) {\n    throw new InputError(\n      `Error while parsing MySQL connection string, ${e}`,\n      e,\n    );\n  }\n}\n\n/**\n * Creates the missing mysql database if it does not exist\n *\n * @param dbConfig - The database config\n * @param databases - The names of the databases to create\n */\nexport async function ensureMysqlDatabaseExists(\n  dbConfig: Config,\n  ...databases: Array<string>\n) {\n  const admin = createMysqlDatabaseClient(dbConfig, {\n    connection: {\n      database: null as unknown as string,\n    },\n    pool: {\n      min: 0,\n      acquireTimeoutMillis: 10000,\n    },\n  });\n\n  try {\n    const ensureDatabase = async (database: string) => {\n      await admin.raw(`CREATE DATABASE IF NOT EXISTS ??`, [database]);\n    };\n    await Promise.all(\n      databases.map(async database => {\n        // For initial setup we use a smaller timeout but several retries. Given that this\n        // is a separate connection pool we should never really run into issues with connection\n        // acquisition timeouts, but we do anyway. This might be a bug in knex or some other dependency.\n        let lastErr: Error | undefined = undefined;\n        for (let i = 0; i < 3; i++) {\n          try {\n            return await ddlLimiter(() => ensureDatabase(database));\n          } catch (err) {\n            lastErr = err;\n          }\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n        throw lastErr;\n      }),\n    );\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Drops the given mysql databases.\n *\n * @param dbConfig - The database config\n * @param databases - The names of the databases to create\n */\nexport async function dropMysqlDatabase(\n  dbConfig: Config,\n  ...databases: Array<string>\n) {\n  const admin = createMysqlDatabaseClient(dbConfig, {\n    connection: {\n      database: null as unknown as string,\n    },\n    pool: {\n      min: 0,\n      acquireTimeoutMillis: 10000,\n    },\n  });\n\n  try {\n    const dropDatabase = async (database: string) => {\n      await admin.raw(`DROP DATABASE ??`, [database]);\n    };\n    await Promise.all(\n      databases.map(async database => {\n        return await ddlLimiter(() => dropDatabase(database));\n      }),\n    );\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\nfunction normalizeConnection(\n  connection: Knex.StaticConnectionConfig | JsonObject | string | undefined,\n): Partial<Knex.StaticConnectionConfig> {\n  if (typeof connection === 'undefined' || connection === null) {\n    return {};\n  }\n\n  return typeof connection === 'string' || connection instanceof String\n    ? parseMysqlConnectionString(connection as string)\n    : connection;\n}\n\nexport class MysqlConnector implements Connector {\n  constructor(\n    private readonly config: Config,\n    private readonly prefix: string,\n  ) {}\n\n  async getClient(\n    pluginId: string,\n    _deps: {\n      logger: LoggerService;\n      lifecycle: LifecycleService;\n    },\n  ): Promise<Knex> {\n    const pluginConfig = new ConfigReader(\n      this.getConfigForPlugin(pluginId) as JsonObject,\n    );\n\n    const databaseName = this.getDatabaseName(pluginId);\n    if (databaseName && this.getEnsureExistsConfig(pluginId)) {\n      try {\n        await ensureMysqlDatabaseExists(pluginConfig, databaseName);\n      } catch (error) {\n        throw new Error(\n          `Failed to connect to the database to make sure that '${databaseName}' exists, ${error}`,\n        );\n      }\n    }\n\n    const pluginDivisionMode = this.getPluginDivisionModeConfig();\n    if (pluginDivisionMode !== 'database') {\n      throw new Error(\n        `The MySQL driver does not support plugin division mode '${pluginDivisionMode}'`,\n      );\n    }\n\n    const databaseClientOverrides = mergeDatabaseConfig(\n      {},\n      this.getDatabaseOverrides(pluginId),\n    );\n\n    const client = createMysqlDatabaseClient(\n      pluginConfig,\n      databaseClientOverrides,\n    );\n\n    return client;\n  }\n\n  /**\n   * Provides the canonical database name for a given plugin.\n   *\n   * This method provides the effective database name which is determined using\n   * global and plugin specific database config. If no explicit database name,\n   * this method will provide a generated name which is the pluginId prefixed\n   * with 'backstage_plugin_'.\n   *\n   * @param pluginId - Lookup the database name for given plugin\n   * @returns String representing the plugin's database name\n   */\n  private getDatabaseName(pluginId: string): string | undefined {\n    const connection = this.getConnectionConfig(pluginId);\n    const databaseName = (connection as Knex.ConnectionConfig)?.database;\n    return databaseName ?? `${this.prefix}${pluginId}`;\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  private getRoleConfig(pluginId: string): string | undefined {\n    return (\n      this.config.getOptionalString(`${pluginPath(pluginId)}.role`) ??\n      this.config.getOptionalString('role')\n    );\n  }\n\n  /**\n   * Provides the knexConfig which should be used for a given plugin.\n   *\n   * @param pluginId - Plugin to get the knexConfig for\n   * @returns The merged knexConfig value or undefined if it isn't specified\n   */\n  private getAdditionalKnexConfig(pluginId: string): JsonObject | undefined {\n    const pluginConfig = this.config\n      .getOptionalConfig(`${pluginPath(pluginId)}.knexConfig`)\n      ?.get<JsonObject>();\n\n    const baseConfig = this.config\n      .getOptionalConfig('knexConfig')\n      ?.get<JsonObject>();\n\n    return merge(baseConfig, pluginConfig);\n  }\n\n  private getEnsureExistsConfig(pluginId: string): boolean {\n    const baseConfig = this.config.getOptionalBoolean('ensureExists') ?? true;\n    return (\n      this.config.getOptionalBoolean(`${pluginPath(pluginId)}.ensureExists`) ??\n      baseConfig\n    );\n  }\n\n  private getPluginDivisionModeConfig(): string {\n    return this.config.getOptionalString('pluginDivisionMode') ?? 'database';\n  }\n\n  /**\n   * Provides a Knex connection plugin config by combining base and plugin\n   * config.\n   *\n   * This method provides a baseConfig for a plugin database connector. If the\n   * client type has not been overridden, the global connection config will be\n   * included with plugin specific config as the base. Values from the plugin\n   * connection take precedence over the base. Base database name is omitted\n   * unless `pluginDivisionMode` is set to `schema`.\n   */\n  private getConnectionConfig(pluginId: string): Knex.StaticConnectionConfig {\n    const { overridden } = this.getClientType(pluginId);\n\n    let baseConnection = normalizeConnection(this.config.get('connection'));\n\n    // Databases cannot be shared unless the `pluginDivisionMode` is set to `schema`. The\n    // `database` property from the base connection is omitted unless `pluginDivisionMode`\n    // is set to `schema`.\n    if (this.getPluginDivisionModeConfig() !== 'schema') {\n      baseConnection = omit(baseConnection, 'database');\n    }\n\n    // get and normalize optional plugin specific database connection\n    const connection = normalizeConnection(\n      this.config.getOptional(`${pluginPath(pluginId)}.connection`),\n    );\n\n    return {\n      // include base connection if client type has not been overridden\n      ...(overridden ? {} : baseConnection),\n      ...connection,\n    } as Knex.StaticConnectionConfig;\n  }\n\n  /**\n   * Provides a Knex database config for a given plugin.\n   *\n   * This method provides a Knex configuration object along with the plugin's\n   * client type.\n   *\n   * @param pluginId - The plugin that the database config should correspond with\n   */\n  private getConfigForPlugin(pluginId: string): Knex.Config {\n    const { client } = this.getClientType(pluginId);\n    const role = this.getRoleConfig(pluginId);\n\n    return {\n      ...this.getAdditionalKnexConfig(pluginId),\n      client,\n      connection: this.getConnectionConfig(pluginId),\n      ...(role && { role }),\n    };\n  }\n\n  /**\n   * Provides a partial `Knex.Config`• database name override for a given plugin.\n   *\n   * @param pluginId - Target plugin to get database name override\n   * @returns Partial `Knex.Config` with database name override\n   */\n  private getDatabaseOverrides(pluginId: string): Knex.Config {\n    const databaseName = this.getDatabaseName(pluginId);\n    return databaseName ? defaultNameOverride(databaseName) : {};\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\n\n/**\n * Provides a partial knex config with schema name override.\n *\n * @param name - schema name to get config override for\n */\nexport default function defaultSchemaOverride(\n  name: string,\n): Partial<Knex.Config> {\n  return {\n    searchPath: [name],\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LifecycleService, LoggerService } from '@backstage/backend-plugin-api';\nimport { Config, ConfigReader } from '@backstage/config';\nimport { ForwardedError } from '@backstage/errors';\nimport { JsonObject } from '@backstage/types';\nimport knexFactory, { Knex } from 'knex';\nimport { merge, omit } from 'lodash';\nimport limiterFactory from 'p-limit';\nimport { Client } from 'pg';\nimport { Connector } from '../types';\nimport defaultNameOverride from './defaultNameOverride';\nimport defaultSchemaOverride from './defaultSchemaOverride';\nimport { mergeDatabaseConfig } from './mergeDatabaseConfig';\nimport format from 'pg-format';\n\n// Limits the number of concurrent DDL operations to 1\nconst ddlLimiter = limiterFactory(1);\n\n/**\n * Creates a knex postgres database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createPgDatabaseClient(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  const knexConfig = buildPgDatabaseConfig(dbConfig, overrides);\n  const database = knexFactory(knexConfig);\n\n  const role = dbConfig.getOptionalString('role');\n\n  if (role) {\n    database.client.pool.on(\n      'createSuccess',\n      async (_event: number, pgClient: Client) => {\n        const query = format('SET ROLE %I', role);\n        await pgClient.query(query);\n      },\n    );\n  }\n  return database;\n}\n\n/**\n * Builds a knex postgres database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function buildPgDatabaseConfig(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n) {\n  return mergeDatabaseConfig(\n    dbConfig.get(),\n    {\n      connection: getPgConnectionConfig(dbConfig, !!overrides),\n      useNullAsDefault: true,\n    },\n    overrides,\n  );\n}\n\n/**\n * Gets the postgres connection config\n *\n * @param dbConfig - The database config\n * @param parseConnectionString - Flag to explicitly control connection string parsing\n */\nexport function getPgConnectionConfig(\n  dbConfig: Config,\n  parseConnectionString?: boolean,\n): Knex.PgConnectionConfig | string {\n  const connection = dbConfig.get('connection') as any;\n  const isConnectionString =\n    typeof connection === 'string' || connection instanceof String;\n  const autoParse = typeof parseConnectionString !== 'boolean';\n\n  const shouldParseConnectionString = autoParse\n    ? isConnectionString\n    : parseConnectionString && isConnectionString;\n\n  return shouldParseConnectionString\n    ? parsePgConnectionString(connection as string)\n    : connection;\n}\n\n/**\n * Parses a connection string using pg-connection-string\n *\n * @param connectionString - The postgres connection string\n */\nexport function parsePgConnectionString(connectionString: string) {\n  const parse = requirePgConnectionString();\n  return parse(connectionString);\n}\n\nfunction requirePgConnectionString() {\n  try {\n    return require('pg-connection-string').parse;\n  } catch (e) {\n    throw new ForwardedError(\"Postgres: Install 'pg-connection-string'\", e);\n  }\n}\n\n/**\n * Creates the missing Postgres database if it does not exist\n *\n * @param dbConfig - The database config\n * @param databases - The name of the databases to create\n */\nexport async function ensurePgDatabaseExists(\n  dbConfig: Config,\n  ...databases: Array<string>\n) {\n  const admin = createPgDatabaseClient(dbConfig, {\n    connection: {\n      database: 'postgres',\n    },\n    pool: {\n      min: 0,\n      acquireTimeoutMillis: 10000,\n    },\n  });\n\n  try {\n    const ensureDatabase = async (database: string) => {\n      const result = await admin\n        .from('pg_database')\n        .where('datname', database)\n        .count<Record<string, { count: string }>>();\n\n      if (parseInt(result[0].count, 10) > 0) {\n        return;\n      }\n\n      await admin.raw(`CREATE DATABASE ??`, [database]);\n    };\n\n    await Promise.all(\n      databases.map(async database => {\n        // For initial setup we use a smaller timeout but several retries. Given that this\n        // is a separate connection pool we should never really run into issues with connection\n        // acquisition timeouts, but we do anyway. This might be a bug in knex or some other dependency.\n        let lastErr: Error | undefined = undefined;\n        for (let i = 0; i < 3; i++) {\n          try {\n            return await ddlLimiter(() => ensureDatabase(database));\n          } catch (err) {\n            lastErr = err;\n          }\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n        throw lastErr;\n      }),\n    );\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Creates the missing Postgres schema if it does not exist\n *\n * @param dbConfig - The database config\n * @param schemas - The name of the schemas to create\n */\nexport async function ensurePgSchemaExists(\n  dbConfig: Config,\n  ...schemas: Array<string>\n): Promise<void> {\n  const admin = createPgDatabaseClient(dbConfig);\n  const role = dbConfig.getOptionalString('role');\n\n  try {\n    const ensureSchema = async (database: string) => {\n      if (role) {\n        await admin.raw(`CREATE SCHEMA IF NOT EXISTS ?? AUTHORIZATION ??`, [\n          database,\n          role,\n        ]);\n      } else {\n        await admin.raw(`CREATE SCHEMA IF NOT EXISTS ??`, [database]);\n      }\n    };\n\n    await Promise.all(\n      schemas.map(database => ddlLimiter(() => ensureSchema(database))),\n    );\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Drops the Postgres databases.\n *\n * @param dbConfig - The database config\n * @param databases - The name of the databases to drop\n */\nexport async function dropPgDatabase(\n  dbConfig: Config,\n  ...databases: Array<string>\n) {\n  const admin = createPgDatabaseClient(dbConfig);\n  try {\n    await Promise.all(\n      databases.map(async database => {\n        await ddlLimiter(() => admin.raw(`DROP DATABASE ??`, [database]));\n      }),\n    );\n  } finally {\n    await admin.destroy();\n  }\n}\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\nfunction normalizeConnection(\n  connection: Knex.StaticConnectionConfig | JsonObject | string | undefined,\n): Partial<Knex.StaticConnectionConfig> {\n  if (typeof connection === 'undefined' || connection === null) {\n    return {};\n  }\n\n  return typeof connection === 'string' || connection instanceof String\n    ? parsePgConnectionString(connection as string)\n    : connection;\n}\n\nexport class PgConnector implements Connector {\n  constructor(\n    private readonly config: Config,\n    private readonly prefix: string,\n  ) {}\n\n  async getClient(\n    pluginId: string,\n    _deps: {\n      logger: LoggerService;\n      lifecycle: LifecycleService;\n    },\n  ): Promise<Knex> {\n    const pluginConfig = new ConfigReader(\n      this.getConfigForPlugin(pluginId) as JsonObject,\n    );\n\n    const databaseName = this.getDatabaseName(pluginId);\n    if (databaseName && this.getEnsureExistsConfig(pluginId)) {\n      try {\n        await ensurePgDatabaseExists(pluginConfig, databaseName);\n      } catch (error) {\n        throw new Error(\n          `Failed to connect to the database to make sure that '${databaseName}' exists, ${error}`,\n        );\n      }\n    }\n\n    let schemaOverrides;\n    if (this.getPluginDivisionModeConfig() === 'schema') {\n      schemaOverrides = defaultSchemaOverride(pluginId);\n      if (\n        this.getEnsureSchemaExistsConfig(pluginId) ||\n        this.getEnsureExistsConfig(pluginId)\n      ) {\n        try {\n          await ensurePgSchemaExists(pluginConfig, pluginId);\n        } catch (error) {\n          throw new Error(\n            `Failed to connect to the database to make sure that schema for plugin '${pluginId}' exists, ${error}`,\n          );\n        }\n      }\n    }\n\n    const databaseClientOverrides = mergeDatabaseConfig(\n      {},\n      this.getDatabaseOverrides(pluginId),\n      schemaOverrides,\n    );\n\n    const client = createPgDatabaseClient(\n      pluginConfig,\n      databaseClientOverrides,\n    );\n\n    return client;\n  }\n\n  /**\n   * Provides the canonical database name for a given plugin.\n   *\n   * This method provides the effective database name which is determined using global\n   * and plugin specific database config. If no explicit database name is configured\n   * and `pluginDivisionMode` is not `schema`, this method will provide a generated name\n   * which is the pluginId prefixed with 'backstage_plugin_'. If `pluginDivisionMode` is\n   * `schema`, it will fallback to using the default database for the knex instance.\n   *\n   * @param pluginId - Lookup the database name for given plugin\n   * @returns String representing the plugin's database name\n   */\n  private getDatabaseName(pluginId: string): string | undefined {\n    const connection = this.getConnectionConfig(pluginId);\n\n    const databaseName = (connection as Knex.ConnectionConfig)?.database;\n\n    // `pluginDivisionMode` as `schema` should use overridden databaseName if supplied or fallback to default knex database\n    if (this.getPluginDivisionModeConfig() === 'schema') {\n      return databaseName;\n    }\n\n    // all other supported databases should fallback to an auto-prefixed name\n    return databaseName ?? `${this.prefix}${pluginId}`;\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  private getRoleConfig(pluginId: string): string | undefined {\n    return (\n      this.config.getOptionalString(`${pluginPath(pluginId)}.role`) ??\n      this.config.getOptionalString('role')\n    );\n  }\n\n  /**\n   * Provides the knexConfig which should be used for a given plugin.\n   *\n   * @param pluginId - Plugin to get the knexConfig for\n   * @returns The merged knexConfig value or undefined if it isn't specified\n   */\n  private getAdditionalKnexConfig(pluginId: string): JsonObject | undefined {\n    const pluginConfig = this.config\n      .getOptionalConfig(`${pluginPath(pluginId)}.knexConfig`)\n      ?.get<JsonObject>();\n\n    const baseConfig = this.config\n      .getOptionalConfig('knexConfig')\n      ?.get<JsonObject>();\n\n    return merge(baseConfig, pluginConfig);\n  }\n\n  private getEnsureExistsConfig(pluginId: string): boolean {\n    const baseConfig = this.config.getOptionalBoolean('ensureExists') ?? true;\n    return (\n      this.config.getOptionalBoolean(`${pluginPath(pluginId)}.ensureExists`) ??\n      baseConfig\n    );\n  }\n\n  private getEnsureSchemaExistsConfig(pluginId: string): boolean {\n    const baseConfig =\n      this.config.getOptionalBoolean('ensureSchemaExists') ?? false;\n    return (\n      this.config.getOptionalBoolean(\n        `${pluginPath(pluginId)}.getEnsureSchemaExistsConfig`,\n      ) ?? baseConfig\n    );\n  }\n\n  private getPluginDivisionModeConfig(): string {\n    return this.config.getOptionalString('pluginDivisionMode') ?? 'database';\n  }\n\n  /**\n   * Provides a Knex connection plugin config by combining base and plugin\n   * config.\n   *\n   * This method provides a baseConfig for a plugin database connector. If the\n   * client type has not been overridden, the global connection config will be\n   * included with plugin specific config as the base. Values from the plugin\n   * connection take precedence over the base. Base database name is omitted\n   * unless `pluginDivisionMode` is set to `schema`.\n   */\n  private getConnectionConfig(pluginId: string): Knex.StaticConnectionConfig {\n    const { overridden } = this.getClientType(pluginId);\n\n    let baseConnection = normalizeConnection(this.config.get('connection'));\n\n    // Databases cannot be shared unless the `pluginDivisionMode` is set to `schema`. The\n    // `database` property from the base connection is omitted unless `pluginDivisionMode`\n    // is set to `schema`.\n    if (this.getPluginDivisionModeConfig() !== 'schema') {\n      baseConnection = omit(baseConnection, 'database');\n    }\n\n    // get and normalize optional plugin specific database connection\n    const connection = normalizeConnection(\n      this.config.getOptional(`${pluginPath(pluginId)}.connection`),\n    );\n\n    (\n      baseConnection as Knex.PgConnectionConfig\n    ).application_name ||= `backstage_plugin_${pluginId}`;\n\n    return {\n      // include base connection if client type has not been overridden\n      ...(overridden ? {} : baseConnection),\n      ...connection,\n    } as Knex.StaticConnectionConfig;\n  }\n\n  /**\n   * Provides a Knex database config for a given plugin.\n   *\n   * This method provides a Knex configuration object along with the plugin's\n   * client type.\n   *\n   * @param pluginId - The plugin that the database config should correspond with\n   */\n  private getConfigForPlugin(pluginId: string): Knex.Config {\n    const { client } = this.getClientType(pluginId);\n    const role = this.getRoleConfig(pluginId);\n\n    return {\n      ...this.getAdditionalKnexConfig(pluginId),\n      client,\n      connection: this.getConnectionConfig(pluginId),\n      ...(role && { role }),\n    };\n  }\n\n  /**\n   * Provides a partial `Knex.Config`• database name override for a given plugin.\n   *\n   * @param pluginId - Target plugin to get database name override\n   * @returns Partial `Knex.Config` with database name override\n   */\n  private getDatabaseOverrides(pluginId: string): Knex.Config {\n    const databaseName = this.getDatabaseName(pluginId);\n    return databaseName ? defaultNameOverride(databaseName) : {};\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DevDataStore } from '@backstage/backend-dev-utils';\nimport { LifecycleService, LoggerService } from '@backstage/backend-plugin-api';\nimport { Config, ConfigReader } from '@backstage/config';\nimport { JsonObject } from '@backstage/types';\nimport { ensureDirSync } from 'fs-extra';\nimport knexFactory, { Knex } from 'knex';\nimport { merge, omit } from 'lodash';\nimport path from 'path';\nimport { Connector } from '../types';\nimport { mergeDatabaseConfig } from './mergeDatabaseConfig';\n\n/**\n * Creates a knex SQLite3 database connection\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function createSqliteDatabaseClient(\n  pluginId: string,\n  dbConfig: Config,\n  deps: {\n    logger: LoggerService;\n    lifecycle: LifecycleService;\n  },\n  overrides?: Knex.Config,\n) {\n  const knexConfig = buildSqliteDatabaseConfig(dbConfig, overrides);\n  const connConfig = knexConfig.connection as Knex.Sqlite3ConnectionConfig;\n\n  const filename = connConfig.filename ?? ':memory:';\n\n  // If storage on disk is used, ensure that the directory exists\n  if (filename !== ':memory:') {\n    const directory = path.dirname(filename);\n    ensureDirSync(directory);\n  }\n\n  let database: Knex;\n\n  if (deps && filename === ':memory:') {\n    // The dev store is used during watch mode to store and restore the database\n    // across reloads. It is only available when running the backend through\n    // `backstage-cli package start`.\n    const devStore = DevDataStore.get();\n\n    if (devStore) {\n      const dataKey = `sqlite3-db-${pluginId}`;\n\n      const connectionLoader = async () => {\n        // If seed data is available, use it tconnectionLoader restore the database\n        const { data: seedData } = await devStore.load(dataKey);\n\n        return {\n          ...(knexConfig.connection as Knex.Sqlite3ConnectionConfig),\n          filename: seedData ?? ':memory:',\n        };\n      };\n\n      database = knexFactory({\n        ...knexConfig,\n        connection: Object.assign(connectionLoader, {\n          // This is a workaround for the knex SQLite driver always warning when using a config loader\n          filename: ':memory:',\n        }),\n      });\n\n      // If the dev store is available we save the database state on shutdown\n      deps.lifecycle.addShutdownHook(async () => {\n        const connection = await database.client.acquireConnection();\n        const data = connection.serialize();\n        await devStore.save(dataKey, data);\n      });\n    } else {\n      database = knexFactory(knexConfig);\n    }\n  } else {\n    database = knexFactory(knexConfig);\n  }\n\n  database.client.pool.on('createSuccess', (_eventId: any, resource: any) => {\n    resource.run('PRAGMA foreign_keys = ON', () => {});\n  });\n\n  return database;\n}\n\n/**\n * Builds a knex SQLite3 connection config\n *\n * @param dbConfig - The database config\n * @param overrides - Additional options to merge with the config\n */\nexport function buildSqliteDatabaseConfig(\n  dbConfig: Config,\n  overrides?: Knex.Config,\n): Knex.Config {\n  const baseConfig = dbConfig.get<Knex.Config>();\n\n  // Normalize config to always contain a connection object\n  if (typeof baseConfig.connection === 'string') {\n    baseConfig.connection = { filename: baseConfig.connection };\n  }\n  if (overrides && typeof overrides.connection === 'string') {\n    overrides.connection = { filename: overrides.connection };\n  }\n\n  const config: Knex.Config = mergeDatabaseConfig(\n    {\n      connection: {},\n    },\n    baseConfig,\n    {\n      useNullAsDefault: true,\n    },\n    overrides,\n  );\n\n  return config;\n}\n\n/**\n * Provides a partial knex SQLite3 config to override database name.\n */\nexport function createSqliteNameOverride(name: string): Partial<Knex.Config> {\n  return {\n    connection: parseSqliteConnectionString(name),\n  };\n}\n\n/**\n * Produces a partial knex SQLite3 connection config with database name.\n */\nexport function parseSqliteConnectionString(\n  name: string,\n): Knex.Sqlite3ConnectionConfig {\n  return {\n    filename: name,\n  };\n}\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\nfunction normalizeConnection(\n  connection: Knex.StaticConnectionConfig | JsonObject | string | undefined,\n): Partial<Knex.StaticConnectionConfig> {\n  if (typeof connection === 'undefined' || connection === null) {\n    return {};\n  }\n\n  return typeof connection === 'string' || connection instanceof String\n    ? parseSqliteConnectionString(connection as string)\n    : connection;\n}\n\nexport class Sqlite3Connector implements Connector {\n  constructor(private readonly config: Config) {}\n\n  async getClient(\n    pluginId: string,\n    deps: {\n      logger: LoggerService;\n      lifecycle: LifecycleService;\n    },\n  ): Promise<Knex> {\n    const pluginConfig = new ConfigReader(\n      this.getConfigForPlugin(pluginId) as JsonObject,\n    );\n\n    const pluginDivisionMode = this.getPluginDivisionModeConfig();\n    if (pluginDivisionMode !== 'database') {\n      throw new Error(\n        `The SQLite driver does not support plugin division mode '${pluginDivisionMode}'`,\n      );\n    }\n\n    const databaseClientOverrides = mergeDatabaseConfig(\n      {},\n      this.getDatabaseOverrides(pluginId),\n    );\n\n    const client = createSqliteDatabaseClient(\n      pluginId,\n      pluginConfig,\n      deps,\n      databaseClientOverrides,\n    );\n\n    return client;\n  }\n\n  /**\n   * Provides the canonical database name for a given plugin.\n   *\n   * This method provides the effective database name which is determined using global\n   * and plugin specific database config. If no explicit database name is configured\n   * and `pluginDivisionMode` is not `schema`, this method will provide a generated name\n   * which is the pluginId prefixed with 'backstage_plugin_'. If `pluginDivisionMode` is\n   * `schema`, it will fallback to using the default database for the knex instance.\n   *\n   * @param pluginId - Lookup the database name for given plugin\n   * @returns String representing the plugin's database name\n   */\n  private getDatabaseName(pluginId: string): string | undefined {\n    const connection = this.getConnectionConfig(pluginId);\n\n    const sqliteFilename: string | undefined = (\n      connection as Knex.Sqlite3ConnectionConfig\n    ).filename;\n\n    if (sqliteFilename === ':memory:') {\n      return sqliteFilename;\n    }\n\n    const sqliteDirectory =\n      (connection as { directory?: string }).directory ?? '.';\n\n    return path.join(sqliteDirectory, sqliteFilename ?? `${pluginId}.sqlite`);\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  private getRoleConfig(pluginId: string): string | undefined {\n    return (\n      this.config.getOptionalString(`${pluginPath(pluginId)}.role`) ??\n      this.config.getOptionalString('role')\n    );\n  }\n\n  /**\n   * Provides the knexConfig which should be used for a given plugin.\n   *\n   * @param pluginId - Plugin to get the knexConfig for\n   * @returns The merged knexConfig value or undefined if it isn't specified\n   */\n  private getAdditionalKnexConfig(pluginId: string): JsonObject | undefined {\n    const pluginConfig = this.config\n      .getOptionalConfig(`${pluginPath(pluginId)}.knexConfig`)\n      ?.get<JsonObject>();\n\n    const baseConfig = this.config\n      .getOptionalConfig('knexConfig')\n      ?.get<JsonObject>();\n\n    return merge(baseConfig, pluginConfig);\n  }\n\n  private getPluginDivisionModeConfig(): string {\n    return this.config.getOptionalString('pluginDivisionMode') ?? 'database';\n  }\n\n  /**\n   * Provides a Knex connection plugin config by combining base and plugin\n   * config.\n   *\n   * This method provides a baseConfig for a plugin database connector. If the\n   * client type has not been overridden, the global connection config will be\n   * included with plugin specific config as the base. Values from the plugin\n   * connection take precedence over the base. Base database name is omitted for\n   * all supported databases excluding SQLite unless `pluginDivisionMode` is set\n   * to `schema`.\n   */\n  private getConnectionConfig(pluginId: string): Knex.StaticConnectionConfig {\n    const { client, overridden } = this.getClientType(pluginId);\n\n    let baseConnection = normalizeConnection(this.config.get('connection'));\n\n    if (\n      client.includes('sqlite3') &&\n      'filename' in baseConnection &&\n      baseConnection.filename !== ':memory:'\n    ) {\n      throw new Error(\n        '`connection.filename` is not supported for the base sqlite connection. Prefer `connection.directory` or provide a filename for the plugin connection instead.',\n      );\n    }\n\n    // Databases cannot be shared unless the `pluginDivisionMode` is set to `schema`. The\n    // `database` property from the base connection is omitted unless `pluginDivisionMode`\n    // is set to `schema`. SQLite3's `filename` property is an exception as this is used as a\n    // directory elsewhere so we preserve `filename`.\n    if (this.getPluginDivisionModeConfig() !== 'schema') {\n      baseConnection = omit(baseConnection, 'database');\n    }\n\n    // get and normalize optional plugin specific database connection\n    const connection = normalizeConnection(\n      this.config.getOptional(`${pluginPath(pluginId)}.connection`),\n    );\n\n    return {\n      // include base connection if client type has not been overridden\n      ...(overridden ? {} : baseConnection),\n      ...connection,\n    } as Knex.StaticConnectionConfig;\n  }\n\n  /**\n   * Provides a Knex database config for a given plugin.\n   *\n   * This method provides a Knex configuration object along with the plugin's\n   * client type.\n   *\n   * @param pluginId - The plugin that the database config should correspond with\n   */\n  private getConfigForPlugin(pluginId: string): Knex.Config {\n    const { client } = this.getClientType(pluginId);\n    const role = this.getRoleConfig(pluginId);\n\n    return {\n      ...this.getAdditionalKnexConfig(pluginId),\n      client,\n      connection: this.getConnectionConfig(pluginId),\n      ...(role && { role }),\n    };\n  }\n\n  /**\n   * Provides a partial `Knex.Config`• database name override for a given plugin.\n   *\n   * @param pluginId - Target plugin to get database name override\n   * @returns Partial `Knex.Config` with database name override\n   */\n  private getDatabaseOverrides(pluginId: string): Knex.Config {\n    const databaseName = this.getDatabaseName(pluginId);\n    return databaseName ? createSqliteNameOverride(databaseName) : {};\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DatabaseService,\n  LifecycleService,\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport { stringifyError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { MysqlConnector } from './connectors/mysql';\nimport { PgConnector } from './connectors/postgres';\nimport { Sqlite3Connector } from './connectors/sqlite3';\nimport { Connector, PluginDatabaseManager } from './types';\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\n/**\n * Creation options for {@link DatabaseManager}.\n *\n * @public\n */\nexport type DatabaseManagerOptions = {\n  migrations?: DatabaseService['migrations'];\n};\n\n/**\n * Testable implementation class for {@link DatabaseManager} below.\n */\nexport class DatabaseManagerImpl {\n  constructor(\n    private readonly config: Config,\n    private readonly connectors: Record<string, Connector>,\n    private readonly options?: DatabaseManagerOptions,\n    private readonly databaseCache: Map<string, Promise<Knex>> = new Map(),\n  ) {}\n\n  /**\n   * Generates a PluginDatabaseManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the database manager should be created for. Plugin names\n   * should be unique as they are used to look up database config overrides under\n   * `backend.database.plugin`.\n   */\n  forPlugin(\n    pluginId: string,\n    deps: {\n      logger: LoggerService;\n      lifecycle: LifecycleService;\n    },\n  ): PluginDatabaseManager {\n    const client = this.getClientType(pluginId).client;\n    const connector = this.connectors[client];\n    if (!connector) {\n      throw new Error(\n        `Unsupported database client type '${client}' specified for plugin '${pluginId}'`,\n      );\n    }\n    const getClient = () => this.getDatabase(pluginId, connector, deps);\n\n    const skip =\n      this.options?.migrations?.skip ??\n      this.config.getOptionalBoolean(\n        `backend.database.plugin.${pluginId}.skipMigrations`,\n      ) ??\n      this.config.getOptionalBoolean('backend.database.skipMigrations') ??\n      false;\n\n    return { getClient, migrations: { skip } };\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  /**\n   * Provides a scoped Knex client for a plugin as per application config.\n   *\n   * @param pluginId - Plugin to get a Knex client for\n   * @returns Promise which resolves to a scoped Knex database client for a\n   *          plugin\n   */\n  private async getDatabase(\n    pluginId: string,\n    connector: Connector,\n    deps: {\n      logger: LoggerService;\n      lifecycle: LifecycleService;\n    },\n  ): Promise<Knex> {\n    if (this.databaseCache.has(pluginId)) {\n      return this.databaseCache.get(pluginId)!;\n    }\n\n    const clientPromise = connector.getClient(pluginId, deps);\n    this.databaseCache.set(pluginId, clientPromise);\n\n    if (process.env.NODE_ENV !== 'test') {\n      clientPromise.then(client =>\n        this.startKeepaliveLoop(pluginId, client, deps.logger),\n      );\n    }\n\n    return clientPromise;\n  }\n\n  private startKeepaliveLoop(\n    pluginId: string,\n    client: Knex,\n    logger: LoggerService,\n  ): void {\n    let lastKeepaliveFailed = false;\n\n    setInterval(() => {\n      // During testing it can happen that the environment is torn down and\n      // this client is `undefined`, but this interval is still run.\n      client?.raw('select 1').then(\n        () => {\n          lastKeepaliveFailed = false;\n        },\n        (error: unknown) => {\n          if (!lastKeepaliveFailed) {\n            lastKeepaliveFailed = true;\n            logger.warn(\n              `Database keepalive failed for plugin ${pluginId}, ${stringifyError(\n                error,\n              )}`,\n            );\n          }\n        },\n      );\n    }, 60 * 1000);\n  }\n}\n\n// NOTE: This class looks odd but is kept around for API compatibility reasons\n/**\n * Manages database connections for Backstage backend plugins.\n *\n * @public\n * @remarks\n *\n * The database manager allows the user to set connection and client settings on\n * a per pluginId basis by defining a database config block under\n * `plugin.<pluginId>` in addition to top level defaults. Optionally, a user may\n * set `prefix` which is used to prefix generated database names if config is\n * not provided.\n */\nexport class DatabaseManager {\n  /**\n   * Creates a {@link DatabaseManager} from `backend.database` config.\n   *\n   * @param config - The loaded application configuration.\n   * @param options - An optional configuration object.\n   */\n  static fromConfig(\n    config: RootConfigService,\n    options?: DatabaseManagerOptions,\n  ): DatabaseManager {\n    const databaseConfig = config.getConfig('backend.database');\n    const prefix =\n      databaseConfig.getOptionalString('prefix') || 'backstage_plugin_';\n    return new DatabaseManager(\n      new DatabaseManagerImpl(\n        databaseConfig,\n        {\n          pg: new PgConnector(databaseConfig, prefix),\n          sqlite3: new Sqlite3Connector(databaseConfig),\n          'better-sqlite3': new Sqlite3Connector(databaseConfig),\n          mysql: new MysqlConnector(databaseConfig, prefix),\n          mysql2: new MysqlConnector(databaseConfig, prefix),\n        },\n        options,\n      ),\n    );\n  }\n\n  private constructor(private readonly impl: DatabaseManagerImpl) {}\n\n  /**\n   * Generates a PluginDatabaseManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the database manager should be created for. Plugin names\n   * should be unique as they are used to look up database config overrides under\n   * `backend.database.plugin`.\n   */\n  forPlugin(\n    pluginId: string,\n    deps: {\n      logger: LoggerService;\n      lifecycle: LifecycleService;\n    },\n  ): PluginDatabaseManager {\n    return this.impl.forPlugin(pluginId, deps);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Find all active hot module APIs of all ancestors of a module, including the module itself\nfunction findAllAncestors(_module: NodeModule): NodeModule[] {\n  const ancestors = new Array<NodeModule>();\n  const parentIds = new Set<string | number>();\n\n  function add(id: string | number, m: NodeModule) {\n    if (parentIds.has(id)) {\n      return;\n    }\n    parentIds.add(id);\n    ancestors.push(m);\n\n    for (const parentId of (m as any).parents) {\n      const parent = require.cache[parentId];\n      if (parent) {\n        add(parentId, parent);\n      }\n    }\n  }\n\n  add(_module.id, _module);\n\n  return ancestors;\n}\n\n/**\n * useHotCleanup allows cleanup of ongoing effects when a module is\n * hot-reloaded during development. The cleanup function will be called\n * whenever the module itself or any of its parent modules is hot-reloaded.\n *\n * Useful for cleaning intervals, timers, requests etc\n *\n * @public\n * @deprecated Hot module reloading is no longer supported for backends.\n * @example\n * ```ts\n * const intervalId = setInterval(doStuff, 1000);\n * useHotCleanup(module, () => clearInterval(intervalId));\n * ```\n * @param _module - Reference to the current module where you invoke the fn\n * @param cancelEffect - Fn that cleans up the ongoing effects\n */\nexport function useHotCleanup(_module: NodeModule, cancelEffect: () => void) {\n  if (_module.hot) {\n    const ancestors = findAllAncestors(_module);\n    let cancelled = false;\n\n    const handler = () => {\n      if (!cancelled) {\n        cancelled = true;\n        cancelEffect();\n      }\n    };\n\n    for (const m of ancestors) {\n      m.hot?.addDisposeHandler(handler);\n    }\n  }\n}\n\nconst CURRENT_HOT_MEMOIZE_INDEX_KEY = 'backstage.io/hmr-memoize-key';\n\n/**\n * Memoizes a generated value across hot-module reloads. This is useful for\n * stateful parts of the backend, e.g. to retain a database.\n *\n * @public\n * @deprecated Hot module reloading is no longer supported for backends.\n * @example\n * ```ts\n * const db = useHotMemoize(module, () => createDB(dbParams));\n * ```\n *\n * **NOTE:** Do not use inside conditionals or loops,\n * same rules as for hooks apply (https://reactjs.org/docs/hooks-rules.html)\n *\n * @param _module - Reference to the current module where you invoke the fn\n * @param valueFactory - Fn that returns the value you want to memoize\n */\nexport function useHotMemoize<T>(\n  _module: NodeModule,\n  valueFactory: () => T,\n): T {\n  if (!_module.hot) {\n    return valueFactory();\n  }\n\n  // When starting blank, reset the counter\n  if (!_module.hot.data?.[CURRENT_HOT_MEMOIZE_INDEX_KEY]) {\n    for (const ancestor of findAllAncestors(_module)) {\n      ancestor.hot?.addDisposeHandler(data => {\n        data[CURRENT_HOT_MEMOIZE_INDEX_KEY] = 1;\n      });\n    }\n\n    _module.hot.data = {\n      ..._module.hot.data,\n      [CURRENT_HOT_MEMOIZE_INDEX_KEY]: 1,\n    };\n  }\n\n  // Store data per module, based on the order of the code invocation\n  const index = _module.hot.data[CURRENT_HOT_MEMOIZE_INDEX_KEY]++;\n  const value = _module.hot.data[index] ?? valueFactory();\n\n  // Always add a handler that, upon a HMR event, reinstates the value.\n  _module.hot.addDisposeHandler(data => {\n    data[index] = value;\n  });\n\n  return value;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Escapes a given string to be used inside a RegExp.\n *\n * Taken from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n */\nexport const escapeRegExp = (text: string) => {\n  return text.replace(/[.*+?^${}(\\)|[\\]\\\\]/g, '\\\\$&');\n};\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  LoggerService,\n  RootLoggerService,\n} from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { Format, TransformableInfo } from 'logform';\nimport {\n  Logger,\n  format,\n  createLogger,\n  transports,\n  transport as Transport,\n} from 'winston';\nimport { MESSAGE } from 'triple-beam';\nimport { escapeRegExp } from '../../lib/escapeRegExp';\n\n/**\n * @public\n */\nexport interface WinstonLoggerOptions {\n  meta?: JsonObject;\n  level?: string;\n  format?: Format;\n  transports?: Transport[];\n}\n\n/**\n * A {@link @backstage/backend-plugin-api#LoggerService} implementation based on winston.\n *\n * @public\n */\nexport class WinstonLogger implements RootLoggerService {\n  #winston: Logger;\n  #addRedactions?: (redactions: Iterable<string>) => void;\n\n  /**\n   * Creates a {@link WinstonLogger} instance.\n   */\n  static create(options: WinstonLoggerOptions): WinstonLogger {\n    const redacter = WinstonLogger.redacter();\n    const defaultFormatter =\n      process.env.NODE_ENV === 'production'\n        ? format.json()\n        : WinstonLogger.colorFormat();\n\n    let logger = createLogger({\n      level: process.env.LOG_LEVEL || options.level || 'info',\n      format: format.combine(\n        options.format ?? defaultFormatter,\n        redacter.format,\n      ),\n      transports: options.transports ?? new transports.Console(),\n    });\n\n    if (options.meta) {\n      logger = logger.child(options.meta);\n    }\n\n    return new WinstonLogger(logger, redacter.add);\n  }\n\n  /**\n   * Creates a winston log formatter for redacting secrets.\n   */\n  static redacter(): {\n    format: Format;\n    add: (redactions: Iterable<string>) => void;\n  } {\n    const redactionSet = new Set<string>();\n\n    let redactionPattern: RegExp | undefined = undefined;\n\n    return {\n      format: format((obj: TransformableInfo) => {\n        if (!redactionPattern || !obj) {\n          return obj;\n        }\n\n        obj[MESSAGE] = obj[MESSAGE]?.replace?.(redactionPattern, '***');\n\n        return obj;\n      })(),\n      add(newRedactions) {\n        let added = 0;\n        for (const redactionToTrim of newRedactions) {\n          // Trimming the string ensures that we don't accdentally get extra\n          // newlines or other whitespace interfering with the redaction; this\n          // can happen for example when using string literals in yaml\n          const redaction = redactionToTrim.trim();\n          // Exclude secrets that are empty or just one character in length. These\n          // typically mean that you are running local dev or tests, or using the\n          // --lax flag which sets things to just 'x'.\n          if (redaction.length <= 1) {\n            continue;\n          }\n          if (!redactionSet.has(redaction)) {\n            redactionSet.add(redaction);\n            added += 1;\n          }\n        }\n        if (added > 0) {\n          const redactions = Array.from(redactionSet)\n            .map(r => escapeRegExp(r))\n            .join('|');\n          redactionPattern = new RegExp(`(${redactions})`, 'g');\n        }\n      },\n    };\n  }\n\n  /**\n   * Creates a pretty printed winston log formatter.\n   */\n  static colorFormat(): Format {\n    const colorizer = format.colorize();\n\n    return format.combine(\n      format.timestamp(),\n      format.colorize({\n        colors: {\n          timestamp: 'dim',\n          prefix: 'blue',\n          field: 'cyan',\n          debug: 'grey',\n        },\n      }),\n      format.printf((info: TransformableInfo) => {\n        const { timestamp, level, message, plugin, service, ...fields } = info;\n        const prefix = plugin || service;\n        const timestampColor = colorizer.colorize('timestamp', timestamp);\n        const prefixColor = colorizer.colorize('prefix', prefix);\n\n        const extraFields = Object.entries(fields)\n          .map(\n            ([key, value]) =>\n              `${colorizer.colorize('field', `${key}`)}=${value}`,\n          )\n          .join(' ');\n\n        return `${timestampColor} ${prefixColor} ${level} ${message} ${extraFields}`;\n      }),\n    );\n  }\n\n  private constructor(\n    winston: Logger,\n    addRedactions?: (redactions: Iterable<string>) => void,\n  ) {\n    this.#winston = winston;\n    this.#addRedactions = addRedactions;\n  }\n\n  error(message: string, meta?: JsonObject): void {\n    this.#winston.error(message, meta);\n  }\n\n  warn(message: string, meta?: JsonObject): void {\n    this.#winston.warn(message, meta);\n  }\n\n  info(message: string, meta?: JsonObject): void {\n    this.#winston.info(message, meta);\n  }\n\n  debug(message: string, meta?: JsonObject): void {\n    this.#winston.debug(message, meta);\n  }\n\n  child(meta: JsonObject): LoggerService {\n    return new WinstonLogger(this.#winston.child(meta));\n  }\n\n  addRedactions(redactions: Iterable<string>) {\n    this.#addRedactions?.(redactions);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as winston from 'winston';\nimport { createRootLogger } from './createRootLogger';\n\n/**\n * A logger that just throws away all messages.\n *\n * @public\n * @deprecated As we are going to deprecate the legacy backend, this function will be removed in the future.\n * If you need to mock the root logger in the new system, please use `mockServices.logger.mock()` from `@backstage/test-utils` instead.\n */\nexport function getVoidLogger(): winston.Logger {\n  return winston.createLogger({\n    transports: [new winston.transports.Console({ silent: true })],\n  });\n}\n\nlet rootLogger: winston.Logger;\n\n/**\n * Gets the current root logger.\n *\n * @public\n * @deprecated As we are going to deprecate the legacy backend, this function will be removed in the future.\n * If you need to get the root logger in the new system, please check out this documentation:\n * https://backstage.io/docs/backend-system/core-services/logger\n */\nexport function getRootLogger(): winston.Logger {\n  if (!rootLogger) {\n    rootLogger = createRootLogger();\n  }\n  return rootLogger;\n}\n\n/**\n * Sets a completely custom default \"root\" logger.\n *\n * @remarks\n *\n * This is the logger instance that will be the foundation for all other logger\n * instances passed to plugins etc, in a given backend.\n *\n * Only use this if you absolutely need to make a completely custom logger.\n * Normally if you want to make light adaptations to the default logger\n * behavior, you would instead call {@link createRootLogger}.\n *\n * @public\n * @deprecated As we are going to deprecate the legacy backend, this function will be removed in the future.\n * If you need to set the root logger in the new system, please check out this documentation:\n * https://backstage.io/docs/backend-system/core-services/logger\n */\nexport function setRootLogger(newLogger: winston.Logger) {\n  rootLogger = newLogger;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { WinstonLogger } from '../../../../backend-defaults/src/entrypoints/rootLogger/WinstonLogger';\nimport { merge } from 'lodash';\nimport * as winston from 'winston';\nimport { format, LoggerOptions } from 'winston';\nimport { TransformableInfo } from 'logform';\nimport { setRootLogger } from './globalLoggers';\n\nconst getRedacter = (() => {\n  let redacter: ReturnType<typeof WinstonLogger.redacter> | undefined =\n    undefined;\n  return () => {\n    if (!redacter) {\n      redacter = WinstonLogger.redacter();\n    }\n    return redacter;\n  };\n})();\n\nexport const setRootLoggerRedactionList = (\n  redactions: Iterable<string>,\n): void => {\n  getRedacter().add(redactions);\n};\n\n/**\n * A winston formatting function that finds occurrences of filteredKeys\n * and replaces them with the corresponding identifier.\n *\n * @public\n * @deprecated This utility is being deprecated along with the {@link https://github.com/backstage/backstage/issues/24493 |legacy backend system}.\n * Migrate your {@link https://backstage.io/docs/backend-system/building-backends/migrating | backend} and {@link https://backstage.io/docs/backend-system/building-plugins-and-modules/migrating | plugin} to the new system and use the {@link https://github.com/backstage/backstage/pull/24730 | RedactionsService} for customization instead.\n */\nexport function redactWinstonLogLine(\n  info: winston.Logform.TransformableInfo,\n): winston.Logform.TransformableInfo {\n  return getRedacter().format.transform(\n    info,\n  ) as winston.Logform.TransformableInfo;\n}\n\nconst colorizer = format.colorize();\n\n// NOTE: This is a copy of the WinstonLogger.colorFormat to avoid a circular dependency\n/**\n * Creates a pretty printed winston log formatter.\n *\n * @public\n * @deprecated As we are going to deprecate the legacy backend, this formatter utility will be removed in the future.\n * If you need to format logs in the new system, please use the `WinstonLogger.colorFormat()` from `@backstage/backend-app-api` instead.\n */\nexport const coloredFormat = format.combine(\n  format.timestamp(),\n  format.colorize({\n    colors: {\n      timestamp: 'dim',\n      prefix: 'blue',\n      field: 'cyan',\n      debug: 'grey',\n    },\n  }),\n  format.printf((info: TransformableInfo) => {\n    const { timestamp, level, message, plugin, service, ...fields } = info;\n    const prefix = plugin || service;\n    const timestampColor = colorizer.colorize('timestamp', timestamp);\n    const prefixColor = colorizer.colorize('prefix', prefix);\n\n    const extraFields = Object.entries(fields)\n      .map(\n        ([key, value]) => `${colorizer.colorize('field', `${key}`)}=${value}`,\n      )\n      .join(' ');\n\n    return `${timestampColor} ${prefixColor} ${level} ${message} ${extraFields}`;\n  }),\n);\n\n/**\n * Creates a default \"root\" logger. This also calls {@link setRootLogger} under\n * the hood.\n *\n * @remarks\n *\n * This is the logger instance that will be the foundation for all other logger\n * instances passed to plugins etc, in a given backend.\n *\n * @public\n * @deprecated As we are going to deprecate the legacy backend, this function will be removed in the future.\n * If you need to create the root logger in the new system, please check out this documentation:\n * https://backstage.io/docs/backend-system/core-services/logger\n */\nexport function createRootLogger(\n  options: winston.LoggerOptions = {},\n  env = process.env,\n): winston.Logger {\n  const logger = winston\n    .createLogger(\n      merge<LoggerOptions, LoggerOptions>(\n        {\n          level: env.LOG_LEVEL || 'info',\n          format: winston.format.combine(\n            getRedacter().format,\n            env.NODE_ENV === 'production'\n              ? winston.format.json()\n              : WinstonLogger.colorFormat(),\n          ),\n          transports: [\n            new winston.transports.Console({\n              silent: env.JEST_WORKER_ID !== undefined && !env.LOG_LEVEL,\n            }),\n          ],\n        },\n        options,\n      ),\n    )\n    .child({ service: 'backstage' });\n\n  setRootLogger(logger);\n\n  return logger;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport type { Config } from '@backstage/config';\nimport { ConfigSchema, loadConfigSchema } from '@backstage/config-loader';\nimport { getPackages } from '@manypkg/get-packages';\n\n/** @public */\nexport async function createConfigSecretEnumerator(options: {\n  logger: LoggerService;\n  dir?: string;\n  schema?: ConfigSchema;\n}): Promise<(config: Config) => Iterable<string>> {\n  const { logger, dir = process.cwd() } = options;\n  const { packages } = await getPackages(dir);\n  const schema =\n    options.schema ??\n    (await loadConfigSchema({\n      dependencies: packages.map(p => p.packageJson.name),\n    }));\n\n  return (config: Config) => {\n    const [secretsData] = schema.process(\n      [{ data: config.getOptional() ?? {}, context: 'schema-enumerator' }],\n      {\n        visibility: ['secret'],\n        ignoreSchemaErrors: true,\n      },\n    );\n    const secrets = new Set<string>();\n    JSON.parse(\n      JSON.stringify(secretsData.data),\n      (_, v) => typeof v === 'string' && secrets.add(v),\n    );\n    logger.info(\n      `Found ${secrets.size} new secrets in config that will be redacted`,\n    );\n    return secrets;\n  };\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config, ConfigReader } from '@backstage/config';\nimport { JsonValue } from '@backstage/types';\n\nexport class ObservableConfigProxy implements Config {\n  private config: Config = new ConfigReader({});\n\n  private readonly subscribers: (() => void)[] = [];\n\n  constructor(\n    private readonly parent?: ObservableConfigProxy,\n    private parentKey?: string,\n  ) {\n    if (parent && !parentKey) {\n      throw new Error('parentKey is required if parent is set');\n    }\n  }\n\n  setConfig(config: Config) {\n    if (this.parent) {\n      throw new Error('immutable');\n    }\n    this.config = config;\n    for (const subscriber of this.subscribers) {\n      try {\n        subscriber();\n      } catch (error) {\n        console.error(`Config subscriber threw error, ${error}`);\n      }\n    }\n  }\n\n  subscribe(onChange: () => void): { unsubscribe: () => void } {\n    if (this.parent) {\n      return this.parent.subscribe(onChange);\n    }\n\n    this.subscribers.push(onChange);\n    return {\n      unsubscribe: () => {\n        const index = this.subscribers.indexOf(onChange);\n        if (index >= 0) {\n          this.subscribers.splice(index, 1);\n        }\n      },\n    };\n  }\n\n  private select(required: true): Config;\n  private select(required: false): Config | undefined;\n  private select(required: boolean): Config | undefined {\n    if (this.parent && this.parentKey) {\n      if (required) {\n        return this.parent.select(true).getConfig(this.parentKey);\n      }\n      return this.parent.select(false)?.getOptionalConfig(this.parentKey);\n    }\n\n    return this.config;\n  }\n\n  has(key: string): boolean {\n    return this.select(false)?.has(key) ?? false;\n  }\n  keys(): string[] {\n    return this.select(false)?.keys() ?? [];\n  }\n  get<T = JsonValue>(key?: string): T {\n    return this.select(true).get(key);\n  }\n  getOptional<T = JsonValue>(key?: string): T | undefined {\n    return this.select(false)?.getOptional(key);\n  }\n  getConfig(key: string): Config {\n    return new ObservableConfigProxy(this, key);\n  }\n  getOptionalConfig(key: string): Config | undefined {\n    if (this.select(false)?.has(key)) {\n      return new ObservableConfigProxy(this, key);\n    }\n    return undefined;\n  }\n  getConfigArray(key: string): Config[] {\n    return this.select(true).getConfigArray(key);\n  }\n  getOptionalConfigArray(key: string): Config[] | undefined {\n    return this.select(false)?.getOptionalConfigArray(key);\n  }\n  getNumber(key: string): number {\n    return this.select(true).getNumber(key);\n  }\n  getOptionalNumber(key: string): number | undefined {\n    return this.select(false)?.getOptionalNumber(key);\n  }\n  getBoolean(key: string): boolean {\n    return this.select(true).getBoolean(key);\n  }\n  getOptionalBoolean(key: string): boolean | undefined {\n    return this.select(false)?.getOptionalBoolean(key);\n  }\n  getString(key: string): string {\n    return this.select(true).getString(key);\n  }\n  getOptionalString(key: string): string | undefined {\n    return this.select(false)?.getOptionalString(key);\n  }\n  getStringArray(key: string): string[] {\n    return this.select(true).getStringArray(key);\n  }\n  getOptionalStringArray(key: string): string[] | undefined {\n    return this.select(false)?.getOptionalStringArray(key);\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function isValidUrl(url: string): boolean {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { AppConfig, Config } from '@backstage/config';\nimport { setRootLoggerRedactionList } from '../logging/createRootLogger';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { createConfigSecretEnumerator as _createConfigSecretEnumerator } from '../../../../backend-defaults/src/entrypoints/rootConfig/createConfigSecretEnumerator';\n\nimport { resolve as resolvePath } from 'path';\nimport parseArgs from 'minimist';\nimport { findPaths } from '@backstage/cli-common';\nimport {\n  loadConfig,\n  ConfigTarget,\n  LoadConfigOptionsRemote,\n} from '@backstage/config-loader';\nimport { ConfigReader } from '@backstage/config';\nimport { ObservableConfigProxy } from './ObservableConfigProxy';\nimport { isValidUrl } from './urls';\n\n/**\n * @public\n * @deprecated Please migrate to the new backend system and use `coreServices.rootConfig` instead, or the {@link @backstage/config-loader#ConfigSources} facilities if required.\n */\nexport const createConfigSecretEnumerator = _createConfigSecretEnumerator;\n\n/**\n * Load configuration for a Backend.\n *\n * This function should only be called once, during the initialization of the backend.\n *\n * @public\n * @deprecated Please migrate to the new backend system and use `coreServices.rootConfig` instead, or the {@link @backstage/config-loader#ConfigSources} facilities if required.\n */\nexport async function loadBackendConfig(options: {\n  logger: LoggerService;\n  // process.argv or any other overrides\n  remote?: LoadConfigOptionsRemote;\n  additionalConfigs?: AppConfig[];\n  argv: string[];\n  watch?: boolean;\n}): Promise<Config> {\n  const secretEnumerator = await createConfigSecretEnumerator({\n    logger: options.logger,\n  });\n  const { config } = await newLoadBackendConfig(options);\n\n  setRootLoggerRedactionList(secretEnumerator(config));\n  config.subscribe?.(() =>\n    setRootLoggerRedactionList(secretEnumerator(config)),\n  );\n\n  return config;\n}\n\nasync function newLoadBackendConfig(options: {\n  remote?: LoadConfigOptionsRemote;\n  argv: string[];\n  additionalConfigs?: AppConfig[];\n  watch?: boolean;\n}): Promise<{ config: Config }> {\n  const args = parseArgs(options.argv);\n\n  const configTargets: ConfigTarget[] = [args.config ?? []]\n    .flat()\n    .map(arg => (isValidUrl(arg) ? { url: arg } : { path: resolvePath(arg) }));\n\n  /* eslint-disable-next-line no-restricted-syntax */\n  const paths = findPaths(__dirname);\n\n  let currentCancelFunc: (() => void) | undefined = undefined;\n\n  const config = new ObservableConfigProxy();\n  const { appConfigs } = await loadConfig({\n    configRoot: paths.targetRoot,\n    configTargets: configTargets,\n    remote: options.remote,\n    watch:\n      options.watch ?? true\n        ? {\n            onChange(newConfigs) {\n              console.info(\n                `Reloaded config from ${newConfigs\n                  .map(c => c.context)\n                  .join(', ')}`,\n              );\n              const configsToMerge = [...newConfigs];\n              if (options.additionalConfigs) {\n                configsToMerge.push(...options.additionalConfigs);\n              }\n              config.setConfig(ConfigReader.fromConfigs(configsToMerge));\n            },\n            stopSignal: new Promise(resolve => {\n              if (currentCancelFunc) {\n                currentCancelFunc();\n              }\n              currentCancelFunc = resolve;\n\n              // TODO(Rugvip): We keep this here for now to avoid breaking the old system\n              //               since this is re-used in backend-common\n              if (module.hot) {\n                module.hot.addDisposeHandler(resolve);\n              }\n            }),\n          }\n        : undefined,\n  });\n  console.info(\n    `Loaded config from ${appConfigs.map(c => c.context).join(', ')}`,\n  );\n\n  const finalAppConfigs = [...appConfigs];\n  if (options.additionalConfigs) {\n    finalAppConfigs.push(...options.additionalConfigs);\n  }\n  config.setConfig(ConfigReader.fromConfigs(finalAppConfigs));\n\n  return { config };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport git, {\n  ProgressCallback,\n  MergeResult,\n  ReadCommitResult,\n  AuthCallback,\n} from 'isomorphic-git';\nimport http from 'isomorphic-git/http/node';\nimport fs from 'fs-extra';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nfunction isAuthCallbackOptions(\n  options: StaticAuthOptions | AuthCallbackOptions,\n): options is AuthCallbackOptions {\n  return 'onAuth' in options;\n}\n\n/**\n * Configure static credential for authentication\n * @public\n * @deprecated This type is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n */\nexport type StaticAuthOptions = {\n  username?: string;\n  password?: string;\n  token?: string;\n  logger?: LoggerService;\n};\n\n/**\n * Configure an authentication callback that can provide credentials on demand\n * @public\n * @deprecated This type is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n */\nexport type AuthCallbackOptions = {\n  onAuth: AuthCallback;\n  logger?: LoggerService;\n};\n\n/*\nprovider          username         password\nAzure             'notempty'       token\nBitbucket Cloud   'x-token-auth'   token\nBitbucket Server  username         password or token\nGitHub            'x-access-token' token\nGitLab            'oauth2'         token\n\nFrom : https://isomorphic-git.org/docs/en/onAuth with fix for GitHub\n\nOr token provided as `token` for Bearer auth header\ninstead of Basic Auth (e.g., Bitbucket Server).\n*/\n\n/**\n * A convenience wrapper around the `isomorphic-git` library.\n * @public\n * @deprecated This class is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n */\n\nexport class Git {\n  private readonly headers: {\n    [x: string]: string;\n  };\n\n  private constructor(\n    private readonly config: {\n      onAuth: AuthCallback;\n      token?: string;\n      logger?: LoggerService;\n    },\n  ) {\n    this.onAuth = config.onAuth;\n\n    this.headers = {\n      'user-agent': 'git/@isomorphic-git',\n      ...(config.token ? { Authorization: `Bearer ${config.token}` } : {}),\n    };\n  }\n\n  async add(options: { dir: string; filepath: string }): Promise<void> {\n    const { dir, filepath } = options;\n    this.config.logger?.info(`Adding file {dir=${dir},filepath=${filepath}}`);\n\n    return git.add({ fs, dir, filepath });\n  }\n\n  async addRemote(options: {\n    dir: string;\n    remote: string;\n    url: string;\n    force?: boolean;\n  }): Promise<void> {\n    const { dir, url, remote, force } = options;\n    this.config.logger?.info(\n      `Creating new remote {dir=${dir},remote=${remote},url=${url}}`,\n    );\n    return git.addRemote({ fs, dir, remote, url, force });\n  }\n\n  async deleteRemote(options: { dir: string; remote: string }): Promise<void> {\n    const { dir, remote } = options;\n    this.config.logger?.info(`Deleting remote {dir=${dir},remote=${remote}}`);\n    return git.deleteRemote({ fs, dir, remote });\n  }\n\n  async checkout(options: { dir: string; ref: string }): Promise<void> {\n    const { dir, ref } = options;\n    this.config.logger?.info(`Checking out branch {dir=${dir},ref=${ref}}`);\n\n    return git.checkout({ fs, dir, ref });\n  }\n\n  async branch(options: { dir: string; ref: string }): Promise<void> {\n    const { dir, ref } = options;\n    this.config.logger?.info(`Creating branch {dir=${dir},ref=${ref}`);\n\n    return git.branch({ fs, dir, ref });\n  }\n\n  async commit(options: {\n    dir: string;\n    message: string;\n    author: { name: string; email: string };\n    committer: { name: string; email: string };\n  }): Promise<string> {\n    const { dir, message, author, committer } = options;\n    this.config.logger?.info(\n      `Committing file to repo {dir=${dir},message=${message}}`,\n    );\n    return git.commit({ fs, dir, message, author, committer });\n  }\n\n  /** https://isomorphic-git.org/docs/en/clone */\n  async clone(options: {\n    url: string;\n    dir: string;\n    ref?: string;\n    depth?: number;\n    noCheckout?: boolean;\n  }): Promise<void> {\n    const { url, dir, ref, depth, noCheckout } = options;\n    this.config.logger?.info(`Cloning repo {dir=${dir},url=${url}}`);\n\n    try {\n      return await git.clone({\n        fs,\n        http,\n        url,\n        dir,\n        ref,\n        singleBranch: true,\n        depth: depth ?? 1,\n        noCheckout,\n        onProgress: this.onProgressHandler(),\n        headers: this.headers,\n        onAuth: this.onAuth,\n      });\n    } catch (ex) {\n      this.config.logger?.error(`Failed to clone repo {dir=${dir},url=${url}}`);\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  /** https://isomorphic-git.org/docs/en/currentBranch */\n  async currentBranch(options: {\n    dir: string;\n    fullName?: boolean;\n  }): Promise<string | undefined> {\n    const { dir, fullName = false } = options;\n    return git.currentBranch({ fs, dir, fullname: fullName }) as Promise<\n      string | undefined\n    >;\n  }\n\n  /** https://isomorphic-git.org/docs/en/fetch */\n  async fetch(options: {\n    dir: string;\n    remote?: string;\n    tags?: boolean;\n  }): Promise<void> {\n    const { dir, remote = 'origin', tags = false } = options;\n    this.config.logger?.info(\n      `Fetching remote=${remote} for repository {dir=${dir}}`,\n    );\n\n    try {\n      await git.fetch({\n        fs,\n        http,\n        dir,\n        remote,\n        tags,\n        onProgress: this.onProgressHandler(),\n        headers: this.headers,\n        onAuth: this.onAuth,\n      });\n    } catch (ex) {\n      this.config.logger?.error(\n        `Failed to fetch repo {dir=${dir},remote=${remote}}`,\n      );\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  async init(options: { dir: string; defaultBranch?: string }): Promise<void> {\n    const { dir, defaultBranch = 'master' } = options;\n    this.config.logger?.info(`Init git repository {dir=${dir}}`);\n\n    return git.init({\n      fs,\n      dir,\n      defaultBranch,\n    });\n  }\n\n  /** https://isomorphic-git.org/docs/en/merge */\n  async merge(options: {\n    dir: string;\n    theirs: string;\n    ours?: string;\n    author: { name: string; email: string };\n    committer: { name: string; email: string };\n  }): Promise<MergeResult> {\n    const { dir, theirs, ours, author, committer } = options;\n    this.config.logger?.info(\n      `Merging branch '${theirs}' into '${ours}' for repository {dir=${dir}}`,\n    );\n\n    // If ours is undefined, current branch is used.\n    return git.merge({\n      fs,\n      dir,\n      ours,\n      theirs,\n      author,\n      committer,\n    });\n  }\n\n  async push(options: {\n    dir: string;\n    remote: string;\n    remoteRef?: string;\n    force?: boolean;\n  }) {\n    const { dir, remote, remoteRef, force } = options;\n    this.config.logger?.info(\n      `Pushing directory to remote {dir=${dir},remote=${remote}}`,\n    );\n    try {\n      return await git.push({\n        fs,\n        dir,\n        http,\n        onProgress: this.onProgressHandler(),\n        remoteRef,\n        force,\n        headers: this.headers,\n        remote,\n        onAuth: this.onAuth,\n      });\n    } catch (ex) {\n      this.config.logger?.error(\n        `Failed to push to repo {dir=${dir}, remote=${remote}}`,\n      );\n      if (ex.data) {\n        throw new Error(`${ex.message} {data=${JSON.stringify(ex.data)}}`);\n      }\n      throw ex;\n    }\n  }\n\n  /** https://isomorphic-git.org/docs/en/readCommit */\n  async readCommit(options: {\n    dir: string;\n    sha: string;\n  }): Promise<ReadCommitResult> {\n    const { dir, sha } = options;\n    return git.readCommit({ fs, dir, oid: sha });\n  }\n\n  /** https://isomorphic-git.org/docs/en/remove */\n  async remove(options: { dir: string; filepath: string }): Promise<void> {\n    const { dir, filepath } = options;\n    this.config.logger?.info(\n      `Removing file from git index {dir=${dir},filepath=${filepath}}`,\n    );\n    return git.remove({ fs, dir, filepath });\n  }\n\n  /** https://isomorphic-git.org/docs/en/resolveRef */\n  async resolveRef(options: { dir: string; ref: string }): Promise<string> {\n    const { dir, ref } = options;\n    return git.resolveRef({ fs, dir, ref });\n  }\n\n  /** https://isomorphic-git.org/docs/en/log */\n  async log(options: {\n    dir: string;\n    ref?: string;\n  }): Promise<ReadCommitResult[]> {\n    const { dir, ref } = options;\n    return git.log({\n      fs,\n      dir,\n      ref: ref ?? 'HEAD',\n    });\n  }\n\n  private onAuth: AuthCallback;\n\n  private onProgressHandler = (): ProgressCallback => {\n    let currentPhase = '';\n\n    return event => {\n      if (currentPhase !== event.phase) {\n        currentPhase = event.phase;\n        this.config.logger?.info(event.phase);\n      }\n      const total = event.total\n        ? `${Math.round((event.loaded / event.total) * 100)}%`\n        : event.loaded;\n      this.config.logger?.debug(`status={${event.phase},total={${total}}}`);\n    };\n  };\n\n  static fromAuth = (options: StaticAuthOptions | AuthCallbackOptions) => {\n    if (isAuthCallbackOptions(options)) {\n      const { onAuth, logger } = options;\n      return new Git({ onAuth, logger });\n    }\n\n    const { username, password, token, logger } = options;\n    return new Git({ onAuth: () => ({ username, password }), token, logger });\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AuthenticationError } from '@backstage/errors';\nimport { base64url, exportJWK, generateSecret, jwtVerify, SignJWT } from 'jose';\nimport { DateTime, Duration } from 'luxon';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { TokenManager } from './types';\n\nconst TOKEN_ALG = 'HS256';\nconst TOKEN_SUB = 'backstage-server';\nconst TOKEN_EXPIRY_AFTER = Duration.fromObject({ hours: 1 });\nconst TOKEN_REISSUE_AFTER = Duration.fromObject({ minutes: 10 });\n\n/**\n * A token manager that issues static fake tokens and never fails\n * authentication. This can be useful for testing.\n */\nclass NoopTokenManager implements TokenManager {\n  public readonly isInsecureServerTokenManager: boolean = true;\n\n  async getToken() {\n    return { token: '' };\n  }\n\n  async authenticate() {}\n}\n\n/**\n * A token manager that throws an error when trying to generate or authenticate tokens.\n */\nclass DisabledTokenManager implements TokenManager {\n  async getToken(): Promise<{ token: string }> {\n    throw new Error(\n      \"Unable to generate legacy token, no legacy keys are configured in 'backend.auth.keys' or 'backend.auth.externalAccess'\",\n    );\n  }\n\n  async authenticate() {\n    throw new AuthenticationError(\n      \"Unable to authenticate legacy token, no legacy keys are configured in 'backend.auth.keys' or 'backend.auth.externalAccess'\",\n    );\n  }\n}\n\n/**\n * Options for {@link ServerTokenManager}.\n *\n * @public\n * @deprecated Please {@link https://backstage.io/docs/tutorials/auth-service-migration | migrate} to the new `coreServices.auth`, `coreServices.httpAuth`, and `coreServices.userInfo` services as needed instead.\n */\nexport interface ServerTokenManagerOptions {\n  /**\n   * The logger to use.\n   */\n  logger: LoggerService;\n\n  /**\n   * Whether to disable the token manager if no keys are configured.\n   */\n  allowDisabledTokenManager?: boolean;\n}\n\n/**\n * Creates and validates tokens for use during service-to-service\n * authentication.\n *\n * @public\n * @deprecated Please {@link https://backstage.io/docs/tutorials/auth-service-migration | migrate} to the new `coreServices.auth`, `coreServices.httpAuth`, and `coreServices.userInfo` services as needed instead.\n */\nexport class ServerTokenManager implements TokenManager {\n  private readonly options: ServerTokenManagerOptions;\n  private readonly verificationKeys: Uint8Array[];\n  private signingKey: Uint8Array;\n  private privateKeyPromise: Promise<void> | undefined;\n  private currentTokenPromise: Promise<{ token: string }> | undefined;\n\n  /**\n   * Creates a token manager that issues static fake tokens and never fails\n   * authentication. This can be useful for testing.\n   */\n  static noop(): TokenManager {\n    return new NoopTokenManager();\n  }\n\n  static fromConfig(\n    config: Config,\n    options: ServerTokenManagerOptions,\n  ): TokenManager {\n    const oldSecrets = config\n      .getOptionalConfigArray('backend.auth.keys')\n      ?.map(c => c.getString('secret'));\n    const newSecrets = config\n      .getOptionalConfigArray('backend.auth.externalAccess')\n      ?.filter(c => c.getString('type') === 'legacy')\n      .map(c => c.getString('options.secret'));\n    const secrets = [...(oldSecrets ?? []), ...(newSecrets ?? [])];\n\n    if (secrets.length) {\n      return new ServerTokenManager(secrets, options);\n    }\n\n    // When using the new backend system with new auth services we instead rely\n    // on the new plugin auth and external access configurations. If no legacy\n    // keys are configured we disable the token manager completely, rather than\n    // requiring users to configure legacy keys.\n    if (options.allowDisabledTokenManager) {\n      return new DisabledTokenManager();\n    }\n\n    if (process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'You must configure at least one key in backend.auth.keys for production.',\n      );\n    }\n\n    // For development, if a secret has not been configured, we auto generate a secret instead of throwing.\n    options.logger.warn(\n      'Generated a secret for service-to-service authentication: DEVELOPMENT USE ONLY.',\n    );\n    return new ServerTokenManager([], options);\n  }\n\n  private constructor(secrets: string[], options: ServerTokenManagerOptions) {\n    if (!secrets.length && process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'No secrets provided when constructing ServerTokenManager',\n      );\n    }\n    this.options = options;\n    this.verificationKeys = secrets.map(s => base64url.decode(s));\n    this.signingKey = this.verificationKeys[0];\n  }\n\n  // Called when no keys have been generated yet in the dev environment\n  private async generateKeys(): Promise<void> {\n    if (process.env.NODE_ENV !== 'development') {\n      throw new Error(\n        'Key generation is not supported outside of the dev environment',\n      );\n    }\n\n    if (this.privateKeyPromise) {\n      return this.privateKeyPromise;\n    }\n\n    const promise = (async () => {\n      const secret = await generateSecret(TOKEN_ALG);\n      const jwk = await exportJWK(secret);\n      this.verificationKeys.push(base64url.decode(jwk.k ?? ''));\n      this.signingKey = this.verificationKeys[0];\n      return;\n    })();\n\n    try {\n      this.privateKeyPromise = promise;\n      await promise;\n    } catch (error) {\n      // If we fail to generate a new key, we need to clear the state so that\n      // the next caller will try to generate another key.\n      this.options.logger.error(`Failed to generate new key, ${error}`);\n      delete this.privateKeyPromise;\n    }\n\n    return promise;\n  }\n\n  async getToken(): Promise<{ token: string }> {\n    if (!this.verificationKeys.length) {\n      await this.generateKeys();\n    }\n\n    if (this.currentTokenPromise) {\n      return this.currentTokenPromise;\n    }\n\n    const result = Promise.resolve().then(async () => {\n      const jwt = await new SignJWT({})\n        .setProtectedHeader({ alg: TOKEN_ALG })\n        .setSubject(TOKEN_SUB)\n        .setExpirationTime(\n          DateTime.now().plus(TOKEN_EXPIRY_AFTER).toUnixInteger(),\n        )\n        .sign(this.signingKey);\n      return { token: jwt };\n    });\n\n    this.currentTokenPromise = result;\n\n    result\n      .then(() => {\n        setTimeout(() => {\n          this.currentTokenPromise = undefined;\n        }, TOKEN_REISSUE_AFTER.toMillis());\n      })\n      .catch(() => {\n        this.currentTokenPromise = undefined;\n      });\n\n    return result;\n  }\n\n  async authenticate(token: string): Promise<void> {\n    let verifyError = undefined;\n\n    for (const key of this.verificationKeys) {\n      try {\n        const {\n          protectedHeader: { alg },\n          payload: { sub, exp },\n        } = await jwtVerify(token, key);\n\n        if (alg !== TOKEN_ALG) {\n          throw new AuthenticationError(`Illegal alg \"${alg}\"`);\n        }\n\n        if (sub !== TOKEN_SUB) {\n          throw new AuthenticationError(`Illegal sub \"${sub}\"`);\n        }\n\n        if (typeof exp !== 'number') {\n          throw new AuthenticationError(\n            'Server-to-server token had no exp claim',\n          );\n        }\n        return;\n      } catch (e) {\n        // Catch the verify exception and continue\n        verifyError = e;\n      }\n    }\n\n    throw new AuthenticationError('Invalid server token', verifyError);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport helmet from 'helmet';\nimport { HelmetOptions } from 'helmet';\nimport { ContentSecurityPolicyOptions } from 'helmet/dist/types/middlewares/content-security-policy';\nimport kebabCase from 'lodash/kebabCase';\n\n/**\n * Attempts to read Helmet options from the backend configuration object.\n *\n * @public\n * @param config - The backend configuration object.\n * @returns A Helmet options object, or undefined if no Helmet configuration is present.\n *\n * @example\n * ```ts\n * const helmetOptions = readHelmetOptions(config.getConfig('backend'));\n * ```\n */\nexport function readHelmetOptions(config?: Config): HelmetOptions {\n  const cspOptions = readCspDirectives(config);\n  return {\n    contentSecurityPolicy: {\n      useDefaults: false,\n      directives: applyCspDirectives(cspOptions),\n    },\n    // These are all disabled in order to maintain backwards compatibility\n    // when bumping helmet v5. We can't enable these by default because\n    // there is no way for users to configure them.\n    // TODO(Rugvip): We should give control of this setup to consumers\n    crossOriginEmbedderPolicy: false,\n    crossOriginOpenerPolicy: false,\n    crossOriginResourcePolicy: false,\n    originAgentCluster: false,\n  };\n}\n\ntype CspDirectives = Record<string, string[] | false> | undefined;\n\n/**\n * Attempts to read a CSP directives from the backend configuration object.\n *\n * @example\n * ```yaml\n * backend:\n *   csp:\n *     connect-src: [\"'self'\", 'http:', 'https:']\n *     upgrade-insecure-requests: false\n * ```\n */\nfunction readCspDirectives(config?: Config): CspDirectives {\n  const cc = config?.getOptionalConfig('csp');\n  if (!cc) {\n    return undefined;\n  }\n\n  const result: Record<string, string[] | false> = {};\n  for (const key of cc.keys()) {\n    if (cc.get(key) === false) {\n      result[key] = false;\n    } else {\n      result[key] = cc.getStringArray(key);\n    }\n  }\n\n  return result;\n}\n\nexport function applyCspDirectives(\n  directives: CspDirectives,\n): ContentSecurityPolicyOptions['directives'] {\n  const result: ContentSecurityPolicyOptions['directives'] =\n    helmet.contentSecurityPolicy.getDefaultDirectives();\n\n  // TODO(Rugvip): We currently use non-precompiled AJV for validation in the frontend, which uses eval.\n  //               It should be replaced by any other solution that doesn't require unsafe-eval.\n  result['script-src'] = [\"'self'\", \"'unsafe-eval'\"];\n\n  // TODO(Rugvip): This is removed so that we maintained backwards compatibility\n  //               when bumping to helmet v5, we could remove this as well as\n  //               skip setting `useDefaults: false` in the future.\n  delete result['form-action'];\n\n  if (directives) {\n    for (const [key, value] of Object.entries(directives)) {\n      const kebabCaseKey = kebabCase(key);\n      if (value === false) {\n        delete result[kebabCaseKey];\n      } else {\n        result[kebabCaseKey] = value;\n      }\n    }\n  }\n\n  return result;\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { CorsOptions } from 'cors';\nimport { Minimatch } from 'minimatch';\n\n/**\n * Attempts to read a CORS options object from the backend configuration object.\n *\n * @public\n * @param config - The backend configuration object.\n * @returns A CORS options object, or undefined if no cors configuration is present.\n *\n * @example\n * ```ts\n * const corsOptions = readCorsOptions(config.getConfig('backend'));\n * ```\n */\nexport function readCorsOptions(config?: Config): CorsOptions {\n  const cc = config?.getOptionalConfig('cors');\n  if (!cc) {\n    return { origin: false }; // Disable CORS\n  }\n\n  return removeUnknown({\n    origin: createCorsOriginMatcher(readStringArray(cc, 'origin')),\n    methods: readStringArray(cc, 'methods'),\n    allowedHeaders: readStringArray(cc, 'allowedHeaders'),\n    exposedHeaders: readStringArray(cc, 'exposedHeaders'),\n    credentials: cc.getOptionalBoolean('credentials'),\n    maxAge: cc.getOptionalNumber('maxAge'),\n    preflightContinue: cc.getOptionalBoolean('preflightContinue'),\n    optionsSuccessStatus: cc.getOptionalNumber('optionsSuccessStatus'),\n  });\n}\n\nfunction removeUnknown<T extends object>(obj: T): T {\n  return Object.fromEntries(\n    Object.entries(obj).filter(([, v]) => v !== undefined),\n  ) as T;\n}\n\nfunction readStringArray(config: Config, key: string): string[] | undefined {\n  const value = config.getOptional(key);\n  if (typeof value === 'string') {\n    return [value];\n  } else if (!value) {\n    return undefined;\n  }\n  return config.getStringArray(key);\n}\n\nfunction createCorsOriginMatcher(allowedOriginPatterns: string[] | undefined) {\n  if (!allowedOriginPatterns) {\n    return undefined;\n  }\n\n  const allowedOriginMatchers = allowedOriginPatterns.map(\n    pattern => new Minimatch(pattern, { nocase: true, noglobstar: true }),\n  );\n\n  return (\n    origin: string | undefined,\n    callback: (\n      err: Error | null,\n      origin: boolean | string | RegExp | (boolean | string | RegExp)[],\n    ) => void,\n  ) => {\n    return callback(\n      null,\n      allowedOriginMatchers.some(pattern => pattern.match(origin ?? '')),\n    );\n  };\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { assertError } from '@backstage/errors';\nimport { randomBytes } from 'crypto';\n\nfunction handleBadError(error: Error, logger: LoggerService) {\n  const logId = randomBytes(10).toString('hex');\n  logger\n    .child({ logId })\n    .error(`Filtered internal error with logId=${logId} from response`, error);\n  const newError = new Error(`An internal error occurred logId=${logId}`);\n  delete newError.stack; // Trim the stack since it's not particularly useful\n  return newError;\n}\n\n/**\n * Filters out certain known error types that should never be returned in responses.\n *\n * @internal\n */\nexport function applyInternalErrorFilter(\n  error: unknown,\n  logger: LoggerService,\n): Error {\n  try {\n    assertError(error);\n  } catch (assertionError: unknown) {\n    assertError(assertionError);\n    return handleBadError(assertionError, logger);\n  }\n\n  const constructorName = error.constructor.name;\n\n  // DatabaseError are thrown by the pg-protocol module\n  if (constructorName === 'DatabaseError') {\n    return handleBadError(error, logger);\n  }\n\n  return error;\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RootConfigService,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\nimport {\n  Request,\n  Response,\n  ErrorRequestHandler,\n  NextFunction,\n  RequestHandler,\n} from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport compression from 'compression';\nimport { readHelmetOptions } from './readHelmetOptions';\nimport { readCorsOptions } from './readCorsOptions';\nimport {\n  AuthenticationError,\n  ConflictError,\n  ErrorResponseBody,\n  InputError,\n  NotAllowedError,\n  NotFoundError,\n  NotModifiedError,\n  ServiceUnavailableError,\n  serializeError,\n} from '@backstage/errors';\nimport { NotImplementedError } from '@backstage/errors';\nimport { applyInternalErrorFilter } from './applyInternalErrorFilter';\n\n/**\n * Options used to create a {@link MiddlewareFactory}.\n *\n * @public\n */\nexport interface MiddlewareFactoryOptions {\n  config: RootConfigService;\n  logger: LoggerService;\n}\n\n/**\n * Options passed to the {@link MiddlewareFactory.error} middleware.\n *\n * @public\n */\nexport interface MiddlewareFactoryErrorOptions {\n  /**\n   * Whether error response bodies should show error stack traces or not.\n   *\n   * If not specified, by default shows stack traces only in development mode.\n   */\n  showStackTraces?: boolean;\n\n  /**\n   * Whether any 4xx errors should be logged or not.\n   *\n   * If not specified, default to only logging 5xx errors.\n   */\n  logAllErrors?: boolean;\n}\n\n/**\n * A utility to configure common middleware.\n *\n * @public\n */\nexport class MiddlewareFactory {\n  #config: RootConfigService;\n  #logger: LoggerService;\n\n  /**\n   * Creates a new {@link MiddlewareFactory}.\n   */\n  static create(options: MiddlewareFactoryOptions) {\n    return new MiddlewareFactory(options);\n  }\n\n  private constructor(options: MiddlewareFactoryOptions) {\n    this.#config = options.config;\n    this.#logger = options.logger;\n  }\n\n  /**\n   * Returns a middleware that unconditionally produces a 404 error response.\n   *\n   * @remarks\n   *\n   * Typically you want to place this middleware at the end of the chain, such\n   * that it's the last one attempted after no other routes matched.\n   *\n   * @returns An Express request handler\n   */\n  notFound(): RequestHandler {\n    return (_req: Request, res: Response) => {\n      res.status(404).end();\n    };\n  }\n\n  /**\n   * Returns the compression middleware.\n   *\n   * @remarks\n   *\n   * The middleware will attempt to compress response bodies for all requests\n   * that traverse through the middleware.\n   */\n  compression(): RequestHandler {\n    return compression();\n  }\n\n  /**\n   * Returns a request logging middleware.\n   *\n   * @remarks\n   *\n   * Typically you want to place this middleware at the start of the chain, such\n   * that it always logs requests whether they are \"caught\" by handlers farther\n   * down or not.\n   *\n   * @returns An Express request handler\n   */\n  logging(): RequestHandler {\n    const logger = this.#logger.child({\n      type: 'incomingRequest',\n    });\n    const customMorganFormat =\n      '[:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] \":referrer\" \":user-agent\"';\n    return morgan(customMorganFormat, {\n      stream: {\n        write(message: string) {\n          logger.info(message.trimEnd());\n        },\n      },\n    });\n  }\n\n  /**\n   * Returns a middleware that implements the helmet library.\n   *\n   * @remarks\n   *\n   * This middleware applies security policies to incoming requests and outgoing\n   * responses. It is configured using config keys such as `backend.csp`.\n   *\n   * @see {@link https://helmetjs.github.io/}\n   *\n   * @returns An Express request handler\n   */\n  helmet(): RequestHandler {\n    return helmet(readHelmetOptions(this.#config.getOptionalConfig('backend')));\n  }\n\n  /**\n   * Returns a middleware that implements the cors library.\n   *\n   * @remarks\n   *\n   * This middleware handles CORS. It is configured using the config key\n   * `backend.cors`.\n   *\n   * @see {@link https://github.com/expressjs/cors}\n   *\n   * @returns An Express request handler\n   */\n  cors(): RequestHandler {\n    return cors(readCorsOptions(this.#config.getOptionalConfig('backend')));\n  }\n\n  /**\n   * Express middleware to handle errors during request processing.\n   *\n   * @remarks\n   *\n   * This is commonly the very last middleware in the chain.\n   *\n   * Its primary purpose is not to do translation of business logic exceptions,\n   * but rather to be a global catch-all for uncaught \"fatal\" errors that are\n   * expected to result in a 500 error. However, it also does handle some common\n   * error types (such as http-error exceptions, and the well-known error types\n   * in the `@backstage/errors` package) and returns the enclosed status code\n   * accordingly.\n   *\n   * It will also produce a response body with a serialized form of the error,\n   * unless a previous handler already did send a body. See\n   * {@link @backstage/errors#ErrorResponseBody} for the response shape used.\n   *\n   * @returns An Express error request handler\n   */\n  error(options: MiddlewareFactoryErrorOptions = {}): ErrorRequestHandler {\n    const showStackTraces =\n      options.showStackTraces ?? process.env.NODE_ENV === 'development';\n\n    const logger = this.#logger.child({\n      type: 'errorHandler',\n    });\n\n    return (\n      rawError: Error,\n      req: Request,\n      res: Response,\n      next: NextFunction,\n    ) => {\n      const error = applyInternalErrorFilter(rawError, logger);\n\n      const statusCode = getStatusCode(error);\n      if (options.logAllErrors || statusCode >= 500) {\n        logger.error(`Request failed with status ${statusCode}`, error);\n      }\n\n      if (res.headersSent) {\n        // If the headers have already been sent, do not send the response again\n        // as this will throw an error in the backend.\n        next(error);\n        return;\n      }\n\n      const body: ErrorResponseBody = {\n        error: serializeError(error, { includeStack: showStackTraces }),\n        request: { method: req.method, url: req.url },\n        response: { statusCode },\n      };\n\n      res.status(statusCode).json(body);\n    };\n  }\n}\n\nfunction getStatusCode(error: Error): number {\n  // Look for common http library status codes\n  const knownStatusCodeFields = ['statusCode', 'status'];\n  for (const field of knownStatusCodeFields) {\n    const statusCode = (error as any)[field];\n    if (\n      typeof statusCode === 'number' &&\n      (statusCode | 0) === statusCode && // is whole integer\n      statusCode >= 100 &&\n      statusCode <= 599\n    ) {\n      return statusCode;\n    }\n  }\n\n  // Handle well-known error types\n  switch (error.name) {\n    case NotModifiedError.name:\n      return 304;\n    case InputError.name:\n      return 400;\n    case AuthenticationError.name:\n      return 401;\n    case NotAllowedError.name:\n      return 403;\n    case NotFoundError.name:\n      return 404;\n    case ConflictError.name:\n      return 409;\n    case NotImplementedError.name:\n      return 501;\n    case ServiceUnavailableError.name:\n      return 503;\n    default:\n      break;\n  }\n\n  // Fall back to internal server error\n  return 500;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorRequestHandler } from 'express';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { ConfigReader } from '@backstage/config';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { MiddlewareFactory } from '../../../../backend-defaults/src/entrypoints/rootHttpRouter/http/MiddlewareFactory';\nimport { getRootLogger } from '../logging';\n\n/**\n * Options passed to the {@link errorHandler} middleware.\n *\n * @public\n * @deprecated This type is being deprecated along with the {@link @backstage/backend-common#errorHandler} function.\n */\nexport type ErrorHandlerOptions = {\n  /**\n   * Whether error response bodies should show error stack traces or not.\n   *\n   * If not specified, by default shows stack traces only in development mode.\n   */\n  showStackTraces?: boolean;\n\n  /**\n   * Logger instance to log errors.\n   *\n   * If not specified, the root logger will be used.\n   */\n  logger?: LoggerService;\n\n  /**\n   * Whether any 4xx errors should be logged or not.\n   *\n   * If not specified, default to only logging 5xx errors.\n   */\n  logClientErrors?: boolean;\n};\n\n/**\n * Express middleware to handle errors during request processing.\n *\n * This is commonly the very last middleware in the chain.\n *\n * Its primary purpose is not to do translation of business logic exceptions,\n * but rather to be a global catch-all for uncaught \"fatal\" errors that are\n * expected to result in a 500 error. However, it also does handle some common\n * error types (such as http-error exceptions) and returns the enclosed status\n * code accordingly.\n *\n * @public\n * @returns An Express error request handler\n * @deprecated Use {@link @backstage/backend-defaults/rootHttpRouter#MiddlewareFactory.create.error} instead\n */\nexport function errorHandler(\n  options: ErrorHandlerOptions = {},\n): ErrorRequestHandler {\n  return MiddlewareFactory.create({\n    config: new ConfigReader({}),\n    logger: options.logger ?? getRootLogger(),\n  }).error({\n    logAllErrors: options.logClientErrors,\n    showStackTraces: options.showStackTraces,\n  });\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { MiddlewareFactory } from '../../../../backend-defaults/src/entrypoints/rootHttpRouter/http/MiddlewareFactory';\nimport { ConfigReader } from '@backstage/config';\nimport { RequestHandler } from 'express';\nimport { getRootLogger } from '../logging';\n\n/**\n * Express middleware to handle requests for missing routes.\n *\n * Should be used as the very last handler in the chain, as it unconditionally\n * returns a 404 status.\n *\n * @public\n * @returns An Express request handler\n * @deprecated Use {@link @backstage/backend-app-api#MiddlewareFactory.create.notFound} instead\n */\nexport function notFoundHandler(): RequestHandler {\n  return MiddlewareFactory.create({\n    config: new ConfigReader({}),\n    logger: getRootLogger(),\n  }).notFound();\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { MiddlewareFactory } from '../../../../backend-defaults/src/entrypoints/rootHttpRouter/http/MiddlewareFactory';\nimport { RequestHandler } from 'express';\nimport { ConfigReader } from '@backstage/config';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { getRootLogger } from '../logging';\n\n/**\n * Logs incoming requests.\n *\n * @public\n * @param logger - An optional logger to use. If not specified, the root logger will be used.\n * @returns An Express request handler\n * @deprecated Use {@link @backstage/backend-app-api#MiddlewareFactory.create.logging} instead\n */\nexport function requestLoggingHandler(logger?: LoggerService): RequestHandler {\n  return MiddlewareFactory.create({\n    config: new ConfigReader({}),\n    logger: logger ?? getRootLogger(),\n  }).logging();\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NextFunction, Request, Response, RequestHandler } from 'express';\n\n/**\n * A custom status checking function, passed to {@link statusCheckHandler} and\n * {@link createStatusCheckRouter}.\n *\n * @public\n * @deprecated Migrate to the {@link https://backstage.io/docs/backend-system/ | new backend system} and use the {@link https://backstage.io/docs/backend-system/core-services/root-health | Root Health Service} instead.\n */\nexport type StatusCheck = () => Promise<any>;\n\n/**\n * Options passed to {@link statusCheckHandler}.\n *\n * @public\n * @deprecated Migrate to the {@link https://backstage.io/docs/backend-system/ | new backend system} and use the {@link https://backstage.io/docs/backend-system/core-services/root-health | Root Health Service} instead.\n */\nexport interface StatusCheckHandlerOptions {\n  /**\n   * Optional status function which returns a message.\n   */\n  statusCheck?: StatusCheck;\n}\n\n/**\n * Express middleware for status checks.\n *\n * This is commonly used to implement healthcheck and readiness routes.\n *\n * @public\n * @param options - An optional configuration object.\n * @returns An Express error request handler\n * @deprecated Migrate to the {@link https://backstage.io/docs/backend-system/ | new backend system} and use the {@link https://backstage.io/docs/backend-system/core-services/root-health | Root Health Service} instead.\n */\nexport async function statusCheckHandler(\n  options: StatusCheckHandlerOptions = {},\n): Promise<RequestHandler> {\n  const statusCheck: StatusCheck = options.statusCheck\n    ? options.statusCheck\n    : () => Promise.resolve({ status: 'ok' });\n\n  return async (_request: Request, response: Response, next: NextFunction) => {\n    try {\n      const status = await statusCheck();\n      response.status(200).json(status);\n    } catch (err) {\n      next(err);\n    }\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport { resolve as resolvePath, dirname } from 'path';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport forge from 'node-forge';\n\nconst FIVE_DAYS_IN_MS = 5 * 24 * 60 * 60 * 1000;\n\nconst IP_HOSTNAME_REGEX = /:|^\\d+\\.\\d+\\.\\d+\\.\\d+$/;\n\nexport async function getGeneratedCertificate(\n  hostname: string,\n  logger: LoggerService,\n) {\n  const hasModules = await fs.pathExists('node_modules');\n  let certPath;\n  if (hasModules) {\n    certPath = resolvePath(\n      'node_modules/.cache/backstage-backend/dev-cert.pem',\n    );\n    await fs.ensureDir(dirname(certPath));\n  } else {\n    certPath = resolvePath('.dev-cert.pem');\n  }\n\n  if (await fs.pathExists(certPath)) {\n    try {\n      const cert = await fs.readFile(certPath);\n\n      const crt = forge.pki.certificateFromPem(cert.toString());\n      const remainingMs = crt.validity.notAfter.getTime() - Date.now();\n      if (remainingMs > FIVE_DAYS_IN_MS) {\n        logger.info('Using existing self-signed certificate');\n        return {\n          key: cert,\n          cert,\n        };\n      }\n    } catch (error) {\n      logger.warn(`Unable to use existing self-signed certificate, ${error}`);\n    }\n  }\n\n  logger.info('Generating new self-signed certificate');\n  const newCert = await generateCertificate(hostname);\n  await fs.writeFile(certPath, newCert.cert + newCert.key, 'utf8');\n  return newCert;\n}\n\nasync function generateCertificate(hostname: string) {\n  const attributes = [\n    {\n      name: 'commonName',\n      value: 'dev-cert',\n    },\n  ];\n\n  const sans = [\n    {\n      type: 2, // DNS\n      value: 'localhost',\n    },\n    {\n      type: 2,\n      value: 'localhost.localdomain',\n    },\n    {\n      type: 2,\n      value: '[::1]',\n    },\n    {\n      type: 7, // IP\n      ip: '127.0.0.1',\n    },\n    {\n      type: 7,\n      ip: 'fe80::1',\n    },\n  ];\n\n  // Add hostname from backend.baseUrl if it doesn't already exist in our list of SANs\n  if (!sans.find(({ value, ip }) => value === hostname || ip === hostname)) {\n    sans.push(\n      IP_HOSTNAME_REGEX.test(hostname)\n        ? {\n            type: 7,\n            ip: hostname,\n          }\n        : {\n            type: 2,\n            value: hostname,\n          },\n    );\n  }\n\n  const params = {\n    algorithm: 'sha256',\n    keySize: 2048,\n    days: 30,\n    extensions: [\n      {\n        name: 'keyUsage',\n        keyCertSign: true,\n        digitalSignature: true,\n        nonRepudiation: true,\n        keyEncipherment: true,\n        dataEncipherment: true,\n      },\n      {\n        name: 'extKeyUsage',\n        serverAuth: true,\n        clientAuth: true,\n        codeSigning: true,\n        timeStamping: true,\n      },\n      {\n        name: 'subjectAltName',\n        altNames: sans,\n      },\n    ],\n  };\n\n  return new Promise<{ key: string; cert: string }>((resolve, reject) =>\n    require('selfsigned').generate(\n      attributes,\n      params,\n      (err: Error, bundle: { private: string; cert: string }) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ key: bundle.private, cert: bundle.cert });\n        }\n      },\n    ),\n  );\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as http from 'http';\nimport * as https from 'https';\nimport stoppableServer from 'stoppable';\nimport { RequestListener } from 'http';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { HttpServerOptions, ExtendedHttpServer } from './types';\nimport { getGeneratedCertificate } from './getGeneratedCertificate';\n\n/**\n * Creates a Node.js HTTP or HTTPS server instance.\n *\n * @public\n */\nexport async function createHttpServer(\n  listener: RequestListener,\n  options: HttpServerOptions,\n  deps: { logger: LoggerService },\n): Promise<ExtendedHttpServer> {\n  const server = await createServer(listener, options, deps);\n\n  const stopper = stoppableServer(server, 0);\n  // The stopper here is actually the server itself, so if we try\n  // to call stopper.stop() down in the stop implementation, we'll\n  // be calling ourselves.\n  const stopServer = stopper.stop.bind(stopper);\n\n  return Object.assign(server, {\n    start() {\n      return new Promise<void>((resolve, reject) => {\n        const handleStartupError = (error: Error) => {\n          server.close();\n          reject(error);\n        };\n\n        server.on('error', handleStartupError);\n\n        const { host, port } = options.listen;\n        server.listen(port, host, () => {\n          server.off('error', handleStartupError);\n          deps.logger.info(`Listening on ${host}:${port}`);\n          resolve();\n        });\n      });\n    },\n\n    stop() {\n      return new Promise<void>((resolve, reject) => {\n        stopServer((error?: Error) => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    port() {\n      const address = server.address();\n      if (typeof address === 'string' || address === null) {\n        throw new Error(`Unexpected server address '${address}'`);\n      }\n      return address.port;\n    },\n  });\n}\n\nasync function createServer(\n  listener: RequestListener,\n  options: HttpServerOptions,\n  deps: { logger: LoggerService },\n): Promise<http.Server> {\n  if (options.https) {\n    const { certificate } = options.https;\n    if (certificate.type === 'generated') {\n      const credentials = await getGeneratedCertificate(\n        certificate.hostname,\n        deps.logger,\n      );\n      return https.createServer(credentials, listener);\n    }\n    return https.createServer(certificate, listener);\n  }\n\n  return http.createServer(listener);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport compression from 'compression';\nimport cors from 'cors';\nimport express, { Router, ErrorRequestHandler } from 'express';\nimport helmet, { HelmetOptions } from 'helmet';\nimport { ContentSecurityPolicyOptions } from 'helmet/dist/types/middlewares/content-security-policy';\nimport * as http from 'http';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { useHotCleanup } from '../../hot';\nimport { getRootLogger } from '../../logging';\nimport {\n  errorHandler as defaultErrorHandler,\n  notFoundHandler,\n  requestLoggingHandler as defaultRequestLoggingHandler,\n} from '../../middleware';\nimport { RequestLoggingHandlerFactory, ServiceBuilder } from '../types';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  readCorsOptions,\n  readHelmetOptions,\n  readHttpServerOptions,\n  HttpServerOptions,\n  createHttpServer,\n} from '../../../../../backend-defaults/src/entrypoints/rootHttpRouter/http';\n\nexport type CspOptions = Record<string, string[]>;\n\nexport class ServiceBuilderImpl implements ServiceBuilder {\n  private logger: LoggerService | undefined;\n  private serverOptions: HttpServerOptions;\n  private helmetOptions: HelmetOptions;\n  private corsOptions: cors.CorsOptions;\n  private routers: [string, Router][];\n  private requestLoggingHandler: RequestLoggingHandlerFactory | undefined;\n  private errorHandler: ErrorRequestHandler | undefined;\n  private useDefaultErrorHandler: boolean;\n  // Reference to the module where builder is created - needed for hot module\n  // reloading\n  private module: NodeModule;\n\n  constructor(moduleRef: NodeModule) {\n    this.routers = [];\n    this.module = moduleRef;\n    this.useDefaultErrorHandler = true;\n\n    this.serverOptions = readHttpServerOptions();\n    this.corsOptions = readCorsOptions();\n    this.helmetOptions = readHelmetOptions();\n  }\n\n  loadConfig(config: Config): ServiceBuilder {\n    const backendConfig = config.getOptionalConfig('backend');\n\n    this.serverOptions = readHttpServerOptions(backendConfig);\n    this.corsOptions = readCorsOptions(backendConfig);\n    this.helmetOptions = readHelmetOptions(backendConfig);\n\n    return this;\n  }\n\n  setPort(port: number): ServiceBuilder {\n    this.serverOptions.listen.port = port;\n    return this;\n  }\n\n  setHost(host: string): ServiceBuilder {\n    this.serverOptions.listen.host = host;\n    return this;\n  }\n\n  setLogger(logger: LoggerService): ServiceBuilder {\n    this.logger = logger;\n    return this;\n  }\n\n  setHttpsSettings(settings: {\n    certificate: { key: string; cert: string } | { hostname: string };\n  }): ServiceBuilder {\n    if ('hostname' in settings.certificate) {\n      this.serverOptions.https = {\n        certificate: {\n          ...settings.certificate,\n          type: 'generated',\n        },\n      };\n    } else {\n      this.serverOptions.https = {\n        certificate: {\n          ...settings.certificate,\n          type: 'pem',\n        },\n      };\n    }\n    return this;\n  }\n\n  enableCors(options: cors.CorsOptions): ServiceBuilder {\n    this.corsOptions = options;\n    return this;\n  }\n\n  setCsp(options: CspOptions): ServiceBuilder {\n    const csp = this.helmetOptions.contentSecurityPolicy;\n    this.helmetOptions.contentSecurityPolicy = {\n      ...(typeof csp === 'object' ? csp : {}),\n      directives: applyCspDirectives(options),\n    };\n    return this;\n  }\n\n  addRouter(root: string, router: Router): ServiceBuilder {\n    this.routers.push([root, router]);\n    return this;\n  }\n\n  setRequestLoggingHandler(\n    requestLoggingHandler: RequestLoggingHandlerFactory,\n  ) {\n    this.requestLoggingHandler = requestLoggingHandler;\n    return this;\n  }\n\n  setErrorHandler(errorHandler: ErrorRequestHandler) {\n    this.errorHandler = errorHandler;\n    return this;\n  }\n\n  disableDefaultErrorHandler() {\n    this.useDefaultErrorHandler = false;\n    return this;\n  }\n\n  async start(): Promise<http.Server> {\n    const app = express();\n    const logger = this.logger ?? getRootLogger();\n\n    app.use(helmet(this.helmetOptions));\n    app.use(cors(this.corsOptions));\n    app.use(compression());\n    app.use(\n      (this.requestLoggingHandler ?? defaultRequestLoggingHandler)(logger),\n    );\n    for (const [root, route] of this.routers) {\n      app.use(root, route);\n    }\n    app.use(notFoundHandler());\n\n    if (this.errorHandler) {\n      app.use(this.errorHandler);\n    }\n\n    if (this.useDefaultErrorHandler) {\n      app.use(defaultErrorHandler());\n    }\n\n    const server = await createHttpServer(app, this.serverOptions, { logger });\n\n    useHotCleanup(this.module, () =>\n      server.stop().catch(error => {\n        console.error(error);\n      }),\n    );\n\n    await server.start();\n\n    return server;\n  }\n}\n\n// TODO(Rugvip): This is a duplicate of the same logic over in backend-app-api.\n//               It's needed as we don't want to export this helper from there, but need\n//               It to implement the setCsp method here.\nexport function applyCspDirectives(\n  directives: Record<string, string[] | false> | undefined,\n): ContentSecurityPolicyOptions['directives'] {\n  const result: ContentSecurityPolicyOptions['directives'] =\n    helmet.contentSecurityPolicy.getDefaultDirectives();\n\n  // TODO(Rugvip): We currently use non-precompiled AJV for validation in the frontend, which uses eval.\n  //               It should be replaced by any other solution that doesn't require unsafe-eval.\n  result['script-src'] = [\"'self'\", \"'unsafe-eval'\"];\n\n  // TODO(Rugvip): This is removed so that we maintained backwards compatibility\n  //               when bumping to helmet v5, we could remove this as well as\n  //               skip setting `useDefaults: false` in the future.\n  delete result['form-action'];\n\n  if (directives) {\n    for (const [key, value] of Object.entries(directives)) {\n      if (value === false) {\n        delete result[key];\n      } else {\n        result[key] = value;\n      }\n    }\n  }\n\n  return result;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ServiceBuilderImpl } from './lib/ServiceBuilderImpl';\nimport { ServiceBuilder } from './types';\n\n/**\n * Creates a new service builder.\n * @public\n * @deprecated We are going to deprecated this old way of creating services in a near future, if you are using this service helper, please checkout the {@link https://backstage.io/docs/backend-system/building-backends/migrating | backend} and {@link https://backstage.io/docs/backend-system/building-plugins-and-modules/migrating | plugin} migration guides.\n */\nexport function createServiceBuilder(_module: NodeModule): ServiceBuilder {\n  return new ServiceBuilderImpl(_module);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport Router from 'express-promise-router';\nimport express from 'express';\nimport { errorHandler, statusCheckHandler, StatusCheck } from '..';\n\n/**\n * Creates a default status checking router, that you can add to your express\n * app.\n *\n * @remarks\n *\n * This adds a `/healthcheck` route (or any other path, if given as an\n * argument), which your infra can call to see if the service is ready to serve\n * requests.\n *\n * @public\n * @deprecated Migrate to the {@link https://backstage.io/docs/backend-system/ | new backend system} and use the {@link https://backstage.io/docs/backend-system/core-services/root-health | Root Health Service} instead.\n */\nexport async function createStatusCheckRouter(options: {\n  logger: LoggerService;\n  /**\n   * The path (including a leading slash) that the health check should be\n   * mounted on.\n   *\n   * @defaultValue '/healthcheck'\n   */\n  path?: string;\n  /**\n   * If not implemented, the default express middleware always returns 200.\n   * Override this to implement your own logic for a health check.\n   */\n  statusCheck?: StatusCheck;\n}): Promise<express.Router> {\n  const router = Router();\n  const { path = '/healthcheck', statusCheck } = options;\n\n  router.use(path, await statusCheckHandler({ statusCheck }));\n  router.use(errorHandler());\n\n  return router;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Docker from 'dockerode';\nimport fs from 'fs-extra';\nimport { ForwardedError } from '@backstage/errors';\nimport { PassThrough } from 'stream';\nimport { ContainerRunner, RunContainerOptions } from './ContainerRunner';\n\nexport type UserOptions = {\n  User?: string;\n};\n\n/**\n * A {@link ContainerRunner} for Docker containers.\n *\n * @public\n * @deprecated This class is deprecated and will be removed in a future release.\n */\nexport class DockerContainerRunner implements ContainerRunner {\n  private readonly dockerClient: Docker;\n\n  constructor(options: { dockerClient: Docker }) {\n    this.dockerClient = options.dockerClient;\n  }\n\n  async runContainer(options: RunContainerOptions) {\n    const {\n      imageName,\n      command,\n      args,\n      logStream = new PassThrough(),\n      mountDirs = {},\n      workingDir,\n      envVars = {},\n      pullImage = true,\n      defaultUser = false,\n      pullOptions = {},\n    } = options;\n\n    // Show a better error message when Docker is unavailable.\n    try {\n      await this.dockerClient.ping();\n    } catch (e) {\n      throw new ForwardedError(\n        'This operation requires Docker. Docker does not appear to be available. Docker.ping() failed with',\n        e,\n      );\n    }\n\n    if (pullImage) {\n      await new Promise<void>((resolve, reject) => {\n        this.dockerClient.pull(imageName, pullOptions, (err, stream) => {\n          if (err) {\n            reject(err);\n          } else if (!stream) {\n            reject(\n              new Error(\n                'Unexpeected error: no stream returned from Docker while pulling image',\n              ),\n            );\n          } else {\n            stream.pipe(logStream, { end: false });\n            stream.on('end', () => resolve());\n            stream.on('error', (error: Error) => reject(error));\n          }\n        });\n      });\n    }\n\n    const userOptions: UserOptions = {};\n    if (!defaultUser && process.getuid && process.getgid) {\n      // Files that are created inside the Docker container will be owned by\n      // root on the host system on non Mac systems, because of reasons. Mainly the fact that\n      // volume sharing is done using NFS on Mac and actual mounts in Linux world.\n      // So we set the user in the container as the same user and group id as the host.\n      // On Windows we don't have process.getuid nor process.getgid\n      userOptions.User = `${process.getuid()}:${process.getgid()}`;\n    }\n\n    // Initialize volumes to mount based on mountDirs map\n    const Volumes: { [T: string]: object } = {};\n    for (const containerDir of Object.values(mountDirs)) {\n      Volumes[containerDir] = {};\n    }\n\n    // Create bind volumes\n    const Binds: string[] = [];\n    for (const [hostDir, containerDir] of Object.entries(mountDirs)) {\n      // Need to use realpath here as Docker mounting does not like\n      // symlinks for binding volumes\n      const realHostDir = await fs.realpath(hostDir);\n      Binds.push(`${realHostDir}:${containerDir}`);\n    }\n\n    // Create docker environment variables array\n    const Env = new Array<string>();\n    for (const [key, value] of Object.entries(envVars)) {\n      Env.push(`${key}=${value}`);\n    }\n\n    const [{ Error: error, StatusCode: statusCode }] =\n      await this.dockerClient.run(imageName, args, logStream, {\n        Volumes,\n        HostConfig: {\n          AutoRemove: true,\n          Binds,\n        },\n        ...(workingDir ? { WorkingDir: workingDir } : {}),\n        Entrypoint: command,\n        Env,\n        ...userOptions,\n      } as Docker.ContainerCreateOptions);\n\n    if (error) {\n      throw new Error(\n        `Docker failed to run with the following error message: ${error}`,\n      );\n    }\n\n    if (statusCode !== 0) {\n      throw new Error(\n        `Docker container returned a non-zero exit code (${statusCode})`,\n      );\n    }\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PassThrough, Writable } from 'stream';\nimport { ContainerRunner, RunContainerOptions } from './ContainerRunner';\nimport {\n  KubeConfig,\n  BatchV1Api,\n  V1Job,\n  V1EnvVar,\n  Log,\n  HttpError,\n  V1Status,\n  V1VolumeMount,\n  V1PodTemplateSpec,\n  V1Pod,\n  Watch,\n} from '@kubernetes/client-node';\nimport { v4 as uuid } from 'uuid';\n\n/**\n * An existing Kubernetes volume that will be used as base for mounts.\n *\n * Every mount must start with the 'basePath'.\n *\n * @public\n * @deprecated This type is deprecated and will be removed in a future release.\n */\nexport type KubernetesContainerRunnerMountBase = {\n  volumeName: string;\n  basePath: string;\n};\n\n/**\n * Options to create a {@link KubernetesContainerRunner}\n *\n * Kubernetes Jobs will be created on the provided 'namespace'\n * and their names will be prefixed with the provided 'name'.\n *\n * 'podTemplate' defines a Pod template for the Jobs. It has to include\n * a volume definition named as the {@link KubernetesContainerRunnerMountBase} 'volumeName'.\n *\n * @public\n * @deprecated This type is deprecated and will be removed in a future release.\n */\nexport type KubernetesContainerRunnerOptions = {\n  kubeConfig: KubeConfig;\n  name: string;\n  namespace?: string;\n  mountBase?: KubernetesContainerRunnerMountBase;\n  podTemplate?: V1PodTemplateSpec;\n  timeoutMs?: number;\n};\n\n/**\n * A {@link ContainerRunner} for Kubernetes.\n *\n * Runs containers leveraging Jobs on a Kubernetes cluster\n *\n * @public\n * @deprecated This class is deprecated and will be removed in a future release.\n */\nexport class KubernetesContainerRunner implements ContainerRunner {\n  private readonly kubeConfig: KubeConfig;\n  private readonly batchV1Api: BatchV1Api;\n  private readonly log: Log;\n  private readonly name: string;\n  private readonly namespace: string;\n  private readonly mountBase?: KubernetesContainerRunnerMountBase;\n  private readonly podTemplate?: V1PodTemplateSpec;\n  private readonly timeoutMs: number;\n  private readonly containerName = 'executor';\n\n  private getNamespace(kubeConfig: KubeConfig, namespace?: string): string {\n    let _namespace = namespace;\n    if (!_namespace) {\n      _namespace = kubeConfig.getContextObject(\n        kubeConfig.currentContext,\n      )?.namespace;\n    }\n    if (!_namespace) {\n      throw new Error('Cannot read current namespace from Kubernetes cluster');\n    }\n    return _namespace;\n  }\n\n  private validateMountBase(\n    mountBase: KubernetesContainerRunnerMountBase,\n    podTemplate?: V1PodTemplateSpec,\n  ): KubernetesContainerRunnerMountBase {\n    if (\n      !podTemplate?.spec?.volumes?.filter(v => v.name === mountBase.volumeName)\n        .length\n    ) {\n      throw new Error(\n        `A Pod template containing the volume ${mountBase.volumeName} is required`,\n      );\n    }\n    if (!mountBase.basePath.endsWith('/')) {\n      mountBase.basePath += '/';\n    }\n    return mountBase;\n  }\n\n  constructor(options: KubernetesContainerRunnerOptions) {\n    const { kubeConfig, name, namespace, mountBase, podTemplate, timeoutMs } =\n      options;\n    this.kubeConfig = kubeConfig;\n    this.batchV1Api = kubeConfig.makeApiClient(BatchV1Api);\n    this.log = new Log(kubeConfig);\n    this.name = name;\n    this.namespace = this.getNamespace(kubeConfig, namespace);\n    if (mountBase) {\n      this.mountBase = this.validateMountBase(mountBase, podTemplate);\n    }\n    this.podTemplate = podTemplate;\n    this.timeoutMs = timeoutMs || 120 * 1000;\n  }\n\n  async runContainer(options: RunContainerOptions) {\n    const {\n      imageName,\n      command,\n      args,\n      logStream,\n      mountDirs = {},\n      workingDir,\n      envVars = {},\n    } = options;\n\n    const containerLogStream = new PassThrough();\n    if (logStream) {\n      containerLogStream.pipe(logStream, { end: false });\n    }\n\n    const commandArr = typeof command === 'string' ? [command] : command;\n\n    const volumeMounts: V1VolumeMount[] = [];\n    for (const [hostDir, containerDir] of Object.entries(mountDirs)) {\n      if (!this.mountBase) {\n        throw new Error(\n          'A volumeName and a basePath must be configured to bind mount directories',\n        );\n      }\n      if (!hostDir.startsWith(this.mountBase.basePath)) {\n        throw new Error(\n          `Mounted '${hostDir}' dir should be subdirectories of '${this.mountBase.basePath}'`,\n        );\n      }\n      volumeMounts.push({\n        name: this.mountBase.volumeName,\n        mountPath: containerDir,\n        subPath: hostDir.slice(this.mountBase.basePath.length),\n      });\n    }\n\n    const env = [];\n    for (const [key, value] of Object.entries(envVars)) {\n      env.push({\n        name: key,\n        value: value,\n      } as V1EnvVar);\n    }\n\n    const taskId = uuid();\n\n    // TODO find a way to merge recursively\n    const mergedPodTemplate: V1PodTemplateSpec = {\n      metadata: {\n        ...{\n          labels: {\n            task: taskId,\n          },\n        },\n        ...this.podTemplate?.metadata,\n      },\n      spec: {\n        ...{\n          containers: [\n            {\n              name: this.containerName,\n              image: imageName,\n              command: commandArr,\n              args: args,\n              env: env,\n              workingDir: workingDir,\n              volumeMounts: volumeMounts,\n            },\n          ],\n          restartPolicy: 'Never',\n        },\n        ...this.podTemplate?.spec,\n      },\n    };\n\n    const jobSpec: V1Job = {\n      metadata: {\n        generateName: `${this.name}-`,\n      },\n      spec: {\n        backoffLimit: 0,\n        ttlSecondsAfterFinished: 60,\n        template: mergedPodTemplate,\n      },\n    };\n\n    await this.runJob(jobSpec, taskId, containerLogStream);\n  }\n\n  private handleError(err: any, errorCallback: (reason: any) => void) {\n    if (err.code !== 'ECONNRESET' && err.message !== 'aborted') {\n      errorCallback(\n        handleKubernetesError(\n          'Kubernetes watch request failed with the following error message:',\n          err,\n        ),\n      );\n    }\n  }\n\n  private watchPod(\n    taskId: string,\n    callback: (pod: V1Pod) => void,\n    errorCallback: (reason: any) => void,\n  ): Promise<{ abort: () => void }> {\n    const watch = new Watch(this.kubeConfig);\n    const labelSelector = `task=${taskId}`;\n    return watch.watch(\n      `/api/v1/namespaces/${this.namespace}/pods`,\n      {\n        labelSelector,\n      },\n      (_, pod) => {\n        callback(pod);\n      },\n      err => {\n        if (err) {\n          this.handleError(err, errorCallback);\n        }\n      },\n    );\n  }\n\n  private tailLogs(\n    taskId: string,\n    logStream: Writable,\n  ): { promise: Promise<void>; close: () => Promise<void> } {\n    let log: Promise<{ abort: () => void }>;\n    let req: Promise<{ abort: () => void }>;\n    const watchPromise = new Promise<void>((_, reject) => {\n      req = this.watchPod(\n        taskId,\n        pod => {\n          if (\n            log === undefined &&\n            (pod.status?.phase === 'Running' ||\n              pod.status?.phase === 'Succeeded' ||\n              pod.status?.phase === 'Failed')\n          ) {\n            log = this.log.log(\n              this.namespace,\n              pod.metadata?.name!,\n              this.containerName,\n              logStream,\n              { follow: true },\n            );\n          }\n        },\n        reject,\n      );\n    });\n    const logPromise = new Promise<void>((resolve, _) => {\n      if (!logStream.writableFinished) {\n        logStream.on('finish', () => {\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n    const close = async () => {\n      if (req) {\n        (await req).abort();\n      }\n      if (log) {\n        (await log).abort();\n      }\n    };\n    return { promise: Promise.race([watchPromise, logPromise]), close };\n  }\n\n  private waitPod(taskId: string): {\n    promise: Promise<void>;\n    close: () => Promise<void>;\n  } {\n    let req: Promise<{ abort: () => void }>;\n    const promise = new Promise<void>(async (resolve, reject) => {\n      req = this.watchPod(\n        taskId,\n        pod => {\n          if (pod.status?.phase === 'Succeeded') {\n            resolve();\n          }\n          if (pod.status?.phase === 'Failed') {\n            reject(new Error('Container execution failed'));\n          }\n        },\n        reject,\n      );\n    });\n    const close = async () => {\n      if (req) {\n        (await req).abort();\n      }\n    };\n    return { promise, close };\n  }\n\n  private async createJob(jobSpec: V1Job): Promise<any> {\n    return this.batchV1Api\n      .createNamespacedJob(this.namespace, jobSpec)\n      .catch(err => {\n        throw handleKubernetesError(\n          'Kubernetes Job creation failed with the following error message:',\n          err,\n        );\n      });\n  }\n\n  private async runJob(\n    jobSpec: V1Job,\n    taskId: string,\n    logStream: Writable,\n  ): Promise<any> {\n    let timeout: NodeJS.Timeout;\n    const timeoutPromise = new Promise<void>((_, reject) => {\n      timeout = setTimeout(\n        reject,\n        this.timeoutMs,\n        new Error(`Failed to complete in ${this.timeoutMs} ms`),\n      );\n    });\n\n    const { promise: waitPromise, close: waitClose } = this.waitPod(taskId);\n    const { promise: tailPromise, close: tailClose } = this.tailLogs(\n      taskId,\n      logStream,\n    );\n\n    const taskPromise = Promise.all([\n      waitPromise,\n      tailPromise,\n      this.createJob(jobSpec),\n    ]).finally(() => {\n      clearTimeout(timeout);\n    });\n\n    return Promise.race([timeoutPromise, taskPromise])\n      .finally(() => {\n        return waitClose();\n      })\n      .finally(() => {\n        return tailClose();\n      });\n  }\n}\n\nfunction handleKubernetesError(message: string, err: Error): Error {\n  if (err instanceof HttpError) {\n    return new Error(`${message} ${(err.body as V1Status).message}`);\n  }\n  return new Error(`${message} ${err}`);\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { HostDiscovery as _HostDiscovery } from '../../../backend-defaults/src/entrypoints/discovery/HostDiscovery';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { CacheManager as _CacheManager } from '../../../backend-defaults/src/entrypoints/cache/CacheManager';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { type CacheManagerOptions as _CacheManagerOptions } from '../../../backend-defaults/src/entrypoints/cache/types';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  DatabaseManager as _DatabaseManager,\n  type DatabaseManagerOptions as _DatabaseManagerOptions,\n} from '../../../backend-defaults/src/entrypoints/database/DatabaseManager';\n\nimport {\n  DiscoveryService,\n  CacheService,\n  CacheServiceOptions,\n  CacheServiceSetOptions,\n  DatabaseService as _PluginDatabaseManager,\n  isDatabaseConflictError as _isDatabaseConflictError,\n  resolvePackagePath as _resolvePackagePath,\n  resolveSafeChildPath as _resolveSafeChildPath,\n  isChildPath as _isChildPath,\n  LifecycleService,\n  PluginMetadataService,\n  DatabaseService,\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\n\nexport * from './hot';\nexport * from './config';\nexport * from './scm';\nexport * from './tokens';\nexport * from './logging';\nexport * from './service';\nexport * from './middleware';\nexport * from './util';\n\n/**\n * @public\n * @deprecated Use `DiscoveryService` from `@backstage/backend-plugin-api` instead\n */\nexport type PluginEndpointDiscovery = DiscoveryService;\n\n/**\n * HostDiscovery is a basic PluginEndpointDiscovery implementation\n * that can handle plugins that are hosted in a single or multiple deployments.\n *\n * The deployment may be scaled horizontally, as long as the external URL\n * is the same for all instances. However, internal URLs will always be\n * resolved to the same host, so there won't be any balancing of internal traffic.\n *\n * @public\n * @deprecated Please import from `@backstage/backend-defaults/discovery` instead.\n */\nexport class HostDiscovery implements DiscoveryService {\n  /**\n   * Creates a new HostDiscovery discovery instance by reading\n   * from the `backend` config section, specifically the `.baseUrl` for\n   * discovering the external URL, and the `.listen` and `.https` config\n   * for the internal one.\n   *\n   * Can be overridden in config by providing a target and corresponding plugins in `discovery.endpoints`.\n   * eg.\n   * ```yaml\n   * discovery:\n   *  endpoints:\n   *    - target: https://internal.example.com/internal-catalog\n   *      plugins: [catalog]\n   *    - target: https://internal.example.com/secure/api/{{pluginId}}\n   *      plugins: [auth, permission]\n   *    - target:\n   *        internal: https://internal.example.com/search\n   *        external: https://example.com/search\n   *      plugins: [search]\n   * ```\n   *\n   * The fixed base path is `/api`, meaning the default full internal\n   * path for the `catalog` plugin will be `http://localhost:7007/api/catalog`.\n   */\n  static fromConfig(config: Config) {\n    return new HostDiscovery(_HostDiscovery.fromConfig(config));\n  }\n\n  private constructor(private readonly impl: _HostDiscovery) {}\n\n  async getBaseUrl(pluginId: string): Promise<string> {\n    return this.impl.getBaseUrl(pluginId);\n  }\n\n  async getExternalBaseUrl(pluginId: string): Promise<string> {\n    return this.impl.getExternalBaseUrl(pluginId);\n  }\n}\n\n/**\n * SingleHostDiscovery is a basic PluginEndpointDiscovery implementation\n * that assumes that all plugins are hosted in a single deployment.\n *\n * The deployment may be scaled horizontally, as long as the external URL\n * is the same for all instances. However, internal URLs will always be\n * resolved to the same host, so there won't be any balancing of internal traffic.\n *\n * @public\n * @deprecated Use `HostDiscovery` from `@backstage/backend-defaults/discovery` instead\n */\nexport { HostDiscovery as SingleHostDiscovery };\n\n/**\n * @public\n * @deprecated Use `CacheManager` from the `@backstage/backend-defaults` package instead\n */\nexport class CacheManager {\n  /**\n   * Creates a new {@link CacheManager} instance by reading from the `backend`\n   * config section, specifically the `.cache` key.\n   *\n   * @param config - The loaded application configuration.\n   */\n  static fromConfig(\n    config: RootConfigService,\n    options: CacheManagerOptions = {},\n  ): CacheManager {\n    return new CacheManager(_CacheManager.fromConfig(config, options));\n  }\n\n  private constructor(private readonly _impl: _CacheManager) {}\n\n  forPlugin(pluginId: string): PluginCacheManager {\n    return {\n      getClient: options => {\n        const result = this._impl.forPlugin(pluginId);\n        return options ? result.withOptions(options) : result;\n      },\n    };\n  }\n}\n\n/**\n * @public\n * @deprecated Use `CacheManagerOptions` from the `@backstage/backend-defaults` package instead\n */\nexport type CacheManagerOptions = _CacheManagerOptions;\n\n/**\n * @public\n * @deprecated Use `PluginCacheManager` from the `@backstage/backend-defaults` package instead\n */\nexport type PluginCacheManager = {\n  getClient(options?: CacheServiceOptions): CacheService;\n};\n\n/**\n * @public\n * @deprecated Use `CacheService` from the `@backstage/backend-plugin-api` package instead\n */\nexport type CacheClient = CacheService;\n\n/**\n * @public\n * @deprecated Use `CacheServiceSetOptions` from the `@backstage/backend-plugin-api` package instead\n */\nexport type CacheClientSetOptions = CacheServiceSetOptions;\n\n/**\n * @public\n * @deprecated Use `CacheServiceOptions` from the `@backstage/backend-plugin-api` package instead\n */\nexport type CacheClientOptions = CacheServiceOptions;\n\n/**\n * @public\n * @deprecated Use `DatabaseManager` from the `@backstage/backend-defaults` package instead\n */\nexport class DatabaseManager implements LegacyRootDatabaseService {\n  private constructor(\n    private readonly _databaseManager: _DatabaseManager,\n    private readonly logger?: LoggerService,\n  ) {}\n\n  static fromConfig(\n    config: Config,\n    options?: {\n      migrations?: DatabaseService['migrations'];\n      logger?: LoggerService;\n    },\n  ): DatabaseManager {\n    const _databaseManager = _DatabaseManager.fromConfig(config, options);\n    return new DatabaseManager(_databaseManager, options?.logger);\n  }\n\n  forPlugin(\n    pluginId: string,\n    deps?:\n      | { lifecycle: LifecycleService; pluginMetadata: PluginMetadataService }\n      | undefined,\n  ): PluginDatabaseManager {\n    const logger: LoggerService = this.logger ?? {\n      debug() {},\n      info() {},\n      warn() {},\n      error() {},\n      child() {\n        return this;\n      },\n    };\n    const lifecycle: LifecycleService = deps?.lifecycle ?? {\n      addShutdownHook() {},\n      addStartupHook() {},\n    };\n    return this._databaseManager.forPlugin(pluginId, { logger, lifecycle });\n  }\n}\n\n/**\n * @public\n * @deprecated Use `DatabaseManagerOptions` from the `@backstage/backend-defaults` package instead\n */\nexport type DatabaseManagerOptions = _DatabaseManagerOptions;\n\n/**\n * @public\n * @deprecated Use `DatabaseService` from the `@backstage/backend-plugin-api` package instead\n */\nexport type PluginDatabaseManager = _PluginDatabaseManager;\n\n/**\n * @public\n * @deprecated Use `DatabaseManager` from `@backstage/backend-defaults/database` instead, or migrate to the new backend system and use `coreServices.database`\n */\nexport type LegacyRootDatabaseService = {\n  forPlugin(pluginId: string): DatabaseService;\n};\n\n/**\n * @public\n * @deprecated This function is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n * Please use the `isDatabaseConflictError` function from the `@backstage/backend-plugin-api` package instead.\n */\nexport const isDatabaseConflictError = _isDatabaseConflictError;\n\n/**\n * @public\n * @deprecated This function is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n * Please use the `resolvePackagePath` function from the `@backstage/backend-plugin-api` package instead.\n */\nexport const resolvePackagePath = _resolvePackagePath;\n\n/**\n * @public\n * @deprecated This function is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n * Please use the `resolveSafeChildPath` function from the `@backstage/backend-plugin-api` package instead.\n */\nexport const resolveSafeChildPath = _resolveSafeChildPath;\n\n/**\n * @public\n * @deprecated This function is deprecated and will be removed in a future release, see https://github.com/backstage/backstage/issues/24493.\n * Please use the `isChildPath` function from the `@backstage/cli-common` package instead.\n */\nexport const isChildPath = _isChildPath;\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CacheService,\n  CacheServiceOptions,\n} from '@backstage/backend-plugin-api';\n\n/**\n * Compatibility wrapper for going from a new-backend cache service to the\n * old-backend plugin cache manager.\n *\n * @public\n * @deprecated Migrate to use the new CacheService instead.\n */\nexport function cacheToPluginCacheManager(cache: CacheService): {\n  getClient(options?: CacheServiceOptions): CacheService;\n} {\n  return {\n    getClient: (opts: CacheServiceOptions) => cache.withOptions(opts),\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { JsonObject } from '@backstage/types';\nimport { Logger as WinstonLogger, createLogger } from 'winston';\nimport Transport, { TransportStreamOptions } from 'winston-transport';\n\nclass BackstageLoggerTransport extends Transport {\n  constructor(\n    private readonly backstageLogger: LoggerService,\n    opts?: TransportStreamOptions,\n  ) {\n    super(opts);\n  }\n\n  log(info: unknown, callback: VoidFunction) {\n    if (typeof info !== 'object' || info === null) {\n      callback();\n      return;\n    }\n    const { level, message, ...meta } = info as JsonObject;\n    switch (level) {\n      case 'error':\n        this.backstageLogger.error(String(message), meta);\n        break;\n      case 'warn':\n        this.backstageLogger.warn(String(message), meta);\n        break;\n      case 'info':\n        this.backstageLogger.info(String(message), meta);\n        break;\n      case 'debug':\n        this.backstageLogger.debug(String(message), meta);\n        break;\n      default:\n        this.backstageLogger.info(String(message), meta);\n    }\n    callback();\n  }\n}\n\n/**\n * @public\n * @deprecated Migrate to use the new LoggerService instead.\n */\nexport function loggerToWinstonLogger(\n  logger: LoggerService,\n  opts?: TransportStreamOptions,\n): WinstonLogger {\n  return createLogger({\n    transports: [new BackstageLoggerTransport(logger, opts)],\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthService,\n  coreServices,\n  createBackendPlugin,\n  LoggerService,\n  RootConfigService,\n  ServiceRef,\n  UserInfoService,\n} from '@backstage/backend-plugin-api';\nimport { RequestHandler } from 'express';\nimport { cacheToPluginCacheManager } from '../cache';\nimport { loggerToWinstonLogger } from '../logging';\nimport { ServerTokenManager, TokenManager } from '../../deprecated';\nimport { Request } from 'express';\n\n/**\n * @public\n * @deprecated Fully use the new backend system instead.\n */\nexport type LegacyCreateRouter<TEnv> = (deps: TEnv) => Promise<RequestHandler>;\n\n/** @ignore */\ntype TransformedEnv<\n  TEnv extends Record<string, unknown>,\n  TEnvTransforms extends { [key in keyof TEnv]?: (dep: TEnv[key]) => unknown },\n> = {\n  [key in keyof TEnv]: TEnvTransforms[key] extends (dep: TEnv[key]) => infer R\n    ? R\n    : TEnv[key];\n};\n\n// Since the plugin will be using the new system our callers will expect us to support the\n// new plugin tokens, which we'll also be signaling by supporting the JWKS endpoint through\n// the http router.\n// This makes sure that we accept the new plugin tokens as valid tokens, but otherwise fall\n// back to the legacy token manager.\nfunction createTokenManagerShim(\n  auth: AuthService,\n  config: RootConfigService,\n  logger: LoggerService,\n): TokenManager {\n  const tokenManager = ServerTokenManager.fromConfig(config, { logger });\n  return {\n    async getToken() {\n      return tokenManager.getToken();\n    },\n    async authenticate(token) {\n      if (token) {\n        // Unless it's a valid service token, we'll let the token manager do\n        // validation. We'll throw if we for example receive an invalid user\n        // token here, but that's what the token manager does too.\n        const credentials = await auth.authenticate(token);\n        if (auth.isPrincipal(credentials, 'service')) {\n          return;\n        }\n      }\n      await tokenManager.authenticate(token);\n    },\n  };\n}\n\n/**\n * Originally IdentityApi from `@backstage/plugin-auth-node`, re-declared here for backwards compatibility\n * @public\n * @deprecated Only relevant for legacy plugins, which are deprecated.\n */\nexport interface LegacyIdentityService {\n  getIdentity(options: { request: Request<unknown> }): Promise<\n    | {\n        expiresInSeconds?: number;\n\n        token: string;\n        identity: {\n          type: 'user';\n          userEntityRef: string;\n          ownershipEntityRefs: string[];\n        };\n      }\n    | undefined\n  >;\n}\n\n// This doesn't use DefaultIdentityClient because we will be removing it and break support for ownershipEntityRefs\nfunction createIdentityServiceShim(\n  auth: AuthService,\n  userInfo: UserInfoService,\n): LegacyIdentityService {\n  return {\n    async getIdentity(options) {\n      const authHeader = options.request.headers.authorization;\n      if (typeof authHeader !== 'string') {\n        return undefined;\n      }\n\n      const token = authHeader.match(/^Bearer[ ]+(\\S+)$/i)?.[1];\n      if (!token) {\n        return undefined;\n      }\n\n      const credentials = await auth.authenticate(token);\n      if (!auth.isPrincipal(credentials, 'user')) {\n        return undefined;\n      }\n\n      const info = await userInfo.getUserInfo(credentials);\n\n      return {\n        token,\n        identity: {\n          type: 'user',\n          userEntityRef: info.userEntityRef,\n          ownershipEntityRefs: info.ownershipEntityRefs,\n        },\n      };\n    },\n  };\n}\n\n/**\n * Creates a new custom plugin compatibility wrapper.\n *\n * @public\n * @deprecated Fully use the new backend system instead.\n * @remarks\n *\n * Usually you can use {@link legacyPlugin} directly instead, but you might\n * need to use this if you have customized the plugin environment in your backend.\n */\nexport function makeLegacyPlugin<\n  TEnv extends Record<string, unknown>,\n  TEnvTransforms extends { [key in keyof TEnv]?: (dep: TEnv[key]) => unknown },\n>(\n  envMapping: { [key in keyof TEnv]: ServiceRef<TEnv[key]> },\n  envTransforms: TEnvTransforms,\n) {\n  return (\n    name: string,\n    createRouterImport: Promise<{\n      default: LegacyCreateRouter<\n        TransformedEnv<TEnv, TEnvTransforms> & {\n          tokenManager: TokenManager;\n          identity: LegacyIdentityService;\n        }\n      >;\n    }>,\n  ) => {\n    return createBackendPlugin({\n      pluginId: name,\n      register(env) {\n        env.registerInit({\n          deps: {\n            ...envMapping,\n            $$router: coreServices.httpRouter,\n            $$auth: coreServices.auth,\n            $$userInfo: coreServices.userInfo,\n            $$config: coreServices.rootConfig,\n            $$logger: coreServices.logger,\n          },\n          async init({\n            $$auth,\n            $$config,\n            $$logger,\n            $$router,\n            $$userInfo,\n            ...envDeps\n          }) {\n            const { default: createRouter } = await createRouterImport;\n            const pluginEnv = Object.fromEntries(\n              Object.entries(envDeps).map(([key, dep]) => {\n                const transform = envTransforms[key];\n                if (transform) {\n                  return [key, transform(dep)];\n                }\n                return [key, dep];\n              }),\n            );\n\n            const auth = $$auth as typeof coreServices.auth.T;\n            const config = $$config as typeof coreServices.rootConfig.T;\n            const logger = $$logger as typeof coreServices.logger.T;\n            const router = $$router as typeof coreServices.httpRouter.T;\n            const userInfo = $$userInfo as typeof coreServices.userInfo.T;\n\n            // Token manager and identity services are no longer supported in the new backend system, so we provide shims for them.\n            pluginEnv.tokenManager = createTokenManagerShim(\n              auth,\n              config,\n              logger,\n            );\n            pluginEnv.identity = createIdentityServiceShim(auth, userInfo);\n\n            const pluginRouter = await createRouter(\n              pluginEnv as TransformedEnv<TEnv, TEnvTransforms> & {\n                tokenManager: TokenManager;\n                identity: LegacyIdentityService;\n              },\n            );\n            router.use(pluginRouter);\n          },\n        });\n      },\n    });\n  };\n}\n\n/**\n * Helper function to create a plugin from a legacy createRouter function and\n * register it with the http router based on the plugin id.\n *\n * @public\n * @deprecated Fully use the new backend system instead.\n * @remarks\n *\n * This is intended to be used by plugin authors to ease the transition to the\n * new backend system.\n *\n * @example\n *\n *```ts\n *backend.add(legacyPlugin('kafka', import('./plugins/kafka')));\n *```\n */\nexport const legacyPlugin = makeLegacyPlugin(\n  {\n    cache: coreServices.cache,\n    config: coreServices.rootConfig,\n    database: coreServices.database,\n    discovery: coreServices.discovery,\n    logger: coreServices.logger,\n    permissions: coreServices.permissions,\n    scheduler: coreServices.scheduler,\n    reader: coreServices.urlReader,\n  },\n  {\n    logger: log => loggerToWinstonLogger(log),\n    cache: cache => cacheToPluginCacheManager(cache),\n  },\n);\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BackstageCredentials,\n  BackstageNonePrincipal,\n  BackstagePrincipalAccessRestrictions,\n  BackstageServicePrincipal,\n  BackstageUserPrincipal,\n} from '@backstage/backend-plugin-api';\nimport { InternalBackstageCredentials } from './types';\n\nexport function createCredentialsWithServicePrincipal(\n  sub: string,\n  token?: string,\n  accessRestrictions?: BackstagePrincipalAccessRestrictions,\n): InternalBackstageCredentials<BackstageServicePrincipal> {\n  return {\n    $$type: '@backstage/BackstageCredentials',\n    version: 'v1',\n    token,\n    principal: {\n      type: 'service',\n      subject: sub,\n      accessRestrictions,\n    },\n  };\n}\n\nexport function createCredentialsWithUserPrincipal(\n  sub: string,\n  token: string,\n  expiresAt?: Date,\n): InternalBackstageCredentials<BackstageUserPrincipal> {\n  return {\n    $$type: '@backstage/BackstageCredentials',\n    version: 'v1',\n    token,\n    expiresAt,\n    principal: {\n      type: 'user',\n      userEntityRef: sub,\n    },\n  };\n}\n\nexport function createCredentialsWithNonePrincipal(): InternalBackstageCredentials<BackstageNonePrincipal> {\n  return {\n    $$type: '@backstage/BackstageCredentials',\n    version: 'v1',\n    principal: {\n      type: 'none',\n    },\n  };\n}\n\nexport function toInternalBackstageCredentials(\n  credentials: BackstageCredentials,\n): InternalBackstageCredentials<\n  BackstageUserPrincipal | BackstageServicePrincipal | BackstageNonePrincipal\n> {\n  if (credentials.$$type !== '@backstage/BackstageCredentials') {\n    throw new Error('Invalid credential type');\n  }\n\n  const internalCredentials = credentials as InternalBackstageCredentials<\n    BackstageUserPrincipal | BackstageServicePrincipal | BackstageNonePrincipal\n  >;\n\n  if (internalCredentials.version !== 'v1') {\n    throw new Error(\n      `Invalid credential version ${internalCredentials.version}`,\n    );\n  }\n\n  return internalCredentials;\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthService,\n  BackstageCredentials,\n  BackstageNonePrincipal,\n  BackstagePrincipalTypes,\n  BackstageServicePrincipal,\n  BackstageUserInfo,\n  BackstageUserPrincipal,\n  HttpAuthService,\n  UserInfoService,\n} from '@backstage/backend-plugin-api';\nimport { AuthenticationError, NotAllowedError } from '@backstage/errors';\nimport type { Request, Response } from 'express';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  createCredentialsWithServicePrincipal,\n  createCredentialsWithUserPrincipal,\n  createCredentialsWithNonePrincipal,\n  toInternalBackstageCredentials,\n} from '../../../../backend-defaults/src/entrypoints/auth/helpers';\n// TODO is this circular thingy a problem? Test in e2e\nimport {\n  type IdentityApiGetIdentityRequest,\n  DefaultIdentityClient,\n} from '@backstage/plugin-auth-node';\nimport { decodeJwt } from 'jose';\nimport { TokenManager, PluginEndpointDiscovery } from '../../deprecated';\nimport { JsonObject } from '@backstage/types';\nimport { LegacyIdentityService } from '../legacy';\n\nclass AuthCompat implements AuthService {\n  constructor(\n    private readonly identity: LegacyIdentityService,\n    private readonly tokenManager?: TokenManager,\n  ) {}\n\n  isPrincipal<TType extends keyof BackstagePrincipalTypes>(\n    credentials: BackstageCredentials,\n    type: TType,\n  ): credentials is BackstageCredentials<BackstagePrincipalTypes[TType]> {\n    const principal = credentials.principal as\n      | BackstageUserPrincipal\n      | BackstageServicePrincipal;\n\n    if (principal.type !== type) {\n      return false;\n    }\n\n    return true;\n  }\n\n  async getNoneCredentials(): Promise<\n    BackstageCredentials<BackstageNonePrincipal>\n  > {\n    return createCredentialsWithNonePrincipal();\n  }\n\n  async getOwnServiceCredentials(): Promise<\n    BackstageCredentials<BackstageServicePrincipal>\n  > {\n    return createCredentialsWithServicePrincipal('external:backstage-plugin');\n  }\n\n  async authenticate(token: string): Promise<BackstageCredentials> {\n    // Defensively check whether it seems token-like first, just to support\n    // custom TokenManager implementations that don't emit JWTs specifically.\n    const payload =\n      token.split('.').length === 3 ? decodeJwt(token) : undefined;\n\n    if (payload?.aud === 'backstage') {\n      // User Backstage token\n      const identity = await this.identity.getIdentity({\n        request: {\n          headers: { authorization: `Bearer ${token}` },\n        },\n      } as IdentityApiGetIdentityRequest);\n\n      if (!identity) {\n        throw new AuthenticationError('Invalid user token');\n      }\n\n      return createCredentialsWithUserPrincipal(\n        identity.identity.userEntityRef,\n        token,\n        this.#getJwtExpiration(token),\n      );\n    }\n\n    await this.tokenManager?.authenticate(token);\n\n    return createCredentialsWithServicePrincipal(\n      'external:backstage-plugin',\n      token,\n    );\n  }\n\n  async getPluginRequestToken(options: {\n    onBehalfOf: BackstageCredentials;\n    targetPluginId: string;\n  }): Promise<{ token: string }> {\n    const internalForward = toInternalBackstageCredentials(options.onBehalfOf);\n    const { type } = internalForward.principal;\n\n    switch (type) {\n      // TODO: Check whether the principal is ourselves\n      case 'service': {\n        if (this.tokenManager) {\n          return this.tokenManager.getToken();\n        }\n        return { token: internalForward.token ?? '' };\n      }\n      case 'user':\n        if (!internalForward.token) {\n          throw new Error('User credentials is unexpectedly missing token');\n        }\n        return { token: internalForward.token };\n      // NOTE: this is not the behavior of this service in the new backend system, it only applies\n      //       here since we'll need to accept and forward requests without authentication.\n      case 'none':\n        return { token: '' };\n      default:\n        throw new AuthenticationError(\n          `Refused to issue service token for credential type '${type}'`,\n        );\n    }\n  }\n\n  async getLimitedUserToken(\n    credentials: BackstageCredentials<BackstageUserPrincipal>,\n  ): Promise<{ token: string; expiresAt: Date }> {\n    const internalCredentials = toInternalBackstageCredentials(credentials);\n\n    const { token } = internalCredentials;\n\n    if (!token) {\n      throw new AuthenticationError(\n        'User credentials is unexpectedly missing token',\n      );\n    }\n\n    return { token, expiresAt: this.#getJwtExpiration(token) };\n  }\n\n  #getJwtExpiration(token: string) {\n    const { exp } = decodeJwt(token);\n    if (!exp) {\n      throw new AuthenticationError('User token is missing expiration');\n    }\n    return new Date(exp * 1000);\n  }\n\n  listPublicServiceKeys(): Promise<{ keys: JsonObject[] }> {\n    throw new Error('Not implemented');\n  }\n}\n\nfunction getTokenFromRequest(req: Request) {\n  // TODO: support multiple auth headers (iterate rawHeaders)\n  const authHeader = req.headers.authorization;\n  if (typeof authHeader === 'string') {\n    const matches = authHeader.match(/^Bearer[ ]+(\\S+)$/i);\n    const token = matches?.[1];\n    if (token) {\n      return token;\n    }\n  }\n\n  return undefined;\n}\n\nconst credentialsSymbol = Symbol('backstage-credentials');\n\ntype RequestWithCredentials = Request & {\n  [credentialsSymbol]?: Promise<BackstageCredentials>;\n};\n\nclass HttpAuthCompat implements HttpAuthService {\n  #auth: AuthService;\n\n  constructor(auth: AuthService) {\n    this.#auth = auth;\n  }\n\n  async #extractCredentialsFromRequest(req: Request) {\n    const token = getTokenFromRequest(req);\n    if (!token) {\n      return this.#auth.getNoneCredentials();\n    }\n\n    return this.#auth.authenticate(token);\n  }\n\n  async #getCredentials(req: RequestWithCredentials) {\n    return (req[credentialsSymbol] ??=\n      this.#extractCredentialsFromRequest(req));\n  }\n\n  async credentials<TAllowed extends keyof BackstagePrincipalTypes = 'unknown'>(\n    req: Request,\n    options?: {\n      allow?: Array<TAllowed>;\n      allowLimitedAccess?: boolean;\n    },\n  ): Promise<BackstageCredentials<BackstagePrincipalTypes[TAllowed]>> {\n    const credentials = await this.#getCredentials(req);\n\n    const allowed = options?.allow;\n    if (!allowed) {\n      return credentials as any;\n    }\n\n    if (this.#auth.isPrincipal(credentials, 'none')) {\n      if (allowed.includes('none' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new AuthenticationError('Missing credentials');\n    } else if (this.#auth.isPrincipal(credentials, 'user')) {\n      if (allowed.includes('user' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new NotAllowedError(\n        `This endpoint does not allow 'user' credentials`,\n      );\n    } else if (this.#auth.isPrincipal(credentials, 'service')) {\n      if (allowed.includes('service' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new NotAllowedError(\n        `This endpoint does not allow 'service' credentials`,\n      );\n    }\n\n    throw new NotAllowedError(\n      'Unknown principal type, this should never happen',\n    );\n  }\n\n  async issueUserCookie(_res: Response): Promise<{ expiresAt: Date }> {\n    return { expiresAt: new Date(Date.now() + 3600_000) };\n  }\n}\n\nexport class UserInfoCompat implements UserInfoService {\n  async getUserInfo(\n    credentials: BackstageCredentials,\n  ): Promise<BackstageUserInfo> {\n    const internalCredentials = toInternalBackstageCredentials(credentials);\n    if (internalCredentials.principal.type !== 'user') {\n      throw new Error('Only user credentials are supported');\n    }\n    if (!internalCredentials.token) {\n      throw new Error('User credentials is unexpectedly missing token');\n    }\n    const { sub: userEntityRef, ent: ownershipEntityRefs = [] } = decodeJwt(\n      internalCredentials.token,\n    );\n\n    if (typeof userEntityRef !== 'string') {\n      throw new Error('User entity ref must be a string');\n    }\n    if (\n      !Array.isArray(ownershipEntityRefs) ||\n      ownershipEntityRefs.some(ref => typeof ref !== 'string')\n    ) {\n      throw new Error('Ownership entity refs must be an array of strings');\n    }\n\n    return { userEntityRef, ownershipEntityRefs };\n  }\n}\n\n/**\n * An adapter that ensures presence of the auth and/or httpAuth services.\n * @public\n * @deprecated Migrate to use the new backend system and auth services instead.\n */\nexport function createLegacyAuthAdapters<\n  TOptions extends {\n    auth?: AuthService;\n    httpAuth?: HttpAuthService;\n    userInfo?: UserInfoService;\n    identity?: LegacyIdentityService;\n    tokenManager?: TokenManager;\n    discovery: PluginEndpointDiscovery;\n  },\n  TAdapters = (TOptions extends { auth?: AuthService }\n    ? { auth: AuthService }\n    : {}) &\n    (TOptions extends { httpAuth?: HttpAuthService }\n      ? { httpAuth: HttpAuthService }\n      : {}) &\n    (TOptions extends { userInfo?: UserInfoService }\n      ? { userInfo: UserInfoService }\n      : {}),\n>(options: TOptions): TAdapters {\n  const {\n    auth,\n    httpAuth,\n    userInfo = new UserInfoCompat(),\n    discovery,\n  } = options;\n\n  if (auth && httpAuth) {\n    return {\n      auth,\n      httpAuth,\n      userInfo,\n    } as TAdapters;\n  }\n\n  if (auth) {\n    return {\n      auth,\n      userInfo,\n    } as TAdapters;\n  }\n\n  if (httpAuth) {\n    return {\n      httpAuth,\n      userInfo,\n    } as TAdapters;\n  }\n\n  const identity =\n    options.identity ?? DefaultIdentityClient.create({ discovery });\n\n  const authImpl = new AuthCompat(identity, options.tokenManager);\n\n  const httpAuthImpl = new HttpAuthCompat(authImpl);\n\n  return {\n    auth: authImpl,\n    httpAuth: httpAuthImpl,\n    userInfo,\n  } as TAdapters;\n}\n"],"names":["durationToMilliseconds","createHash","Keyv","merge","ddlLimiter","limiterFactory","knexFactory","yn","InputError","pluginPath","normalizeConnection","ConfigReader","omit","format","ForwardedError","path","ensureDirSync","DevDataStore","stringifyError","createLogger","transports","MESSAGE","winston","createConfigSecretEnumerator","getPackages","loadConfigSchema","_createConfigSecretEnumerator","parseArgs","resolvePath","findPaths","config","loadConfig","git","fs","http","logger","Duration","AuthenticationError","base64url","generateSecret","exportJWK","SignJWT","DateTime","jwtVerify","applyCspDirectives","helmet","kebabCase","Minimatch","randomBytes","assertError","compression","morgan","cors","serializeError","NotModifiedError","NotAllowedError","NotFoundError","ConflictError","NotImplementedError","ServiceUnavailableError","dirname","forge","stoppableServer","https","express","defaultRequestLoggingHandler","defaultErrorHandler","Router","PassThrough","error","BatchV1Api","Log","uuid","Watch","HttpError","_HostDiscovery","_CacheManager","_DatabaseManager","_isDatabaseConflictError","_resolvePackagePath","_resolveSafeChildPath","_isChildPath","Transport","createBackendPlugin","coreServices","decodeJwt","DefaultIdentityClient"],"mappings":"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"}