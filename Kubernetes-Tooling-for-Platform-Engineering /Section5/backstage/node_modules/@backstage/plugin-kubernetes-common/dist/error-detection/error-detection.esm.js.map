{"version":3,"file":"error-detection.esm.js","sources":["../../src/error-detection/error-detection.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DetectedError, DetectedErrorsByCluster } from './types';\nimport { ObjectsByEntityResponse } from '@backstage/plugin-kubernetes-common';\nimport { groupResponses } from '../util';\nimport { detectErrorsInPods } from './pods';\nimport { detectErrorsInDeployments } from './deployments';\nimport { detectErrorsInHpa } from './hpas';\nimport { Deployment } from 'kubernetes-models/apps/v1';\nimport { HorizontalPodAutoscaler } from 'kubernetes-models/autoscaling/v2';\nimport { Pod } from 'kubernetes-models/v1';\n\n/**\n * For each cluster try to find errors in each of the object types provided\n * returning a map of cluster names to errors in that cluster\n *\n * @public\n */\nexport const detectErrors = (\n  objects: ObjectsByEntityResponse,\n): DetectedErrorsByCluster => {\n  const errors: DetectedErrorsByCluster = new Map<string, DetectedError[]>();\n\n  for (const clusterResponse of objects.items) {\n    let clusterErrors: DetectedError[] = [];\n\n    const groupedResponses = groupResponses(clusterResponse.resources);\n\n    clusterErrors = clusterErrors.concat(\n      detectErrorsInPods(groupedResponses.pods as Pod[]),\n    );\n\n    clusterErrors = clusterErrors.concat(\n      detectErrorsInDeployments(groupedResponses.deployments as Deployment[]),\n    );\n\n    clusterErrors = clusterErrors.concat(\n      detectErrorsInHpa(\n        groupedResponses.horizontalPodAutoscalers as HorizontalPodAutoscaler[],\n      ),\n    );\n\n    errors.set(clusterResponse.cluster.name, clusterErrors);\n  }\n\n  return errors;\n};\n"],"names":[],"mappings":";;;;;AAgCa,MAAA,YAAA,GAAe,CAC1B,OAC4B,KAAA;AAC5B,EAAM,MAAA,MAAA,uBAAsC,GAA6B,EAAA;AAEzE,EAAW,KAAA,MAAA,eAAA,IAAmB,QAAQ,KAAO,EAAA;AAC3C,IAAA,IAAI,gBAAiC,EAAC;AAEtC,IAAM,MAAA,gBAAA,GAAmB,cAAe,CAAA,eAAA,CAAgB,SAAS,CAAA;AAEjE,IAAA,aAAA,GAAgB,aAAc,CAAA,MAAA;AAAA,MAC5B,kBAAA,CAAmB,iBAAiB,IAAa;AAAA,KACnD;AAEA,IAAA,aAAA,GAAgB,aAAc,CAAA,MAAA;AAAA,MAC5B,yBAAA,CAA0B,iBAAiB,WAA2B;AAAA,KACxE;AAEA,IAAA,aAAA,GAAgB,aAAc,CAAA,MAAA;AAAA,MAC5B,iBAAA;AAAA,QACE,gBAAiB,CAAA;AAAA;AACnB,KACF;AAEA,IAAA,MAAA,CAAO,GAAI,CAAA,eAAA,CAAgB,OAAQ,CAAA,IAAA,EAAM,aAAa,CAAA;AAAA;AAGxD,EAAO,OAAA,MAAA;AACT;;;;"}