'use strict';

var setup = require('./proxy/setup.cjs.js');

const proxiesToCleanup = [];
async function wrapServer(app) {
  const proxy = new setup.Proxy();
  proxiesToCleanup.push(proxy);
  await proxy.setup();
  const server = app.listen(proxy.forwardTo.port);
  await proxy.initialize(`http://localhost:${proxy.forwardTo.port}`, server);
  return { ...server, address: () => new URL(proxy.url) };
}
let registered = false;
function registerHooks() {
  if (typeof afterAll !== "function" || typeof beforeAll !== "function") {
    return;
  }
  if (registered) {
    return;
  }
  registered = true;
  afterAll(() => {
    for (const proxy of proxiesToCleanup) {
      proxy.stop();
    }
  });
}
registerHooks();
const wrapInOpenApiTestServer = (app) => {
  if (process.env.OPTIC_PROXY) {
    const server = app.listen(+process.env.PORT);
    return {
      ...server,
      address: () => new URL(process.env.OPTIC_PROXY)
    };
  }
  return app;
};

exports.wrapInOpenApiTestServer = wrapInOpenApiTestServer;
exports.wrapServer = wrapServer;
//# sourceMappingURL=testUtils.cjs.js.map
