'use strict';

function mockttpToFetchRequest(request) {
  const headers = new Headers(request.rawHeaders);
  return {
    url: request.url,
    method: request.method,
    headers,
    json: () => request.body.getJson(),
    text: () => request.body.getText()
  };
}
function mockttpToFetchResponse(response) {
  const headers = new Headers(response.rawHeaders);
  return {
    status: response.statusCode,
    headers,
    json: () => response.body?.getJson(),
    text: () => response.body?.getText()
  };
}
function humanifyAjvError(error) {
  switch (error.keyword) {
    case "required":
      return `The "${error.params.missingProperty}" property is required`;
    case "type":
      return `${error.instancePath ? `"${error.instancePath}"` : "Value"} should be of type ${error.params.type}`;
    case "additionalProperties":
      return `The "${error.params.additionalProperty}" property is not allowed`;
    default:
      return error.message;
  }
}

exports.humanifyAjvError = humanifyAjvError;
exports.mockttpToFetchRequest = mockttpToFetchRequest;
exports.mockttpToFetchResponse = mockttpToFetchResponse;
//# sourceMappingURL=utils.cjs.js.map
