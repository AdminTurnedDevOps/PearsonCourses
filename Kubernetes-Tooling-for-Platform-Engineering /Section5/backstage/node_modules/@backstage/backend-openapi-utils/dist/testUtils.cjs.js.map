{"version":3,"file":"testUtils.cjs.js","sources":["../src/testUtils.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Express } from 'express';\nimport { Server } from 'http';\nimport { Proxy } from './proxy/setup';\n\nconst proxiesToCleanup: Proxy[] = [];\n\n/**\n * !!! THIS CURRENTLY ONLY SUPPORTS SUPERTEST !!!\n * Setup a server with a custom OpenAPI proxy. This proxy will capture all requests and responses and make sure they\n *  conform to the spec.\n * @param app - express server, needed to ensure we have the correct ports for the proxy.\n * @returns - a configured HTTP server that should be used with supertest.\n * @public\n */\nexport async function wrapServer(app: Express): Promise<Server> {\n  const proxy = new Proxy();\n  proxiesToCleanup.push(proxy);\n  await proxy.setup();\n\n  const server = app.listen(proxy.forwardTo.port);\n  await proxy.initialize(`http://localhost:${proxy.forwardTo.port}`, server);\n\n  return { ...server, address: () => new URL(proxy.url) } as any;\n}\n\nlet registered = false;\nfunction registerHooks() {\n  if (typeof afterAll !== 'function' || typeof beforeAll !== 'function') {\n    return;\n  }\n  if (registered) {\n    return;\n  }\n  registered = true;\n\n  afterAll(() => {\n    for (const proxy of proxiesToCleanup) {\n      proxy.stop();\n    }\n  });\n}\n\nregisterHooks();\n\n/**\n * !!! THIS CURRENTLY ONLY SUPPORTS SUPERTEST !!!\n * Running against supertest, we need some way to hit the optic proxy. This ensures that\n *  that happens at runtime when in the context of a `yarn optic capture` command.\n * @param app - Express router that would be passed to supertest's `request`.\n * @returns A wrapper around the express router (or the router untouched) that still works with supertest.\n * @public\n */\nexport const wrapInOpenApiTestServer = (app: Express): Server | Express => {\n  if (process.env.OPTIC_PROXY) {\n    const server = app.listen(+process.env.PORT!);\n    return {\n      ...server,\n      address: () => new URL(process.env.OPTIC_PROXY!),\n    } as any;\n  }\n  return app;\n};\n"],"names":["Proxy"],"mappings":";;;;AAmBA,MAAM,mBAA4B,EAAC;AAUnC,eAAsB,WAAW,GAA+B,EAAA;AAC9D,EAAM,MAAA,KAAA,GAAQ,IAAIA,WAAM,EAAA;AACxB,EAAA,gBAAA,CAAiB,KAAK,KAAK,CAAA;AAC3B,EAAA,MAAM,MAAM,KAAM,EAAA;AAElB,EAAA,MAAM,MAAS,GAAA,GAAA,CAAI,MAAO,CAAA,KAAA,CAAM,UAAU,IAAI,CAAA;AAC9C,EAAA,MAAM,MAAM,UAAW,CAAA,CAAA,iBAAA,EAAoB,MAAM,SAAU,CAAA,IAAI,IAAI,MAAM,CAAA;AAEzE,EAAO,OAAA,EAAE,GAAG,MAAQ,EAAA,OAAA,EAAS,MAAM,IAAI,GAAA,CAAI,KAAM,CAAA,GAAG,CAAE,EAAA;AACxD;AAEA,IAAI,UAAa,GAAA,KAAA;AACjB,SAAS,aAAgB,GAAA;AACvB,EAAA,IAAI,OAAO,QAAA,KAAa,UAAc,IAAA,OAAO,cAAc,UAAY,EAAA;AACrE,IAAA;AAAA;AAEF,EAAA,IAAI,UAAY,EAAA;AACd,IAAA;AAAA;AAEF,EAAa,UAAA,GAAA,IAAA;AAEb,EAAA,QAAA,CAAS,MAAM;AACb,IAAA,KAAA,MAAW,SAAS,gBAAkB,EAAA;AACpC,MAAA,KAAA,CAAM,IAAK,EAAA;AAAA;AACb,GACD,CAAA;AACH;AAEA,aAAc,EAAA;AAUD,MAAA,uBAAA,GAA0B,CAAC,GAAmC,KAAA;AACzE,EAAI,IAAA,OAAA,CAAQ,IAAI,WAAa,EAAA;AAC3B,IAAA,MAAM,SAAS,GAAI,CAAA,MAAA,CAAO,CAAC,OAAA,CAAQ,IAAI,IAAK,CAAA;AAC5C,IAAO,OAAA;AAAA,MACL,GAAG,MAAA;AAAA,MACH,SAAS,MAAM,IAAI,GAAI,CAAA,OAAA,CAAQ,IAAI,WAAY;AAAA,KACjD;AAAA;AAEF,EAAO,OAAA,GAAA;AACT;;;;;"}