'use strict';

var PromiseRouter = require('express-promise-router');
var express = require('express');
var errors = require('@backstage/errors');
var expressOpenapiValidator = require('express-openapi-validator');
var constants = require('./constants.cjs.js');
var openapiMerge = require('openapi-merge');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var PromiseRouter__default = /*#__PURE__*/_interopDefaultCompat(PromiseRouter);

const baseUrlSymbol = Symbol();
const originalUrlSymbol = Symbol();
function validatorErrorTransformer() {
  return (error, _, _2, next) => {
    next(new errors.InputError(error.message));
  };
}
function getDefaultRouterMiddleware() {
  return [express.json()];
}
function getOpenApiSpecRoute(baseUrl) {
  return `${baseUrl}${constants.OPENAPI_SPEC_ROUTE}`;
}
function createRouterWithValidation(spec, options) {
  const router = PromiseRouter__default.default();
  router.use(options?.middleware || getDefaultRouterMiddleware());
  router.use((req, _, next) => {
    const customRequest = req;
    customRequest[baseUrlSymbol] = customRequest.baseUrl;
    customRequest.baseUrl = "";
    customRequest[originalUrlSymbol] = customRequest.originalUrl;
    customRequest.originalUrl = customRequest.url;
    next();
  });
  router.use(
    expressOpenapiValidator.middleware({
      validateRequests: {
        coerceTypes: false,
        allowUnknownQueryParameters: false
      },
      ignoreUndocumented: true,
      validateResponses: false,
      ...options?.validatorOptions,
      apiSpec: spec
    })
  );
  router.use((req, _, next) => {
    const customRequest = req;
    customRequest.baseUrl = customRequest[baseUrlSymbol];
    customRequest.originalUrl = customRequest[originalUrlSymbol];
    delete customRequest[baseUrlSymbol];
    delete customRequest[originalUrlSymbol];
    next();
  });
  router.use(validatorErrorTransformer());
  router.get(constants.OPENAPI_SPEC_ROUTE, async (req, res) => {
    const mergeOutput = openapiMerge.merge([
      {
        oas: spec,
        pathModification: {
          /**
           * Get the route that this OpenAPI spec is hosted on. The other
           *  approach of using the discovery API increases the router constructor
           *  significantly and since we're just looking for path and not full URL,
           *  this works.
           *
           * If we wanted to add a list of servers, there may be a case for adding
           *  discovery API to get an exhaustive list of upstream servers, but that's
           *  also not currently supported.
           */
          prepend: req.originalUrl.replace(constants.OPENAPI_SPEC_ROUTE, "")
        }
      }
    ]);
    if (openapiMerge.isErrorResult(mergeOutput)) {
      throw new errors.InputError("Invalid spec defined");
    }
    res.json(mergeOutput.output);
  });
  return router;
}
function createValidatedOpenApiRouter(spec, options) {
  return createRouterWithValidation(spec, options);
}
function createValidatedOpenApiRouterFromGeneratedEndpointMap(spec, options) {
  return createRouterWithValidation(spec, options);
}

exports.createValidatedOpenApiRouter = createValidatedOpenApiRouter;
exports.createValidatedOpenApiRouterFromGeneratedEndpointMap = createValidatedOpenApiRouterFromGeneratedEndpointMap;
exports.getDefaultRouterMiddleware = getDefaultRouterMiddleware;
exports.getOpenApiSpecRoute = getOpenApiSpecRoute;
//# sourceMappingURL=stub.cjs.js.map
