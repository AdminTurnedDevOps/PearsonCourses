'use strict';

var mockttp = require('mockttp');
var validation = require('../schema/validation.cjs.js');
var getPort = require('get-port');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

function _interopNamespaceCompat(e) {
  if (e && typeof e === 'object' && 'default' in e) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var mockttp__namespace = /*#__PURE__*/_interopNamespaceCompat(mockttp);
var getPort__default = /*#__PURE__*/_interopDefaultCompat(getPort);

class Proxy {
  server;
  #openRequests = {};
  requestResponsePairs = /* @__PURE__ */ new Map();
  validator;
  forwardTo = { port: 0 };
  express = { server: void 0 };
  constructor() {
    this.server = mockttp__namespace.getLocal();
    this.validator = new validation.OpenApiProxyValidator();
  }
  async setup() {
    await this.server.start();
    this.forwardTo.port = await getPort__default.default();
    this.server.forAnyRequest().thenForwardTo(`http://localhost:${this.forwardTo.port}`);
    await this.server.on("request", (request) => {
      this.#openRequests[request.id] = request;
    });
    await this.server.on("response", (response) => {
      const request = this.#openRequests[response.id];
      if (request) {
        this.requestResponsePairs.set(request, response);
      }
      delete this.#openRequests[response.id];
      this.validator.validate(request, response);
    });
  }
  async initialize(url, server) {
    await this.validator.initialize(`${url}/openapi.json`);
    this.express.server = server;
  }
  stop() {
    if (Object.keys(this.#openRequests).length > 0) {
      throw new Error("There are still open requests");
    }
    this.server.stop();
    this.express.server?.close();
  }
  get url() {
    return this.server.proxyEnv.HTTP_PROXY;
  }
}

exports.Proxy = Proxy;
//# sourceMappingURL=setup.cjs.js.map
