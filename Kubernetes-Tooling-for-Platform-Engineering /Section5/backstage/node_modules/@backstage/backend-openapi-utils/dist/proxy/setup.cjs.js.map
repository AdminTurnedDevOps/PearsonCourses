{"version":3,"file":"setup.cjs.js","sources":["../../src/proxy/setup.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as mockttp from 'mockttp';\nimport { OpenApiProxyValidator } from '../schema/validation';\nimport getPort from 'get-port';\nimport { Server } from 'http';\n\nexport class Proxy {\n  server: mockttp.Mockttp;\n  #openRequests: Record<string, mockttp.CompletedRequest> = {};\n  requestResponsePairs = new Map<\n    mockttp.CompletedRequest,\n    mockttp.CompletedResponse\n  >();\n  validator: OpenApiProxyValidator;\n  public forwardTo: { port: number } = { port: 0 };\n  express: { server: Server | undefined } = { server: undefined };\n  constructor() {\n    this.server = mockttp.getLocal();\n    this.validator = new OpenApiProxyValidator();\n  }\n\n  async setup() {\n    await this.server.start();\n    this.forwardTo.port = await getPort();\n    this.server\n      .forAnyRequest()\n      .thenForwardTo(`http://localhost:${this.forwardTo.port}`);\n    await this.server.on('request', request => {\n      this.#openRequests[request.id] = request;\n    });\n    await this.server.on('response', response => {\n      const request = this.#openRequests[response.id];\n      if (request) {\n        this.requestResponsePairs.set(request, response);\n      }\n      delete this.#openRequests[response.id];\n      this.validator.validate(request, response);\n    });\n  }\n\n  async initialize(url: string, server: Server) {\n    await this.validator.initialize(`${url}/openapi.json`);\n    this.express.server = server;\n  }\n\n  stop() {\n    if (Object.keys(this.#openRequests).length > 0) {\n      throw new Error('There are still open requests');\n    }\n    this.server.stop();\n\n    // If this isn't expressly closed, it will cause a jest memory leak warning.\n    this.express.server?.close();\n  }\n\n  get url() {\n    return this.server.proxyEnv.HTTP_PROXY;\n  }\n}\n"],"names":["mockttp","OpenApiProxyValidator","getPort"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBO,MAAM,KAAM,CAAA;AAAA,EACjB,MAAA;AAAA,EACA,gBAA0D,EAAC;AAAA,EAC3D,oBAAA,uBAA2B,GAGzB,EAAA;AAAA,EACF,SAAA;AAAA,EACO,SAAA,GAA8B,EAAE,IAAA,EAAM,CAAE,EAAA;AAAA,EAC/C,OAAA,GAA0C,EAAE,MAAA,EAAQ,KAAU,CAAA,EAAA;AAAA,EAC9D,WAAc,GAAA;AACZ,IAAK,IAAA,CAAA,MAAA,GAASA,mBAAQ,QAAS,EAAA;AAC/B,IAAK,IAAA,CAAA,SAAA,GAAY,IAAIC,gCAAsB,EAAA;AAAA;AAC7C,EAEA,MAAM,KAAQ,GAAA;AACZ,IAAM,MAAA,IAAA,CAAK,OAAO,KAAM,EAAA;AACxB,IAAK,IAAA,CAAA,SAAA,CAAU,IAAO,GAAA,MAAMC,wBAAQ,EAAA;AACpC,IAAK,IAAA,CAAA,MAAA,CACF,eACA,CAAA,aAAA,CAAc,oBAAoB,IAAK,CAAA,SAAA,CAAU,IAAI,CAAE,CAAA,CAAA;AAC1D,IAAA,MAAM,IAAK,CAAA,MAAA,CAAO,EAAG,CAAA,SAAA,EAAW,CAAW,OAAA,KAAA;AACzC,MAAK,IAAA,CAAA,aAAA,CAAc,OAAQ,CAAA,EAAE,CAAI,GAAA,OAAA;AAAA,KAClC,CAAA;AACD,IAAA,MAAM,IAAK,CAAA,MAAA,CAAO,EAAG,CAAA,UAAA,EAAY,CAAY,QAAA,KAAA;AAC3C,MAAA,MAAM,OAAU,GAAA,IAAA,CAAK,aAAc,CAAA,QAAA,CAAS,EAAE,CAAA;AAC9C,MAAA,IAAI,OAAS,EAAA;AACX,QAAK,IAAA,CAAA,oBAAA,CAAqB,GAAI,CAAA,OAAA,EAAS,QAAQ,CAAA;AAAA;AAEjD,MAAO,OAAA,IAAA,CAAK,aAAc,CAAA,QAAA,CAAS,EAAE,CAAA;AACrC,MAAK,IAAA,CAAA,SAAA,CAAU,QAAS,CAAA,OAAA,EAAS,QAAQ,CAAA;AAAA,KAC1C,CAAA;AAAA;AACH,EAEA,MAAM,UAAW,CAAA,GAAA,EAAa,MAAgB,EAAA;AAC5C,IAAA,MAAM,IAAK,CAAA,SAAA,CAAU,UAAW,CAAA,CAAA,EAAG,GAAG,CAAe,aAAA,CAAA,CAAA;AACrD,IAAA,IAAA,CAAK,QAAQ,MAAS,GAAA,MAAA;AAAA;AACxB,EAEA,IAAO,GAAA;AACL,IAAA,IAAI,OAAO,IAAK,CAAA,IAAA,CAAK,aAAa,CAAA,CAAE,SAAS,CAAG,EAAA;AAC9C,MAAM,MAAA,IAAI,MAAM,+BAA+B,CAAA;AAAA;AAEjD,IAAA,IAAA,CAAK,OAAO,IAAK,EAAA;AAGjB,IAAK,IAAA,CAAA,OAAA,CAAQ,QAAQ,KAAM,EAAA;AAAA;AAC7B,EAEA,IAAI,GAAM,GAAA;AACR,IAAO,OAAA,IAAA,CAAK,OAAO,QAAS,CAAA,UAAA;AAAA;AAEhC;;;;"}