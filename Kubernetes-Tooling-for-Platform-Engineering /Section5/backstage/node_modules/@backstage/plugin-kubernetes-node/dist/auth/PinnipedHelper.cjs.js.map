{"version":3,"file":"PinnipedHelper.cjs.js","sources":["../../src/auth/PinnipedHelper.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ClusterDetails } from '@backstage/plugin-kubernetes-node';\nimport * as https from 'https';\nimport { bufferFromFileOrString } from '@kubernetes/client-node';\nimport fetch, { RequestInit } from 'node-fetch';\nimport { Logger } from 'winston';\n\n/**\n *\n * @public\n */\nexport type PinnipedClientCerts = {\n  key: string;\n  cert: string;\n  expirationTimestamp: string;\n};\n\n/**\n *\n * @public\n */\nexport type PinnipedParameters = {\n  clusterScopedIdToken: string;\n  authenticator: {\n    apiGroup: string;\n    kind: string;\n    name: string;\n  };\n  tokenCredentialRequest?: {\n    apiGroup?: string;\n  };\n};\n\n/**\n *\n * @public\n */\nexport class PinnipedHelper {\n  constructor(private readonly logger: Logger) {}\n\n  public async tokenCredentialRequest(\n    clusterDetails: ClusterDetails,\n    pinnipedParams: PinnipedParameters,\n  ): Promise<PinnipedClientCerts> {\n    this.logger.debug('Pinniped: Requesting client Certs to Concierge');\n    return await this.exchangeClusterTokentoClientCerts(\n      clusterDetails,\n      pinnipedParams,\n    );\n  }\n\n  private async exchangeClusterTokentoClientCerts(\n    clusterDetails: ClusterDetails,\n    pinnipedParams: PinnipedParameters,\n  ): Promise<PinnipedClientCerts> {\n    const url: URL = new URL(clusterDetails.url);\n    const apiGroup =\n      pinnipedParams.tokenCredentialRequest?.apiGroup ??\n      'login.concierge.pinniped.dev/v1alpha1';\n\n    url.pathname = `/apis/${apiGroup}/tokencredentialrequests`;\n\n    const requestInit: RequestInit = this.buildRequestForPinniped(\n      url,\n      clusterDetails,\n      pinnipedParams,\n    );\n\n    this.logger.info(\n      'Fetching client certs for mTLS authentication on Pinniped',\n    );\n    let response;\n    try {\n      response = await fetch(url, requestInit);\n    } catch (error) {\n      this.logger.error('Pinniped request error', error);\n      throw error;\n    }\n\n    const data: any = await response.json();\n\n    if (data.status.credential) {\n      const result = {\n        key: data.status.credential.clientKeyData,\n        cert: data.status.credential.clientCertificateData,\n        expirationTimestamp: data.status.credential.expirationTimestamp,\n      };\n      return Promise.resolve(result);\n    }\n\n    this.logger.error('Unable to fetch client certs,', data.status);\n    return Promise.reject(data.status.message);\n  }\n\n  private buildRequestForPinniped(\n    url: URL,\n    clusterDetails: ClusterDetails,\n    pinnipedParams: PinnipedParameters,\n  ): RequestInit {\n    const body = {\n      apiVersion:\n        pinnipedParams.tokenCredentialRequest?.apiGroup ??\n        'login.concierge.pinniped.dev/v1alpha1',\n      kind: 'TokenCredentialRequest',\n      spec: {\n        authenticator: pinnipedParams.authenticator,\n        token: pinnipedParams.clusterScopedIdToken,\n      },\n    };\n    const requestInit: RequestInit = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    };\n\n    if (url.protocol === 'https:') {\n      requestInit.agent = new https.Agent({\n        ca:\n          bufferFromFileOrString(\n            clusterDetails.caFile,\n            clusterDetails.caData,\n          ) ?? undefined,\n        rejectUnauthorized: !clusterDetails.skipTLSVerify,\n      });\n    }\n\n    return requestInit;\n  }\n}\n"],"names":["fetch","https","bufferFromFileOrString"],"mappings":"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"}