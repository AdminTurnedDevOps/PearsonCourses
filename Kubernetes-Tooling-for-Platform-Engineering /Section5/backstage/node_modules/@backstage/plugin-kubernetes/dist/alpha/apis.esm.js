import { ApiBlueprint, createApiFactory, discoveryApiRef, fetchApiRef } from '@backstage/frontend-plugin-api';
import { kubernetesApiRef, kubernetesAuthProvidersApiRef, KubernetesBackendClient, kubernetesProxyApiRef, KubernetesProxyClient, KubernetesAuthProviders, kubernetesClusterLinkFormatterApiRef, getDefaultFormatters, KubernetesClusterLinkFormatter, DEFAULT_FORMATTER_NAME } from '@backstage/plugin-kubernetes-react';
import { gitlabAuthApiRef, googleAuthApiRef, microsoftAuthApiRef, oktaAuthApiRef, oneloginAuthApiRef } from '@backstage/core-plugin-api';

const kubernetesApiExtension = ApiBlueprint.make({
  params: {
    factory: createApiFactory({
      api: kubernetesApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        fetchApi: fetchApiRef,
        kubernetesAuthProvidersApi: kubernetesAuthProvidersApiRef
      },
      factory: ({ discoveryApi, fetchApi, kubernetesAuthProvidersApi: kubernetesAuthProvidersApi2 }) => new KubernetesBackendClient({
        discoveryApi,
        fetchApi,
        kubernetesAuthProvidersApi: kubernetesAuthProvidersApi2
      })
    })
  }
});
const kubernetesProxyApi = ApiBlueprint.make({
  name: "proxy",
  params: {
    factory: createApiFactory({
      api: kubernetesProxyApiRef,
      deps: {
        kubernetesApi: kubernetesApiRef
      },
      factory: ({ kubernetesApi }) => new KubernetesProxyClient({
        kubernetesApi
      })
    })
  }
});
const kubernetesAuthProvidersApi = ApiBlueprint.make({
  name: "auth-providers",
  params: {
    factory: createApiFactory({
      api: kubernetesAuthProvidersApiRef,
      deps: {
        gitlabAuthApi: gitlabAuthApiRef,
        googleAuthApi: googleAuthApiRef,
        microsoftAuthApi: microsoftAuthApiRef,
        oktaAuthApi: oktaAuthApiRef,
        oneloginAuthApi: oneloginAuthApiRef
      },
      factory: ({
        gitlabAuthApi,
        googleAuthApi,
        microsoftAuthApi,
        oktaAuthApi,
        oneloginAuthApi
      }) => {
        const oidcProviders = {
          gitlab: gitlabAuthApi,
          google: googleAuthApi,
          microsoft: microsoftAuthApi,
          okta: oktaAuthApi,
          onelogin: oneloginAuthApi
        };
        return new KubernetesAuthProviders({
          microsoftAuthApi,
          googleAuthApi,
          oidcProviders
        });
      }
    })
  }
});
const kubernetesClusterLinkFormatterApi = ApiBlueprint.make({
  name: "cluster-link-formatter",
  params: {
    factory: createApiFactory({
      api: kubernetesClusterLinkFormatterApiRef,
      deps: { googleAuthApi: googleAuthApiRef },
      factory: (deps) => {
        const formatters = getDefaultFormatters(deps);
        return new KubernetesClusterLinkFormatter({
          formatters,
          defaultFormatterName: DEFAULT_FORMATTER_NAME
        });
      }
    })
  }
});

export { kubernetesApiExtension, kubernetesAuthProvidersApi, kubernetesClusterLinkFormatterApi, kubernetesProxyApi };
//# sourceMappingURL=apis.esm.js.map
