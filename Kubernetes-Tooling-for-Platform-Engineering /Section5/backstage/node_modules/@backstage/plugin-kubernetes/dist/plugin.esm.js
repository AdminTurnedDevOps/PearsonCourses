import { kubernetesApiRef, kubernetesAuthProvidersApiRef, KubernetesBackendClient, kubernetesProxyApiRef, KubernetesProxyClient, KubernetesAuthProviders, kubernetesClusterLinkFormatterApiRef, getDefaultFormatters, KubernetesClusterLinkFormatter, DEFAULT_FORMATTER_NAME } from '@backstage/plugin-kubernetes-react';
import { createRouteRef, createPlugin, createApiFactory, discoveryApiRef, fetchApiRef, gitlabAuthApiRef, googleAuthApiRef, microsoftAuthApiRef, oktaAuthApiRef, oneloginAuthApiRef, createRoutableExtension } from '@backstage/core-plugin-api';

const rootCatalogKubernetesRouteRef = createRouteRef({
  id: "kubernetes"
});
const kubernetesPlugin = createPlugin({
  id: "kubernetes",
  apis: [
    createApiFactory({
      api: kubernetesApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        fetchApi: fetchApiRef,
        kubernetesAuthProvidersApi: kubernetesAuthProvidersApiRef
      },
      factory: ({ discoveryApi, fetchApi, kubernetesAuthProvidersApi }) => new KubernetesBackendClient({
        discoveryApi,
        fetchApi,
        kubernetesAuthProvidersApi
      })
    }),
    createApiFactory({
      api: kubernetesProxyApiRef,
      deps: {
        kubernetesApi: kubernetesApiRef
      },
      factory: ({ kubernetesApi }) => new KubernetesProxyClient({
        kubernetesApi
      })
    }),
    createApiFactory({
      api: kubernetesAuthProvidersApiRef,
      deps: {
        gitlabAuthApi: gitlabAuthApiRef,
        googleAuthApi: googleAuthApiRef,
        microsoftAuthApi: microsoftAuthApiRef,
        oktaAuthApi: oktaAuthApiRef,
        oneloginAuthApi: oneloginAuthApiRef
      },
      factory: ({
        gitlabAuthApi,
        googleAuthApi,
        microsoftAuthApi,
        oktaAuthApi,
        oneloginAuthApi
      }) => {
        const oidcProviders = {
          gitlab: gitlabAuthApi,
          google: googleAuthApi,
          microsoft: microsoftAuthApi,
          okta: oktaAuthApi,
          onelogin: oneloginAuthApi
        };
        return new KubernetesAuthProviders({
          microsoftAuthApi,
          googleAuthApi,
          oidcProviders
        });
      }
    }),
    createApiFactory({
      api: kubernetesClusterLinkFormatterApiRef,
      deps: { googleAuthApi: googleAuthApiRef },
      factory: (deps) => {
        const formatters = getDefaultFormatters(deps);
        return new KubernetesClusterLinkFormatter({
          formatters,
          defaultFormatterName: DEFAULT_FORMATTER_NAME
        });
      }
    })
  ],
  routes: {
    entityContent: rootCatalogKubernetesRouteRef
  }
});
const EntityKubernetesContent = kubernetesPlugin.provide(
  createRoutableExtension({
    name: "EntityKubernetesContent",
    component: () => import('./Router.esm.js').then((m) => m.Router),
    mountPoint: rootCatalogKubernetesRouteRef
  })
);

export { EntityKubernetesContent, kubernetesPlugin, rootCatalogKubernetesRouteRef };
//# sourceMappingURL=plugin.esm.js.map
