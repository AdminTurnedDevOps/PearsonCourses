/// <reference types="react" />
import * as _backstage_catalog_model from '@backstage/catalog-model';
import * as react from 'react';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';

declare const _default: _backstage_frontend_plugin_api.FrontendPlugin<{
    kubernetes: _backstage_frontend_plugin_api.RouteRef<undefined>;
}, {}, {
    "page:kubernetes": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "page";
        name: undefined;
        config: {
            path: string | undefined;
        };
        configInput: {
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }>;
        inputs: {};
        params: {
            defaultPath: string;
            loader: () => Promise<JSX.Element>;
            routeRef?: _backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams> | undefined;
        };
    }>;
    "api:kubernetes": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: {
            factory: _backstage_frontend_plugin_api.AnyApiFactory;
        };
    }>;
    "entity-content:kubernetes/kubernetes": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "entity-content";
        name: "kubernetes";
        config: {
            path: string | undefined;
            title: string | undefined;
            filter: string | undefined;
        };
        configInput: {
            filter?: string | undefined;
            title?: string | undefined;
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<react.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-content-title", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }>;
        inputs: {};
        params: {
            loader: () => Promise<JSX.Element>;
            defaultPath: string;
            defaultTitle: string;
            routeRef?: _backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams> | undefined;
            filter?: string | ((entity: _backstage_catalog_model.Entity) => boolean) | undefined;
        };
    }>;
    "api:kubernetes/proxy": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "proxy";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: {
            factory: _backstage_frontend_plugin_api.AnyApiFactory;
        };
    }>;
    "api:kubernetes/auth-providers": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "auth-providers";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: {
            factory: _backstage_frontend_plugin_api.AnyApiFactory;
        };
    }>;
    "api:kubernetes/cluster-link-formatter": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "cluster-link-formatter";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: {
            factory: _backstage_frontend_plugin_api.AnyApiFactory;
        };
    }>;
}>;

export { _default as default };
