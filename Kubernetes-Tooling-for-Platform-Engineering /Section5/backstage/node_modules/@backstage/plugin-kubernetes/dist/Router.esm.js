import React from 'react';
import { useEntity, MissingAnnotationEmptyState } from '@backstage/plugin-catalog-react';
import { Routes, Route } from 'react-router-dom';
import { KubernetesContent } from './KubernetesContent.esm.js';
import Button from '@material-ui/core/Button';

const KUBERNETES_ANNOTATION = "backstage.io/kubernetes-id";
const KUBERNETES_LABEL_SELECTOR_QUERY_ANNOTATION = "backstage.io/kubernetes-label-selector";
const isKubernetesAvailable = (entity) => Boolean(entity.metadata.annotations?.[KUBERNETES_ANNOTATION]) || Boolean(
  entity.metadata.annotations?.[KUBERNETES_LABEL_SELECTOR_QUERY_ANNOTATION]
);
const Router = (props) => {
  const { entity } = useEntity();
  const kubernetesAnnotationValue = entity.metadata.annotations?.[KUBERNETES_ANNOTATION];
  const kubernetesLabelSelectorQueryAnnotationValue = entity.metadata.annotations?.[KUBERNETES_LABEL_SELECTOR_QUERY_ANNOTATION];
  if (kubernetesAnnotationValue || kubernetesLabelSelectorQueryAnnotationValue) {
    return /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(
      Route,
      {
        path: "/",
        element: /* @__PURE__ */ React.createElement(
          KubernetesContent,
          {
            entity,
            refreshIntervalMs: props.refreshIntervalMs
          }
        )
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(MissingAnnotationEmptyState, { annotation: KUBERNETES_ANNOTATION }), /* @__PURE__ */ React.createElement("h1", null, "Or use a label selector query, which takes precedence over the previous annotation."), /* @__PURE__ */ React.createElement(
    Button,
    {
      variant: "contained",
      color: "primary",
      href: "https://backstage.io/docs/features/kubernetes/configuration#surfacing-your-kubernetes-components-as-part-of-an-entity"
    },
    "Read Kubernetes Plugin Docs"
  ));
};

export { Router, isKubernetesAvailable };
//# sourceMappingURL=Router.esm.js.map
