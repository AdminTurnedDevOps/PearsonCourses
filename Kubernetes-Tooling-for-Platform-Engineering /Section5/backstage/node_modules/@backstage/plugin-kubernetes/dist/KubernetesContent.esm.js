import React from 'react';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import { useKubernetesObjects, DetectedErrorsContext, ErrorPanel, ErrorReporting, Cluster } from '@backstage/plugin-kubernetes-react';
import { detectErrors } from '@backstage/plugin-kubernetes-common';
import { Page, Content, Progress, EmptyState } from '@backstage/core-components';

const KubernetesContent = ({
  entity,
  refreshIntervalMs
}) => {
  const { kubernetesObjects, error } = useKubernetesObjects(
    entity,
    refreshIntervalMs
  );
  const clusters = kubernetesObjects?.items.map((item) => item.cluster) ?? [];
  const clustersWithErrors = kubernetesObjects?.items.filter((r) => r.errors.length > 0) ?? [];
  const detectedErrors = kubernetesObjects !== void 0 ? detectErrors(kubernetesObjects) : /* @__PURE__ */ new Map();
  return /* @__PURE__ */ React.createElement(DetectedErrorsContext.Provider, { value: [...detectedErrors.values()].flat() }, /* @__PURE__ */ React.createElement(Page, { themeId: "tool" }, /* @__PURE__ */ React.createElement(Content, null, kubernetesObjects === void 0 && error === void 0 && /* @__PURE__ */ React.createElement(Progress, null), clustersWithErrors.length > 0 && /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 3, direction: "column" }, /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(
    ErrorPanel,
    {
      entityName: entity.metadata.name,
      clustersWithErrors
    }
  ))), error !== void 0 && /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 3, direction: "column" }, /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(
    ErrorPanel,
    {
      entityName: entity.metadata.name,
      errorMessage: error
    }
  ))), kubernetesObjects && /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 3, direction: "column" }, /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(
    ErrorReporting,
    {
      detectedErrors,
      clusters
    }
  )), /* @__PURE__ */ React.createElement(Grid, { item: true }, /* @__PURE__ */ React.createElement(Typography, { variant: "h3" }, "Your Clusters")), /* @__PURE__ */ React.createElement(Grid, { item: true, container: true }, kubernetesObjects?.items.length <= 0 && /* @__PURE__ */ React.createElement(
    Grid,
    {
      container: true,
      justifyContent: "space-around",
      direction: "row",
      alignItems: "center",
      spacing: 2
    },
    /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 8 }, /* @__PURE__ */ React.createElement(
      EmptyState,
      {
        missing: "data",
        title: "No Kubernetes resources",
        description: `No resources on any known clusters for ${entity.metadata.name}`
      }
    ))
  ), kubernetesObjects?.items.length > 0 && kubernetesObjects?.items.map((item, i) => {
    const podsWithErrors = new Set(
      detectedErrors.get(item.cluster.name)?.filter((de) => de.sourceRef.kind === "Pod").map((de) => de.sourceRef.name)
    );
    return /* @__PURE__ */ React.createElement(Grid, { item: true, key: i, xs: 12 }, /* @__PURE__ */ React.createElement(
      Cluster,
      {
        clusterObjects: item,
        podsWithErrors
      }
    ));
  }))))));
};

export { KubernetesContent };
//# sourceMappingURL=KubernetesContent.esm.js.map
