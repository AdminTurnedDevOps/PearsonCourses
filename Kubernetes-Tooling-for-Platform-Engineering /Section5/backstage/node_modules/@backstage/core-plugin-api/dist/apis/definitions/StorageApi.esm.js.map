{"version":3,"file":"StorageApi.esm.js","sources":["../../../src/apis/definitions/StorageApi.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { JsonValue, Observable } from '@backstage/types';\n\n/**\n * A snapshot in time of the current known value of a storage key.\n *\n * @public\n */\nexport type StorageValueSnapshot<TValue extends JsonValue> =\n  | {\n      key: string;\n      presence: 'unknown' | 'absent';\n      value?: undefined;\n    }\n  | {\n      key: string;\n      presence: 'present';\n      value: TValue;\n    };\n\n/**\n * Provides a key-value persistence API.\n *\n * @public\n */\nexport interface StorageApi {\n  /**\n   * Create a bucket to store data in.\n   *\n   * @param name - Namespace for the storage to be stored under,\n   *               will inherit previous namespaces too\n   */\n  forBucket(name: string): StorageApi;\n\n  /**\n   * Remove persistent data.\n   *\n   * @param key - Unique key associated with the data.\n   */\n  remove(key: string): Promise<void>;\n\n  /**\n   * Save persistent data, and emit messages to anyone that is using\n   * {@link StorageApi.observe$} for this key.\n   *\n   * @param key - Unique key associated with the data.\n   * @param data - The data to be stored under the key.\n   */\n  set<T extends JsonValue>(key: string, data: T): Promise<void>;\n\n  /**\n   * Observe the value over time for a particular key in the current bucket.\n   *\n   * @remarks\n   *\n   * The observable will only emit values when the value changes in the underlying\n   * storage, although multiple values with the same shape may be emitted in a row.\n   *\n   * If a {@link StorageApi.snapshot} of a key is retrieved and the presence is\n   * `'unknown'`, then you are guaranteed to receive a snapshot with a known\n   * presence, as long as you observe the key within the same tick.\n   *\n   * Since the emitted values are shared across all subscribers, it is important\n   * not to mutate the returned values. The values may be frozen as a precaution.\n   *\n   * @param key - Unique key associated with the data\n   */\n  observe$<T extends JsonValue>(\n    key: string,\n  ): Observable<StorageValueSnapshot<T>>;\n\n  /**\n   * Returns an immediate snapshot value for the given key, if possible.\n   *\n   * @remarks\n   *\n   * Combine with {@link StorageApi.observe$} to get notified of value changes.\n   *\n   * Note that this method is synchronous, and some underlying storages may be\n   * unable to retrieve a value using this method - the result may or may not\n   * consistently have a presence of 'unknown'. Use {@link StorageApi.observe$}\n   * to be sure to receive an actual value eventually.\n   */\n  snapshot<T extends JsonValue>(key: string): StorageValueSnapshot<T>;\n}\n\n/**\n * The {@link ApiRef} of {@link StorageApi}.\n *\n * @public\n */\nexport const storageApiRef: ApiRef<StorageApi> = createApiRef({\n  id: 'core.storage',\n});\n"],"names":[],"mappings":";;;;;AA2GO,MAAM,gBAAoC,YAAa,CAAA;AAAA,EAC5D,EAAI,EAAA;AACN,CAAC;;;;"}