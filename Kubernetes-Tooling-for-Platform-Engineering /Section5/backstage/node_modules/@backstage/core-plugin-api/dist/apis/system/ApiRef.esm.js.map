{"version":3,"file":"ApiRef.esm.js","sources":["../../../src/apis/system/ApiRef.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ApiRef } from './types';\n\n/**\n * API reference configuration - holds an ID of the referenced API.\n *\n * @public\n */\nexport type ApiRefConfig = {\n  id: string;\n};\n\nclass ApiRefImpl<T> implements ApiRef<T> {\n  constructor(private readonly config: ApiRefConfig) {\n    const valid = config.id\n      .split('.')\n      .flatMap(part => part.split('-'))\n      .every(part => part.match(/^[a-z][a-z0-9]*$/));\n    if (!valid) {\n      throw new Error(\n        `API id must only contain period separated lowercase alphanum tokens with dashes, got '${config.id}'`,\n      );\n    }\n  }\n\n  get id(): string {\n    return this.config.id;\n  }\n\n  // Utility for getting type of an api, using `typeof apiRef.T`\n  get T(): T {\n    throw new Error(`tried to read ApiRef.T of ${this}`);\n  }\n\n  toString() {\n    return `apiRef{${this.config.id}}`;\n  }\n}\n\n/**\n * Creates a reference to an API.\n *\n * @param config - The descriptor of the API to reference.\n * @returns An API reference.\n * @public\n */\nexport function createApiRef<T>(config: ApiRefConfig): ApiRef<T> {\n  return new ApiRefImpl<T>(config);\n}\n"],"names":[],"mappings":"AA2BA,MAAM,UAAmC,CAAA;AAAA,EACvC,YAA6B,MAAsB,EAAA;AAAtB,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AAC3B,IAAA,MAAM,QAAQ,MAAO,CAAA,EAAA,CAClB,MAAM,GAAG,CAAA,CACT,QAAQ,CAAQ,IAAA,KAAA,IAAA,CAAK,KAAM,CAAA,GAAG,CAAC,CAC/B,CAAA,KAAA,CAAM,UAAQ,IAAK,CAAA,KAAA,CAAM,kBAAkB,CAAC,CAAA;AAC/C,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,sFAAA,EAAyF,OAAO,EAAE,CAAA,CAAA;AAAA,OACpG;AAAA;AACF;AACF,EAEA,IAAI,EAAa,GAAA;AACf,IAAA,OAAO,KAAK,MAAO,CAAA,EAAA;AAAA;AACrB;AAAA,EAGA,IAAI,CAAO,GAAA;AACT,IAAA,MAAM,IAAI,KAAA,CAAM,CAA6B,0BAAA,EAAA,IAAI,CAAE,CAAA,CAAA;AAAA;AACrD,EAEA,QAAW,GAAA;AACT,IAAO,OAAA,CAAA,OAAA,EAAU,IAAK,CAAA,MAAA,CAAO,EAAE,CAAA,CAAA,CAAA;AAAA;AAEnC;AASO,SAAS,aAAgB,MAAiC,EAAA;AAC/D,EAAO,OAAA,IAAI,WAAc,MAAM,CAAA;AACjC;;;;"}