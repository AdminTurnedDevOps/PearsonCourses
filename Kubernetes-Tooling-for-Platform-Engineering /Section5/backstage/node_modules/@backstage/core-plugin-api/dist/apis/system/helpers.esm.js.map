{"version":3,"file":"helpers.esm.js","sources":["../../../src/apis/system/helpers.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, ApiFactory, TypesToApiRefs } from './types';\n\n/**\n * Used to infer types for a standalone {@link ApiFactory} that isn't immediately passed\n * to another function.\n *\n * @remarks\n *\n * This function doesn't actually do anything, it's only used to infer types.\n *\n * @public\n */\nexport function createApiFactory<\n  Api,\n  Impl extends Api,\n  Deps extends { [name in string]: unknown },\n>(factory: ApiFactory<Api, Impl, Deps>): ApiFactory<Api, Impl, Deps>;\n/**\n * Used to infer types for a standalone {@link ApiFactory} that isn't immediately passed\n * to another function.\n *\n * @param api - Ref of the API that will be produced by the factory.\n * @param instance - Implementation of the API to use.\n * @public\n */\nexport function createApiFactory<Api, Impl extends Api>(\n  api: ApiRef<Api>,\n  instance: Impl,\n): ApiFactory<Api, Impl, {}>;\n/**\n * Used to infer types for a standalone {@link ApiFactory} that isn't immediately passed\n * to another function.\n *\n * @remarks\n *\n * Creates factory from {@link ApiRef} or returns the factory itself if provided.\n *\n * @param factory - Existing factory or {@link ApiRef}.\n * @param instance - The instance to be returned by the factory.\n * @public\n */\nexport function createApiFactory<\n  Api,\n  Impl extends Api,\n  Deps extends { [name in string]: unknown },\n>(\n  factory: ApiFactory<Api, Impl, Deps> | ApiRef<Api>,\n  instance?: Impl,\n): ApiFactory<Api, Impl, Deps> {\n  if ('id' in factory) {\n    return {\n      api: factory,\n      deps: {} as TypesToApiRefs<Deps>,\n      factory: () => instance!,\n    };\n  }\n  return factory;\n}\n"],"names":[],"mappings":"AAyDgB,SAAA,gBAAA,CAKd,SACA,QAC6B,EAAA;AAC7B,EAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,IAAO,OAAA;AAAA,MACL,GAAK,EAAA,OAAA;AAAA,MACL,MAAM,EAAC;AAAA,MACP,SAAS,MAAM;AAAA,KACjB;AAAA;AAEF,EAAO,OAAA,OAAA;AACT;;;;"}