{"version":3,"file":"ErrorApi.esm.js","sources":["../../../src/apis/definitions/ErrorApi.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\nimport { Observable } from '@backstage/types';\n\n/**\n * Mirrors the JavaScript Error class, for the purpose of\n * providing documentation and optional fields.\n *\n * @public\n */\nexport type ErrorApiError = {\n  name: string;\n  message: string;\n  stack?: string;\n};\n\n/**\n * Provides additional information about an error that was posted to the application.\n *\n * @public\n */\nexport type ErrorApiErrorContext = {\n  /**\n   * If set to true, this error should not be displayed to the user.\n   *\n   * Hidden errors are typically not displayed in the UI, but the ErrorApi\n   * implementation may still report them to error tracking services\n   * or other utilities that care about all errors.\n   *\n   * @defaultValue false\n   */\n  hidden?: boolean;\n};\n\n/**\n * The error API is used to report errors to the app, and display them to the user.\n *\n * @remarks\n *\n * Plugins can use this API as a method of displaying errors to the user, but also\n * to report errors for collection by error reporting services.\n *\n * If an error can be displayed inline, e.g. as feedback in a form, that should be\n * preferred over relying on this API to display the error. The main use of this API\n * for displaying errors should be for asynchronous errors, such as a failing background process.\n *\n * Even if an error is displayed inline, it should still be reported through this API\n * if it would be useful to collect or log it for debugging purposes, but with\n * the hidden flag set. For example, an error arising from form field validation\n * should probably not be reported, while a failed REST call would be useful to report.\n *\n * @public\n */\nexport type ErrorApi = {\n  /**\n   * Post an error for handling by the application.\n   */\n  post(error: ErrorApiError, context?: ErrorApiErrorContext): void;\n\n  /**\n   * Observe errors posted by other parts of the application.\n   */\n  error$(): Observable<{\n    error: ErrorApiError;\n    context?: ErrorApiErrorContext;\n  }>;\n};\n\n/**\n * The {@link ApiRef} of {@link ErrorApi}.\n *\n * @public\n */\nexport const errorApiRef: ApiRef<ErrorApi> = createApiRef({\n  id: 'core.error',\n});\n"],"names":[],"mappings":";;;;;AAwFO,MAAM,cAAgC,YAAa,CAAA;AAAA,EACxD,EAAI,EAAA;AACN,CAAC;;;;"}