{"version":3,"file":"FeatureFlagsApi.esm.js","sources":["../../../src/apis/definitions/FeatureFlagsApi.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiRef, createApiRef } from '../system';\n\n/**\n * Feature flag descriptor.\n *\n * @public\n */\nexport type FeatureFlag = {\n  name: string;\n  pluginId: string;\n  description?: string;\n};\n\n/**\n * Enum representing the state of a feature flag (inactive/active).\n *\n * @public\n */\nexport enum FeatureFlagState {\n  /**\n   * Feature flag inactive (disabled).\n   */\n  None = 0,\n  /**\n   * Feature flag active (enabled).\n   */\n  Active = 1,\n}\n\n/**\n * Options to use when saving feature flags.\n *\n * @public\n */\nexport type FeatureFlagsSaveOptions = {\n  /**\n   * The new feature flag states to save.\n   */\n  states: Record<string, FeatureFlagState>;\n\n  /**\n   * Whether the saves states should be merged into the existing ones, or replace them.\n   *\n   * Defaults to false.\n   */\n  merge?: boolean;\n};\n\n/**\n * The feature flags API is used to toggle functionality to users across plugins and Backstage.\n *\n * @remarks\n *\n * Plugins can use this API to register feature flags that they have available\n * for users to enable/disable, and this API will centralize the current user's\n * state of which feature flags they would like to enable.\n *\n * This is ideal for Backstage plugins, as well as your own App, to trial incomplete\n * or unstable upcoming features. Although there will be a common interface for users\n * to enable and disable feature flags, this API acts as another way to enable/disable.\n *\n * @public\n */\nexport interface FeatureFlagsApi {\n  /**\n   * Registers a new feature flag. Once a feature flag has been registered it\n   * can be toggled by users, and read back to enable or disable features.\n   */\n  registerFlag(flag: FeatureFlag): void;\n\n  /**\n   * Get a list of all registered flags.\n   */\n  getRegisteredFlags(): FeatureFlag[];\n\n  /**\n   * Whether the feature flag with the given name is currently activated for the user.\n   */\n  isActive(name: string): boolean;\n\n  /**\n   * Save the user's choice of feature flag states.\n   */\n  save(options: FeatureFlagsSaveOptions): void;\n}\n\n/**\n * The {@link ApiRef} of {@link FeatureFlagsApi}.\n *\n * @public\n */\nexport const featureFlagsApiRef: ApiRef<FeatureFlagsApi> = createApiRef({\n  id: 'core.featureflags',\n});\n"],"names":["FeatureFlagState"],"mappings":";;;;;AAkCY,IAAA,gBAAA,qBAAAA,iBAAL,KAAA;AAIL,EAAAA,iBAAAA,CAAAA,iBAAAA,CAAA,UAAO,CAAP,CAAA,GAAA,MAAA;AAIA,EAAAA,iBAAAA,CAAAA,iBAAAA,CAAA,YAAS,CAAT,CAAA,GAAA,QAAA;AARU,EAAAA,OAAAA,iBAAAA;AAAA,CAAA,EAAA,gBAAA,IAAA,EAAA;AAyEL,MAAM,qBAA8C,YAAa,CAAA;AAAA,EACtE,EAAI,EAAA;AACN,CAAC;;;;"}