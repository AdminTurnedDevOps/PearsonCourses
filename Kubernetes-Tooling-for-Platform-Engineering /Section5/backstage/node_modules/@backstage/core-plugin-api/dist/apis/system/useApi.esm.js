import React from 'react';
import { useVersionedContext } from '@backstage/version-bridge';
import { NotImplementedError } from '@backstage/errors';

function useApiHolder() {
  const versionedHolder = useVersionedContext("api-context");
  if (!versionedHolder) {
    throw new NotImplementedError("API context is not available");
  }
  const apiHolder = versionedHolder.atVersion(1);
  if (!apiHolder) {
    throw new NotImplementedError("ApiContext v1 not available");
  }
  return apiHolder;
}
function useApi(apiRef) {
  const apiHolder = useApiHolder();
  const api = apiHolder.get(apiRef);
  if (!api) {
    throw new NotImplementedError(`No implementation available for ${apiRef}`);
  }
  return api;
}
function withApis(apis) {
  return function withApisWrapper(WrappedComponent) {
    const Hoc = (props) => {
      const apiHolder = useApiHolder();
      const impls = {};
      for (const key in apis) {
        if (apis.hasOwnProperty(key)) {
          const ref = apis[key];
          const api = apiHolder.get(ref);
          if (!api) {
            throw new NotImplementedError(
              `No implementation available for ${ref}`
            );
          }
          impls[key] = api;
        }
      }
      return /* @__PURE__ */ React.createElement(WrappedComponent, { ...props, ...impls });
    };
    const displayName = WrappedComponent.displayName || WrappedComponent.name || "Component";
    Hoc.displayName = `withApis(${displayName})`;
    return Hoc;
  };
}

export { useApi, useApiHolder, withApis };
//# sourceMappingURL=useApi.esm.js.map
