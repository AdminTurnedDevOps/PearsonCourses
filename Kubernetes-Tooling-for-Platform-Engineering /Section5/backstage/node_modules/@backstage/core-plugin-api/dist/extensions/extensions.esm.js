import React, { lazy, Suspense, useEffect } from 'react';
import { AnalyticsContext } from '../analytics/AnalyticsContext.esm.js';
import { useAnalytics } from '../analytics/useAnalytics.esm.js';
import { useApp } from '../app/useApp.esm.js';
import '../routing/types.esm.js';
import { useRouteRef } from '../routing/useRouteRef.esm.js';
import 'react-router-dom';
import { attachComponentData } from './componentData.esm.js';
import { PluginErrorBoundary } from './PluginErrorBoundary.esm.js';
import { routableExtensionRenderedEvent } from '../analytics/Tracker.esm.js';

function createRoutableExtension(options) {
  const { component, mountPoint, name } = options;
  return createReactExtension({
    component: {
      lazy: () => component().then(
        (InnerComponent) => {
          const RoutableExtensionWrapper = (props) => {
            const analytics = useAnalytics();
            try {
              useRouteRef(mountPoint);
            } catch (error) {
              if (typeof error === "object" && error !== null) {
                const { message } = error;
                if (typeof message === "string" && message.startsWith("No path for ")) {
                  throw new Error(
                    `Routable extension component with mount point ${mountPoint} was not discovered in the app element tree. Routable extension components may not be rendered by other components and must be directly available as an element within the App provider component.`
                  );
                }
              }
              throw error;
            }
            useEffect(() => {
              analytics.captureEvent(routableExtensionRenderedEvent, "");
            }, [analytics]);
            return /* @__PURE__ */ React.createElement(InnerComponent, { ...props });
          };
          const componentName = name || InnerComponent.displayName || InnerComponent.name || "LazyComponent";
          RoutableExtensionWrapper.displayName = `RoutableExtension(${componentName})`;
          return RoutableExtensionWrapper;
        },
        (error) => {
          const RoutableExtensionWrapper = (_) => {
            const app = useApp();
            const { BootErrorPage } = app.getComponents();
            return /* @__PURE__ */ React.createElement(BootErrorPage, { step: "load-chunk", error });
          };
          return RoutableExtensionWrapper;
        }
      )
    },
    data: {
      "core.mountPoint": mountPoint
    },
    name
  });
}
function createComponentExtension(options) {
  const { component, name } = options;
  return createReactExtension({ component, name });
}
function createReactExtension(options) {
  const { data = {}, name } = options;
  if (!name) {
    console.warn(
      "Declaring extensions without name is DEPRECATED. Make sure that all usages of createReactExtension, createComponentExtension and createRoutableExtension provide a name."
    );
  }
  let Component;
  if ("lazy" in options.component) {
    const lazyLoader = options.component.lazy;
    Component = lazy(
      () => lazyLoader().then((component) => ({ default: component }))
    );
  } else {
    Component = options.component.sync;
  }
  const componentName = name || Component.displayName || Component.name || "Component";
  return {
    expose(plugin) {
      const Result = (props) => {
        const app = useApp();
        const { Progress } = app.getComponents();
        const mountPoint = data?.["core.mountPoint"];
        return /* @__PURE__ */ React.createElement(Suspense, { fallback: /* @__PURE__ */ React.createElement(Progress, null) }, /* @__PURE__ */ React.createElement(PluginErrorBoundary, { app, plugin }, /* @__PURE__ */ React.createElement(
          AnalyticsContext,
          {
            attributes: {
              pluginId: plugin.getId(),
              ...name && { extension: name },
              ...mountPoint && { routeRef: mountPoint.id }
            }
          },
          /* @__PURE__ */ React.createElement(Component, { ...props })
        )));
      };
      attachComponentData(Result, "core.plugin", plugin);
      attachComponentData(Result, "core.extensionName", name);
      for (const [key, value] of Object.entries(data)) {
        attachComponentData(Result, key, value);
      }
      Result.displayName = `Extension(${componentName})`;
      return Result;
    }
  };
}

export { createComponentExtension, createReactExtension, createRoutableExtension };
//# sourceMappingURL=extensions.esm.js.map
