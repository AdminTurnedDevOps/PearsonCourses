import { useMemo, Children, isValidElement, Fragment } from 'react';
import { getComponentData } from './componentData.esm.js';
import { useApi } from '../apis/system/useApi.esm.js';
import '../apis/definitions/auth.esm.js';
import '../apis/definitions/AlertApi.esm.js';
import '../apis/definitions/AnalyticsApi.esm.js';
import '../apis/definitions/AppThemeApi.esm.js';
import '../apis/definitions/ConfigApi.esm.js';
import '../apis/definitions/DiscoveryApi.esm.js';
import '../apis/definitions/ErrorApi.esm.js';
import { featureFlagsApiRef } from '../apis/definitions/FeatureFlagsApi.esm.js';
import '../apis/definitions/FetchApi.esm.js';
import '../apis/definitions/IdentityApi.esm.js';
import '../apis/definitions/OAuthRequestApi.esm.js';
import '../apis/definitions/StorageApi.esm.js';

function selectChildren(rootNode, featureFlagsApi, selector, strictError) {
  return Children.toArray(rootNode).flatMap((node) => {
    if (!isValidElement(node)) {
      return [];
    }
    if (node.type === Fragment) {
      return selectChildren(
        node.props.children,
        featureFlagsApi,
        selector,
        strictError
      );
    }
    if (getComponentData(node, "core.featureFlagged")) {
      const props = node.props;
      const isEnabled = "with" in props ? featureFlagsApi.isActive(props.with) : !featureFlagsApi.isActive(props.without);
      if (isEnabled) {
        return selectChildren(
          node.props.children,
          featureFlagsApi,
          selector,
          strictError
        );
      }
      return [];
    }
    if (selector === void 0 || selector(node)) {
      return [node];
    }
    if (strictError) {
      throw new Error(strictError);
    }
    return selectChildren(
      node.props.children,
      featureFlagsApi,
      selector,
      strictError
    );
  });
}
class Collection {
  constructor(node, featureFlagsApi) {
    this.node = node;
    this.featureFlagsApi = featureFlagsApi;
  }
  selectByComponentData(query) {
    const selection = selectChildren(
      this.node,
      this.featureFlagsApi,
      (node) => getComponentData(node, query.key) !== void 0,
      query.withStrictError
    );
    return new Collection(selection, this.featureFlagsApi);
  }
  findComponentData(query) {
    const selection = selectChildren(
      this.node,
      this.featureFlagsApi,
      (node) => getComponentData(node, query.key) !== void 0
    );
    return selection.map((node) => getComponentData(node, query.key)).filter((data) => data !== void 0);
  }
  getElements() {
    return selectChildren(this.node, this.featureFlagsApi);
  }
}
function useElementFilter(node, filterFn, dependencies = []) {
  const featureFlagsApi = useApi(featureFlagsApiRef);
  const elements = new Collection(node, featureFlagsApi);
  return useMemo(() => filterFn(elements), [node, ...dependencies]);
}

export { useElementFilter };
//# sourceMappingURL=useElementFilter.esm.js.map
