import { useAnalyticsContext } from './AnalyticsContext.esm.js';
import { useApi } from '../apis/system/useApi.esm.js';
import '../apis/definitions/auth.esm.js';
import '../apis/definitions/AlertApi.esm.js';
import { analyticsApiRef } from '../apis/definitions/AnalyticsApi.esm.js';
import '../apis/definitions/AppThemeApi.esm.js';
import '../apis/definitions/ConfigApi.esm.js';
import '../apis/definitions/DiscoveryApi.esm.js';
import '../apis/definitions/ErrorApi.esm.js';
import '../apis/definitions/FeatureFlagsApi.esm.js';
import '../apis/definitions/FetchApi.esm.js';
import '../apis/definitions/IdentityApi.esm.js';
import '../apis/definitions/OAuthRequestApi.esm.js';
import '../apis/definitions/StorageApi.esm.js';
import { useRef } from 'react';
import { Tracker } from './Tracker.esm.js';

function useAnalyticsApi() {
  try {
    return useApi(analyticsApiRef);
  } catch {
    return { captureEvent: () => {
    } };
  }
}
function useAnalytics() {
  const trackerRef = useRef(null);
  const context = useAnalyticsContext();
  const analyticsApi = useAnalyticsApi();
  function getTracker() {
    if (trackerRef.current === null) {
      trackerRef.current = new Tracker(analyticsApi);
    }
    return trackerRef.current;
  }
  const tracker = getTracker();
  tracker.setContext(context);
  return tracker;
}

export { useAnalytics };
//# sourceMappingURL=useAnalytics.esm.js.map
