import { useState, useMemo, useCallback, useEffect, useRef } from 'react';
import { useApi } from '../apis/system/useApi.esm.js';
import '../apis/definitions/auth.esm.js';
import '../apis/definitions/AlertApi.esm.js';
import '../apis/definitions/AnalyticsApi.esm.js';
import '../apis/definitions/AppThemeApi.esm.js';
import '../apis/definitions/ConfigApi.esm.js';
import '../apis/definitions/DiscoveryApi.esm.js';
import { errorApiRef } from '../apis/definitions/ErrorApi.esm.js';
import '../apis/definitions/FeatureFlagsApi.esm.js';
import '../apis/definitions/FetchApi.esm.js';
import '../apis/definitions/IdentityApi.esm.js';
import '../apis/definitions/OAuthRequestApi.esm.js';
import '../apis/definitions/StorageApi.esm.js';
import { translationApiRef } from '../apis/definitions/TranslationApi.esm.js';
import '../apis/definitions/AppLanguageApi.esm.js';

const loggedRefs = /* @__PURE__ */ new WeakSet();
const useTranslationRef = (translationRef) => {
  const errorApi = useApi(errorApiRef);
  const translationApi = useApi(translationApiRef);
  const [snapshot, setSnapshot] = useState(
    () => translationApi.getTranslation(translationRef)
  );
  const observable = useMemo(
    () => translationApi.translation$(translationRef),
    [translationApi, translationRef]
  );
  const onError = useCallback(
    (error) => {
      if (!loggedRefs.has(translationRef)) {
        const errMsg = `Failed to load translation resource '${translationRef.id}'; caused by ${error}`;
        console.error(errMsg);
        errorApi.post(new Error(errMsg));
        loggedRefs.add(translationRef);
      }
    },
    [errorApi, translationRef]
  );
  useEffect(() => {
    const subscription = observable.subscribe({
      next(next) {
        if (next.ready) {
          setSnapshot(next);
        }
      },
      error(error) {
        onError(error);
      }
    });
    return () => {
      subscription.unsubscribe();
    };
  }, [observable, onError]);
  const initialRenderRef = useRef(true);
  useEffect(() => {
    if (initialRenderRef.current) {
      initialRenderRef.current = false;
    } else {
      setSnapshot(translationApi.getTranslation(translationRef));
    }
  }, [translationApi, translationRef]);
  if (!snapshot.ready) {
    throw new Promise((resolve) => {
      const subscription = observable.subscribe({
        next(next) {
          if (next.ready) {
            subscription.unsubscribe();
            resolve();
          }
        },
        error(error) {
          subscription.unsubscribe();
          onError(error);
          resolve();
        }
      });
    });
  }
  return { t: snapshot.t };
};

export { useTranslationRef };
//# sourceMappingURL=useTranslationRef.esm.js.map
