{"version":3,"file":"TranslationMessages.esm.js","sources":["../../src/translation/TranslationMessages.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TranslationRef } from '@backstage/core-plugin-api/alpha';\n\n/**\n * Represents a collection of messages to be provided for a given translation ref.\n *\n * @alpha\n * @remarks\n *\n * This collection of messages can either be used directly as an override for the\n * default messages, or it can be used to provide translations for a language by\n * by being referenced by a {@link TranslationResource}.\n */\nexport interface TranslationMessages<\n  TId extends string = string,\n  TMessages extends { [key in string]: string } = { [key in string]: string },\n  TFull extends boolean = boolean,\n> {\n  $$type: '@backstage/TranslationMessages';\n  /** The ID of the translation ref that these messages are for */\n  id: TId;\n  /** Whether or not these messages override all known messages */\n  full: TFull;\n  /** The messages provided for the given translation ref */\n  messages: TMessages;\n}\n\n/**\n * Options for {@link createTranslationMessages}.\n *\n * @alpha\n */\nexport interface TranslationMessagesOptions<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TFull extends boolean,\n> {\n  ref: TranslationRef<TId, TMessages>;\n\n  full?: TFull;\n\n  messages: false extends TFull\n    ? { [key in keyof TMessages]?: string | null }\n    : { [key in keyof TMessages]: string | null };\n}\n\n/**\n * Creates a collection of messages for a given translation ref.\n *\n * @alpha\n */\nexport function createTranslationMessages<\n  TId extends string,\n  TMessages extends { [key in string]: string },\n  TFull extends boolean,\n>(\n  options: TranslationMessagesOptions<TId, TMessages, TFull>,\n): TranslationMessages<TId, TMessages, TFull> {\n  return {\n    $$type: '@backstage/TranslationMessages',\n    id: options.ref.id,\n    full: Boolean(options.full) as TFull,\n    messages: options.messages as TMessages,\n  };\n}\n"],"names":[],"mappings":"AAkEO,SAAS,0BAKd,OAC4C,EAAA;AAC5C,EAAO,OAAA;AAAA,IACL,MAAQ,EAAA,gCAAA;AAAA,IACR,EAAA,EAAI,QAAQ,GAAI,CAAA,EAAA;AAAA,IAChB,IAAA,EAAM,OAAQ,CAAA,OAAA,CAAQ,IAAI,CAAA;AAAA,IAC1B,UAAU,OAAQ,CAAA;AAAA,GACpB;AACF;;;;"}