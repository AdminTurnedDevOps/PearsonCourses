import { createTranslationResource } from './TranslationResource.esm.js';

function flattenMessages(nested) {
  const entries = new Array();
  function visit(obj, prefix) {
    for (const [key, value] of Object.entries(obj)) {
      if (typeof value === "string") {
        entries.push([prefix + key, value]);
      } else {
        visit(value, `${prefix}${key}.`);
      }
    }
  }
  visit(nested, "");
  return Object.fromEntries(entries);
}
class TranslationRefImpl {
  #id;
  #messages;
  #resources;
  constructor(options) {
    this.#id = options.id;
    this.#messages = flattenMessages(
      options.messages
    );
  }
  $$type = "@backstage/TranslationRef";
  version = "v1";
  get id() {
    return this.#id;
  }
  get T() {
    throw new Error("Not implemented");
  }
  getDefaultMessages() {
    return this.#messages;
  }
  setDefaultResource(resources) {
    this.#resources = resources;
  }
  getDefaultResource() {
    return this.#resources;
  }
  toString() {
    return `TranslationRef{id=${this.id}}`;
  }
}
function createTranslationRef(config) {
  const ref = new TranslationRefImpl(config);
  if (config.translations) {
    ref.setDefaultResource(
      createTranslationResource({
        ref,
        translations: config.translations
      })
    );
  }
  return ref;
}

export { createTranslationRef };
//# sourceMappingURL=TranslationRef.esm.js.map
