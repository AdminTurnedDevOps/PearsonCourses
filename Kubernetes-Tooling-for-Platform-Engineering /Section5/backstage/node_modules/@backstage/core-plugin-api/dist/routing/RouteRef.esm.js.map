{"version":3,"file":"RouteRef.esm.js","sources":["../../src/routing/RouteRef.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RouteRef,\n  routeRefType,\n  AnyParams,\n  ParamKeys,\n  OptionalParams,\n} from './types';\n\n/**\n * @internal\n */\nexport class RouteRefImpl<Params extends AnyParams>\n  implements RouteRef<Params>\n{\n  // The marker is used for type checking while the symbol is used at runtime.\n  declare $$routeRefType: 'absolute';\n  readonly [routeRefType] = 'absolute';\n\n  constructor(\n    private readonly id: string,\n    readonly params: ParamKeys<Params>,\n  ) {}\n\n  get title() {\n    return this.id;\n  }\n\n  toString() {\n    return `routeRef{type=absolute,id=${this.id}}`;\n  }\n}\n\n/**\n * Create a {@link RouteRef} from a route descriptor.\n *\n * @param config - Description of the route reference to be created.\n * @public\n */\nexport function createRouteRef<\n  // Params is the type that we care about and the one to be embedded in the route ref.\n  // For example, given the params ['name', 'kind'], Params will be {name: string, kind: string}\n  Params extends { [param in ParamKey]: string },\n  // ParamKey is here to make sure the Params type properly has its keys narrowed down\n  // to only the elements of params. Defaulting to never makes sure we end up with\n  // Param = {} if the params array is empty.\n  ParamKey extends string = never,\n>(config: {\n  /** The id of the route ref, used to identify it when printed */\n  id: string;\n  /** A list of parameter names that the path that this route ref is bound to must contain */\n  params?: ParamKey[];\n}): RouteRef<OptionalParams<Params>> {\n  return new RouteRefImpl(\n    config.id,\n    (config.params ?? []) as ParamKeys<OptionalParams<Params>>,\n  );\n}\n"],"names":[],"mappings":";;AA2BO,MAAM,YAEb,CAAA;AAAA,EAKE,WAAA,CACmB,IACR,MACT,EAAA;AAFiB,IAAA,IAAA,CAAA,EAAA,GAAA,EAAA;AACR,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AAAA;AACR,EALH,CAAU,YAAY,IAAI,UAAA;AAAA,EAO1B,IAAI,KAAQ,GAAA;AACV,IAAA,OAAO,IAAK,CAAA,EAAA;AAAA;AACd,EAEA,QAAW,GAAA;AACT,IAAO,OAAA,CAAA,0BAAA,EAA6B,KAAK,EAAE,CAAA,CAAA,CAAA;AAAA;AAE/C;AAQO,SAAS,eAQd,MAKmC,EAAA;AACnC,EAAA,OAAO,IAAI,YAAA;AAAA,IACT,MAAO,CAAA,EAAA;AAAA,IACN,MAAA,CAAO,UAAU;AAAC,GACrB;AACF;;;;"}