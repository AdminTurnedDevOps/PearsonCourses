import { routeRefType } from './types.esm.js';

const PARAM_PATTERN = /^\w+$/;
class SubRouteRefImpl {
  constructor(id, path, parent, params) {
    this.id = id;
    this.path = path;
    this.parent = parent;
    this.params = params;
  }
  [routeRefType] = "sub";
  toString() {
    return `routeRef{type=sub,id=${this.id}}`;
  }
}
function createSubRouteRef(config) {
  const { id, path, parent } = config;
  const pathParams = path.split("/").filter((p) => p.startsWith(":")).map((p) => p.substring(1));
  const params = [...parent.params, ...pathParams];
  if (parent.params.some((p) => pathParams.includes(p))) {
    throw new Error(
      "SubRouteRef may not have params that overlap with its parent"
    );
  }
  if (!path.startsWith("/")) {
    throw new Error(`SubRouteRef path must start with '/', got '${path}'`);
  }
  if (path.endsWith("/")) {
    throw new Error(`SubRouteRef path must not end with '/', got '${path}'`);
  }
  for (const param of pathParams) {
    if (!PARAM_PATTERN.test(param)) {
      throw new Error(`SubRouteRef path has invalid param, got '${param}'`);
    }
  }
  const subRouteRef = new SubRouteRefImpl(
    id,
    path,
    parent,
    params
  );
  return subRouteRef;
}

export { SubRouteRefImpl, createSubRouteRef };
//# sourceMappingURL=SubRouteRef.esm.js.map
