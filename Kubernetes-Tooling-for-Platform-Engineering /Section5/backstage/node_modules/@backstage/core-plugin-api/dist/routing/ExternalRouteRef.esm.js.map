{"version":3,"file":"ExternalRouteRef.esm.js","sources":["../../src/routing/ExternalRouteRef.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ExternalRouteRef,\n  routeRefType,\n  AnyParams,\n  ParamKeys,\n  OptionalParams,\n} from './types';\n\n/**\n * @internal\n */\nexport class ExternalRouteRefImpl<\n  Params extends AnyParams,\n  Optional extends boolean,\n> implements ExternalRouteRef<Params, Optional>\n{\n  // The marker is used for type checking while the symbol is used at runtime.\n  declare $$routeRefType: 'external';\n  readonly [routeRefType] = 'external';\n\n  constructor(\n    private readonly id: string,\n    readonly params: ParamKeys<Params>,\n    readonly optional: Optional,\n    readonly defaultTarget: string | undefined,\n  ) {}\n\n  toString() {\n    return `routeRef{type=external,id=${this.id}}`;\n  }\n\n  getDefaultTarget() {\n    return this.defaultTarget;\n  }\n}\n\n/**\n * Creates a route descriptor, to be later bound to a concrete route by the app. Used to implement cross-plugin route references.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @param options - Description of the route reference to be created.\n * @public\n */\nexport function createExternalRouteRef<\n  Params extends { [param in ParamKey]: string },\n  Optional extends boolean = false,\n  ParamKey extends string = never,\n>(options: {\n  /**\n   * An identifier for this route, used to identify it in error messages\n   */\n  id: string;\n\n  /**\n   * The parameters that will be provided to the external route reference.\n   */\n  params?: ParamKey[];\n\n  /**\n   * Whether or not this route is optional, defaults to false.\n   *\n   * Optional external routes are not required to be bound in the app, and\n   * if they aren't, `useRouteRef` will return `undefined`.\n   */\n  optional?: Optional;\n\n  /**\n   * The route (typically in another plugin) that this should map to by default.\n   *\n   * The string is expected to be on the standard `<plugin id>.<route id>` form,\n   * for example `techdocs.docRoot`.\n   */\n  defaultTarget?: string;\n}): ExternalRouteRef<OptionalParams<Params>, Optional> {\n  return new ExternalRouteRefImpl(\n    options.id,\n    (options.params ?? []) as ParamKeys<OptionalParams<Params>>,\n    Boolean(options.optional) as Optional,\n    options?.defaultTarget,\n  );\n}\n"],"names":[],"mappings":";;AA2BO,MAAM,oBAIb,CAAA;AAAA,EAKE,WACmB,CAAA,EAAA,EACR,MACA,EAAA,QAAA,EACA,aACT,EAAA;AAJiB,IAAA,IAAA,CAAA,EAAA,GAAA,EAAA;AACR,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AACA,IAAA,IAAA,CAAA,QAAA,GAAA,QAAA;AACA,IAAA,IAAA,CAAA,aAAA,GAAA,aAAA;AAAA;AACR,EAPH,CAAU,YAAY,IAAI,UAAA;AAAA,EAS1B,QAAW,GAAA;AACT,IAAO,OAAA,CAAA,0BAAA,EAA6B,KAAK,EAAE,CAAA,CAAA,CAAA;AAAA;AAC7C,EAEA,gBAAmB,GAAA;AACjB,IAAA,OAAO,IAAK,CAAA,aAAA;AAAA;AAEhB;AAYO,SAAS,uBAId,OA0BqD,EAAA;AACrD,EAAA,OAAO,IAAI,oBAAA;AAAA,IACT,OAAQ,CAAA,EAAA;AAAA,IACP,OAAA,CAAQ,UAAU,EAAC;AAAA,IACpB,OAAA,CAAQ,QAAQ,QAAQ,CAAA;AAAA,IACxB,OAAS,EAAA;AAAA,GACX;AACF;;;;"}