'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');
var strategy = require('./strategy.cjs.js');

const auth0Authenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  initialize({ callbackUrl, config }) {
    const clientID = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    const domain = config.getString("domain");
    const audience = config.getOptionalString("audience");
    const connection = config.getOptionalString("connection");
    const connectionScope = config.getOptionalString("connectionScope");
    const callbackURL = config.getOptionalString("callbackUrl") ?? callbackUrl;
    const store = {
      store(_req, cb) {
        cb(null, null);
      },
      verify(_req, _state, cb) {
        cb(null, true);
      }
    };
    const helper = pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new strategy.Auth0Strategy(
        {
          clientID,
          clientSecret,
          callbackURL,
          domain,
          store,
          // We need passReqToCallback set to false to get params, but there's
          // no matching type signature for that, so instead behold this beauty
          passReqToCallback: false
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            {
              fullProfile,
              accessToken,
              params
            },
            {
              refreshToken
            }
          );
        }
      )
    );
    return { helper, audience, connection, connectionScope };
  },
  async start(input, { helper, audience, connection, connectionScope: connection_scope }) {
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent",
      ...audience ? { audience } : {},
      ...connection ? { connection } : {},
      ...connection_scope ? { connection_scope } : {}
    });
  },
  async authenticate(input, { helper, audience, connection, connectionScope: connection_scope }) {
    return helper.authenticate(input, {
      ...audience ? { audience } : {},
      ...connection ? { connection } : {},
      ...connection_scope ? { connection_scope } : {}
    });
  },
  async refresh(input, { helper }) {
    return helper.refresh(input);
  }
});

exports.auth0Authenticator = auth0Authenticator;
//# sourceMappingURL=authenticator.cjs.js.map
