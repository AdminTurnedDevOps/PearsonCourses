import fetch, { Request } from 'cross-fetch';
import { WithPagination } from './pagination.esm.js';

class BitbucketCloudClient {
  constructor(config) {
    this.config = config;
  }
  static fromConfig(config) {
    return new BitbucketCloudClient(config);
  }
  searchCode(workspace, query, options) {
    const workspaceEnc = encodeURIComponent(workspace);
    return new WithPagination(
      (paginationOptions) => this.createUrl(`/workspaces/${workspaceEnc}/search/code`, {
        ...paginationOptions,
        ...options,
        search_query: query
      }),
      (url) => this.getTypeMapped(url)
    );
  }
  listRepositoriesByWorkspace(workspace, options) {
    const workspaceEnc = encodeURIComponent(workspace);
    return new WithPagination(
      (paginationOptions) => this.createUrl(`/repositories/${workspaceEnc}`, {
        ...paginationOptions,
        ...options
      }),
      (url) => this.getTypeMapped(url)
    );
  }
  listProjectsByWorkspace(workspace, options) {
    const workspaceEnc = encodeURIComponent(workspace);
    return new WithPagination(
      (paginationOptions) => this.createUrl(`/workspaces/${workspaceEnc}/projects`, {
        ...paginationOptions,
        ...options
      }),
      (url) => this.getTypeMapped(url)
    );
  }
  listWorkspaces(options) {
    return new WithPagination(
      (paginationOptions) => this.createUrl("/workspaces", { ...paginationOptions, ...options }),
      (url) => this.getTypeMapped(url)
    );
  }
  listBranchesByRepository(repository, workspace, options) {
    const workspaceEnc = encodeURIComponent(workspace);
    return new WithPagination(
      (paginationOptions) => this.createUrl(
        `/repositories/${workspaceEnc}/${repository}/refs/branches`,
        {
          ...paginationOptions,
          ...options
        }
      ),
      (url) => this.getTypeMapped(url)
    );
  }
  createUrl(endpoint, options) {
    const request = new URL(this.config.apiBaseUrl + endpoint);
    for (const key in options) {
      if (options[key]) {
        request.searchParams.append(key, options[key].toString());
      }
    }
    return request;
  }
  async getTypeMapped(url) {
    return this.get(url).then(
      (response) => response.json()
    );
  }
  async get(url) {
    return this.request(new Request(url.toString(), { method: "GET" }));
  }
  async request(req) {
    return fetch(req, { headers: this.getAuthHeaders() }).then(
      (response) => {
        if (!response.ok) {
          throw new Error(
            `Unexpected response for ${req.method} ${req.url}. Expected 200 but got ${response.status} - ${response.statusText}`
          );
        }
        return response;
      }
    );
  }
  getAuthHeaders() {
    const headers = {};
    if (this.config.username) {
      const buffer = Buffer.from(
        `${this.config.username}:${this.config.appPassword}`,
        "utf8"
      );
      headers.Authorization = `Basic ${buffer.toString("base64")}`;
    } else if (this.config.token) {
      headers.Authorization = `Bearer ${this.config.token}`;
    }
    return headers;
  }
}

export { BitbucketCloudClient };
//# sourceMappingURL=BitbucketCloudClient.esm.js.map
