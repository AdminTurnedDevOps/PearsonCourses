class WithPagination {
  constructor(createUrl, fetch) {
    this.createUrl = createUrl;
    this.fetch = fetch;
  }
  getPage(options) {
    const opts = { page: 1, pagelen: 100, ...options };
    const url = this.createUrl(opts);
    return this.fetch(url);
  }
  async *iteratePages(options) {
    const opts = { page: 1, pagelen: 100, ...options };
    let url = this.createUrl(opts);
    let res;
    do {
      res = await this.fetch(url);
      url = res.next ? new URL(res.next) : void 0;
      yield res;
    } while (url);
  }
  async *iterateResults(options) {
    const opts = { page: 1, pagelen: 100, ...options };
    let url = this.createUrl(opts);
    let res;
    do {
      res = await this.fetch(url);
      url = res.next ? new URL(res.next) : void 0;
      for (const item of res.values ?? []) {
        yield item;
      }
    } while (url);
  }
}

export { WithPagination };
//# sourceMappingURL=pagination.esm.js.map
