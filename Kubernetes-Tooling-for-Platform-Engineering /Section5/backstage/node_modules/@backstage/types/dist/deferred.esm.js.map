{"version":3,"file":"deferred.esm.js","sources":["../src/deferred.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A deferred promise that can be resolved or rejected later.\n *\n * @public\n */\nexport type DeferredPromise<\n  TResolved = void,\n  TRejected = Error,\n> = Promise<TResolved> & {\n  resolve(value: TResolved | PromiseLike<TResolved>): void;\n  reject(reason?: TRejected): void;\n};\n\nclass Deferred<TResolved, TRejected>\n  implements DeferredPromise<TResolved, TRejected>\n{\n  #resolve?: (value: TResolved | PromiseLike<TResolved>) => void;\n  #reject?: (reason?: TRejected) => void;\n\n  public get resolve() {\n    return this.#resolve!;\n  }\n  public get reject() {\n    return this.#reject!;\n  }\n\n  public then: Promise<TResolved>['then'];\n  public catch: Promise<TResolved>['catch'];\n  public finally: Promise<TResolved>['finally'];\n\n  public constructor() {\n    const promise = new Promise<TResolved>((resolve, reject) => {\n      this.#resolve = resolve;\n      this.#reject = reject;\n    });\n\n    this.then = promise.then.bind(promise);\n    this.catch = promise.catch.bind(promise);\n    this.finally = promise.finally.bind(promise);\n  }\n\n  [Symbol.toStringTag]: 'DeferredPromise' = 'DeferredPromise';\n}\n\n/**\n * Creates a deferred promise that can be resolved or rejected later.\n *\n * @public\n */\nexport function createDeferred<\n  TResolved = void,\n  TRejected = Error,\n>(): DeferredPromise<TResolved, TRejected> {\n  return new Deferred();\n}\n"],"names":[],"mappings":"AA6BA,MAAM,QAEN,CAAA;AAAA,EACE,QAAA;AAAA,EACA,OAAA;AAAA,EAEA,IAAW,OAAU,GAAA;AACnB,IAAA,OAAO,IAAK,CAAA,QAAA;AAAA;AACd,EACA,IAAW,MAAS,GAAA;AAClB,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd,EAEO,IAAA;AAAA,EACA,KAAA;AAAA,EACA,OAAA;AAAA,EAEA,WAAc,GAAA;AACnB,IAAA,MAAM,OAAU,GAAA,IAAI,OAAmB,CAAA,CAAC,SAAS,MAAW,KAAA;AAC1D,MAAA,IAAA,CAAK,QAAW,GAAA,OAAA;AAChB,MAAA,IAAA,CAAK,OAAU,GAAA,MAAA;AAAA,KAChB,CAAA;AAED,IAAA,IAAA,CAAK,IAAO,GAAA,OAAA,CAAQ,IAAK,CAAA,IAAA,CAAK,OAAO,CAAA;AACrC,IAAA,IAAA,CAAK,KAAQ,GAAA,OAAA,CAAQ,KAAM,CAAA,IAAA,CAAK,OAAO,CAAA;AACvC,IAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAQ,OAAQ,CAAA,IAAA,CAAK,OAAO,CAAA;AAAA;AAC7C,EAEA,CAAC,MAAO,CAAA,WAAW,IAAuB,iBAAA;AAC5C;AAOO,SAAS,cAG2B,GAAA;AACzC,EAAA,OAAO,IAAI,QAAS,EAAA;AACtB;;;;"}