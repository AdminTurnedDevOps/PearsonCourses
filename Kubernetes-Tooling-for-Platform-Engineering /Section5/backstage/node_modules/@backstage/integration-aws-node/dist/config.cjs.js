'use strict';

function readAwsIntegrationAccountConfig(config) {
  const accountConfig = {
    accountId: config.getString("accountId"),
    accessKeyId: config.getOptionalString("accessKeyId"),
    secretAccessKey: config.getOptionalString("secretAccessKey")?.trim(),
    profile: config.getOptionalString("profile"),
    roleName: config.getOptionalString("roleName"),
    region: config.getOptionalString("region"),
    partition: config.getOptionalString("partition"),
    externalId: config.getOptionalString("externalId")
  };
  if (accountConfig.accessKeyId && !accountConfig.secretAccessKey) {
    throw new Error(
      `AWS integration account ${accountConfig.accountId} has an access key ID configured, but no secret access key.`
    );
  }
  if (!accountConfig.accessKeyId && accountConfig.secretAccessKey) {
    throw new Error(
      `AWS integration account ${accountConfig.accountId} has a secret access key configured, but no access key ID`
    );
  }
  if (accountConfig.profile && accountConfig.accessKeyId) {
    throw new Error(
      `AWS integration account ${accountConfig.accountId} has both an access key ID and a profile configured, but only one must be specified`
    );
  }
  if (accountConfig.profile && accountConfig.roleName) {
    throw new Error(
      `AWS integration account ${accountConfig.accountId} has both an access key ID and a role name configured, but only one must be specified`
    );
  }
  if (!accountConfig.roleName && accountConfig.externalId) {
    throw new Error(
      `AWS integration account ${accountConfig.accountId} has an external ID configured, but no role name.`
    );
  }
  if (!accountConfig.roleName && accountConfig.region) {
    throw new Error(
      `AWS integration account ${accountConfig.accountId} has an STS region configured, but no role name.`
    );
  }
  if (!accountConfig.roleName && accountConfig.partition) {
    throw new Error(
      `AWS integration account ${accountConfig.accountId} has an IAM partition configured, but no role name.`
    );
  }
  return accountConfig;
}
function readMainAwsIntegrationAccountConfig(config) {
  const mainAccountConfig = {
    accessKeyId: config.getOptionalString("accessKeyId"),
    secretAccessKey: config.getOptionalString("secretAccessKey")?.trim(),
    profile: config.getOptionalString("profile"),
    region: config.getOptionalString("region")
  };
  if (mainAccountConfig.accessKeyId && !mainAccountConfig.secretAccessKey) {
    throw new Error(
      `The main AWS integration account has an access key ID configured, but no secret access key.`
    );
  }
  if (!mainAccountConfig.accessKeyId && mainAccountConfig.secretAccessKey) {
    throw new Error(
      `The main AWS integration account has a secret access key configured, but no access key ID`
    );
  }
  if (mainAccountConfig.profile && mainAccountConfig.accessKeyId) {
    throw new Error(
      `The main AWS integration account has both an access key ID and a profile configured, but only one must be specified`
    );
  }
  return mainAccountConfig;
}
function readAwsIntegrationAccountDefaultsConfig(config) {
  const defaultAccountConfig = {
    roleName: config.getOptionalString("roleName"),
    partition: config.getOptionalString("partition"),
    region: config.getOptionalString("region"),
    externalId: config.getOptionalString("externalId")
  };
  if (!defaultAccountConfig.roleName && defaultAccountConfig.externalId) {
    throw new Error(
      `AWS integration account default configuration has an external ID configured, but no role name.`
    );
  }
  if (!defaultAccountConfig.roleName && defaultAccountConfig.region) {
    throw new Error(
      `AWS integration account default configuration has an STS region configured, but no role name.`
    );
  }
  if (!defaultAccountConfig.roleName && defaultAccountConfig.partition) {
    throw new Error(
      `AWS integration account default configuration has an IAM partition configured, but no role name.`
    );
  }
  return defaultAccountConfig;
}
function readAwsIntegrationConfig(config) {
  const accounts = config.getOptionalConfigArray("accounts")?.map(readAwsIntegrationAccountConfig);
  const mainAccount = config.has("mainAccount") ? readMainAwsIntegrationAccountConfig(config.getConfig("mainAccount")) : {};
  const accountDefaults = config.has("accountDefaults") ? readAwsIntegrationAccountDefaultsConfig(
    config.getConfig("accountDefaults")
  ) : {};
  return {
    accounts: accounts ?? [],
    mainAccount,
    accountDefaults
  };
}

exports.readAwsIntegrationConfig = readAwsIntegrationConfig;
//# sourceMappingURL=config.cjs.js.map
