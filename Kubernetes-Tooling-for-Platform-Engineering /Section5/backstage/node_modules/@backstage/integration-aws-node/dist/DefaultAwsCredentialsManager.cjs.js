'use strict';

var config = require('./config.cjs.js');
var clientSts = require('@aws-sdk/client-sts');
var credentialProviders = require('@aws-sdk/credential-providers');
var utilArnParser = require('@aws-sdk/util-arn-parser');

async function fillInAccountId(credProvider) {
  if (credProvider.accountId) {
    return;
  }
  const client = new clientSts.STSClient({
    region: credProvider.stsRegion,
    customUserAgent: "backstage-aws-credentials-manager",
    credentialDefaultProvider: () => credProvider.sdkCredentialProvider
  });
  const resp = await client.send(new clientSts.GetCallerIdentityCommand({}));
  credProvider.accountId = resp.Account;
}
function getStaticCredentials(accessKeyId, secretAccessKey) {
  return async () => {
    return Promise.resolve({
      accessKeyId,
      secretAccessKey
    });
  };
}
function getProfileCredentials(profile, region) {
  return credentialProviders.fromIni({
    profile,
    clientConfig: {
      region,
      customUserAgent: "backstage-aws-credentials-manager"
    }
  });
}
function getDefaultCredentialsChain(region = "us-east-1") {
  return credentialProviders.fromNodeProviderChain({ clientConfig: { region } });
}
function getSdkCredentialProvider(config, mainAccountCredProvider) {
  if (config.roleName) {
    const region = config.region ?? "us-east-1";
    const partition = config.partition ?? "aws";
    return credentialProviders.fromTemporaryCredentials({
      masterCredentials: config.accessKeyId ? getStaticCredentials(config.accessKeyId, config.secretAccessKey) : mainAccountCredProvider,
      params: {
        RoleArn: `arn:${partition}:iam::${config.accountId}:role/${config.roleName}`,
        RoleSessionName: "backstage",
        ExternalId: config.externalId
      },
      clientConfig: {
        region,
        customUserAgent: "backstage-aws-credentials-manager"
      }
    });
  }
  if (config.accessKeyId) {
    return getStaticCredentials(config.accessKeyId, config.secretAccessKey);
  }
  if (config.profile) {
    return getProfileCredentials(config.profile, config.region);
  }
  return getDefaultCredentialsChain(config.region);
}
function getMainAccountSdkCredentialProvider(config) {
  if (config.accessKeyId) {
    return getStaticCredentials(config.accessKeyId, config.secretAccessKey);
  }
  if (config.profile) {
    return getProfileCredentials(config.profile, config.region);
  }
  return getDefaultCredentialsChain(config.region);
}
class DefaultAwsCredentialsManager {
  constructor(accountCredentialProviders, accountDefaults, mainAccountCredentialProvider) {
    this.accountCredentialProviders = accountCredentialProviders;
    this.accountDefaults = accountDefaults;
    this.mainAccountCredentialProvider = mainAccountCredentialProvider;
  }
  static fromConfig(config$1) {
    const awsConfig = config$1.has("aws") ? config.readAwsIntegrationConfig(config$1.getConfig("aws")) : {
      accounts: [],
      mainAccount: {},
      accountDefaults: {}
    };
    const mainAccountSdkCredProvider = getMainAccountSdkCredentialProvider(
      awsConfig.mainAccount
    );
    const mainAccountCredProvider = {
      sdkCredentialProvider: mainAccountSdkCredProvider
    };
    const accountCredProviders = /* @__PURE__ */ new Map();
    for (const accountConfig of awsConfig.accounts) {
      const sdkCredentialProvider = getSdkCredentialProvider(
        accountConfig,
        mainAccountSdkCredProvider
      );
      accountCredProviders.set(accountConfig.accountId, {
        accountId: accountConfig.accountId,
        stsRegion: accountConfig.region,
        sdkCredentialProvider
      });
    }
    return new DefaultAwsCredentialsManager(
      accountCredProviders,
      awsConfig.accountDefaults,
      mainAccountCredProvider
    );
  }
  /**
   * Returns an {@link AwsCredentialProvider} for a given AWS account.
   *
   * @example
   * ```ts
   * const { provider } = await getCredentialProvider({
   *   accountId: '0123456789012',
   * })
   *
   * const { provider } = await getCredentialProvider({
   *   arn: 'arn:aws:ecs:us-west-2:123456789012:service/my-http-service'
   * })
   * ```
   *
   * @param opts - the AWS account ID or AWS resource ARN
   * @returns A promise of {@link AwsCredentialProvider}.
   */
  async getCredentialProvider(opts) {
    if (!opts) {
      return this.mainAccountCredentialProvider;
    }
    let accountId = opts.accountId;
    if (opts.arn && !accountId) {
      const arnComponents = utilArnParser.parse(opts.arn);
      accountId = arnComponents.accountId;
    }
    if (!accountId) {
      return this.mainAccountCredentialProvider;
    }
    if (this.accountCredentialProviders.has(accountId)) {
      return this.accountCredentialProviders.get(accountId);
    }
    if (this.accountDefaults.roleName) {
      const config = {
        accountId,
        roleName: this.accountDefaults.roleName,
        partition: this.accountDefaults.partition,
        region: this.accountDefaults.region,
        externalId: this.accountDefaults.externalId
      };
      const sdkCredentialProvider = getSdkCredentialProvider(
        config,
        this.mainAccountCredentialProvider.sdkCredentialProvider
      );
      const credProvider = {
        accountId,
        sdkCredentialProvider
      };
      this.accountCredentialProviders.set(accountId, credProvider);
      return credProvider;
    }
    await fillInAccountId(this.mainAccountCredentialProvider);
    if (accountId === this.mainAccountCredentialProvider.accountId) {
      return this.mainAccountCredentialProvider;
    }
    throw new Error(
      `There is no AWS integration that matches ${accountId}. Please add a configuration for this AWS account.`
    );
  }
}

exports.DefaultAwsCredentialsManager = DefaultAwsCredentialsManager;
//# sourceMappingURL=DefaultAwsCredentialsManager.cjs.js.map
