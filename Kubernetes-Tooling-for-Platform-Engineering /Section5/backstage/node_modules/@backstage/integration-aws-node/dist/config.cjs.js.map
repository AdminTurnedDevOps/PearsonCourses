{"version":3,"file":"config.cjs.js","sources":["../src/config.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\n/**\n * The configuration parameters for a single AWS account for the AWS integration.\n *\n * @public\n */\nexport type AwsIntegrationAccountConfig = {\n  /**\n   * The account ID of the target account that this matches on, e.g. \"123456789012\"\n   */\n  accountId: string;\n\n  /**\n   * The access key ID for a set of static AWS credentials\n   */\n  accessKeyId?: string;\n\n  /**\n   * The secret access key for a set of static AWS credentials\n   */\n  secretAccessKey?: string;\n\n  /**\n   * The configuration profile from a credentials file at ~/.aws/credentials and\n   * a configuration file at ~/.aws/config.\n   */\n  profile?: string;\n\n  /**\n   * The IAM role to assume to retrieve temporary AWS credentials\n   */\n  roleName?: string;\n\n  /**\n   * The AWS partition of the IAM role, e.g. \"aws\", \"aws-cn\"\n   */\n  partition?: string;\n\n  /**\n   * The STS regional endpoint to use when retrieving temporary AWS credentials, e.g. \"ap-northeast-1\"\n   */\n  region?: string;\n\n  /**\n   * The unique identifier needed to assume the role to retrieve temporary AWS credentials\n   */\n  externalId?: string;\n};\n\n/**\n * The configuration parameters for the main AWS account for the AWS integration.\n *\n * @public\n */\nexport type AwsIntegrationMainAccountConfig = {\n  /**\n   * The access key ID for a set of static AWS credentials\n   */\n  accessKeyId?: string;\n\n  /**\n   * The secret access key for a set of static AWS credentials\n   */\n  secretAccessKey?: string;\n\n  /**\n   * The configuration profile from a credentials file at ~/.aws/credentials and\n   * a configuration file at ~/.aws/config.\n   */\n  profile?: string;\n\n  /**\n   * The STS regional endpoint to use for the main account, e.g. \"ap-northeast-1\"\n   */\n  region?: string;\n};\n\n/**\n * The default configuration parameters to use for accounts for the AWS integration.\n *\n * @public\n */\nexport type AwsIntegrationDefaultAccountConfig = {\n  /**\n   * The IAM role to assume to retrieve temporary AWS credentials\n   */\n  roleName?: string;\n\n  /**\n   * The AWS partition of the IAM role, e.g. \"aws\", \"aws-cn\"\n   */\n  partition?: string;\n\n  /**\n   * The STS regional endpoint to use when retrieving temporary AWS credentials, e.g. \"ap-northeast-1\"\n   */\n  region?: string;\n\n  /**\n   * The unique identifier needed to assume the role to retrieve temporary AWS credentials\n   */\n  externalId?: string;\n};\n\n/**\n * The configuration parameters for AWS account integration.\n *\n * @public\n */\nexport type AwsIntegrationConfig = {\n  /**\n   * Configuration for retrieving AWS accounts credentials\n   */\n  accounts: AwsIntegrationAccountConfig[];\n\n  /**\n   * Defaults for retrieving AWS account credentials\n   */\n  accountDefaults: AwsIntegrationDefaultAccountConfig;\n\n  /**\n   * Main account to use for retrieving AWS account credentials\n   */\n  mainAccount: AwsIntegrationMainAccountConfig;\n};\n\n/**\n * Reads an AWS integration account config.\n *\n * @param config - The config object of a single account\n */\nfunction readAwsIntegrationAccountConfig(\n  config: Config,\n): AwsIntegrationAccountConfig {\n  const accountConfig = {\n    accountId: config.getString('accountId'),\n    accessKeyId: config.getOptionalString('accessKeyId'),\n    secretAccessKey: config.getOptionalString('secretAccessKey')?.trim(),\n    profile: config.getOptionalString('profile'),\n    roleName: config.getOptionalString('roleName'),\n    region: config.getOptionalString('region'),\n    partition: config.getOptionalString('partition'),\n    externalId: config.getOptionalString('externalId'),\n  };\n\n  // Validate that the account config has the right combination of attributes\n  if (accountConfig.accessKeyId && !accountConfig.secretAccessKey) {\n    throw new Error(\n      `AWS integration account ${accountConfig.accountId} has an access key ID configured, but no secret access key.`,\n    );\n  }\n\n  if (!accountConfig.accessKeyId && accountConfig.secretAccessKey) {\n    throw new Error(\n      `AWS integration account ${accountConfig.accountId} has a secret access key configured, but no access key ID`,\n    );\n  }\n\n  if (accountConfig.profile && accountConfig.accessKeyId) {\n    throw new Error(\n      `AWS integration account ${accountConfig.accountId} has both an access key ID and a profile configured, but only one must be specified`,\n    );\n  }\n\n  if (accountConfig.profile && accountConfig.roleName) {\n    throw new Error(\n      `AWS integration account ${accountConfig.accountId} has both an access key ID and a role name configured, but only one must be specified`,\n    );\n  }\n\n  if (!accountConfig.roleName && accountConfig.externalId) {\n    throw new Error(\n      `AWS integration account ${accountConfig.accountId} has an external ID configured, but no role name.`,\n    );\n  }\n\n  if (!accountConfig.roleName && accountConfig.region) {\n    throw new Error(\n      `AWS integration account ${accountConfig.accountId} has an STS region configured, but no role name.`,\n    );\n  }\n\n  if (!accountConfig.roleName && accountConfig.partition) {\n    throw new Error(\n      `AWS integration account ${accountConfig.accountId} has an IAM partition configured, but no role name.`,\n    );\n  }\n\n  return accountConfig;\n}\n\n/**\n * Reads the main AWS integration account config.\n *\n * @param config - The config object of the main account\n */\nfunction readMainAwsIntegrationAccountConfig(\n  config: Config,\n): AwsIntegrationMainAccountConfig {\n  const mainAccountConfig = {\n    accessKeyId: config.getOptionalString('accessKeyId'),\n    secretAccessKey: config.getOptionalString('secretAccessKey')?.trim(),\n    profile: config.getOptionalString('profile'),\n    region: config.getOptionalString('region'),\n  };\n\n  // Validate that the account config has the right combination of attributes\n  if (mainAccountConfig.accessKeyId && !mainAccountConfig.secretAccessKey) {\n    throw new Error(\n      `The main AWS integration account has an access key ID configured, but no secret access key.`,\n    );\n  }\n\n  if (!mainAccountConfig.accessKeyId && mainAccountConfig.secretAccessKey) {\n    throw new Error(\n      `The main AWS integration account has a secret access key configured, but no access key ID`,\n    );\n  }\n\n  if (mainAccountConfig.profile && mainAccountConfig.accessKeyId) {\n    throw new Error(\n      `The main AWS integration account has both an access key ID and a profile configured, but only one must be specified`,\n    );\n  }\n\n  return mainAccountConfig;\n}\n\n/**\n * Reads the default settings for retrieving credentials from AWS integration accounts.\n *\n * @param config - The config object of the default account settings\n */\nfunction readAwsIntegrationAccountDefaultsConfig(\n  config: Config,\n): AwsIntegrationDefaultAccountConfig {\n  const defaultAccountConfig = {\n    roleName: config.getOptionalString('roleName'),\n    partition: config.getOptionalString('partition'),\n    region: config.getOptionalString('region'),\n    externalId: config.getOptionalString('externalId'),\n  };\n\n  // Validate that the account config has the right combination of attributes\n  if (!defaultAccountConfig.roleName && defaultAccountConfig.externalId) {\n    throw new Error(\n      `AWS integration account default configuration has an external ID configured, but no role name.`,\n    );\n  }\n\n  if (!defaultAccountConfig.roleName && defaultAccountConfig.region) {\n    throw new Error(\n      `AWS integration account default configuration has an STS region configured, but no role name.`,\n    );\n  }\n\n  if (!defaultAccountConfig.roleName && defaultAccountConfig.partition) {\n    throw new Error(\n      `AWS integration account default configuration has an IAM partition configured, but no role name.`,\n    );\n  }\n\n  return defaultAccountConfig;\n}\n\n/**\n * Reads an AWS integration configuration\n *\n * @param config - the integration config object\n * @public\n */\nexport function readAwsIntegrationConfig(config: Config): AwsIntegrationConfig {\n  const accounts = config\n    .getOptionalConfigArray('accounts')\n    ?.map(readAwsIntegrationAccountConfig);\n  const mainAccount = config.has('mainAccount')\n    ? readMainAwsIntegrationAccountConfig(config.getConfig('mainAccount'))\n    : {};\n  const accountDefaults = config.has('accountDefaults')\n    ? readAwsIntegrationAccountDefaultsConfig(\n        config.getConfig('accountDefaults'),\n      )\n    : {};\n\n  return {\n    accounts: accounts ?? [],\n    mainAccount,\n    accountDefaults,\n  };\n}\n"],"names":[],"mappings":"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"}