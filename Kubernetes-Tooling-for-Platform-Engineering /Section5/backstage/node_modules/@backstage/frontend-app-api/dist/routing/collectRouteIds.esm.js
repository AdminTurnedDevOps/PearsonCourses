import { isRouteRef, toInternalRouteRef } from '../frontend-plugin-api/src/routing/RouteRef.esm.js';
import { toInternalExternalRouteRef } from '../frontend-plugin-api/src/routing/ExternalRouteRef.esm.js';
import { toInternalSubRouteRef } from '../frontend-plugin-api/src/routing/SubRouteRef.esm.js';
import { OpaqueFrontendPlugin } from '../frontend-internal/src/wiring/InternalFrontendPlugin.esm.js';
import '../frontend-internal/src/wiring/InternalExtensionDefinition.esm.js';

function collectRouteIds(features) {
  const routesById = /* @__PURE__ */ new Map();
  const externalRoutesById = /* @__PURE__ */ new Map();
  for (const feature of features) {
    if (!OpaqueFrontendPlugin.isType(feature)) {
      continue;
    }
    for (const [name, ref] of Object.entries(feature.routes)) {
      const refId = `${feature.id}.${name}`;
      if (routesById.has(refId)) {
        throw new Error(`Unexpected duplicate route '${refId}'`);
      }
      if (isRouteRef(ref)) {
        const internalRef = toInternalRouteRef(ref);
        internalRef.setId(refId);
        routesById.set(refId, ref);
      } else {
        const internalRef = toInternalSubRouteRef(ref);
        routesById.set(refId, internalRef);
      }
    }
    for (const [name, ref] of Object.entries(feature.externalRoutes)) {
      const refId = `${feature.id}.${name}`;
      if (externalRoutesById.has(refId)) {
        throw new Error(`Unexpected duplicate external route '${refId}'`);
      }
      const internalRef = toInternalExternalRouteRef(ref);
      internalRef.setId(refId);
      externalRoutesById.set(refId, ref);
    }
  }
  return { routes: routesById, externalRoutes: externalRoutesById };
}

export { collectRouteIds };
//# sourceMappingURL=collectRouteIds.esm.js.map
