{"version":3,"file":"InternalExtensionDefinition.esm.js","sources":["../../../../../frontend-internal/src/wiring/InternalExtensionDefinition.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnyExtensionDataRef,\n  ApiHolder,\n  AppNode,\n  ExtensionDataValue,\n  ExtensionDefinition,\n  ExtensionDefinitionParameters,\n  ExtensionInput,\n  PortableSchema,\n  ResolvedExtensionInputs,\n} from '@backstage/frontend-plugin-api';\nimport { OpaqueType } from '@internal/opaque';\n\nexport const OpaqueExtensionDefinition = OpaqueType.create<{\n  public: ExtensionDefinition<ExtensionDefinitionParameters>;\n  versions:\n    | {\n        readonly version: 'v1';\n        readonly kind?: string;\n        readonly namespace?: string;\n        readonly name?: string;\n        readonly attachTo: { id: string; input: string };\n        readonly disabled: boolean;\n        readonly configSchema?: PortableSchema<any, any>;\n        readonly inputs: {\n          [inputName in string]: {\n            $$type: '@backstage/ExtensionInput';\n            extensionData: {\n              [name in string]: AnyExtensionDataRef;\n            };\n            config: { optional: boolean; singleton: boolean };\n          };\n        };\n        readonly output: {\n          [name in string]: AnyExtensionDataRef;\n        };\n        factory(context: {\n          node: AppNode;\n          apis: ApiHolder;\n          config: object;\n          inputs: {\n            [inputName in string]: unknown;\n          };\n        }): {\n          [inputName in string]: unknown;\n        };\n      }\n    | {\n        readonly version: 'v2';\n        readonly kind?: string;\n        readonly namespace?: string;\n        readonly name?: string;\n        readonly attachTo: { id: string; input: string };\n        readonly disabled: boolean;\n        readonly configSchema?: PortableSchema<any, any>;\n        readonly inputs: {\n          [inputName in string]: ExtensionInput<\n            AnyExtensionDataRef,\n            { optional: boolean; singleton: boolean }\n          >;\n        };\n        readonly output: Array<AnyExtensionDataRef>;\n        factory(context: {\n          node: AppNode;\n          apis: ApiHolder;\n          config: object;\n          inputs: ResolvedExtensionInputs<{\n            [inputName in string]: ExtensionInput<\n              AnyExtensionDataRef,\n              { optional: boolean; singleton: boolean }\n            >;\n          }>;\n        }): Iterable<ExtensionDataValue<any, any>>;\n      };\n}>({\n  type: '@backstage/ExtensionDefinition',\n  versions: ['v1', 'v2'],\n});\n"],"names":[],"mappings":";;AA6Ba,MAAA,yBAAA,GAA4B,WAAW,MA6DjD,CAAA;AAAA,EACD,IAAM,EAAA,gCAAA;AAAA,EACN,QAAA,EAAU,CAAC,IAAA,EAAM,IAAI;AACvB,CAAC;;;;"}