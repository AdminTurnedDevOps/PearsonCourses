import { startCookieAuthRefresh } from './startCookieAuthRefresh.esm.js';

function mkError(thing) {
  return new Error(
    `Tried to access IdentityApi ${thing} before app was loaded`
  );
}
function logDeprecation(thing) {
  console.warn(
    `WARNING: Call to ${thing} is deprecated and will break in the future`
  );
}
class AppIdentityProxy {
  target;
  waitForTarget;
  resolveTarget = () => {
  };
  signOutTargetUrl = "/";
  #cookieAuthSignOut;
  constructor() {
    this.waitForTarget = new Promise((resolve) => {
      this.resolveTarget = resolve;
    });
  }
  // This is called by the app manager once the sign-in page provides us with an implementation
  setTarget(identityApi, targetOptions) {
    this.target = identityApi;
    this.signOutTargetUrl = targetOptions.signOutTargetUrl;
    this.resolveTarget(identityApi);
  }
  getUserId() {
    if (!this.target) {
      throw mkError("getUserId");
    }
    if (!this.target.getUserId) {
      throw new Error("IdentityApi does not implement getUserId");
    }
    logDeprecation("getUserId");
    return this.target.getUserId();
  }
  getProfile() {
    if (!this.target) {
      throw mkError("getProfile");
    }
    if (!this.target.getProfile) {
      throw new Error("IdentityApi does not implement getProfile");
    }
    logDeprecation("getProfile");
    return this.target.getProfile();
  }
  async getProfileInfo() {
    return this.waitForTarget.then((target) => target.getProfileInfo());
  }
  async getBackstageIdentity() {
    const identity = await this.waitForTarget.then(
      (target) => target.getBackstageIdentity()
    );
    if (!identity.userEntityRef.match(/^.*:.*\/.*$/)) {
      console.warn(
        `WARNING: The App IdentityApi provided an invalid userEntityRef, '${identity.userEntityRef}'. It must be a full Entity Reference of the form '<kind>:<namespace>/<name>'.`
      );
    }
    return identity;
  }
  async getCredentials() {
    return this.waitForTarget.then((target) => target.getCredentials());
  }
  async getIdToken() {
    return this.waitForTarget.then((target) => {
      if (!target.getIdToken) {
        throw new Error("IdentityApi does not implement getIdToken");
      }
      logDeprecation("getIdToken");
      return target.getIdToken();
    });
  }
  async signOut() {
    await this.waitForTarget.then((target) => target.signOut());
    await this.#cookieAuthSignOut?.();
    window.location.href = this.signOutTargetUrl;
  }
  enableCookieAuth(ctx) {
    if (this.#cookieAuthSignOut) {
      return;
    }
    const stopRefresh = startCookieAuthRefresh(ctx);
    this.#cookieAuthSignOut = async () => {
      stopRefresh();
      const appBaseUrl = await ctx.discoveryApi.getBaseUrl("app");
      try {
        await fetch(`${appBaseUrl}/.backstage/auth/v1/cookie`, {
          method: "DELETE",
          credentials: "include"
        });
      } catch {
      }
    };
  }
}

export { AppIdentityProxy };
//# sourceMappingURL=AppIdentityProxy.esm.js.map
