class ApiRegistryBuilder {
  apis = [];
  add(api, impl) {
    this.apis.push([api.id, impl]);
    return impl;
  }
  build() {
    return new ApiRegistry(new Map(this.apis));
  }
}
class ApiRegistry {
  constructor(apis) {
    this.apis = apis;
  }
  static builder() {
    return new ApiRegistryBuilder();
  }
  /**
   * Creates a new ApiRegistry with a list of API implementations.
   *
   * @param apis - A list of pairs mapping an ApiRef to its respective implementation
   */
  static from(apis) {
    return new ApiRegistry(new Map(apis.map(([api, impl]) => [api.id, impl])));
  }
  /**
   * Creates a new ApiRegistry with a single API implementation.
   *
   * @param api - ApiRef for the API to add
   * @param impl - Implementation of the API to add
   */
  static with(api, impl) {
    return new ApiRegistry(/* @__PURE__ */ new Map([[api.id, impl]]));
  }
  /**
   * Returns a new ApiRegistry with the provided API added to the existing ones.
   *
   * @param api - ApiRef for the API to add
   * @param impl - Implementation of the API to add
   */
  with(api, impl) {
    return new ApiRegistry(new Map([...this.apis, [api.id, impl]]));
  }
  get(api) {
    return this.apis.get(api.id);
  }
}

export { ApiRegistry };
//# sourceMappingURL=ApiRegistry.esm.js.map
