{"version":3,"file":"ExternalRouteRef.esm.js","sources":["../../../../../frontend-plugin-api/src/routing/ExternalRouteRef.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RouteRefImpl } from './RouteRef';\nimport { describeParentCallSite } from './describeParentCallSite';\nimport { AnyRouteRefParams } from './types';\n\n/**\n * Route descriptor, to be later bound to a concrete route by the app. Used to implement cross-plugin route references.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @public\n */\nexport interface ExternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n> {\n  readonly $$type: '@backstage/ExternalRouteRef';\n  readonly T: TParams;\n}\n\n/** @internal */\nexport interface InternalExternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n> extends ExternalRouteRef<TParams> {\n  readonly version: 'v1';\n  getParams(): string[];\n  getDescription(): string;\n  getDefaultTarget(): string | undefined;\n\n  setId(id: string): void;\n}\n\n/** @internal */\nexport function toInternalExternalRouteRef<\n  TParams extends AnyRouteRefParams = AnyRouteRefParams,\n>(resource: ExternalRouteRef<TParams>): InternalExternalRouteRef<TParams> {\n  const r = resource as InternalExternalRouteRef<TParams>;\n  if (r.$$type !== '@backstage/ExternalRouteRef') {\n    throw new Error(`Invalid ExternalRouteRef, bad type '${r.$$type}'`);\n  }\n\n  return r;\n}\n\n/** @internal */\nexport function isExternalRouteRef(opaque: {\n  $$type: string;\n}): opaque is ExternalRouteRef {\n  return opaque.$$type === '@backstage/ExternalRouteRef';\n}\n\n/** @internal */\nclass ExternalRouteRefImpl\n  extends RouteRefImpl\n  implements InternalExternalRouteRef\n{\n  readonly $$type = '@backstage/ExternalRouteRef' as any;\n\n  constructor(\n    readonly params: string[] = [],\n    readonly defaultTarget: string | undefined,\n    creationSite: string,\n  ) {\n    super(params, creationSite);\n  }\n\n  getDefaultTarget() {\n    return this.defaultTarget;\n  }\n}\n\n/**\n * Creates a route descriptor, to be later bound to a concrete route by the app. Used to implement cross-plugin route references.\n *\n * @remarks\n *\n * See {@link https://backstage.io/docs/plugins/composability#routing-system}.\n *\n * @param options - Description of the route reference to be created.\n * @public\n */\nexport function createExternalRouteRef<\n  TParams extends { [param in TParamKeys]: string } | undefined = undefined,\n  TParamKeys extends string = string,\n>(options?: {\n  /**\n   * The parameters that will be provided to the external route reference.\n   */\n  readonly params?: string extends TParamKeys\n    ? (keyof TParams)[]\n    : TParamKeys[];\n\n  /**\n   * The route (typically in another plugin) that this should map to by default.\n   *\n   * The string is expected to be on the standard `<plugin id>.<route id>` form,\n   * for example `techdocs.docRoot`.\n   */\n  defaultTarget?: string;\n}): ExternalRouteRef<\n  keyof TParams extends never\n    ? undefined\n    : string extends TParamKeys\n    ? TParams\n    : { [param in TParamKeys]: string }\n> {\n  return new ExternalRouteRefImpl(\n    options?.params as string[] | undefined,\n    options?.defaultTarget,\n    describeParentCallSite(),\n  );\n}\n"],"names":[],"mappings":"AAiDO,SAAS,2BAEd,QAAwE,EAAA;AACxE,EAAA,MAAM,CAAI,GAAA,QAAA;AACV,EAAI,IAAA,CAAA,CAAE,WAAW,6BAA+B,EAAA;AAC9C,IAAA,MAAM,IAAI,KAAA,CAAM,CAAuC,oCAAA,EAAA,CAAA,CAAE,MAAM,CAAG,CAAA,CAAA,CAAA;AAAA;AAGpE,EAAO,OAAA,CAAA;AACT;AAGO,SAAS,mBAAmB,MAEJ,EAAA;AAC7B,EAAA,OAAO,OAAO,MAAW,KAAA,6BAAA;AAC3B;;;;"}