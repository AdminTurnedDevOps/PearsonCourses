import mapValues from 'lodash/mapValues';
import { toInternalExtension } from '../frontend-plugin-api/src/wiring/resolveExtensionDefinition.esm.js';

function resolveV1InputDataMap(dataMap, attachment, inputName) {
  return mapValues(dataMap, (ref) => {
    const value = attachment.instance?.getData(ref);
    if (value === void 0 && !ref.config.optional) {
      const expected = Object.values(dataMap).filter((r) => !r.config.optional).map((r) => `'${r.id}'`).join(", ");
      const provided = [...attachment.instance?.getDataRefs() ?? []].map((r) => `'${r.id}'`).join(", ");
      throw new Error(
        `extension '${attachment.spec.id}' could not be attached because its output data (${provided}) does not match what the input '${inputName}' requires (${expected})`
      );
    }
    return value;
  });
}
function resolveInputDataContainer(extensionData, attachment, inputName) {
  const dataMap = /* @__PURE__ */ new Map();
  for (const ref of extensionData) {
    if (dataMap.has(ref.id)) {
      throw new Error(`Unexpected duplicate input data '${ref.id}'`);
    }
    const value = attachment.instance?.getData(ref);
    if (value === void 0 && !ref.config.optional) {
      const expected = extensionData.filter((r) => !r.config.optional).map((r) => `'${r.id}'`).join(", ");
      const provided = [...attachment.instance?.getDataRefs() ?? []].map((r) => `'${r.id}'`).join(", ");
      throw new Error(
        `extension '${attachment.spec.id}' could not be attached because its output data (${provided}) does not match what the input '${inputName}' requires (${expected})`
      );
    }
    dataMap.set(ref.id, value);
  }
  return {
    node: attachment,
    get(ref) {
      return dataMap.get(ref.id);
    },
    *[Symbol.iterator]() {
      for (const [id, value] of dataMap) {
        yield {
          $$type: "@backstage/ExtensionDataValue",
          id,
          value
        };
      }
    }
  };
}
function reportUndeclaredAttachments(id, inputMap, attachments) {
  const undeclaredAttachments = Array.from(attachments.entries()).filter(
    ([inputName]) => inputMap[inputName] === void 0
  );
  const inputNames = Object.keys(inputMap);
  for (const [name, nodes] of undeclaredAttachments) {
    const pl = nodes.length > 1;
    console.warn(
      [
        `The extension${pl ? "s" : ""} '${nodes.map((n) => n.spec.id).join("', '")}' ${pl ? "are" : "is"}`,
        `attached to the input '${name}' of the extension '${id}', but it`,
        inputNames.length === 0 ? "has no inputs" : `has no such input (candidates are '${inputNames.join("', '")}')`
      ].join(" ")
    );
  }
}
function resolveV1Inputs(inputMap, attachments) {
  return mapValues(inputMap, (input, inputName) => {
    const attachedNodes = attachments.get(inputName) ?? [];
    if (input.config.singleton) {
      if (attachedNodes.length > 1) {
        const attachedNodeIds = attachedNodes.map((e) => e.spec.id);
        throw Error(
          `expected ${input.config.optional ? "at most" : "exactly"} one '${inputName}' input but received multiple: '${attachedNodeIds.join(
            "', '"
          )}'`
        );
      } else if (attachedNodes.length === 0) {
        if (input.config.optional) {
          return void 0;
        }
        throw Error(`input '${inputName}' is required but was not received`);
      }
      return {
        node: attachedNodes[0],
        output: resolveV1InputDataMap(
          input.extensionData,
          attachedNodes[0],
          inputName
        )
      };
    }
    return attachedNodes.map((attachment) => ({
      node: attachment,
      output: resolveV1InputDataMap(input.extensionData, attachment, inputName)
    }));
  });
}
function resolveV2Inputs(inputMap, attachments) {
  return mapValues(inputMap, (input, inputName) => {
    const attachedNodes = attachments.get(inputName) ?? [];
    if (input.config.singleton) {
      if (attachedNodes.length > 1) {
        const attachedNodeIds = attachedNodes.map((e) => e.spec.id);
        throw Error(
          `expected ${input.config.optional ? "at most" : "exactly"} one '${inputName}' input but received multiple: '${attachedNodeIds.join(
            "', '"
          )}'`
        );
      } else if (attachedNodes.length === 0) {
        if (input.config.optional) {
          return void 0;
        }
        throw Error(`input '${inputName}' is required but was not received`);
      }
      return resolveInputDataContainer(
        input.extensionData,
        attachedNodes[0],
        inputName
      );
    }
    return attachedNodes.map(
      (attachment) => resolveInputDataContainer(input.extensionData, attachment, inputName)
    );
  });
}
function createAppNodeInstance(options) {
  const { node, apis, attachments } = options;
  const { id, extension, config } = node.spec;
  const extensionData = /* @__PURE__ */ new Map();
  const extensionDataRefs = /* @__PURE__ */ new Set();
  let parsedConfig;
  try {
    parsedConfig = extension.configSchema?.parse(config ?? {});
  } catch (e) {
    throw new Error(
      `Invalid configuration for extension '${id}'; caused by ${e}`
    );
  }
  try {
    const internalExtension = toInternalExtension(extension);
    if (process.env.NODE_ENV !== "production") {
      reportUndeclaredAttachments(id, internalExtension.inputs, attachments);
    }
    if (internalExtension.version === "v1") {
      const namedOutputs = internalExtension.factory({
        node,
        apis,
        config: parsedConfig,
        inputs: resolveV1Inputs(internalExtension.inputs, attachments)
      });
      for (const [name, output] of Object.entries(namedOutputs)) {
        const ref = internalExtension.output[name];
        if (!ref) {
          throw new Error(`unknown output provided via '${name}'`);
        }
        if (extensionData.has(ref.id)) {
          throw new Error(
            `duplicate extension data '${ref.id}' received via output '${name}'`
          );
        }
        extensionData.set(ref.id, output);
        extensionDataRefs.add(ref);
      }
    } else if (internalExtension.version === "v2") {
      const outputDataValues = internalExtension.factory({
        node,
        apis,
        config: parsedConfig,
        inputs: resolveV2Inputs(internalExtension.inputs, attachments)
      });
      const outputDataMap = /* @__PURE__ */ new Map();
      for (const value of outputDataValues) {
        if (outputDataMap.has(value.id)) {
          throw new Error(`duplicate extension data output '${value.id}'`);
        }
        outputDataMap.set(value.id, value.value);
      }
      for (const ref of internalExtension.output) {
        const value = outputDataMap.get(ref.id);
        outputDataMap.delete(ref.id);
        if (value === void 0) {
          if (!ref.config.optional) {
            throw new Error(
              `missing required extension data output '${ref.id}'`
            );
          }
        } else {
          extensionData.set(ref.id, value);
          extensionDataRefs.add(ref);
        }
      }
      if (outputDataMap.size > 0) {
        throw new Error(
          `unexpected output '${Array.from(outputDataMap.keys()).join(
            "', '"
          )}'`
        );
      }
    } else {
      throw new Error(
        `unexpected extension version '${internalExtension.version}'`
      );
    }
  } catch (e) {
    throw new Error(
      `Failed to instantiate extension '${id}'${e.name === "Error" ? `, ${e.message}` : `; caused by ${e.stack}`}`
    );
  }
  return {
    getDataRefs() {
      return extensionDataRefs.values();
    },
    getData(ref) {
      return extensionData.get(ref.id);
    }
  };
}
function instantiateAppNodeTree(rootNode, apis) {
  function createInstance(node) {
    if (node.instance) {
      return node.instance;
    }
    if (node.spec.disabled) {
      return void 0;
    }
    const instantiatedAttachments = /* @__PURE__ */ new Map();
    for (const [input, children] of node.edges.attachments) {
      const instantiatedChildren = children.flatMap((child) => {
        const childInstance = createInstance(child);
        if (!childInstance) {
          return [];
        }
        return [child];
      });
      if (instantiatedChildren.length > 0) {
        instantiatedAttachments.set(input, instantiatedChildren);
      }
    }
    node.instance = createAppNodeInstance({
      node,
      apis,
      attachments: instantiatedAttachments
    });
    return node.instance;
  }
  createInstance(rootNode);
}

export { createAppNodeInstance, instantiateAppNodeTree };
//# sourceMappingURL=instantiateAppNodeTree.esm.js.map
