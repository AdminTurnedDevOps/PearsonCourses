{"version":3,"file":"resolveAppTree.esm.js","sources":["../../src/tree/resolveAppTree.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppTree,\n  AppNode,\n  AppNodeInstance,\n  AppNodeSpec,\n} from '@backstage/frontend-plugin-api';\n\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalExtension } from '../../../frontend-plugin-api/src/wiring/resolveExtensionDefinition';\n\nfunction indent(str: string) {\n  return str.replace(/^/gm, '  ');\n}\n\n/** @internal */\nclass SerializableAppNode implements AppNode {\n  public readonly spec: AppNodeSpec;\n  public readonly edges = {\n    attachedTo: undefined as { node: AppNode; input: string } | undefined,\n    attachments: new Map<string, SerializableAppNode[]>(),\n  };\n  public readonly instance?: AppNodeInstance;\n\n  constructor(spec: AppNodeSpec) {\n    this.spec = spec;\n  }\n\n  setParent(parent: SerializableAppNode, input: string) {\n    this.edges.attachedTo = { node: parent, input };\n\n    const parentInputEdges = parent.edges.attachments.get(input);\n    if (parentInputEdges) {\n      parentInputEdges.push(this);\n    } else {\n      parent.edges.attachments.set(input, [this]);\n    }\n  }\n\n  toJSON() {\n    const dataRefs = this.instance && [...this.instance.getDataRefs()];\n    return {\n      id: this.spec.id,\n      output:\n        dataRefs && dataRefs.length > 0\n          ? dataRefs.map(ref => ref.id)\n          : undefined,\n      attachments:\n        this.edges.attachments.size > 0\n          ? Object.fromEntries(this.edges.attachments)\n          : undefined,\n    };\n  }\n\n  toString(): string {\n    const dataRefs = this.instance && [...this.instance.getDataRefs()];\n    const out =\n      dataRefs && dataRefs.length > 0\n        ? ` out=[${[...dataRefs].map(r => r.id).join(', ')}]`\n        : '';\n\n    if (this.edges.attachments.size === 0) {\n      return `<${this.spec.id}${out} />`;\n    }\n\n    return [\n      `<${this.spec.id}${out}>`,\n      ...[...this.edges.attachments.entries()].map(([k, v]) =>\n        indent([`${k} [`, ...v.map(e => indent(e.toString())), `]`].join('\\n')),\n      ),\n      `</${this.spec.id}>`,\n    ].join('\\n');\n  }\n}\n\nfunction makeRedirectKey(attachTo: { id: string; input: string }) {\n  return `${attachTo.id}%${attachTo.input}`;\n}\n\nconst isValidAttachmentPoint = (\n  attachTo: { id: string; input: string },\n  nodes: Map<string, SerializableAppNode>,\n) => {\n  if (!nodes.has(attachTo.id)) {\n    return false;\n  }\n\n  return (\n    attachTo.input in\n    toInternalExtension(nodes.get(attachTo.id)!.spec.extension).inputs\n  );\n};\n\n/**\n * Build the app tree by iterating through all node specs and constructing the app\n * tree with all attachments in the same order as they appear in the input specs array.\n * @internal\n */\nexport function resolveAppTree(\n  rootNodeId: string,\n  specs: AppNodeSpec[],\n): AppTree {\n  const nodes = new Map<string, SerializableAppNode>();\n\n  const redirectTargetsByKey = new Map<string, { id: string; input: string }>();\n\n  for (const spec of specs) {\n    // The main check with a more helpful error message happens in resolveAppNodeSpecs\n    if (nodes.has(spec.id)) {\n      throw new Error(`Unexpected duplicate extension id '${spec.id}'`);\n    }\n\n    const node = new SerializableAppNode(spec);\n    nodes.set(spec.id, node);\n\n    const internal = toInternalExtension(spec.extension);\n    for (const [inputName, input] of Object.entries(internal.inputs)) {\n      if (input.replaces) {\n        for (const replace of input.replaces) {\n          const key = makeRedirectKey(replace);\n          if (redirectTargetsByKey.has(key)) {\n            throw new Error(\n              `Duplicate redirect target for input '${inputName}' in extension '${spec.id}'`,\n            );\n          }\n          redirectTargetsByKey.set(key, { id: spec.id, input: inputName });\n        }\n      }\n    }\n  }\n\n  const orphans = new Array<SerializableAppNode>();\n\n  // A node with the provided rootNodeId must be found in the tree, and it must not be attached to anything\n  let rootNode: AppNode | undefined = undefined;\n\n  for (const node of nodes.values()) {\n    const spec = node.spec;\n\n    // TODO: For now we simply ignore the attachTo spec of the root node, but it'd be cleaner if we could avoid defining it\n    if (spec.id === rootNodeId) {\n      rootNode = node;\n    } else {\n      let attachTo = node.spec.attachTo;\n\n      if (!isValidAttachmentPoint(attachTo, nodes)) {\n        attachTo =\n          redirectTargetsByKey.get(makeRedirectKey(attachTo)) ?? attachTo;\n      }\n\n      const parent = nodes.get(attachTo.id);\n      if (parent) {\n        node.setParent(parent, attachTo.input);\n      } else {\n        orphans.push(node);\n      }\n    }\n  }\n\n  if (!rootNode) {\n    throw new Error(`No root node with id '${rootNodeId}' found in app tree`);\n  }\n\n  return {\n    root: rootNode,\n    nodes,\n    orphans,\n  };\n}\n"],"names":[],"mappings":"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"}