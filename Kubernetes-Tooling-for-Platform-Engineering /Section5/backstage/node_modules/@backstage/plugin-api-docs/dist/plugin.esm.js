import '@backstage/plugin-catalog-react';
import '@material-ui/lab/Alert';
import 'react';
import { apiDocsConfigRef } from './config.esm.js';
import '@backstage/core-components';
import { createPlugin, createApiFactory, createRoutableExtension, createComponentExtension } from '@backstage/core-plugin-api';
import { defaultDefinitionWidgets } from './components/ApiDefinitionCard/ApiDefinitionWidget.esm.js';
import '@material-ui/core/Typography';
import { rootRoute, registerComponentRouteRef } from './routes.esm.js';

const apiDocsPlugin = createPlugin({
  id: "api-docs",
  routes: {
    root: rootRoute
  },
  apis: [
    createApiFactory({
      api: apiDocsConfigRef,
      deps: {},
      factory: () => {
        const definitionWidgets = defaultDefinitionWidgets();
        return {
          getApiDefinitionWidget: (apiEntity) => {
            return definitionWidgets.find((d) => d.type === apiEntity.spec.type);
          }
        };
      }
    })
  ],
  externalRoutes: {
    registerApi: registerComponentRouteRef
  }
});
const ApiExplorerPage = apiDocsPlugin.provide(
  createRoutableExtension({
    name: "ApiExplorerPage",
    component: () => import('./components/ApiExplorerPage/index.esm.js').then((m) => m.ApiExplorerIndexPage),
    mountPoint: rootRoute
  })
);
const EntityApiDefinitionCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityApiDefinitionCard",
    component: {
      lazy: () => import('./components/ApiDefinitionCard/index.esm.js').then((m) => m.ApiDefinitionCard)
    }
  })
);
const EntityConsumedApisCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityConsumedApisCard",
    component: {
      lazy: () => import('./components/ApisCards/index.esm.js').then((m) => m.ConsumedApisCard)
    }
  })
);
const EntityConsumingComponentsCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityConsumingComponentsCard",
    component: {
      lazy: () => import('./components/ComponentsCards/index.esm.js').then(
        (m) => m.ConsumingComponentsCard
      )
    }
  })
);
const EntityProvidedApisCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityProvidedApisCard",
    component: {
      lazy: () => import('./components/ApisCards/index.esm.js').then((m) => m.ProvidedApisCard)
    }
  })
);
const EntityProvidingComponentsCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityProvidingComponentsCard",
    component: {
      lazy: () => import('./components/ComponentsCards/index.esm.js').then(
        (m) => m.ProvidingComponentsCard
      )
    }
  })
);
const EntityHasApisCard = apiDocsPlugin.provide(
  createComponentExtension({
    name: "EntityHasApisCard",
    component: {
      lazy: () => import('./components/ApisCards/index.esm.js').then((m) => m.HasApisCard)
    }
  })
);

export { ApiExplorerPage, EntityApiDefinitionCard, EntityConsumedApisCard, EntityConsumingComponentsCard, EntityHasApisCard, EntityProvidedApisCard, EntityProvidingComponentsCard, apiDocsPlugin };
//# sourceMappingURL=plugin.esm.js.map
