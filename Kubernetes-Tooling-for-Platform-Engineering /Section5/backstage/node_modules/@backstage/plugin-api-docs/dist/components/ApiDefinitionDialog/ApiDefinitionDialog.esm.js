import { useApi } from '@backstage/core-plugin-api';
import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import Tab from '@material-ui/core/Tab';
import Tabs from '@material-ui/core/Tabs';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import React, { useEffect } from 'react';
import { apiDocsConfigRef } from '../../config.esm.js';
import { PlainApiDefinitionWidget } from '../PlainApiDefinitionWidget/PlainApiDefinitionWidget.esm.js';

const useStyles = makeStyles((theme) => ({
  fullHeightDialog: {
    height: "calc(100% - 64px)"
  },
  root: {
    display: "flex",
    flexGrow: 1,
    width: "100%",
    height: "100%"
  },
  tabs: {
    borderRight: `1px solid ${theme.palette.divider}`,
    flexShrink: 0
  },
  tabContents: {
    flexGrow: 1,
    overflowX: "auto"
  },
  title: {
    color: theme.palette.text.primary,
    wordBreak: "break-word",
    fontSize: theme.typography.h3.fontSize,
    marginBottom: 0
  },
  type: {
    textTransform: "uppercase",
    fontSize: 11,
    opacity: 0.8,
    marginBottom: theme.spacing(1),
    color: theme.palette.text.primary
  }
}));
function TabPanel(props) {
  const { children, value, index, ...other } = props;
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(
    "div",
    {
      role: "tabpanel",
      hidden: value !== index,
      id: `vertical-tabpanel-${index}`,
      "aria-labelledby": `vertical-tab-${index}`,
      className: classes.tabContents,
      ...other
    },
    value === index && /* @__PURE__ */ React.createElement(Box, { pl: 3, pr: 3 }, children)
  );
}
function a11yProps(index) {
  return {
    id: `vertical-tab-${index}`,
    "aria-controls": `vertical-tabpanel-${index}`
  };
}
function ApiDefinitionDialog(props) {
  const { open, entity, onClose } = props;
  const [activeTab, setActiveTab] = React.useState(0);
  const classes = useStyles();
  useEffect(() => {
    setActiveTab(0);
  }, [open]);
  const config = useApi(apiDocsConfigRef);
  const definitionWidget = config.getApiDefinitionWidget(entity);
  let tabIndex = 0;
  let tabPanelIndex = 0;
  return /* @__PURE__ */ React.createElement(
    Dialog,
    {
      fullWidth: true,
      maxWidth: "xl",
      open,
      onClose,
      "aria-labelledby": "api-definition-dialog-title",
      PaperProps: { className: classes.fullHeightDialog }
    },
    /* @__PURE__ */ React.createElement(DialogTitle, { id: "api-definition-dialog-title", disableTypography: true }, /* @__PURE__ */ React.createElement(Typography, { className: classes.type }, "API - ", definitionWidget?.title ?? "Raw"), /* @__PURE__ */ React.createElement(Typography, { className: classes.title, variant: "h1" }, entity.metadata.title ?? entity.metadata.name)),
    /* @__PURE__ */ React.createElement(DialogContent, { dividers: true, className: classes.root }, /* @__PURE__ */ React.createElement(
      Tabs,
      {
        orientation: "vertical",
        variant: "scrollable",
        value: activeTab,
        onChange: (_, newValue) => setActiveTab(newValue),
        "aria-label": "API definition options",
        className: classes.tabs
      },
      definitionWidget ? /* @__PURE__ */ React.createElement(Tab, { label: definitionWidget.title, ...a11yProps(tabIndex++) }) : null,
      /* @__PURE__ */ React.createElement(Tab, { label: "Raw", ...a11yProps(tabIndex++) })
    ), definitionWidget ? /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: tabPanelIndex++ }, definitionWidget.component(entity.spec.definition)) : null, /* @__PURE__ */ React.createElement(TabPanel, { value: activeTab, index: tabPanelIndex++ }, /* @__PURE__ */ React.createElement(
      PlainApiDefinitionWidget,
      {
        definition: entity.spec.definition,
        language: definitionWidget?.rawLanguage ?? entity.spec.type
      }
    ))),
    /* @__PURE__ */ React.createElement(DialogActions, null, /* @__PURE__ */ React.createElement(Button, { onClick: onClose, color: "primary" }, "Close"))
  );
}

export { ApiDefinitionDialog };
//# sourceMappingURL=ApiDefinitionDialog.esm.js.map
