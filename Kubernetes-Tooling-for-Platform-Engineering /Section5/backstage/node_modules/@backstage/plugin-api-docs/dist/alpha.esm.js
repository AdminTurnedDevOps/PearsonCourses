import React from 'react';
import Grid from '@material-ui/core/Grid';
import { NavItemBlueprint, ApiBlueprint, createApiFactory, PageBlueprint, createFrontendPlugin } from '@backstage/frontend-plugin-api';
import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { RELATION_HAS_PART, parseEntityRef } from '@backstage/catalog-model';
import '@backstage/plugin-catalog-react';
import '@material-ui/lab/Alert';
import { apiDocsConfigRef } from './config.esm.js';
import { AppIcon } from '@backstage/core-components';
import '@backstage/core-plugin-api';
import { defaultDefinitionWidgets } from './components/ApiDefinitionCard/ApiDefinitionWidget.esm.js';
import '@material-ui/core/Typography';
import { rootRoute, registerComponentRouteRef } from './routes.esm.js';
import { EntityCardBlueprint, EntityContentBlueprint } from '@backstage/plugin-catalog-react/alpha';

const apiDocsNavItem = NavItemBlueprint.make({
  params: {
    title: "APIs",
    routeRef: convertLegacyRouteRef(rootRoute),
    icon: () => compatWrapper(/* @__PURE__ */ React.createElement(AppIcon, { id: "kind:api" }))
  }
});
const apiDocsConfigApi = ApiBlueprint.make({
  name: "config",
  params: {
    factory: createApiFactory({
      api: apiDocsConfigRef,
      deps: {},
      factory: () => {
        const definitionWidgets = defaultDefinitionWidgets();
        return {
          getApiDefinitionWidget: (apiEntity) => {
            return definitionWidgets.find((d) => d.type === apiEntity.spec.type);
          }
        };
      }
    })
  }
});
const apiDocsExplorerPage = PageBlueprint.makeWithOverrides({
  config: {
    schema: {
      // Ommiting columns and actions for now as their types are too complex to map to zod
      initiallySelectedFilter: (z) => z.enum(["owned", "starred", "all"]).optional()
    }
  },
  factory(originalFactory, { config }) {
    return originalFactory({
      defaultPath: "/api-docs",
      routeRef: convertLegacyRouteRef(rootRoute),
      loader: () => import('./components/ApiExplorerPage/index.esm.js').then(
        (m) => compatWrapper(
          /* @__PURE__ */ React.createElement(
            m.ApiExplorerIndexPage,
            {
              initiallySelectedFilter: config.initiallySelectedFilter
            }
          )
        )
      )
    });
  }
});
const apiDocsHasApisEntityCard = EntityCardBlueprint.make({
  name: "has-apis",
  params: {
    // Ommiting configSchema for now
    // We are skipping variants and columns are too complex to map to zod
    // See: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
    filter: (entity) => {
      return entity.kind === "Component" && entity.relations?.some(
        ({ type, targetRef }) => type.toLocaleLowerCase("en-US") === RELATION_HAS_PART && parseEntityRef(targetRef).kind === "API"
      );
    },
    loader: () => import('./components/ApisCards/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.HasApisCard, null))
    )
  }
});
const apiDocsDefinitionEntityCard = EntityCardBlueprint.make({
  name: "definition",
  params: {
    filter: "kind:api",
    loader: () => import('./components/ApiDefinitionCard/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ApiDefinitionCard, null))
    )
  }
});
const apiDocsConsumedApisEntityCard = EntityCardBlueprint.make({
  name: "consumed-apis",
  params: {
    // Ommiting configSchema for now
    // We are skipping variants and columns are too complex to map to zod
    // See: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
    filter: "kind:component",
    loader: () => import('./components/ApisCards/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ConsumedApisCard, null))
    )
  }
});
const apiDocsProvidedApisEntityCard = EntityCardBlueprint.make({
  name: "provided-apis",
  params: {
    // Ommiting configSchema for now
    // We are skipping variants and columns are too complex to map to zod
    // See: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
    filter: "kind:component",
    loader: () => import('./components/ApisCards/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ProvidedApisCard, null))
    )
  }
});
const apiDocsConsumingComponentsEntityCard = EntityCardBlueprint.make({
  name: "consuming-components",
  params: {
    // Ommiting configSchema for now
    // We are skipping variants
    // See: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
    filter: "kind:api",
    loader: () => import('./components/ComponentsCards/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ConsumingComponentsCard, null))
    )
  }
});
const apiDocsProvidingComponentsEntityCard = EntityCardBlueprint.make({
  name: "providing-components",
  params: {
    // Ommiting configSchema for now
    // We are skipping variants
    // See: https://github.com/backstage/backstage/pull/22619#discussion_r1477333252
    filter: "kind:api",
    loader: () => import('./components/ComponentsCards/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ProvidingComponentsCard, null))
    )
  }
});
const apiDocsDefinitionEntityContent = EntityContentBlueprint.make({
  name: "definition",
  params: {
    defaultPath: "/defintion",
    defaultTitle: "Definition",
    filter: "kind:api",
    loader: async () => import('./components/ApiDefinitionCard/index.esm.js').then(
      (m) => compatWrapper(
        /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 3 }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(m.ApiDefinitionCard, null)))
      )
    )
  }
});
const apiDocsApisEntityContent = EntityContentBlueprint.make({
  name: "apis",
  params: {
    defaultPath: "/apis",
    defaultTitle: "APIs",
    filter: "kind:component",
    loader: async () => import('./components/ApisCards/index.esm.js').then(
      (m) => compatWrapper(
        /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 3, alignItems: "stretch" }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(m.ProvidedApisCard, null)), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(m.ConsumedApisCard, null)))
      )
    )
  }
});
var alpha = createFrontendPlugin({
  id: "api-docs",
  routes: {
    root: convertLegacyRouteRef(rootRoute)
  },
  externalRoutes: {
    registerApi: convertLegacyRouteRef(registerComponentRouteRef)
  },
  extensions: [
    apiDocsNavItem,
    apiDocsConfigApi,
    apiDocsExplorerPage,
    apiDocsHasApisEntityCard,
    apiDocsDefinitionEntityCard,
    apiDocsProvidedApisEntityCard,
    apiDocsConsumedApisEntityCard,
    apiDocsConsumingComponentsEntityCard,
    apiDocsProvidingComponentsEntityCard,
    apiDocsDefinitionEntityContent,
    apiDocsApisEntityContent
  ]
});

export { alpha as default };
//# sourceMappingURL=alpha.esm.js.map
