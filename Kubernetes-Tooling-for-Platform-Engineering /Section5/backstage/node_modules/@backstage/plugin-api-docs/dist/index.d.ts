/// <reference types="react" />
import * as React from 'react';
import React__default from 'react';
import * as _backstage_core_components from '@backstage/core-components';
import { TableColumn, TableProps, InfoCardVariants, TableOptions } from '@backstage/core-components';
import { CatalogTableRow } from '@backstage/plugin-catalog';
import { UserListFilterKind, EntityOwnerPickerProps, EntityListPagination } from '@backstage/plugin-catalog-react';
import * as _backstage_catalog_model from '@backstage/catalog-model';
import { ApiEntity, ComponentEntity } from '@backstage/catalog-model';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';

/**
 * DefaultApiExplorerPageProps
 * @public
 */
type DefaultApiExplorerPageProps = {
    initiallySelectedFilter?: UserListFilterKind;
    columns?: TableColumn<CatalogTableRow>[];
    actions?: TableProps<CatalogTableRow>['actions'];
    ownerPickerMode?: EntityOwnerPickerProps['mode'];
    pagination?: EntityListPagination;
};
/**
 * DefaultApiExplorerPage
 * @public
 */
declare const DefaultApiExplorerPage: (props: DefaultApiExplorerPageProps) => React__default.JSX.Element;

/**
 * ApiExplorerPage
 * @public
 */
declare const ApiExplorerPage$1: (props: DefaultApiExplorerPageProps) => React__default.JSX.Element;

/** @public */
declare const ApiDefinitionCard: () => React__default.JSX.Element;

/** @public */
type ApiDefinitionWidget = {
    type: string;
    title: string;
    component: (definition: string) => React__default.ReactElement;
    rawLanguage?: string;
};
/** @public */
declare function defaultDefinitionWidgets(): ApiDefinitionWidget[];

/**
 * @public
 */
declare const ApiTypeTitle: (props: {
    apiEntity: ApiEntity;
}) => React__default.JSX.Element;

/**
 * A dialog that lets users inspect the API definition.
 *
 * @public
 */
declare function ApiDefinitionDialog(props: {
    open: boolean;
    entity: ApiEntity;
    onClose: () => void;
}): React__default.JSX.Element;

/**
 * @public
 */
declare const ConsumedApisCard: (props: {
    variant?: InfoCardVariants;
    title?: string;
    columns?: TableColumn<ApiEntity>[];
    tableOptions?: TableOptions;
}) => React__default.JSX.Element;

/**
 * @public
 */
declare const HasApisCard: (props: {
    variant?: InfoCardVariants;
    title?: string;
    columns?: TableColumn<ApiEntity>[];
    tableOptions?: TableOptions;
}) => React__default.JSX.Element;

/**
 * @public
 */
declare const ProvidedApisCard: (props: {
    variant?: InfoCardVariants;
    title?: string;
    columns?: TableColumn<ApiEntity>[];
    tableOptions?: TableOptions;
}) => React__default.JSX.Element;

/** @public */
type AsyncApiResolver = {
    schema: string;
    order: number;
    canRead: boolean;
    read(uri: any): Promise<string>;
};

/** @public */
type AsyncApiDefinitionWidgetProps = {
    definition: string;
    resolvers?: AsyncApiResolver[];
};
/** @public */
declare const AsyncApiDefinitionWidget: (props: AsyncApiDefinitionWidgetProps) => React__default.JSX.Element;

/**
 * @public
 */
declare const ConsumingComponentsCard: (props: {
    variant?: InfoCardVariants;
    columns?: TableColumn<ComponentEntity>[];
}) => React__default.JSX.Element;

/** @public */
declare const ProvidingComponentsCard: (props: {
    variant?: InfoCardVariants;
    columns?: TableColumn<ComponentEntity>[];
}) => React__default.JSX.Element;

/** @public */
type GraphQlDefinitionWidgetProps = {
    definition: string;
};
/** @public */
declare const GraphQlDefinitionWidget: (props: GraphQlDefinitionWidgetProps) => React__default.JSX.Element;

/** @public */
type OpenApiDefinitionWidgetProps = {
    definition: string;
    requestInterceptor?: (req: any) => any | Promise<any>;
    supportedSubmitMethods?: string[];
};
/** @public */
declare const OpenApiDefinitionWidget: (props: OpenApiDefinitionWidgetProps) => React__default.JSX.Element;

/** @public */
type PlainApiDefinitionWidgetProps = {
    definition: any;
    language: string;
};
/** @public */
declare const PlainApiDefinitionWidget: (props: PlainApiDefinitionWidgetProps) => React__default.JSX.Element;

/** @public */
type TrpcApiDefinitionWidgetProps = {
    definition: string;
};
/** @public */
declare const TrpcApiDefinitionWidget: (props: TrpcApiDefinitionWidgetProps) => React__default.JSX.Element;

/** @public */
declare const apiDocsConfigRef: _backstage_core_plugin_api.ApiRef<ApiDocsConfig>;
/** @public */
interface ApiDocsConfig {
    getApiDefinitionWidget: (apiEntity: ApiEntity) => ApiDefinitionWidget | undefined;
}

/** @public */
declare const apiDocsPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    root: _backstage_core_plugin_api.RouteRef<undefined>;
}, {
    registerApi: _backstage_core_plugin_api.ExternalRouteRef<undefined, true>;
}>;
/** @public */
declare const ApiExplorerPage: (props: DefaultApiExplorerPageProps) => React.JSX.Element;
/** @public */
declare const EntityApiDefinitionCard: () => React.JSX.Element;
/** @public */
declare const EntityConsumedApisCard: (props: {
    variant?: _backstage_core_components.InfoCardVariants | undefined;
    title?: string | undefined;
    columns?: _backstage_core_components.TableColumn<ApiEntity>[] | undefined;
    tableOptions?: _backstage_core_components.TableOptions<{}> | undefined;
}) => React.JSX.Element;
/** @public */
declare const EntityConsumingComponentsCard: (props: {
    variant?: _backstage_core_components.InfoCardVariants | undefined;
    columns?: _backstage_core_components.TableColumn<_backstage_catalog_model.ComponentEntity>[] | undefined;
}) => React.JSX.Element;
/** @public */
declare const EntityProvidedApisCard: (props: {
    variant?: _backstage_core_components.InfoCardVariants | undefined;
    title?: string | undefined;
    columns?: _backstage_core_components.TableColumn<ApiEntity>[] | undefined;
    tableOptions?: _backstage_core_components.TableOptions<{}> | undefined;
}) => React.JSX.Element;
/** @public */
declare const EntityProvidingComponentsCard: (props: {
    variant?: _backstage_core_components.InfoCardVariants | undefined;
    columns?: _backstage_core_components.TableColumn<_backstage_catalog_model.ComponentEntity>[] | undefined;
}) => React.JSX.Element;
/** @public */
declare const EntityHasApisCard: (props: {
    variant?: _backstage_core_components.InfoCardVariants | undefined;
    title?: string | undefined;
    columns?: _backstage_core_components.TableColumn<ApiEntity>[] | undefined;
    tableOptions?: _backstage_core_components.TableOptions<{}> | undefined;
}) => React.JSX.Element;

export { ApiDefinitionCard, ApiDefinitionDialog, type ApiDefinitionWidget, type ApiDocsConfig, ApiExplorerPage$1 as ApiExplorerIndexPage, ApiExplorerPage, ApiTypeTitle, AsyncApiDefinitionWidget, type AsyncApiDefinitionWidgetProps, type AsyncApiResolver, ConsumedApisCard, ConsumingComponentsCard, DefaultApiExplorerPage, type DefaultApiExplorerPageProps, EntityApiDefinitionCard, EntityConsumedApisCard, EntityConsumingComponentsCard, EntityHasApisCard, EntityProvidedApisCard, EntityProvidingComponentsCard, GraphQlDefinitionWidget, type GraphQlDefinitionWidgetProps, HasApisCard, OpenApiDefinitionWidget, type OpenApiDefinitionWidgetProps, PlainApiDefinitionWidget, type PlainApiDefinitionWidgetProps, ProvidedApisCard, ProvidingComponentsCard, TrpcApiDefinitionWidget, type TrpcApiDefinitionWidgetProps, apiDocsConfigRef, apiDocsPlugin, defaultDefinitionWidgets, apiDocsPlugin as plugin };
