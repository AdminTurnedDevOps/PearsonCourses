'use strict';

var fs = require('fs-extra');
var path = require('path');
require('yn');
require('webpack');
require('react-dev-utils/FileSizeReporter');
require('react-dev-utils/formatWebpackMessages');
require('chalk');
require('eslint-webpack-plugin');
require('fork-ts-checker-webpack-plugin');
require('html-webpack-plugin');
require('@module-federation/enhanced/webpack');
require('react-dev-utils/ModuleScopePlugin');
require('@pmmmwh/react-refresh-webpack-plugin');
var paths = require('../../lib/paths.cjs.js');
require('../../lib/bundler/optimization.cjs.js');
require('lodash/pickBy');
require('../../lib/run.cjs.js');
require('mini-css-extract-plugin');
require('../../lib/version.cjs.js');
require('@manypkg/get-packages');
require('../../lib/bundler/packageDetection.cjs.js');
var moduleFederation = require('../../lib/bundler/moduleFederation.cjs.js');
var server = require('../../lib/bundler/server.cjs.js');

async function startFrontend(options) {
  const packageJson = await fs.readJson(
    paths.paths.resolveTarget("package.json")
  );
  const waitForExit = await server.serveBundle({
    entry: options.entry,
    checksEnabled: options.checksEnabled,
    configPaths: options.configPaths,
    verifyVersions: options.verifyVersions,
    skipOpenBrowser: options.skipOpenBrowser,
    linkedWorkspace: options.linkedWorkspace,
    moduleFederation: await moduleFederation.getModuleFederationOptions(
      packageJson,
      path.resolve(paths.paths.targetDir),
      options.isModuleFederationRemote
    )
  });
  await waitForExit();
}

exports.startFrontend = startFrontend;
//# sourceMappingURL=startFrontend.cjs.js.map
