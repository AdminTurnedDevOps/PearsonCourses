'use strict';

var packager = require('../../lib/builder/packager.cjs.js');
var types = require('../../lib/builder/types.cjs.js');
var role = require('../../lib/role.cjs.js');
var cliNode = require('@backstage/cli-node');
var paths = require('../../lib/paths.cjs.js');
var buildFrontend = require('./buildFrontend.cjs.js');
var buildBackend = require('./buildBackend.cjs.js');
var urls = require('../../lib/urls.cjs.js');
var chalk = require('chalk');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

async function command(opts) {
  const rspack = process.env.EXPERIMENTAL_RSPACK ? require("@rspack/core") : void 0;
  const role$1 = await role.findRoleFromCommand(opts);
  if (role$1 === "frontend" || role$1 === "backend") {
    const configPaths = opts.config.map((arg) => {
      if (urls.isValidUrl(arg)) {
        return arg;
      }
      return paths.paths.resolveTarget(arg);
    });
    if (role$1 === "frontend") {
      return buildFrontend.buildFrontend({
        targetDir: paths.paths.targetDir,
        configPaths,
        writeStats: Boolean(opts.stats),
        rspack
      });
    }
    return buildBackend.buildBackend({
      targetDir: paths.paths.targetDir,
      configPaths,
      skipBuildDependencies: Boolean(opts.skipBuildDependencies),
      minify: Boolean(opts.minify)
    });
  }
  if (role$1 === "frontend-dynamic-container") {
    console.log(
      chalk__default.default.yellow(
        `\u26A0\uFE0F  WARNING: The 'frontend-dynamic-container' package role is experimental and will receive immediate breaking changes in the future.`
      )
    );
    return buildFrontend.buildFrontend({
      targetDir: paths.paths.targetDir,
      configPaths: [],
      writeStats: Boolean(opts.stats),
      isModuleFederationRemote: true,
      rspack
    });
  }
  const roleInfo = cliNode.PackageRoles.getRoleInfo(role$1);
  const outputs = /* @__PURE__ */ new Set();
  if (roleInfo.output.includes("cjs")) {
    outputs.add(types.Output.cjs);
  }
  if (roleInfo.output.includes("esm")) {
    outputs.add(types.Output.esm);
  }
  if (roleInfo.output.includes("types")) {
    outputs.add(types.Output.types);
  }
  return packager.buildPackage({
    outputs,
    minify: Boolean(opts.minify),
    workspacePackages: await cliNode.PackageGraph.listTargetPackages()
  });
}

exports.command = command;
//# sourceMappingURL=command.cjs.js.map
