'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs-extra');
var paths = require('../lib/paths.cjs.js');
var eslint = require('eslint');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

var lint = async (directories, opts) => {
  const eslint$1 = new eslint.ESLint({
    cwd: paths.paths.targetDir,
    fix: opts.fix,
    extensions: ["js", "jsx", "ts", "tsx", "mjs", "cjs"]
  });
  const results = await eslint$1.lintFiles(
    directories.length ? directories : ["."]
  );
  const maxWarnings = opts.maxWarnings ?? 0;
  const ignoreWarnings = +maxWarnings === -1;
  const failed = results.some((r) => r.errorCount > 0) || !ignoreWarnings && results.reduce((current, next) => current + next.warningCount, 0) > maxWarnings;
  if (opts.fix) {
    await eslint.ESLint.outputFixes(results);
  }
  const formatter = await eslint$1.loadFormatter(opts.format);
  if (opts.format === "eslint-formatter-friendly") {
    process.chdir(paths.paths.targetRoot);
  }
  const resultText = await formatter.format(results);
  if (resultText) {
    if (opts.outputFile) {
      await fs__default.default.writeFile(paths.paths.resolveTarget(opts.outputFile), resultText);
    } else {
      console.log(resultText);
    }
  }
  if (failed) {
    process.exit(1);
  }
};

exports.default = lint;
//# sourceMappingURL=lint.cjs.js.map
