'use strict';

var role = require('../../lib/role.cjs.js');
var startBackend = require('./startBackend.cjs.js');
var startFrontend = require('./startFrontend.cjs.js');

async function command(opts) {
  const role$1 = await role.findRoleFromCommand(opts);
  const options = {
    configPaths: opts.config,
    checksEnabled: Boolean(opts.check),
    linkedWorkspace: opts.link,
    inspectEnabled: opts.inspect,
    inspectBrkEnabled: opts.inspectBrk,
    require: opts.require
  };
  switch (role$1) {
    case "backend":
      return startBackend.startBackend(options);
    case "backend-plugin":
    case "backend-plugin-module":
    case "node-library":
      return startBackend.startBackendPlugin(options);
    case "frontend":
      return startFrontend.startFrontend({
        ...options,
        entry: "src/index",
        verifyVersions: true
      });
    case "web-library":
    case "frontend-plugin":
    case "frontend-plugin-module":
      return startFrontend.startFrontend({ entry: "dev/index", ...options });
    case "frontend-dynamic-container":
      return startFrontend.startFrontend({
        entry: "src/index",
        ...options,
        skipOpenBrowser: true,
        isModuleFederationRemote: true
      });
    default:
      throw new Error(
        `Start command is not supported for package role '${role$1}'`
      );
  }
}

exports.command = command;
//# sourceMappingURL=command.cjs.js.map
