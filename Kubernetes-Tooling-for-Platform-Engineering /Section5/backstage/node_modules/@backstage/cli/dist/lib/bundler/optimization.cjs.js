'use strict';

const { EsbuildPlugin } = require("esbuild-loader");
const optimization = (options) => {
  const { isDev, rspack } = options;
  const MinifyPlugin = rspack ? rspack.SwcJsMinimizerRspackPlugin : EsbuildPlugin;
  return {
    minimize: !isDev,
    minimizer: [
      new MinifyPlugin({
        target: "ES2022",
        format: "iife",
        exclude: "remoteEntry.js"
      }),
      // Avoid iife wrapping of module federation remote entry as it breaks the variable assignment
      new MinifyPlugin({
        target: "ES2022",
        format: void 0,
        include: "remoteEntry.js"
      }),
      rspack && new rspack.LightningCssMinimizerRspackPlugin()
    ],
    runtimeChunk: "single",
    splitChunks: {
      automaticNameDelimiter: "-",
      cacheGroups: {
        default: false,
        // Put all vendor code needed for initial page load in individual files if they're big
        // enough, if they're smaller they end up in the main
        packages: {
          chunks: "initial",
          test(module) {
            return Boolean(
              module?.resource?.match(/[\\/]node_modules[\\/](.*?)([\\/]|$)/)
            );
          },
          name(module) {
            const packageName = module.resource.match(
              /[\\/]node_modules[\\/](.*?)([\\/]|$)/
            )[1];
            return packageName.replace("@", "");
          },
          filename: isDev ? "module-[name].js" : "static/module-[name].[chunkhash:8].js",
          priority: 10,
          minSize: 1e5,
          minChunks: 1,
          ...!rspack && {
            maxAsyncRequests: Infinity,
            maxInitialRequests: Infinity
          }
        },
        // filename is not included in type, but we need it
        // Group together the smallest modules
        vendor: {
          chunks: "initial",
          test: /[\\/]node_modules[\\/]/,
          name: "vendor",
          priority: 5,
          enforce: true
        }
      }
    }
  };
};

exports.optimization = optimization;
//# sourceMappingURL=optimization.cjs.js.map
