'use strict';

var fs = require('fs-extra');
var chalk = require('chalk');
var paths = require('../../paths.cjs.js');
var codeowners = require('../../codeowners/codeowners.cjs.js');
var types = require('../types.cjs.js');
var tasks = require('../../tasks.cjs.js');
var prompts = require('./common/prompts.cjs.js');
var tasks$1 = require('./common/tasks.cjs.js');
var util = require('./common/util.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

const scaffolderModule = types.createFactory({
  name: "scaffolder-module",
  description: "An module exporting custom actions for @backstage/plugin-scaffolder-backend",
  optionsDiscovery: async () => ({
    codeOwnersPath: await codeowners.getCodeownersFilePath(paths.paths.targetRoot)
  }),
  optionsPrompts: [
    {
      type: "input",
      name: "id",
      message: "Enter the name of the module [required]",
      validate: (value) => {
        if (!value) {
          return "Please enter the name of the module";
        } else if (!/^[a-z0-9]+(-[a-z0-9]+)*$/.test(value)) {
          return "Module names must be lowercase and contain only letters, digits, and dashes.";
        }
        return true;
      }
    },
    prompts.ownerPrompt()
  ],
  async create(options, ctx) {
    const { id } = options;
    const slug = `scaffolder-backend-module-${id}`;
    const name = util.resolvePackageName({
      baseName: slug,
      scope: ctx.scope,
      plugin: true
    });
    tasks.Task.log();
    tasks.Task.log(`Creating module ${chalk__default.default.cyan(name)}`);
    const targetDir = ctx.isMonoRepo ? paths.paths.resolveTargetRoot("plugins", slug) : paths.paths.resolveTargetRoot(`backstage-plugin-${slug}`);
    await tasks$1.executePluginPackageTemplate(ctx, {
      targetDir,
      templateName: "scaffolder-module",
      values: {
        id,
        name,
        privatePackage: ctx.private,
        npmRegistry: ctx.npmRegistry,
        pluginVersion: ctx.defaultVersion,
        license: ctx.license
      }
    });
    if (await fs__default.default.pathExists(paths.paths.resolveTargetRoot("packages/backend"))) {
      await tasks.Task.forItem("backend", "adding dependency", async () => {
        await tasks.addPackageDependency(
          paths.paths.resolveTargetRoot("packages/backend/package.json"),
          {
            dependencies: {
              [name]: `^${ctx.defaultVersion}`
            }
          }
        );
      });
    }
    await tasks.addToBackend(name, {
      type: "module"
    });
    if (options.owner) {
      await codeowners.addCodeownersEntry(`/plugins/${slug}`, options.owner);
    }
    await tasks.Task.forCommand("yarn install", { cwd: targetDir, optional: true });
    await tasks.Task.forCommand("yarn lint --fix", {
      cwd: targetDir,
      optional: true
    });
  }
});

exports.scaffolderModule = scaffolderModule;
//# sourceMappingURL=scaffolderModule.cjs.js.map
