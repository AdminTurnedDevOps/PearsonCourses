'use strict';

var path = require('path');
var chalk = require('chalk');
var webpack$1 = require('webpack');
var ESLintPlugin = require('eslint-webpack-plugin');
var ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var webpack = require('@module-federation/enhanced/webpack');
var ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin');
var ReactRefreshPlugin = require('@pmmmwh/react-refresh-webpack-plugin');
var paths = require('../paths.cjs.js');
var fs = require('fs-extra');
var optimization = require('./optimization.cjs.js');
var pickBy = require('lodash/pickBy');
var run = require('../run.cjs.js');
var transforms = require('./transforms.cjs.js');
var version = require('../version.cjs.js');
var yn = require('yn');
var hasReactDomClient = require('./hasReactDomClient.cjs.js');
var linkWorkspaces = require('./linkWorkspaces.cjs.js');
var ConfigInjectingHtmlWebpackPlugin = require('./ConfigInjectingHtmlWebpackPlugin.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);
var webpack__default = /*#__PURE__*/_interopDefaultCompat(webpack$1);
var ESLintPlugin__default = /*#__PURE__*/_interopDefaultCompat(ESLintPlugin);
var ForkTsCheckerWebpackPlugin__default = /*#__PURE__*/_interopDefaultCompat(ForkTsCheckerWebpackPlugin);
var HtmlWebpackPlugin__default = /*#__PURE__*/_interopDefaultCompat(HtmlWebpackPlugin);
var ModuleScopePlugin__default = /*#__PURE__*/_interopDefaultCompat(ModuleScopePlugin);
var ReactRefreshPlugin__default = /*#__PURE__*/_interopDefaultCompat(ReactRefreshPlugin);
var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var pickBy__default = /*#__PURE__*/_interopDefaultCompat(pickBy);
var yn__default = /*#__PURE__*/_interopDefaultCompat(yn);

const BUILD_CACHE_ENV_VAR = "BACKSTAGE_CLI_EXPERIMENTAL_BUILD_CACHE";
function resolveBaseUrl(config, moduleFederation) {
  const baseUrl = config.getOptionalString("app.baseUrl");
  const defaultBaseUrl = moduleFederation?.mode === "remote" ? `http://localhost:${process.env.PORT ?? "3000"}` : "http://localhost:3000";
  try {
    return new URL(baseUrl ?? "/", defaultBaseUrl);
  } catch (error) {
    throw new Error(`Invalid app.baseUrl, ${error}`);
  }
}
function resolveEndpoint(config, moduleFederation) {
  const url = resolveBaseUrl(config, moduleFederation);
  return {
    host: config.getOptionalString("app.listen.host") ?? url.hostname,
    port: config.getOptionalNumber("app.listen.port") ?? Number(url.port) ?? (url.protocol === "https:" ? 443 : 80)
  };
}
async function readBuildInfo() {
  const timestamp = Date.now();
  let commit;
  try {
    commit = await run.runPlain("git", "rev-parse", "HEAD");
  } catch (error) {
  }
  let gitVersion;
  try {
    gitVersion = await run.runPlain("git", "describe", "--always");
  } catch (error) {
  }
  if (commit === void 0 || gitVersion === void 0) {
    console.info(
      "NOTE: Did not compute git version or commit hash, could not execute the git command line utility"
    );
  }
  const { version: packageVersion } = await fs__default.default.readJson(
    paths.paths.resolveTarget("package.json")
  );
  return {
    cliVersion: version.version,
    gitVersion: gitVersion ?? "unknown",
    packageVersion,
    timestamp,
    commit: commit ?? "unknown"
  };
}
async function createConfig(paths, options) {
  const {
    checksEnabled,
    isDev,
    frontendConfig,
    moduleFederation,
    publicSubPath = "",
    rspack
  } = options;
  const { plugins, loaders } = transforms.transforms(options);
  const validBaseUrl = resolveBaseUrl(frontendConfig, moduleFederation);
  let publicPath = validBaseUrl.pathname.replace(/\/$/, "");
  if (publicSubPath) {
    publicPath = `${publicPath}${publicSubPath}`.replace("//", "/");
  }
  if (isDev) {
    const { host, port } = resolveEndpoint(
      options.frontendConfig,
      options.moduleFederation
    );
    if (rspack) {
      const RspackReactRefreshPlugin = require("@rspack/plugin-react-refresh");
      plugins.push(new RspackReactRefreshPlugin());
    } else {
      plugins.push(
        new ReactRefreshPlugin__default.default({
          overlay: {
            sockProtocol: "ws",
            sockHost: host,
            sockPort: port
          }
        })
      );
    }
  }
  if (checksEnabled) {
    plugins.push(
      new ForkTsCheckerWebpackPlugin__default.default({
        typescript: { configFile: paths.targetTsConfig, memoryLimit: 4096 }
      }),
      new ESLintPlugin__default.default({
        context: paths.targetPath,
        files: ["**/*.(ts|tsx|mts|cts|js|jsx|mjs|cjs)"]
      })
    );
  }
  const bundler = rspack ? rspack : webpack__default.default;
  plugins.push(
    new bundler.ProvidePlugin({
      process: require.resolve("process/browser"),
      Buffer: ["buffer", "Buffer"]
    })
  );
  if (options.moduleFederation?.mode !== "remote") {
    const templateOptions = {
      meta: {
        "backstage-app-mode": options?.appMode ?? "public"
      },
      template: paths.targetHtml,
      templateParameters: {
        publicPath,
        config: frontendConfig
      }
    };
    if (rspack) {
      plugins.push(
        new ConfigInjectingHtmlWebpackPlugin.ConfigInjectingHtmlWebpackPlugin(
          templateOptions,
          options.getFrontendAppConfigs
        )
      );
    } else {
      plugins.push(new HtmlWebpackPlugin__default.default(templateOptions));
    }
    plugins.push(
      new HtmlWebpackPlugin__default.default({
        meta: {
          "backstage-app-mode": options?.appMode ?? "public",
          // This is added to be written in the later step, and finally read by the extra entry point
          "backstage-public-path": "<%= publicPath %>/"
        },
        minify: false,
        publicPath: "<%= publicPath %>",
        filename: "index.html.tmpl",
        template: `${require.resolve("raw-loader")}!${paths.targetHtml}`
      })
    );
  }
  if (options.moduleFederation) {
    const isRemote = options.moduleFederation?.mode === "remote";
    const AdaptedModuleFederationPlugin = rspack ? rspack.container.ModuleFederationPlugin : webpack.ModuleFederationPlugin;
    const exposes = options.moduleFederation?.exposes ? Object.fromEntries(
      Object.entries(options.moduleFederation?.exposes).map(([k, v]) => [
        k,
        path.resolve(paths.targetPath, v)
      ])
    ) : {
      ".": paths.targetEntry
    };
    plugins.push(
      new AdaptedModuleFederationPlugin({
        ...isRemote && {
          filename: "remoteEntry.js",
          exposes
        },
        name: options.moduleFederation.name,
        runtime: false,
        shared: {
          // React
          react: {
            singleton: true,
            requiredVersion: "*",
            eager: !isRemote
          },
          "react-dom": {
            singleton: true,
            requiredVersion: "*",
            eager: !isRemote
          },
          // React Router
          "react-router": {
            singleton: true,
            requiredVersion: "*",
            eager: !isRemote
          },
          "react-router-dom": {
            singleton: true,
            requiredVersion: "*",
            eager: !isRemote
          },
          // MUI v4
          "@material-ui/core/styles": {
            singleton: true,
            requiredVersion: "*",
            eager: !isRemote
          },
          "@material-ui/styles": {
            singleton: true,
            requiredVersion: "*",
            eager: !isRemote
          },
          // MUI v5
          "@mui/material/styles/": {
            singleton: true,
            requiredVersion: "*",
            eager: !isRemote
          },
          "@emotion/react": {
            singleton: true,
            requiredVersion: "*",
            eager: !isRemote
          }
        }
      })
    );
  }
  const buildInfo = await readBuildInfo();
  plugins.push(
    new bundler.DefinePlugin({
      "process.env.BUILD_INFO": JSON.stringify(buildInfo),
      "process.env.APP_CONFIG": rspack ? JSON.stringify([]) : bundler.DefinePlugin.runtimeValue(
        () => JSON.stringify(options.getFrontendAppConfigs()),
        true
      ),
      // This allows for conditional imports of react-dom/client, since there's no way
      // to check for presence of it in source code without module resolution errors.
      "process.env.HAS_REACT_DOM_CLIENT": JSON.stringify(hasReactDomClient.hasReactDomClient())
    })
  );
  if (options.linkedWorkspace) {
    plugins.push(
      ...await linkWorkspaces.createWorkspaceLinkingPlugins(
        bundler,
        options.linkedWorkspace
      )
    );
  }
  const reactRefreshFiles = rspack ? [] : [
    require.resolve(
      "@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js"
    ),
    require.resolve(
      "@pmmmwh/react-refresh-webpack-plugin/overlay/index.js"
    ),
    require.resolve("react-refresh")
  ];
  const mode = isDev ? "development" : "production";
  const optimization$1 = optimization.optimization(options);
  if (mode === "production" && process.env.EXPERIMENTAL_MODULE_FEDERATION && process.env.FORCE_REACT_DEVELOPMENT) {
    console.log(
      chalk__default.default.yellow(
        `\u26A0\uFE0F  WARNING: Forcing react and react-dom into development mode. This build should not be used in production.`
      )
    );
    const reactPackageDirs = [
      `${path.dirname(require.resolve("react/package.json"))}/`,
      `${path.dirname(require.resolve("react-dom/package.json"))}/`
    ];
    optimization$1.nodeEnv = false;
    plugins.push(
      new bundler.DefinePlugin({
        "process.env.NODE_ENV": rspack ? (
          // FIXME: see also https://github.com/web-infra-dev/rspack/issues/5606
          JSON.stringify(mode)
        ) : webpack__default.default.DefinePlugin.runtimeValue(({ module }) => {
          if (reactPackageDirs.some((val) => module.resource.startsWith(val))) {
            return '"development"';
          }
          return `"${mode}"`;
        })
      })
    );
  }
  const withCache = yn__default.default(process.env[BUILD_CACHE_ENV_VAR], { default: false });
  return {
    mode,
    profile: false,
    ...isDev ? {
      watchOptions: {
        ignored: /node_modules\/(?!__backstage-autodetected-plugins__)/
      }
    } : {},
    optimization: optimization$1,
    bail: false,
    performance: {
      hints: false
      // we check the gzip size instead
    },
    devtool: isDev ? "eval-cheap-module-source-map" : "source-map",
    context: paths.targetPath,
    entry: [
      require.resolve("@backstage/cli/config/webpack-public-path"),
      ...options.additionalEntryPoints ?? [],
      paths.targetEntry
    ],
    resolve: {
      extensions: [".ts", ".tsx", ".mjs", ".js", ".jsx", ".json", ".wasm"],
      mainFields: ["browser", "module", "main"],
      fallback: {
        ...pickBy__default.default(require("node-libs-browser")),
        module: false,
        dgram: false,
        dns: false,
        fs: false,
        http2: false,
        net: false,
        tls: false,
        child_process: false,
        /* new ignores */
        path: false,
        https: false,
        http: false,
        util: require.resolve("util/")
      },
      // FIXME: see also https://github.com/web-infra-dev/rspack/issues/3408
      ...!rspack && {
        plugins: [
          new ModuleScopePlugin__default.default(
            [paths.targetSrc, paths.targetDev],
            [paths.targetPackageJson, ...reactRefreshFiles]
          )
        ]
      }
    },
    module: {
      rules: loaders
    },
    output: {
      uniqueName: options.moduleFederation?.name,
      path: paths.targetDist,
      publicPath: options.moduleFederation?.mode === "remote" ? "auto" : `${publicPath}/`,
      filename: isDev ? "[name].js" : "static/[name].[fullhash:8].js",
      chunkFilename: isDev ? "[name].chunk.js" : "static/[name].[chunkhash:8].chunk.js",
      ...isDev ? {
        devtoolModuleFilenameTemplate: (info) => `file:///${path.resolve(info.absoluteResourcePath).replace(
          /\\/g,
          "/"
        )}`
      } : {}
    },
    experiments: {
      lazyCompilation: !rspack && yn__default.default(process.env.EXPERIMENTAL_LAZY_COMPILATION),
      ...rspack && {
        // We're still using `style-loader` for custom `insert` option
        css: false
      }
    },
    plugins,
    ...withCache && {
      cache: {
        type: "filesystem",
        buildDependencies: {
          config: [__filename]
        }
      }
    }
  };
}

exports.createConfig = createConfig;
exports.resolveBaseUrl = resolveBaseUrl;
exports.resolveEndpoint = resolveEndpoint;
//# sourceMappingURL=config.cjs.js.map
