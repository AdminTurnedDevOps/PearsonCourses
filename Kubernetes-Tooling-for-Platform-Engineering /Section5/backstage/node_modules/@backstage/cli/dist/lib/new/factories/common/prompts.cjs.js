'use strict';

var codeowners = require('../../../codeowners/codeowners.cjs.js');

function pluginIdPrompt() {
  return {
    type: "input",
    name: "id",
    message: "Enter the ID of the plugin [required]",
    validate: (value) => {
      if (!value) {
        return "Please enter the ID of the plugin";
      } else if (!/^[a-z0-9]+(-[a-z0-9]+)*$/.test(value)) {
        return "Plugin IDs must be lowercase and contain only letters, digits, and dashes.";
      }
      return true;
    }
  };
}
function moduleIdIdPrompt() {
  return {
    type: "input",
    name: "moduleId",
    message: "Enter the ID of the module [required]",
    validate: (value) => {
      if (!value) {
        return "Please enter the ID of the module";
      } else if (!/^[a-z0-9]+(-[a-z0-9]+)*$/.test(value)) {
        return "Module IDs must be lowercase and contain only letters, digits, and dashes.";
      }
      return true;
    }
  };
}
function ownerPrompt() {
  return {
    type: "input",
    name: "owner",
    message: "Enter an owner to add to CODEOWNERS [optional]",
    when: (opts) => Boolean(opts.codeOwnersPath),
    validate: (value) => {
      if (!value) {
        return true;
      }
      const ownerIds = codeowners.parseOwnerIds(value);
      if (!ownerIds) {
        return "The owner must be a space separated list of team names (e.g. @org/team-name), usernames (e.g. @username), or the email addresses (e.g. user@example.com).";
      }
      return true;
    }
  };
}

exports.moduleIdIdPrompt = moduleIdIdPrompt;
exports.ownerPrompt = ownerPrompt;
exports.pluginIdPrompt = pluginIdPrompt;
//# sourceMappingURL=prompts.cjs.js.map
