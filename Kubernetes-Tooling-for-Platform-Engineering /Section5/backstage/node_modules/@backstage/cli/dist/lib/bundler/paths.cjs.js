'use strict';

var fs = require('fs-extra');
var path = require('path');
var paths = require('../paths.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);

function resolveBundlingPaths(options) {
  const { entry, targetDir = paths.paths.targetDir } = options;
  const resolveTargetModule = (pathString) => {
    for (const ext of ["mjs", "js", "ts", "tsx", "jsx"]) {
      const filePath = path.resolve(targetDir, `${pathString}.${ext}`);
      if (fs__default.default.pathExistsSync(filePath)) {
        return filePath;
      }
    }
    return path.resolve(targetDir, `${pathString}.js`);
  };
  let targetPublic = void 0;
  let targetHtml = path.resolve(targetDir, "public/index.html");
  if (fs__default.default.pathExistsSync(targetHtml)) {
    targetPublic = path.resolve(targetDir, "public");
  } else {
    targetHtml = path.resolve(targetDir, `${entry}.html`);
    if (!fs__default.default.pathExistsSync(targetHtml)) {
      targetHtml = paths.paths.resolveOwn("templates/serve_index.html");
    }
  }
  const targetRunFile = path.resolve(targetDir, "src/run.ts");
  const runFileExists = fs__default.default.pathExistsSync(targetRunFile);
  return {
    targetHtml,
    targetPublic,
    targetPath: path.resolve(targetDir, "."),
    targetRunFile: runFileExists ? targetRunFile : void 0,
    targetDist: path.resolve(targetDir, options.dist ?? "dist"),
    targetAssets: path.resolve(targetDir, "assets"),
    targetSrc: path.resolve(targetDir, "src"),
    targetDev: path.resolve(targetDir, "dev"),
    targetEntry: resolveTargetModule(entry),
    targetTsConfig: paths.paths.resolveTargetRoot("tsconfig.json"),
    targetPackageJson: path.resolve(targetDir, "package.json"),
    rootNodeModules: paths.paths.resolveTargetRoot("node_modules"),
    root: paths.paths.targetRoot
  };
}
async function resolveOptionalBundlingPaths(options) {
  const resolvedPaths = resolveBundlingPaths(options);
  if (await fs__default.default.pathExists(resolvedPaths.targetEntry)) {
    return resolvedPaths;
  }
  return void 0;
}

exports.resolveBundlingPaths = resolveBundlingPaths;
exports.resolveOptionalBundlingPaths = resolveOptionalBundlingPaths;
//# sourceMappingURL=paths.cjs.js.map
