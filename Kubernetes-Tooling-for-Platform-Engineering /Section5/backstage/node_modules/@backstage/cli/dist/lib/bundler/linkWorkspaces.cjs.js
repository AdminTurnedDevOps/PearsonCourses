'use strict';

var path = require('path');
var getPackages = require('@manypkg/get-packages');
var paths = require('../paths.cjs.js');

async function createWorkspaceLinkingPlugins(bundler, workspace) {
  const { packages: linkedPackages, root: linkedRoot } = await getPackages.getPackages(
    workspace
  );
  const replacementRegex = new RegExp(
    `^(?:${linkedPackages.map((pkg) => pkg.packageJson.name).join("|")})(?:/.*)?$`
  );
  return [
    // Any imports of a package that is present in the linked workspace will
    // be redirected to be resolved within the context of the linked workspace
    new bundler.NormalModuleReplacementPlugin(replacementRegex, (resource) => {
      resource.context = linkedRoot.dir;
    }),
    // react and react-dom are always resolved from the target directory
    // Note: this often requires that the linked and target workspace use the same versions of React
    new bundler.NormalModuleReplacementPlugin(
      /^react(?:-router)?(?:-dom)?$/,
      (resource) => {
        if (!path.relative(linkedRoot.dir, resource.context).startsWith("..")) {
          resource.context = paths.paths.targetDir;
        }
      }
    )
  ];
}

exports.createWorkspaceLinkingPlugins = createWorkspaceLinkingPlugins;
//# sourceMappingURL=linkWorkspaces.cjs.js.map
