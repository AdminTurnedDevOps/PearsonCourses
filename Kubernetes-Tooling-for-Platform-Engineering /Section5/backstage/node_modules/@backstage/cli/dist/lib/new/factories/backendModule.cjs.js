'use strict';

var fs = require('fs-extra');
var chalk = require('chalk');
var camelCase = require('lodash/camelCase');
var paths = require('../../paths.cjs.js');
var codeowners = require('../../codeowners/codeowners.cjs.js');
var types = require('../types.cjs.js');
var tasks = require('../../tasks.cjs.js');
var prompts = require('./common/prompts.cjs.js');
var tasks$1 = require('./common/tasks.cjs.js');
var util = require('./common/util.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);
var camelCase__default = /*#__PURE__*/_interopDefaultCompat(camelCase);

const backendModule = types.createFactory({
  name: "backend-module",
  description: "A new backend module that extends an existing backend plugin with additional features",
  optionsDiscovery: async () => ({
    codeOwnersPath: await codeowners.getCodeownersFilePath(paths.paths.targetRoot)
  }),
  optionsPrompts: [prompts.pluginIdPrompt(), prompts.moduleIdIdPrompt(), prompts.ownerPrompt()],
  async create(options, ctx) {
    const { id: pluginId, moduleId } = options;
    const dirName = `${pluginId}-backend-module-${moduleId}`;
    const name = util.resolvePackageName({
      baseName: dirName,
      scope: ctx.scope,
      plugin: true
    });
    tasks.Task.log();
    tasks.Task.log(`Creating backend module ${chalk__default.default.cyan(name)}`);
    const targetDir = ctx.isMonoRepo ? paths.paths.resolveTargetRoot("plugins", dirName) : paths.paths.resolveTargetRoot(`backstage-plugin-${dirName}`);
    const moduleCamelCase = camelCase__default.default(moduleId);
    const modulePascalCase = moduleCamelCase[0].toUpperCase() + moduleCamelCase.slice(1);
    const moduleVar = `${camelCase__default.default(pluginId)}Module${modulePascalCase}`;
    await tasks$1.executePluginPackageTemplate(ctx, {
      targetDir,
      templateName: "default-backend-module",
      values: {
        pluginId,
        moduleId,
        name,
        moduleVar,
        packageVersion: ctx.defaultVersion,
        privatePackage: ctx.private,
        npmRegistry: ctx.npmRegistry,
        license: ctx.license
      }
    });
    if (await fs__default.default.pathExists(paths.paths.resolveTargetRoot("packages/backend"))) {
      await tasks.Task.forItem("backend", "adding dependency", async () => {
        await tasks.addPackageDependency(
          paths.paths.resolveTargetRoot("packages/backend/package.json"),
          {
            dependencies: {
              [name]: `^${ctx.defaultVersion}`
            }
          }
        );
      });
    }
    await tasks.addToBackend(name, {
      type: "module"
    });
    if (options.owner) {
      await codeowners.addCodeownersEntry(`/plugins/${dirName}`, options.owner);
    }
    await tasks.Task.forCommand("yarn install", { cwd: targetDir, optional: true });
    await tasks.Task.forCommand("yarn lint --fix", {
      cwd: targetDir,
      optional: true
    });
  }
});

exports.backendModule = backendModule;
//# sourceMappingURL=backendModule.cjs.js.map
