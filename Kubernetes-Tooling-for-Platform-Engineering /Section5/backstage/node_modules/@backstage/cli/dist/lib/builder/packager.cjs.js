'use strict';

var fs = require('fs-extra');
var rollup = require('rollup');
var chalk = require('chalk');
var path = require('path');
var paths = require('../paths.cjs.js');
var config = require('./config.cjs.js');
var types = require('./types.cjs.js');
var cliNode = require('@backstage/cli-node');
var parallel = require('../parallel.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

function formatErrorMessage(error) {
  let msg = "";
  if (error.code === "PLUGIN_ERROR") {
    if (error.plugin === "esbuild") {
      msg += `${error.message}`;
      if (error.errors?.length) {
        msg += `

`;
        for (const { text, location } of error.errors) {
          const { line, column } = location;
          const path$1 = path.relative(paths.paths.targetDir, error.id);
          const loc = chalk__default.default.cyan(`${path$1}:${line}:${column}`);
          if (text === 'Unexpected "<"' && error.id.endsWith(".js")) {
            msg += `${loc}: ${text}, JavaScript files with JSX should use a .jsx extension`;
          } else {
            msg += `${loc}: ${text}`;
          }
        }
      }
    } else {
      msg += `(plugin ${error.plugin}) ${error}
`;
    }
  } else {
    if (error.loc) {
      const file = `${paths.paths.resolveTarget(error.loc.file || error.id)}`;
      const pos = `${error.loc.line}:${error.loc.column}`;
      msg += `${file} [${pos}]
`;
    } else if (error.id) {
      msg += `${paths.paths.resolveTarget(error.id)}
`;
    }
    msg += `${error}
`;
    if (error.url) {
      msg += `${chalk__default.default.cyan(error.url)}
`;
    }
    if (error.frame) {
      msg += `${chalk__default.default.dim(error.frame)}
`;
    }
  }
  return msg;
}
async function rollupBuild(config) {
  try {
    const bundle = await rollup.rollup(config);
    if (config.output) {
      for (const output of [config.output].flat()) {
        await bundle.generate(output);
        await bundle.write(output);
      }
    }
  } catch (error) {
    throw new Error(formatErrorMessage(error));
  }
}
const buildPackage = async (options) => {
  try {
    const { resolutions } = await fs__default.default.readJson(
      paths.paths.resolveTargetRoot("package.json")
    );
    if (resolutions?.esbuild) {
      console.warn(
        chalk__default.default.red(
          'Your root package.json contains a "resolutions" entry for "esbuild". This was included in older @backstage/create-app templates in order to work around build issues that have since been fixed. Please remove the entry and run `yarn install`'
        )
      );
    }
  } catch {
  }
  const rollupConfigs = await config.makeRollupConfigs(options);
  await fs__default.default.remove(paths.paths.resolveTarget("dist"));
  const buildTasks = rollupConfigs.map(rollupBuild);
  await Promise.all(buildTasks);
};
const buildPackages = async (options) => {
  if (options.some((opt) => !opt.targetDir)) {
    throw new Error("targetDir must be set for all build options");
  }
  const rollupConfigs = await Promise.all(options.map(config.makeRollupConfigs));
  await Promise.all(
    options.map(({ targetDir }) => fs__default.default.remove(path.resolve(targetDir, "dist")))
  );
  const buildTasks = rollupConfigs.flat().map((opts) => () => rollupBuild(opts));
  await parallel.runParallelWorkers({
    items: buildTasks,
    worker: async (task) => task()
  });
};
function getOutputsForRole(role) {
  const outputs = /* @__PURE__ */ new Set();
  for (const output of cliNode.PackageRoles.getRoleInfo(role).output) {
    if (output === "cjs") {
      outputs.add(types.Output.cjs);
    }
    if (output === "esm") {
      outputs.add(types.Output.esm);
    }
    if (output === "types") {
      outputs.add(types.Output.types);
    }
  }
  return outputs;
}

exports.buildPackage = buildPackage;
exports.buildPackages = buildPackages;
exports.formatErrorMessage = formatErrorMessage;
exports.getOutputsForRole = getOutputsForRole;
//# sourceMappingURL=packager.cjs.js.map
