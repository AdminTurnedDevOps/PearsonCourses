'use strict';

var chalk = require('chalk');
var paths = require('../../paths.cjs.js');
var codeowners = require('../../codeowners/codeowners.cjs.js');
var types = require('../types.cjs.js');
var tasks = require('../../tasks.cjs.js');
var prompts = require('./common/prompts.cjs.js');
var tasks$1 = require('./common/tasks.cjs.js');
var util = require('./common/util.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

const pluginCommon = types.createFactory({
  name: "plugin-common",
  description: "A new isomorphic common plugin package",
  optionsDiscovery: async () => ({
    codeOwnersPath: await codeowners.getCodeownersFilePath(paths.paths.targetRoot)
  }),
  optionsPrompts: [prompts.pluginIdPrompt(), prompts.ownerPrompt()],
  async create(options, ctx) {
    const { id } = options;
    const suffix = `${id}-common`;
    const name = util.resolvePackageName({
      baseName: suffix,
      scope: ctx.scope,
      plugin: true
    });
    tasks.Task.log();
    tasks.Task.log(`Creating common plugin package ${chalk__default.default.cyan(name)}`);
    const targetDir = ctx.isMonoRepo ? paths.paths.resolveTargetRoot("plugins", suffix) : paths.paths.resolveTargetRoot(`backstage-plugin-${suffix}`);
    await tasks$1.executePluginPackageTemplate(ctx, {
      targetDir,
      templateName: "default-common-plugin-package",
      values: {
        id,
        name,
        privatePackage: ctx.private,
        npmRegistry: ctx.npmRegistry,
        pluginVersion: ctx.defaultVersion,
        license: ctx.license
      }
    });
    if (options.owner) {
      await codeowners.addCodeownersEntry(`/plugins/${suffix}`, options.owner);
    }
    await tasks.Task.forCommand("yarn install", { cwd: targetDir, optional: true });
    await tasks.Task.forCommand("yarn lint --fix", {
      cwd: targetDir,
      optional: true
    });
  }
});

exports.pluginCommon = pluginCommon;
//# sourceMappingURL=pluginCommon.cjs.js.map
