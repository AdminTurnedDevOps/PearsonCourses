'use strict';

var fs = require('fs-extra');
var chalk = require('chalk');
var path = require('path');
var paths = require('../../../paths.cjs.js');
var tasks = require('../../../tasks.cjs.js');
var Lockfile = require('../../../versioning/Lockfile.cjs.js');
require('minimatch');
require('@manypkg/get-packages');
require('../../../yarn.cjs.js');
require('../../../run.cjs.js');
var version = require('../../../version.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fs__default = /*#__PURE__*/_interopDefaultCompat(fs);
var chalk__default = /*#__PURE__*/_interopDefaultCompat(chalk);

async function executePluginPackageTemplate(ctx, options) {
  const { targetDir } = options;
  let lockfile;
  try {
    lockfile = await Lockfile.Lockfile.load(paths.paths.resolveTargetRoot("yarn.lock"));
  } catch {
  }
  tasks.Task.section("Checking Prerequisites");
  const shortPluginDir = path.relative(paths.paths.targetRoot, targetDir);
  await tasks.Task.forItem("availability", shortPluginDir, async () => {
    if (await fs__default.default.pathExists(targetDir)) {
      throw new Error(
        `A package with the same plugin ID already exists at ${chalk__default.default.cyan(
          shortPluginDir
        )}. Please try again with a different ID.`
      );
    }
  });
  const tempDir = await tasks.Task.forItem("creating", "temp dir", async () => {
    return await ctx.createTemporaryDirectory("backstage-create");
  });
  tasks.Task.section("Executing Template");
  await tasks.templatingTask(
    paths.paths.resolveOwn("templates", options.templateName),
    tempDir,
    options.values,
    version.createPackageVersionProvider(lockfile),
    ctx.isMonoRepo
  );
  const pkgJsonPath = path.resolve(tempDir, "package.json");
  if (await fs__default.default.pathExists(pkgJsonPath)) {
    const pkgJson = await fs__default.default.readJson(pkgJsonPath);
    await fs__default.default.writeJson(pkgJsonPath, pkgJson, { spaces: 2 });
  }
  tasks.Task.section("Installing");
  await tasks.Task.forItem("moving", shortPluginDir, async () => {
    await fs__default.default.move(tempDir, targetDir).catch((error) => {
      throw new Error(
        `Failed to move package from ${tempDir} to ${targetDir}, ${error.message}`
      );
    });
  });
  ctx.markAsModified();
}

exports.executePluginPackageTemplate = executePluginPackageTemplate;
//# sourceMappingURL=tasks.cjs.js.map
