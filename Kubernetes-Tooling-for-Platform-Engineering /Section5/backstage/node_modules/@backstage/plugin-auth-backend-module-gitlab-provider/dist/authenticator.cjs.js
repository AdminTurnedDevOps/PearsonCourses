'use strict';

var passportGitlab2 = require('passport-gitlab2');
var pluginAuthNode = require('@backstage/plugin-auth-node');

const gitlabAuthenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  scopes: {
    required: ["read_user"]
  },
  initialize({ callbackUrl, config }) {
    const clientId = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    const baseUrl = config.getOptionalString("audience") || "https://gitlab.com";
    return pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new passportGitlab2.Strategy(
        {
          clientID: clientId,
          clientSecret,
          callbackURL: callbackUrl,
          baseURL: baseUrl,
          authorizationURL: `${baseUrl}/oauth/authorize`,
          tokenURL: `${baseUrl}/oauth/token`,
          profileURL: `${baseUrl}/api/v4/user`
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            { fullProfile, params, accessToken },
            { refreshToken }
          );
        }
      )
    );
  },
  async start(input, helper) {
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent"
    });
  },
  async authenticate(input, helper) {
    return helper.authenticate(input);
  },
  async refresh(input, helper) {
    return helper.refresh(input);
  }
});

exports.gitlabAuthenticator = gitlabAuthenticator;
//# sourceMappingURL=authenticator.cjs.js.map
