import React from 'react';
import { StructuredMetadataTable } from '@backstage/core-components';
import { Draft07 } from 'json-schema-library';
import { findSchemaForKey, isJsonObject, formatKey } from './util.esm.js';

function processSchema(key, value, schema, formState) {
  const parsedSchema = new Draft07(schema.mergedSchema);
  const definitionInSchema = parsedSchema.getSchema({
    pointer: `#/${key}`,
    data: formState
  });
  const name = definitionInSchema?.["ui:backstage"]?.review?.name ?? definitionInSchema?.title ?? key;
  if (definitionInSchema) {
    const backstageReviewOptions = definitionInSchema["ui:backstage"]?.review;
    if (backstageReviewOptions) {
      if (backstageReviewOptions.mask) {
        return [[name, backstageReviewOptions.mask]];
      }
      if (backstageReviewOptions.show === false) {
        return [];
      }
    }
    if (definitionInSchema["ui:widget"] === "password" || definitionInSchema["ui:field"]?.toLocaleLowerCase("en-us") === "secret") {
      return [[name, "******"]];
    }
    if (definitionInSchema.enum && definitionInSchema.enumNames) {
      return [
        [
          name,
          definitionInSchema.enumNames[definitionInSchema.enum.indexOf(value)] || value
        ]
      ];
    }
    if (backstageReviewOptions?.explode !== false && isJsonObject(value)) {
      return Object.entries(value).flatMap(
        ([nestedKey, nestedValue]) => processSchema(`${key}/${nestedKey}`, nestedValue, schema, formState)
      );
    }
  }
  return [[name, value]];
}
const ReviewState = (props) => {
  const reviewData = Object.fromEntries(
    Object.entries(props.formState).flatMap(([key, value]) => {
      const schema = findSchemaForKey(key, props.schemas, props.formState);
      return schema ? processSchema(key, value, schema, props.formState) : [[key, value]];
    }).filter((prop) => prop.length > 0)
  );
  const options = {
    titleFormat: formatKey
  };
  return /* @__PURE__ */ React.createElement(StructuredMetadataTable, { metadata: reviewData, options });
};

export { ReviewState };
//# sourceMappingURL=ReviewState.esm.js.map
