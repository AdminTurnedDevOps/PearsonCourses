import cloneDeep from 'lodash/cloneDeep';
import { useApi, featureFlagsApiRef } from '@backstage/core-plugin-api';

const useFilteredSchemaProperties = (manifest) => {
  const featureFlagKey = "backstage:featureFlag";
  const featureFlagApi = useApi(featureFlagsApiRef);
  if (!manifest) {
    return void 0;
  }
  const filteredSteps = manifest?.steps.filter((step) => {
    const featureFlag = step.schema[featureFlagKey];
    return typeof featureFlag !== "string" || featureFlagApi.isActive(featureFlag);
  }).map((step) => {
    const filteredStep = cloneDeep(step);
    const removedPropertyKeys = [];
    if (filteredStep.schema.properties) {
      filteredStep.schema.properties = Object.fromEntries(
        Object.entries(filteredStep.schema.properties).filter(
          ([key, value]) => {
            if (value[featureFlagKey]) {
              if (featureFlagApi.isActive(value[featureFlagKey])) {
                return true;
              }
              removedPropertyKeys.push(key);
              return false;
            }
            return true;
          }
        )
      );
      filteredStep.schema.required = Array.isArray(
        filteredStep.schema.required
      ) ? filteredStep.schema.required?.filter(
        (r) => !removedPropertyKeys.includes(r)
      ) : filteredStep.schema.required;
    }
    return filteredStep;
  });
  return { ...manifest, steps: filteredSteps };
};

export { useFilteredSchemaProperties };
//# sourceMappingURL=useFilteredSchemaProperties.esm.js.map
