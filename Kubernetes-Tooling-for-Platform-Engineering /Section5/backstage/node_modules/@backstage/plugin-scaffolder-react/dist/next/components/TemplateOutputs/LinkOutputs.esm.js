import { useApp, useRouteRef } from '@backstage/core-plugin-api';
import { entityRouteRef } from '@backstage/plugin-catalog-react';
import Button from '@material-ui/core/Button';
import { makeStyles } from '@material-ui/core/styles';
import React from 'react';
import LinkIcon from '@material-ui/icons/Link';
import { parseEntityRef } from '@backstage/catalog-model';
import { Link } from '@backstage/core-components';

const useStyles = makeStyles({
  root: {
    "&:hover": {
      textDecoration: "none"
    }
  }
});
const LinkOutputs = (props) => {
  const { links = [] } = props.output;
  const classes = useStyles();
  const app = useApp();
  const entityRoute = useRouteRef(entityRouteRef);
  const iconResolver = (key) => app.getSystemIcon(key) ?? LinkIcon;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, links.filter(({ url, entityRef }) => url || entityRef).map(({ url, entityRef, title, icon }) => {
    if (entityRef) {
      const entityName = parseEntityRef(entityRef);
      const target = entityRoute(entityName);
      return { title, icon, url: target };
    }
    return { title, icon, url };
  }).map(({ url, title, icon }, i) => {
    const Icon = iconResolver(icon);
    return /* @__PURE__ */ React.createElement(Link, { to: url, key: i, classes: { root: classes.root } }, /* @__PURE__ */ React.createElement(Button, { startIcon: /* @__PURE__ */ React.createElement(Icon, null), component: "div", color: "primary" }, title));
  }));
};

export { LinkOutputs };
//# sourceMappingURL=LinkOutputs.esm.js.map
