import { useApi, featureFlagsApiRef } from '@backstage/core-plugin-api';
import { extractSchemaFromStep } from '../lib/schema.esm.js';

const useTemplateSchema = (manifest) => {
  const featureFlags = useApi(featureFlagsApiRef);
  const steps = manifest.steps.map(({ title, description, schema }) => ({
    title,
    description,
    mergedSchema: schema,
    ...extractSchemaFromStep(schema)
  }));
  const returningSteps = steps.filter((step) => {
    const stepFeatureFlag = step.uiSchema["ui:backstage"]?.featureFlag;
    return stepFeatureFlag ? featureFlags.isActive(stepFeatureFlag) : true;
  }).map((step) => {
    const strippedSchema = {
      ...step,
      schema: {
        ...step.schema,
        // Title is rendered at the top of the page, so let's ignore this from jsonschemaform
        title: void 0
      }
    };
    if (step.schema?.properties || !step.schema?.dependencies) {
      strippedSchema.schema.properties = Object.fromEntries(
        Object.entries(step.schema?.properties ?? {}).filter(
          ([key]) => {
            const stepFeatureFlag = step.uiSchema[key]?.["ui:backstage"]?.featureFlag;
            return stepFeatureFlag ? featureFlags.isActive(stepFeatureFlag) : true;
          }
        )
      );
    }
    return strippedSchema;
  });
  return {
    presentation: manifest.presentation,
    steps: returningSteps
  };
};

export { useTemplateSchema };
//# sourceMappingURL=useTemplateSchema.esm.js.map
