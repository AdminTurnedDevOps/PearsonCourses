{"version":3,"file":"createScaffolderFormDecorator.esm.js","sources":["../../../src/next/extensions/createScaffolderFormDecorator.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AnyApiRef } from '@backstage/core-plugin-api';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { OpaqueFormDecorator } from '@internal/scaffolder';\nimport { z } from 'zod';\n\n/** @alpha */\nexport type ScaffolderFormDecoratorContext<\n  TInput extends JsonObject = JsonObject,\n> = {\n  input: TInput;\n  formState: Record<string, JsonValue>;\n\n  setFormState: (\n    fn: (currentState: Record<string, JsonValue>) => Record<string, JsonValue>,\n  ) => void;\n  setSecrets: (\n    fn: (currentState: Record<string, string>) => Record<string, string>,\n  ) => void;\n};\n\n/** @alpha */\nexport type ScaffolderFormDecorator<TInput extends JsonObject = JsonObject> = {\n  readonly $$type: '@backstage/scaffolder/FormDecorator';\n  readonly id: string;\n  readonly TInput: TInput;\n};\n\n/**\n * Method for creating decorators which can be used to collect\n * secrets from the user before submitting to the backend.\n * @alpha\n */\nexport function createScaffolderFormDecorator<\n  TInputSchema extends { [key in string]: (zImpl: typeof z) => z.ZodType } = {\n    [key in string]: (zImpl: typeof z) => z.ZodType;\n  },\n  TDeps extends { [key in string]: AnyApiRef } = { [key in string]: AnyApiRef },\n  TInput extends JsonObject = {\n    [key in keyof TInputSchema]: z.infer<ReturnType<TInputSchema[key]>>;\n  },\n>(options: {\n  id: string;\n  schema?: {\n    input?: TInputSchema;\n  };\n  deps?: TDeps;\n  decorator: (\n    ctx: ScaffolderFormDecoratorContext<TInput>,\n    deps: TDeps extends { [key in string]: AnyApiRef }\n      ? { [key in keyof TDeps]: TDeps[key]['T'] }\n      : never,\n  ) => Promise<void>;\n}): ScaffolderFormDecorator<TInput> {\n  return OpaqueFormDecorator.createInstance('v1', {\n    ...options,\n    TInput: null as unknown as TInput,\n  } as {\n    id: string;\n    schema?: {\n      input?: TInputSchema;\n    };\n    TInput: TInput;\n    deps?: TDeps;\n    decorator: (\n      ctx: ScaffolderFormDecoratorContext,\n      deps: { [key in string]: AnyApiRef['T'] },\n    ) => Promise<void>;\n  });\n}\n"],"names":[],"mappings":";;;AA+CO,SAAS,8BAQd,OAYkC,EAAA;AAClC,EAAO,OAAA,mBAAA,CAAoB,eAAe,IAAM,EAAA;AAAA,IAC9C,GAAG,OAAA;AAAA,IACH,MAAQ,EAAA;AAAA,GAYT,CAAA;AACH;;;;"}