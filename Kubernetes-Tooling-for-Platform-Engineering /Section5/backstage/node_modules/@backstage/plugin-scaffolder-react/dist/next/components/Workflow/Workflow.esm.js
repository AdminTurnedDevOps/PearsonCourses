import React, { useCallback, useEffect } from 'react';
import { Content, Progress, InfoCard, MarkdownContent } from '@backstage/core-components';
import { stringifyEntityRef } from '@backstage/catalog-model';
import { makeStyles } from '@material-ui/core/styles';
import { useAnalytics, useApi, errorApiRef } from '@backstage/core-plugin-api';
import { useTemplateParameterSchema } from '../../hooks/useTemplateParameterSchema.esm.js';
import { Stepper } from '../Stepper/Stepper.esm.js';
import { SecretsContextProvider } from '../../../secrets/SecretsContext.esm.js';
import { useFilteredSchemaProperties } from '../../hooks/useFilteredSchemaProperties.esm.js';
import { useTemplateTimeSavedMinutes } from '../../hooks/useTemplateTimeSaved.esm.js';

const useStyles = makeStyles({
  markdown: {
    /** to make the styles for React Markdown not leak into the description */
    "& :first-child": {
      marginTop: 0
    },
    "& :last-child": {
      marginBottom: 0
    }
  }
});
const Workflow = (workflowProps) => {
  const { title, description, namespace, templateName, onCreate, ...props } = workflowProps;
  const analytics = useAnalytics();
  const styles = useStyles();
  const templateRef = stringifyEntityRef({
    kind: "Template",
    namespace,
    name: templateName
  });
  const errorApi = useApi(errorApiRef);
  const { loading, manifest, error } = useTemplateParameterSchema(templateRef);
  const sortedManifest = useFilteredSchemaProperties(manifest);
  const minutesSaved = useTemplateTimeSavedMinutes(templateRef);
  const workflowOnCreate = useCallback(
    async (formState) => {
      onCreate(formState);
      const name = typeof formState.name === "string" ? formState.name : void 0;
      analytics.captureEvent("create", name ?? templateName ?? "unknown", {
        value: minutesSaved
      });
    },
    [onCreate, analytics, templateName, minutesSaved]
  );
  useEffect(() => {
    if (error) {
      errorApi.post(new Error(`Failed to load template, ${error}`));
    }
  }, [error, errorApi]);
  if (error) {
    return props.onError(error);
  }
  return /* @__PURE__ */ React.createElement(Content, null, loading && /* @__PURE__ */ React.createElement(Progress, null), sortedManifest && /* @__PURE__ */ React.createElement(
    InfoCard,
    {
      title: title ?? sortedManifest.title,
      subheader: /* @__PURE__ */ React.createElement(
        MarkdownContent,
        {
          className: styles.markdown,
          linkTarget: "_blank",
          content: description ?? sortedManifest.description ?? "No description"
        }
      ),
      noPadding: true,
      titleTypographyProps: { component: "h2" }
    },
    /* @__PURE__ */ React.createElement(
      Stepper,
      {
        manifest: sortedManifest,
        onCreate: workflowOnCreate,
        ...props
      }
    )
  ));
};
const EmbeddableWorkflow = (props) => /* @__PURE__ */ React.createElement(SecretsContextProvider, null, /* @__PURE__ */ React.createElement(Workflow, { ...props }));

export { EmbeddableWorkflow, Workflow };
//# sourceMappingURL=Workflow.esm.js.map
