import { startCase } from 'lodash';
import { Draft07 } from 'json-schema-library';

function isJsonObject(value) {
  return typeof value === "object" && value !== null && !Array.isArray(value);
}
function formatKey(key) {
  const parts = key.split("/");
  return parts.filter(Boolean).map((part) => startCase(part)).join(" > ");
}
function findSchemaForKey(key, schemas, formState) {
  for (const step of schemas) {
    const schema = step.mergedSchema;
    const data = {};
    if (schema.dependencies && isJsonObject(schema.dependencies)) {
      for (const dep in schema.dependencies) {
        if (formState.hasOwnProperty(dep)) {
          data[dep] = formState[dep];
        }
      }
    }
    const draft = new Draft07(schema);
    const res = draft.getSchema({
      pointer: `#/${key}`,
      data
    });
    if (!!res) {
      return step;
    }
  }
  return null;
}

export { findSchemaForKey, formatKey, isJsonObject };
//# sourceMappingURL=util.esm.js.map
