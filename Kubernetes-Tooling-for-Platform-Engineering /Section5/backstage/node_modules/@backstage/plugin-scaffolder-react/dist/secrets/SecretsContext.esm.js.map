{"version":3,"file":"SecretsContext.esm.js","sources":["../../src/secrets/SecretsContext.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  createVersionedContext,\n  createVersionedValueMap,\n} from '@backstage/version-bridge';\nimport React, {\n  useState,\n  useCallback,\n  useContext,\n  PropsWithChildren,\n} from 'react';\n\n/**\n * The contents of the `SecretsContext`\n */\ntype SecretsContextContents = {\n  secrets: Record<string, string>;\n  setSecrets: React.Dispatch<React.SetStateAction<Record<string, string>>>;\n};\n\n/**\n * The context to hold the Secrets.\n */\nconst SecretsContext = createVersionedContext<{\n  1: SecretsContextContents;\n}>('secrets-context');\n\n/**\n * The Context Provider that holds the state for the secrets.\n * @public\n */\nexport const SecretsContextProvider = (\n  props: PropsWithChildren<{ initialSecrets?: Record<string, string> }>,\n) => {\n  const { initialSecrets = {} } = props;\n  const [secrets, setSecrets] = useState<Record<string, string>>({\n    ...initialSecrets,\n  });\n\n  return (\n    <SecretsContext.Provider\n      value={createVersionedValueMap({ 1: { secrets, setSecrets } })}\n    >\n      {props.children}\n    </SecretsContext.Provider>\n  );\n};\n\n/**\n * The return type from the useTemplateSecrets hook.\n * @public\n */\nexport interface ScaffolderUseTemplateSecrets {\n  setSecrets: (input: Record<string, string>) => void;\n  secrets: Record<string, string>;\n}\n\n/**\n * Hook to access the secrets context to be able to set secrets that are\n * passed to the Scaffolder backend.\n * @public\n */\nexport const useTemplateSecrets = (): ScaffolderUseTemplateSecrets => {\n  const value = useContext(SecretsContext)?.atVersion(1);\n\n  if (!value) {\n    throw new Error(\n      'useTemplateSecrets must be used within a SecretsContextProvider',\n    );\n  }\n\n  const { setSecrets: updateSecrets, secrets = {} } = value;\n\n  const setSecrets = useCallback(\n    (input: Record<string, string>) => {\n      updateSecrets(currentSecrets => ({ ...currentSecrets, ...input }));\n    },\n    [updateSecrets],\n  );\n\n  return { setSecrets, secrets };\n};\n"],"names":[],"mappings":";;;AAqCA,MAAM,cAAA,GAAiB,uBAEpB,iBAAiB,CAAA;AAMP,MAAA,sBAAA,GAAyB,CACpC,KACG,KAAA;AACH,EAAA,MAAM,EAAE,cAAA,GAAiB,EAAC,EAAM,GAAA,KAAA;AAChC,EAAA,MAAM,CAAC,OAAA,EAAS,UAAU,CAAA,GAAI,QAAiC,CAAA;AAAA,IAC7D,GAAG;AAAA,GACJ,CAAA;AAED,EACE,uBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,cAAe,CAAA,QAAA;AAAA,IAAf;AAAA,MACC,KAAA,EAAO,wBAAwB,EAAE,CAAA,EAAG,EAAE,OAAS,EAAA,UAAA,IAAc;AAAA,KAAA;AAAA,IAE5D,KAAM,CAAA;AAAA,GACT;AAEJ;AAgBO,MAAM,qBAAqB,MAAoC;AACpE,EAAA,MAAM,KAAQ,GAAA,UAAA,CAAW,cAAc,CAAA,EAAG,UAAU,CAAC,CAAA;AAErD,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA;AAGF,EAAA,MAAM,EAAE,UAAY,EAAA,aAAA,EAAe,OAAU,GAAA,IAAO,GAAA,KAAA;AAEpD,EAAA,MAAM,UAAa,GAAA,WAAA;AAAA,IACjB,CAAC,KAAkC,KAAA;AACjC,MAAA,aAAA,CAAc,qBAAmB,EAAE,GAAG,cAAgB,EAAA,GAAG,OAAQ,CAAA,CAAA;AAAA,KACnE;AAAA,IACA,CAAC,aAAa;AAAA,GAChB;AAEA,EAAO,OAAA,EAAE,YAAY,OAAQ,EAAA;AAC/B;;;;"}