{"version":3,"file":"useEventStream.esm.js","sources":["../../src/hooks/useEventStream.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { useImmerReducer } from 'use-immer';\nimport { useEffect } from 'react';\n\nimport { useApi } from '@backstage/core-plugin-api';\nimport { Subscription } from '@backstage/types';\nimport {\n  LogEvent,\n  scaffolderApiRef,\n  ScaffolderTask,\n  ScaffolderTaskOutput,\n  ScaffolderTaskStatus,\n} from '../api';\n\n/**\n * The status of the step being processed\n *\n * @public\n */\nexport type ScaffolderStep = {\n  id: string;\n  status: ScaffolderTaskStatus;\n  endedAt?: string;\n  startedAt?: string;\n};\n\n/**\n * A task event from the event stream\n *\n * @public\n */\nexport type TaskStream = {\n  cancelled: boolean;\n  loading: boolean;\n  error?: Error;\n  stepLogs: { [stepId in string]: string[] };\n  completed: boolean;\n  task?: ScaffolderTask;\n  steps: { [stepId in string]: ScaffolderStep };\n  output?: ScaffolderTaskOutput;\n};\n\ntype ReducerLogEntry = {\n  createdAt: string;\n  body: {\n    stepId?: string;\n    status?: ScaffolderTaskStatus;\n    message: string;\n    output?: ScaffolderTaskOutput;\n    error?: Error;\n    recoverStrategy?: 'none' | 'startOver';\n  };\n};\n\ntype ReducerAction =\n  | { type: 'INIT'; data: ScaffolderTask }\n  | { type: 'CANCELLED' }\n  | { type: 'RECOVERED'; data: ReducerLogEntry }\n  | { type: 'LOGS'; data: ReducerLogEntry[] }\n  | { type: 'COMPLETED'; data: ReducerLogEntry }\n  | { type: 'ERROR'; data: Error };\n\nfunction reducer(draft: TaskStream, action: ReducerAction) {\n  switch (action.type) {\n    case 'INIT': {\n      draft.steps = action.data.spec.steps.reduce((current, next) => {\n        current[next.id] = { status: 'open', id: next.id };\n        return current;\n      }, {} as { [stepId in string]: ScaffolderStep });\n      draft.stepLogs = action.data.spec.steps.reduce((current, next) => {\n        current[next.id] = [];\n        return current;\n      }, {} as { [stepId in string]: string[] });\n      draft.loading = false;\n      draft.error = undefined;\n      draft.completed = false;\n      draft.task = action.data;\n      return;\n    }\n\n    case 'LOGS': {\n      const entries = action.data;\n      const logLines = [];\n\n      for (const entry of entries) {\n        const logLine = `${entry.createdAt} ${entry.body.message}`;\n        logLines.push(logLine);\n\n        if (!entry.body.stepId || !draft.steps?.[entry.body.stepId]) {\n          continue;\n        }\n\n        const currentStepLog = draft.stepLogs?.[entry.body.stepId];\n        const currentStep = draft.steps?.[entry.body.stepId];\n\n        if (currentStep) {\n          if (entry.body.status && entry.body.status !== currentStep.status) {\n            currentStep.status = entry.body.status;\n\n            if (currentStep.status === 'processing') {\n              currentStep.startedAt = entry.createdAt;\n            }\n\n            if (\n              ['cancelled', 'completed', 'failed'].includes(currentStep.status)\n            ) {\n              currentStep.endedAt = entry.createdAt;\n            }\n          }\n        }\n\n        currentStepLog?.push(logLine);\n      }\n\n      return;\n    }\n\n    case 'COMPLETED': {\n      draft.completed = true;\n      draft.output = action.data.body.output;\n      draft.error = action.data.body.error;\n\n      return;\n    }\n\n    case 'CANCELLED': {\n      draft.cancelled = true;\n      return;\n    }\n\n    case 'RECOVERED': {\n      draft.cancelled = false;\n      draft.completed = false;\n      draft.output = undefined;\n      draft.error = undefined;\n\n      for (const stepId in draft.steps) {\n        if (draft.steps.hasOwnProperty(stepId)) {\n          draft.steps[stepId].startedAt = undefined;\n          draft.steps[stepId].endedAt = undefined;\n          draft.steps[stepId].status = 'open';\n        }\n      }\n      return;\n    }\n\n    case 'ERROR': {\n      draft.error = action.data;\n      draft.loading = false;\n      draft.completed = true;\n      return;\n    }\n\n    default:\n      return;\n  }\n}\n\n/**\n * A hook to stream the logs of a task being processed\n *\n * @public\n */\nexport const useTaskEventStream = (taskId: string): TaskStream => {\n  const scaffolderApi = useApi(scaffolderApiRef);\n  const [state, dispatch] = useImmerReducer(reducer, {\n    cancelled: false,\n    loading: true,\n    completed: false,\n    stepLogs: {} as { [stepId in string]: string[] },\n    steps: {} as { [stepId in string]: ScaffolderStep },\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n    let subscription: Subscription | undefined;\n    let logPusher: NodeJS.Timeout | undefined;\n    let retryCount = 1;\n    let isTaskRecoverable = false;\n    const startStreamLogProcess = () =>\n      scaffolderApi.getTask(taskId).then(\n        task => {\n          if (didCancel) {\n            return;\n          }\n          isTaskRecoverable =\n            task.spec.EXPERIMENTAL_recovery?.EXPERIMENTAL_strategy ===\n            'startOver';\n          dispatch({ type: 'INIT', data: task });\n\n          // TODO(blam): Use a normal fetch to fetch the current log for the event stream\n          // and use that for an INIT_EVENTs dispatch event, and then\n          // use the last event ID to subscribe using after option to\n          // stream logs. Without this, if you have a lot of logs, it can look like the\n          // task is being rebuilt on load as it progresses through the steps at a slower\n          // rate whilst it builds the status from the event logs\n          const observable = scaffolderApi.streamLogs({\n            isTaskRecoverable,\n            taskId,\n          });\n\n          const collectedLogEvents = new Array<LogEvent>();\n\n          function emitLogs() {\n            if (collectedLogEvents.length) {\n              const logs = collectedLogEvents.splice(\n                0,\n                collectedLogEvents.length,\n              );\n              dispatch({ type: 'LOGS', data: logs });\n            }\n          }\n\n          logPusher = setInterval(emitLogs, 500);\n\n          subscription = observable.subscribe({\n            next: event => {\n              retryCount = 1;\n              switch (event.type) {\n                case 'log':\n                  return collectedLogEvents.push(event);\n                case 'cancelled':\n                  dispatch({ type: 'CANCELLED' });\n                  return undefined;\n                case 'completion':\n                  emitLogs();\n                  dispatch({ type: 'COMPLETED', data: event });\n                  return undefined;\n                case 'recovered':\n                  dispatch({ type: 'RECOVERED', data: event });\n                  return undefined;\n                default:\n                  throw new Error(\n                    `Unhandled event type ${event.type} in observer`,\n                  );\n              }\n            },\n            error: error => {\n              emitLogs();\n              // in some cases the error is a refused connection from backend\n              // this can happen from internet issues or proxy problems\n              // so we try to reconnect again after some time\n              // just to restart the fetch process\n              // details here https://github.com/backstage/backstage/issues/15002\n\n              const maxRetries = 3;\n\n              if (!error.message) {\n                error.message = `We cannot connect at the moment, trying again in some seconds... Retrying (${\n                  retryCount > maxRetries ? maxRetries : retryCount\n                }/${maxRetries} retries)`;\n              }\n\n              setTimeout(() => {\n                retryCount += 1;\n                void startStreamLogProcess();\n              }, 15000);\n\n              dispatch({ type: 'ERROR', data: error });\n            },\n          });\n        },\n        error => {\n          if (!didCancel) {\n            dispatch({ type: 'ERROR', data: error });\n          }\n        },\n      );\n    void startStreamLogProcess();\n    return () => {\n      if (!isTaskRecoverable) {\n        didCancel = true;\n        if (subscription) {\n          subscription.unsubscribe();\n        }\n        if (logPusher) {\n          clearInterval(logPusher);\n        }\n      }\n    };\n  }, [scaffolderApi, dispatch, taskId]);\n\n  return state;\n};\n"],"names":[],"mappings":"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"}