'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');
var AtlassianStrategy = require('passport-atlassian-oauth2');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var AtlassianStrategy__default = /*#__PURE__*/_interopDefaultCompat(AtlassianStrategy);

const atlassianAuthenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  scopes: {
    required: ["offline_access", "read:me", "read:jira-work", "read:jira-user"]
  },
  initialize({ callbackUrl, config }) {
    const clientId = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    const baseUrl = "https://auth.atlassian.com";
    if (config.has("scope") || config.has("scopes")) {
      throw new Error(
        'The atlassian provider no longer supports the "scope" or "scopes" configuration options. Please use the "additionalScopes" option instead.'
      );
    }
    return pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new AtlassianStrategy__default.default(
        {
          clientID: clientId,
          clientSecret,
          callbackURL: callbackUrl,
          baseURL: baseUrl,
          authorizationURL: `${baseUrl}/authorize`,
          tokenURL: `${baseUrl}/oauth/token`,
          profileURL: "https://api.atlassian.com/me",
          scope: []
          // the Atlassian strategy requires a scope, but Backstage passes the right set of scopes when calling OAuth2Strategy.prototype.authenticate
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            { fullProfile, params, accessToken },
            { refreshToken }
          );
        }
      )
    );
  },
  async start(input, helper) {
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent"
    });
  },
  async authenticate(input, helper) {
    return helper.authenticate(input);
  },
  async refresh(input, helper) {
    return helper.refresh(input);
  }
});

exports.atlassianAuthenticator = atlassianAuthenticator;
//# sourceMappingURL=authenticator.cjs.js.map
