{"version":3,"file":"createBackendPlugin.cjs.js","sources":["../../src/wiring/createBackendPlugin.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BackendFeature } from '../types';\nimport {\n  BackendPluginRegistrationPoints,\n  InternalBackendPluginRegistration,\n  InternalBackendRegistrations,\n} from './types';\n\n/**\n * The configuration options passed to {@link createBackendPlugin}.\n *\n * @public\n * @see {@link https://backstage.io/docs/backend-system/architecture/plugins | The architecture of plugins}\n * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n */\nexport interface CreateBackendPluginOptions {\n  /**\n   * The ID of this plugin.\n   *\n   * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n   */\n  pluginId: string;\n  register(reg: BackendPluginRegistrationPoints): void;\n}\n\n/**\n * Creates a new backend plugin.\n *\n * @public\n * @see {@link https://backstage.io/docs/backend-system/architecture/plugins | The architecture of plugins}\n * @see {@link https://backstage.io/docs/backend-system/architecture/naming-patterns | Recommended naming patterns}\n */\nexport function createBackendPlugin(\n  options: CreateBackendPluginOptions,\n): BackendFeature {\n  function getRegistrations() {\n    const extensionPoints: InternalBackendPluginRegistration['extensionPoints'] =\n      [];\n    let init: InternalBackendPluginRegistration['init'] | undefined = undefined;\n\n    options.register({\n      registerExtensionPoint(ext, impl) {\n        if (init) {\n          throw new Error('registerExtensionPoint called after registerInit');\n        }\n        extensionPoints.push([ext, impl]);\n      },\n      registerInit(regInit) {\n        if (init) {\n          throw new Error('registerInit must only be called once');\n        }\n        init = {\n          deps: regInit.deps,\n          func: regInit.init,\n        };\n      },\n    });\n\n    if (!init) {\n      throw new Error(\n        `registerInit was not called by register in ${options.pluginId}`,\n      );\n    }\n\n    return [\n      {\n        type: 'plugin',\n        pluginId: options.pluginId,\n        extensionPoints,\n        init,\n      },\n    ];\n  }\n\n  return {\n    $$type: '@backstage/BackendFeature' as const,\n    version: 'v1',\n    featureType: 'registrations',\n    getRegistrations,\n  } as InternalBackendRegistrations;\n}\n"],"names":[],"mappings":";;AA+CO,SAAS,oBACd,OACgB,EAAA;AAChB,EAAA,SAAS,gBAAmB,GAAA;AAC1B,IAAA,MAAM,kBACJ,EAAC;AACH,IAAA,IAAI,IAA8D,GAAA,KAAA,CAAA;AAElE,IAAA,OAAA,CAAQ,QAAS,CAAA;AAAA,MACf,sBAAA,CAAuB,KAAK,IAAM,EAAA;AAChC,QAAA,IAAI,IAAM,EAAA;AACR,UAAM,MAAA,IAAI,MAAM,kDAAkD,CAAA;AAAA;AAEpE,QAAA,eAAA,CAAgB,IAAK,CAAA,CAAC,GAAK,EAAA,IAAI,CAAC,CAAA;AAAA,OAClC;AAAA,MACA,aAAa,OAAS,EAAA;AACpB,QAAA,IAAI,IAAM,EAAA;AACR,UAAM,MAAA,IAAI,MAAM,uCAAuC,CAAA;AAAA;AAEzD,QAAO,IAAA,GAAA;AAAA,UACL,MAAM,OAAQ,CAAA,IAAA;AAAA,UACd,MAAM,OAAQ,CAAA;AAAA,SAChB;AAAA;AACF,KACD,CAAA;AAED,IAAA,IAAI,CAAC,IAAM,EAAA;AACT,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,2CAAA,EAA8C,QAAQ,QAAQ,CAAA;AAAA,OAChE;AAAA;AAGF,IAAO,OAAA;AAAA,MACL;AAAA,QACE,IAAM,EAAA,QAAA;AAAA,QACN,UAAU,OAAQ,CAAA,QAAA;AAAA,QAClB,eAAA;AAAA,QACA;AAAA;AACF,KACF;AAAA;AAGF,EAAO,OAAA;AAAA,IACL,MAAQ,EAAA,2BAAA;AAAA,IACR,OAAS,EAAA,IAAA;AAAA,IACT,WAAa,EAAA,eAAA;AAAA,IACb;AAAA,GACF;AACF;;;;"}