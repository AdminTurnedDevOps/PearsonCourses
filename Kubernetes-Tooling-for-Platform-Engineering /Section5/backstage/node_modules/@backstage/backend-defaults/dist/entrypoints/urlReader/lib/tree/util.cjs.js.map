{"version":3,"file":"util.cjs.js","sources":["../../../../../src/entrypoints/urlReader/lib/tree/util.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Readable, pipeline as pipelineCb } from 'stream';\nimport { promisify } from 'util';\nimport concatStream from 'concat-stream';\n\nconst pipeline = promisify(pipelineCb);\n\n// Matches a directory name + one `/` at the start of any string,\n// containing any character except `/` one or more times, and ending with a `/`\n// e.g. Will match `dirA/` in `dirA/dirB/file.ext`\nconst directoryNameRegex = /^[^\\/]+\\//;\n// Removes the first segment of a forward-slash-separated path\nexport function stripFirstDirectoryFromPath(path: string): string {\n  return path.replace(directoryNameRegex, '');\n}\n\n// Collect the stream into a buffer and return\nexport const streamToBuffer = (stream: Readable): Promise<Buffer> => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      await pipeline(stream, concatStream(resolve));\n    } catch (ex) {\n      reject(ex);\n    }\n  });\n};\n"],"names":["promisify","pipelineCb","concatStream"],"mappings":";;;;;;;;;;AAoBA,MAAM,QAAA,GAAWA,eAAUC,eAAU,CAAA;AAKrC,MAAM,kBAAqB,GAAA,WAAA;AAEpB,SAAS,4BAA4B,IAAsB,EAAA;AAChE,EAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,kBAAA,EAAoB,EAAE,CAAA;AAC5C;AAGa,MAAA,cAAA,GAAiB,CAAC,MAAsC,KAAA;AACnE,EAAA,OAAO,IAAI,OAAA,CAAQ,OAAO,OAAA,EAAS,MAAW,KAAA;AAC5C,IAAI,IAAA;AACF,MAAA,MAAM,QAAS,CAAA,MAAA,EAAQC,6BAAa,CAAA,OAAO,CAAC,CAAA;AAAA,aACrC,EAAI,EAAA;AACX,MAAA,MAAA,CAAO,EAAE,CAAA;AAAA;AACX,GACD,CAAA;AACH;;;;;"}