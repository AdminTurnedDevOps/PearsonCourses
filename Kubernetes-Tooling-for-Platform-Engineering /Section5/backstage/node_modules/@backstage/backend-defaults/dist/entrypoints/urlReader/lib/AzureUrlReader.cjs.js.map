{"version":3,"file":"AzureUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/AzureUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  getAzureCommitsUrl,\n  getAzureDownloadUrl,\n  getAzureFileFetchUrl,\n  AzureDevOpsCredentialsProvider,\n  DefaultAzureDevOpsCredentialsProvider,\n  ScmIntegrations,\n  AzureIntegration,\n} from '@backstage/integration';\nimport { Minimatch } from 'minimatch';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for Azure repos.\n *\n * @public\n */\nexport class AzureUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credentialProvider =\n      DefaultAzureDevOpsCredentialsProvider.fromIntegrations(integrations);\n    return integrations.azure.list().map(integration => {\n      const reader = new AzureUrlReader(integration, {\n        treeResponseFactory,\n        credentialsProvider: credentialProvider,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: AzureIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n      credentialsProvider: AzureDevOpsCredentialsProvider;\n    },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // TODO: etag is not implemented yet.\n    const { signal } = options ?? {};\n\n    const builtUrl = getAzureFileFetchUrl(url);\n    let response: Response;\n    try {\n      const credentials = await this.deps.credentialsProvider.getCredentials({\n        url: builtUrl,\n      });\n      response = await fetch(builtUrl, {\n        headers: credentials?.headers,\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        ...(signal && { signal: signal as any }),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${url}, ${e}`);\n    }\n\n    // for private repos when PAT is not valid, Azure API returns a http status code 203 with sign in page html\n    if (response.ok && response.status !== 203) {\n      return ReadUrlResponseFactory.fromResponse(response);\n    }\n\n    const message = `${url} could not be read as ${builtUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const { etag, filter, signal } = options ?? {};\n\n    // TODO: Support filepath based reading tree feature like other providers\n\n    // Get latest commit SHA\n\n    const credentials = await this.deps.credentialsProvider.getCredentials({\n      url: url,\n    });\n\n    const commitsAzureResponse = await fetch(getAzureCommitsUrl(url), {\n      headers: credentials?.headers,\n    });\n    if (!commitsAzureResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${commitsAzureResponse.status} ${commitsAzureResponse.statusText}`;\n      if (commitsAzureResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    const commitSha = (await commitsAzureResponse.json()).value[0].commitId;\n    if (etag && etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const archiveAzureResponse = await fetch(getAzureDownloadUrl(url), {\n      headers: {\n        ...credentials?.headers,\n        Accept: 'application/zip',\n      },\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can be\n      // removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      ...(signal && { signal: signal as any }),\n    });\n    if (!archiveAzureResponse.ok) {\n      const message = `Failed to read tree from ${url}, ${archiveAzureResponse.status} ${archiveAzureResponse.statusText}`;\n      if (archiveAzureResponse.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    // When downloading a zip archive from azure on a subpath we get an extra directory\n    // layer added at the top. With for example the file /a/b/c.txt and a download of\n    // /a/b, we'll see /b/c.txt in the zip archive. This picks out /b so that we can remove it.\n    let subpath;\n    const path = new URL(url).searchParams.get('path');\n    if (path) {\n      subpath = path.split('/').filter(Boolean).slice(-1)[0];\n    }\n\n    return await this.deps.treeResponseFactory.fromZipArchive({\n      response: archiveAzureResponse,\n      etag: commitSha,\n      filter,\n      subpath,\n    });\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const treeUrl = new URL(url);\n\n    const path = treeUrl.searchParams.get('path');\n    const matcher = path && new Minimatch(path.replace(/^\\/+/, ''));\n\n    // TODO(freben): For now, read the entire repo and filter through that. In\n    // a future improvement, we could be smart and try to deduce that non-glob\n    // prefixes (like for filepaths such as some-prefix/**/a.yaml) can be used\n    // to get just that part of the repo.\n    treeUrl.searchParams.delete('path');\n\n    const tree = await this.readTree(treeUrl.toString(), {\n      etag: options?.etag,\n      signal: options?.signal,\n      filter: p => (matcher ? matcher.match(p) : true),\n    });\n    const files = await tree.files();\n\n    return {\n      etag: tree.etag,\n      files: files.map(file => ({\n        url: this.integration.resolveUrl({\n          url: `/${file.path}`,\n          base: url,\n        }),\n        content: file.content,\n        lastModifiedAt: file.lastModifiedAt,\n      })),\n    };\n  }\n\n  toString() {\n    const { host, credentials } = this.integration.config;\n    return `azure{host=${host},authed=${Boolean(\n      credentials !== undefined && credentials.length > 0,\n    )}}`;\n  }\n}\n"],"names":["ScmIntegrations","DefaultAzureDevOpsCredentialsProvider","getAzureFileFetchUrl","ReadUrlResponseFactory","NotFoundError","getAzureCommitsUrl","NotModifiedError","getAzureDownloadUrl","Minimatch"],"mappings":";;;;;;;AA4CO,MAAM,cAA2C,CAAA;AAAA,EAetD,WAAA,CACmB,aACA,IAIjB,EAAA;AALiB,IAAA,IAAA,CAAA,WAAA,GAAA,WAAA;AACA,IAAA,IAAA,CAAA,IAAA,GAAA,IAAA;AAAA;AAIhB,EApBH,OAAO,OAAyB,GAAA,CAAC,EAAE,MAAA,EAAQ,qBAA0B,KAAA;AACnE,IAAM,MAAA,YAAA,GAAeA,2BAAgB,CAAA,UAAA,CAAW,MAAM,CAAA;AACtD,IAAM,MAAA,kBAAA,GACJC,iDAAsC,CAAA,gBAAA,CAAiB,YAAY,CAAA;AACrE,IAAA,OAAO,YAAa,CAAA,KAAA,CAAM,IAAK,EAAA,CAAE,IAAI,CAAe,WAAA,KAAA;AAClD,MAAM,MAAA,MAAA,GAAS,IAAI,cAAA,CAAe,WAAa,EAAA;AAAA,QAC7C,mBAAA;AAAA,QACA,mBAAqB,EAAA;AAAA,OACtB,CAAA;AACD,MAAA,MAAM,YAAY,CAAC,GAAA,KAAa,GAAI,CAAA,IAAA,KAAS,YAAY,MAAO,CAAA,IAAA;AAChE,MAAO,OAAA,EAAE,QAAQ,SAAU,EAAA;AAAA,KAC5B,CAAA;AAAA,GACH;AAAA,EAUA,MAAM,KAAK,GAA8B,EAAA;AACvC,IAAA,MAAM,QAAW,GAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAA;AACvC,IAAA,OAAO,SAAS,MAAO,EAAA;AAAA;AACzB,EAEA,MAAM,OACJ,CAAA,GAAA,EACA,OAC0C,EAAA;AAE1C,IAAA,MAAM,EAAE,MAAA,EAAW,GAAA,OAAA,IAAW,EAAC;AAE/B,IAAM,MAAA,QAAA,GAAWC,iCAAqB,GAAG,CAAA;AACzC,IAAI,IAAA,QAAA;AACJ,IAAI,IAAA;AACF,MAAA,MAAM,WAAc,GAAA,MAAM,IAAK,CAAA,IAAA,CAAK,oBAAoB,cAAe,CAAA;AAAA,QACrE,GAAK,EAAA;AAAA,OACN,CAAA;AACD,MAAW,QAAA,GAAA,MAAM,MAAM,QAAU,EAAA;AAAA,QAC/B,SAAS,WAAa,EAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOtB,GAAI,MAAU,IAAA,EAAE,MAAsB;AAAA,OACvC,CAAA;AAAA,aACM,CAAG,EAAA;AACV,MAAA,MAAM,IAAI,KAAM,CAAA,CAAA,eAAA,EAAkB,GAAG,CAAA,EAAA,EAAK,CAAC,CAAE,CAAA,CAAA;AAAA;AAI/C,IAAA,IAAI,QAAS,CAAA,EAAA,IAAM,QAAS,CAAA,MAAA,KAAW,GAAK,EAAA;AAC1C,MAAO,OAAAC,6CAAA,CAAuB,aAAa,QAAQ,CAAA;AAAA;AAGrD,IAAM,MAAA,OAAA,GAAU,CAAG,EAAA,GAAG,CAAyB,sBAAA,EAAA,QAAQ,KAAK,QAAS,CAAA,MAAM,CAAI,CAAA,EAAA,QAAA,CAAS,UAAU,CAAA,CAAA;AAClG,IAAI,IAAA,QAAA,CAAS,WAAW,GAAK,EAAA;AAC3B,MAAM,MAAA,IAAIC,qBAAc,OAAO,CAAA;AAAA;AAEjC,IAAM,MAAA,IAAI,MAAM,OAAO,CAAA;AAAA;AACzB,EAEA,MAAM,QACJ,CAAA,GAAA,EACA,OAC2C,EAAA;AAC3C,IAAA,MAAM,EAAE,IAAM,EAAA,MAAA,EAAQ,MAAO,EAAA,GAAI,WAAW,EAAC;AAM7C,IAAA,MAAM,WAAc,GAAA,MAAM,IAAK,CAAA,IAAA,CAAK,oBAAoB,cAAe,CAAA;AAAA,MACrE;AAAA,KACD,CAAA;AAED,IAAA,MAAM,oBAAuB,GAAA,MAAM,KAAM,CAAAC,8BAAA,CAAmB,GAAG,CAAG,EAAA;AAAA,MAChE,SAAS,WAAa,EAAA;AAAA,KACvB,CAAA;AACD,IAAI,IAAA,CAAC,qBAAqB,EAAI,EAAA;AAC5B,MAAM,MAAA,OAAA,GAAU,4BAA4B,GAAG,CAAA,EAAA,EAAK,qBAAqB,MAAM,CAAA,CAAA,EAAI,qBAAqB,UAAU,CAAA,CAAA;AAClH,MAAI,IAAA,oBAAA,CAAqB,WAAW,GAAK,EAAA;AACvC,QAAM,MAAA,IAAID,qBAAc,OAAO,CAAA;AAAA;AAEjC,MAAM,MAAA,IAAI,MAAM,OAAO,CAAA;AAAA;AAGzB,IAAA,MAAM,aAAa,MAAM,oBAAA,CAAqB,MAAQ,EAAA,KAAA,CAAM,CAAC,CAAE,CAAA,QAAA;AAC/D,IAAI,IAAA,IAAA,IAAQ,SAAS,SAAW,EAAA;AAC9B,MAAA,MAAM,IAAIE,uBAAiB,EAAA;AAAA;AAG7B,IAAA,MAAM,oBAAuB,GAAA,MAAM,KAAM,CAAAC,+BAAA,CAAoB,GAAG,CAAG,EAAA;AAAA,MACjE,OAAS,EAAA;AAAA,QACP,GAAG,WAAa,EAAA,OAAA;AAAA,QAChB,MAAQ,EAAA;AAAA,OACV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,GAAI,MAAU,IAAA,EAAE,MAAsB;AAAA,KACvC,CAAA;AACD,IAAI,IAAA,CAAC,qBAAqB,EAAI,EAAA;AAC5B,MAAM,MAAA,OAAA,GAAU,4BAA4B,GAAG,CAAA,EAAA,EAAK,qBAAqB,MAAM,CAAA,CAAA,EAAI,qBAAqB,UAAU,CAAA,CAAA;AAClH,MAAI,IAAA,oBAAA,CAAqB,WAAW,GAAK,EAAA;AACvC,QAAM,MAAA,IAAIH,qBAAc,OAAO,CAAA;AAAA;AAEjC,MAAM,MAAA,IAAI,MAAM,OAAO,CAAA;AAAA;AAMzB,IAAI,IAAA,OAAA;AACJ,IAAA,MAAM,OAAO,IAAI,GAAA,CAAI,GAAG,CAAE,CAAA,YAAA,CAAa,IAAI,MAAM,CAAA;AACjD,IAAA,IAAI,IAAM,EAAA;AACR,MAAU,OAAA,GAAA,IAAA,CAAK,KAAM,CAAA,GAAG,CAAE,CAAA,MAAA,CAAO,OAAO,CAAE,CAAA,KAAA,CAAM,CAAE,CAAA,CAAA,CAAE,CAAC,CAAA;AAAA;AAGvD,IAAA,OAAO,MAAM,IAAA,CAAK,IAAK,CAAA,mBAAA,CAAoB,cAAe,CAAA;AAAA,MACxD,QAAU,EAAA,oBAAA;AAAA,MACV,IAAM,EAAA,SAAA;AAAA,MACN,MAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA;AACH,EAEA,MAAM,MACJ,CAAA,GAAA,EACA,OACyC,EAAA;AACzC,IAAM,MAAA,OAAA,GAAU,IAAI,GAAA,CAAI,GAAG,CAAA;AAE3B,IAAA,MAAM,IAAO,GAAA,OAAA,CAAQ,YAAa,CAAA,GAAA,CAAI,MAAM,CAAA;AAC5C,IAAM,MAAA,OAAA,GAAU,QAAQ,IAAII,mBAAA,CAAU,KAAK,OAAQ,CAAA,MAAA,EAAQ,EAAE,CAAC,CAAA;AAM9D,IAAQ,OAAA,CAAA,YAAA,CAAa,OAAO,MAAM,CAAA;AAElC,IAAA,MAAM,OAAO,MAAM,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,UAAY,EAAA;AAAA,MACnD,MAAM,OAAS,EAAA,IAAA;AAAA,MACf,QAAQ,OAAS,EAAA,MAAA;AAAA,MACjB,QAAQ,CAAM,CAAA,KAAA,OAAA,GAAU,OAAQ,CAAA,KAAA,CAAM,CAAC,CAAI,GAAA;AAAA,KAC5C,CAAA;AACD,IAAM,MAAA,KAAA,GAAQ,MAAM,IAAA,CAAK,KAAM,EAAA;AAE/B,IAAO,OAAA;AAAA,MACL,MAAM,IAAK,CAAA,IAAA;AAAA,MACX,KAAA,EAAO,KAAM,CAAA,GAAA,CAAI,CAAS,IAAA,MAAA;AAAA,QACxB,GAAA,EAAK,IAAK,CAAA,WAAA,CAAY,UAAW,CAAA;AAAA,UAC/B,GAAA,EAAK,CAAI,CAAA,EAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAAA,UAClB,IAAM,EAAA;AAAA,SACP,CAAA;AAAA,QACD,SAAS,IAAK,CAAA,OAAA;AAAA,QACd,gBAAgB,IAAK,CAAA;AAAA,OACrB,CAAA;AAAA,KACJ;AAAA;AACF,EAEA,QAAW,GAAA;AACT,IAAA,MAAM,EAAE,IAAA,EAAM,WAAY,EAAA,GAAI,KAAK,WAAY,CAAA,MAAA;AAC/C,IAAO,OAAA,CAAA,WAAA,EAAc,IAAI,CAAW,QAAA,EAAA,OAAA;AAAA,MAClC,WAAA,KAAgB,KAAa,CAAA,IAAA,WAAA,CAAY,MAAS,GAAA;AAAA,KACnD,CAAA,CAAA,CAAA;AAAA;AAEL;;;;"}