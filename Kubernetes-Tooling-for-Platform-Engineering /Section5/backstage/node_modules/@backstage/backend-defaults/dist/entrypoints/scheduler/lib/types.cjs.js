'use strict';

var cron = require('cron');
var luxon = require('luxon');
var zod = require('zod');

function isValidOptionalDurationString(d) {
  try {
    return !d || luxon.Duration.fromISO(d).isValid;
  } catch {
    return false;
  }
}
function isValidCronFormat(c) {
  try {
    if (!c) {
      return false;
    }
    new cron.CronTime(c);
    return true;
  } catch {
    return false;
  }
}
function isValidTrigger(t) {
  return t === "manual";
}
zod.z.object({
  version: zod.z.literal(1),
  initialDelayDuration: zod.z.string().optional().refine(isValidOptionalDurationString, {
    message: "Invalid duration, expecting ISO Period"
  }),
  recurringAtMostEveryDuration: zod.z.string().refine(isValidOptionalDurationString, {
    message: "Invalid duration, expecting ISO Period"
  }),
  timeoutAfterDuration: zod.z.string().refine(isValidOptionalDurationString, {
    message: "Invalid duration, expecting ISO Period"
  })
});
const taskSettingsV2Schema = zod.z.object({
  version: zod.z.literal(2),
  cadence: zod.z.string().refine(isValidCronFormat, { message: "Invalid cron" }).or(
    zod.z.string().refine(isValidTrigger, {
      message: "Invalid trigger, expecting 'manual'"
    })
  ).or(
    zod.z.string().refine(isValidOptionalDurationString, {
      message: "Invalid duration, expecting ISO Period"
    })
  ),
  timeoutAfterDuration: zod.z.string().refine(isValidOptionalDurationString, {
    message: "Invalid duration, expecting ISO Period"
  }),
  initialDelayDuration: zod.z.string().optional().refine(isValidOptionalDurationString, {
    message: "Invalid duration, expecting ISO Period"
  })
});

exports.taskSettingsV2Schema = taskSettingsV2Schema;
//# sourceMappingURL=types.cjs.js.map
