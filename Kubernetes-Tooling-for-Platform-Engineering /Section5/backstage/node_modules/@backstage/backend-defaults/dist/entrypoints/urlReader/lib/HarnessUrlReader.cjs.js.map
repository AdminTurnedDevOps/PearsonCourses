{"version":3,"file":"HarnessUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/HarnessUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2025 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n  UrlReaderServiceReadTreeOptions,\n} from '@backstage/backend-plugin-api';\nimport {\n  getHarnessRequestOptions,\n  getHarnessFileContentsUrl,\n  HarnessIntegration,\n  ScmIntegrations,\n  getHarnessLatestCommitUrl,\n  getHarnessArchiveUrl,\n  parseHarnessUrl,\n} from '@backstage/integration';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport fetch, { Response } from 'node-fetch';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport {\n  AuthenticationError,\n  NotFoundError,\n  NotModifiedError,\n} from '@backstage/errors';\nimport { Readable } from 'stream';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for the Harness code v1 api.\n *\n *\n * @public\n */\nexport class HarnessUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    return ScmIntegrations.fromConfig(config)\n      .harness.list()\n      .map(integration => {\n        const reader = new HarnessUrlReader(integration, {\n          treeResponseFactory,\n        });\n        const predicate = (url: URL) => {\n          return url.host === integration.config.host;\n        };\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: HarnessIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    let response: Response;\n    const blobUrl = getHarnessFileContentsUrl(this.integration.config, url);\n\n    try {\n      response = await fetch(blobUrl, {\n        method: 'GET',\n        ...getHarnessRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${blobUrl}, ${e}`);\n    }\n\n    if (response.ok) {\n      // Harness Code returns the raw content object\n      const jsonResponse = { data: response.body };\n      if (jsonResponse) {\n        return ReadUrlResponseFactory.fromReadable(\n          Readable.from(jsonResponse.data),\n          {\n            etag: response.headers.get('ETag') ?? undefined,\n          },\n        );\n      }\n\n      throw new Error(`Unknown json: ${jsonResponse}`);\n    }\n\n    const message = `${url} x ${blobUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.status === 403) {\n      throw new AuthenticationError();\n    }\n\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const lastCommitHash = await this.getLastCommitHash(url);\n\n    if (options?.etag && options.etag === lastCommitHash) {\n      throw new NotModifiedError();\n    }\n\n    const archiveUri = getHarnessArchiveUrl(this.integration.config, url);\n\n    let response: Response;\n    try {\n      response = await fetch(archiveUri, {\n        method: 'GET',\n        ...getHarnessRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${archiveUri}, ${e}`);\n    }\n\n    const parsedUri = parseHarnessUrl(this.integration.config, url);\n\n    return this.deps.treeResponseFactory.fromZipArchive({\n      stream: Readable.from(response.body),\n      subpath: parsedUri.path,\n      etag: lastCommitHash,\n      filter: options?.filter,\n    });\n  }\n\n  search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('HarnessUrlReader search not implemented.');\n  }\n\n  toString() {\n    const { host } = this.integration.config;\n    return `harness{host=${host},authed=${Boolean(\n      this.integration.config.token || this.integration.config.apiKey,\n    )}}`;\n  }\n  private async getLastCommitHash(url: string): Promise<string> {\n    const commitUri = getHarnessLatestCommitUrl(this.integration.config, url);\n\n    const response = await fetch(\n      commitUri,\n      getHarnessRequestOptions(this.integration.config),\n    );\n    if (!response.ok) {\n      const message = `Failed to retrieve latest commit information from ${commitUri}, ${response.status} ${response.statusText}`;\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return (await response.json()).latest_commit.sha;\n  }\n}\n"],"names":["ScmIntegrations","getHarnessFileContentsUrl","fetch","getHarnessRequestOptions","ReadUrlResponseFactory","Readable","NotFoundError","NotModifiedError","AuthenticationError","getHarnessArchiveUrl","parseHarnessUrl","getHarnessLatestCommitUrl"],"mappings":"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"}