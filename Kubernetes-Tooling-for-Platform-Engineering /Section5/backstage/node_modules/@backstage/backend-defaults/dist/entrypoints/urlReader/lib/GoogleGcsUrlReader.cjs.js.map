{"version":3,"file":"GoogleGcsUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/GoogleGcsUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as GoogleCloud from '@google-cloud/storage';\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { ReaderFactory } from './types';\nimport getRawBody from 'raw-body';\nimport {\n  GoogleGcsIntegrationConfig,\n  readGoogleGcsIntegrationConfig,\n} from '@backstage/integration';\nimport { Readable } from 'stream';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport packageinfo from '../../../../package.json';\n\nconst GOOGLE_GCS_HOST = 'storage.cloud.google.com';\n\nconst parseURL = (\n  url: string,\n): { host: string; bucket: string; key: string } => {\n  const { host, pathname } = new URL(url);\n\n  if (host !== GOOGLE_GCS_HOST) {\n    throw new Error(`not a valid GCS URL: ${url}`);\n  }\n\n  const [, bucket, ...key] = pathname.split('/');\n  return {\n    host: host,\n    bucket,\n    key: key.join('/'),\n  };\n};\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files on Google GCS.\n *\n * @public\n */\nexport class GoogleGcsUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, logger }) => {\n    if (!config.has('integrations.googleGcs')) {\n      return [];\n    }\n    const gcsConfig = readGoogleGcsIntegrationConfig(\n      config.getConfig('integrations.googleGcs'),\n    );\n    let storage: GoogleCloud.Storage;\n    if (!gcsConfig.clientEmail || !gcsConfig.privateKey) {\n      logger.info(\n        'googleGcs credentials not found in config. Using default credentials provider.',\n      );\n      storage = new GoogleCloud.Storage({\n        userAgent: `backstage/backend-defaults.GoogleGcsUrlReader/${packageinfo.version}`,\n      });\n    } else {\n      storage = new GoogleCloud.Storage({\n        credentials: {\n          client_email: gcsConfig.clientEmail || undefined,\n          private_key: gcsConfig.privateKey || undefined,\n        },\n        userAgent: `backstage/backend-defaults.GoogleGcsUrlReader/${packageinfo.version}`,\n      });\n    }\n    const reader = new GoogleGcsUrlReader(gcsConfig, storage);\n    const predicate = (url: URL) => url.host === GOOGLE_GCS_HOST;\n    return [{ reader, predicate }];\n  };\n\n  constructor(\n    private readonly integration: GoogleGcsIntegrationConfig,\n    private readonly storage: GoogleCloud.Storage,\n  ) {}\n\n  private readStreamFromUrl(url: string): Readable {\n    const { bucket, key } = parseURL(url);\n    return this.storage.bucket(bucket).file(key).createReadStream();\n  }\n\n  async read(url: string): Promise<Buffer> {\n    try {\n      return await getRawBody(this.readStreamFromUrl(url));\n    } catch (error) {\n      throw new Error(`unable to read gcs file from ${url}, ${error}`);\n    }\n  }\n\n  async readUrl(\n    url: string,\n    _options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    // TODO etag is not implemented yet.\n    const stream = this.readStreamFromUrl(url);\n    return ReadUrlResponseFactory.fromReadable(stream);\n  }\n\n  async readTree(): Promise<UrlReaderServiceReadTreeResponse> {\n    throw new Error('GcsUrlReader does not implement readTree');\n  }\n\n  async search(url: string): Promise<UrlReaderServiceSearchResponse> {\n    const { bucket, key: pattern } = parseURL(url);\n\n    if (!pattern.endsWith('*') || pattern.indexOf('*') !== pattern.length - 1) {\n      throw new Error('GcsUrlReader only supports prefix-based searches');\n    }\n\n    const [files] = await this.storage.bucket(bucket).getFiles({\n      autoPaginate: true,\n      prefix: pattern.split('*').join(''),\n    });\n\n    return {\n      files: files.map(file => {\n        const fullUrl = ['https:/', GOOGLE_GCS_HOST, bucket, file.name].join(\n          '/',\n        );\n        return {\n          url: fullUrl,\n          content: async () => {\n            const readResponse = await this.readUrl(fullUrl);\n            return readResponse.buffer();\n          },\n        };\n      }),\n      // TODO etag is not implemented yet.\n      etag: 'NOT/IMPLEMENTED',\n    };\n  }\n\n  toString() {\n    const key = this.integration.privateKey;\n    return `googleGcs{host=${GOOGLE_GCS_HOST},authed=${Boolean(key)}}`;\n  }\n}\n"],"names":["readGoogleGcsIntegrationConfig","GoogleCloud","packageinfo","getRawBody","ReadUrlResponseFactory"],"mappings":"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"}