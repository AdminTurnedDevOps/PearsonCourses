{"version":3,"file":"databaseServiceFactory.cjs.js","sources":["../../../src/entrypoints/database/databaseServiceFactory.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { ConfigReader } from '@backstage/config';\nimport { DatabaseManager } from './DatabaseManager';\n\n/**\n * Database access and management via `knex`.\n *\n * See {@link @backstage/code-plugin-api#DatabaseService}\n * and {@link https://backstage.io/docs/backend-system/core-services/database | the service docs}\n * for more information.\n *\n * @public\n */\nexport const databaseServiceFactory = createServiceFactory({\n  service: coreServices.database,\n  deps: {\n    config: coreServices.rootConfig,\n    lifecycle: coreServices.lifecycle,\n    logger: coreServices.logger,\n    pluginMetadata: coreServices.pluginMetadata,\n    rootLifecycle: coreServices.rootLifecycle,\n    rootLogger: coreServices.rootLogger,\n  },\n  async createRootContext({ config, rootLifecycle, rootLogger }) {\n    return config.getOptional('backend.database')\n      ? DatabaseManager.fromConfig(config, { rootLifecycle, rootLogger })\n      : DatabaseManager.fromConfig(\n          new ConfigReader({\n            backend: {\n              database: { client: 'better-sqlite3', connection: ':memory:' },\n            },\n          }),\n          { rootLifecycle, rootLogger },\n        );\n  },\n  async factory({ pluginMetadata, lifecycle, logger }, databaseManager) {\n    return databaseManager.forPlugin(pluginMetadata.getId(), {\n      lifecycle,\n      logger,\n    });\n  },\n});\n"],"names":["createServiceFactory","coreServices","config","DatabaseManager","ConfigReader"],"mappings":";;;;;;AAgCO,MAAM,yBAAyBA,qCAAqB,CAAA;AAAA,EACzD,SAASC,6BAAa,CAAA,QAAA;AAAA,EACtB,IAAM,EAAA;AAAA,IACJ,QAAQA,6BAAa,CAAA,UAAA;AAAA,IACrB,WAAWA,6BAAa,CAAA,SAAA;AAAA,IACxB,QAAQA,6BAAa,CAAA,MAAA;AAAA,IACrB,gBAAgBA,6BAAa,CAAA,cAAA;AAAA,IAC7B,eAAeA,6BAAa,CAAA,aAAA;AAAA,IAC5B,YAAYA,6BAAa,CAAA;AAAA,GAC3B;AAAA,EACA,MAAM,iBAAkB,CAAA,UAAEC,QAAQ,EAAA,aAAA,EAAe,YAAc,EAAA;AAC7D,IAAA,OAAOA,QAAO,CAAA,WAAA,CAAY,kBAAkB,CAAA,GACxCC,+BAAgB,CAAA,UAAA,CAAWD,QAAQ,EAAA,EAAE,aAAe,EAAA,UAAA,EAAY,CAAA,GAChEC,+BAAgB,CAAA,UAAA;AAAA,MACd,IAAIC,mBAAa,CAAA;AAAA,QACf,OAAS,EAAA;AAAA,UACP,QAAU,EAAA,EAAE,MAAQ,EAAA,gBAAA,EAAkB,YAAY,UAAW;AAAA;AAC/D,OACD,CAAA;AAAA,MACD,EAAE,eAAe,UAAW;AAAA,KAC9B;AAAA,GACN;AAAA,EACA,MAAM,OAAQ,CAAA,EAAE,gBAAgB,SAAW,EAAA,MAAA,IAAU,eAAiB,EAAA;AACpE,IAAA,OAAO,eAAgB,CAAA,SAAA,CAAU,cAAe,CAAA,KAAA,EAAS,EAAA;AAAA,MACvD,SAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA;AAEL,CAAC;;;;"}