{"version":3,"file":"DefaultRootHttpRouter.cjs.js","sources":["../../../src/entrypoints/rootHttpRouter/DefaultRootHttpRouter.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RootHttpRouterService } from '@backstage/backend-plugin-api';\nimport { Handler, Router } from 'express';\nimport trimEnd from 'lodash/trimEnd';\n\nfunction normalizePath(path: string): string {\n  return `${trimEnd(path, '/')}/`;\n}\n\n/**\n * Options for the {@link DefaultRootHttpRouter} class.\n *\n * @public\n */\nexport interface DefaultRootHttpRouterOptions {\n  /**\n   * The path to forward all unmatched requests to. Defaults to '/api/app' if\n   * not given. Disables index path behavior if false is given.\n   */\n  indexPath?: string | false;\n}\n\n/**\n * The default implementation of the {@link @backstage/backend-plugin-api#RootHttpRouterService} interface for\n * {@link @backstage/backend-plugin-api#coreServices.rootHttpRouter}.\n *\n * @public\n */\nexport class DefaultRootHttpRouter implements RootHttpRouterService {\n  #indexPath?: string;\n\n  #router = Router();\n  #namedRoutes = Router();\n  #indexRouter = Router();\n  #existingPaths = new Array<string>();\n\n  static create(options?: DefaultRootHttpRouterOptions) {\n    let indexPath;\n    if (options?.indexPath === false) {\n      indexPath = undefined;\n    } else if (options?.indexPath === undefined) {\n      indexPath = '/api/app';\n    } else if (options?.indexPath === '') {\n      throw new Error('indexPath option may not be an empty string');\n    } else {\n      indexPath = options.indexPath;\n    }\n    return new DefaultRootHttpRouter(indexPath);\n  }\n\n  private constructor(indexPath?: string) {\n    this.#indexPath = indexPath;\n    this.#router.use(this.#namedRoutes);\n\n    // Any request with a /api/ prefix will skip the index router, even if no named router matches\n    this.#router.use('/api/', (_req, _res, next) => {\n      next('router');\n    });\n\n    if (this.#indexPath) {\n      this.#router.use(this.#indexRouter);\n    }\n  }\n\n  use(path: string, handler: Handler) {\n    if (path.match(/^[/\\s]*$/)) {\n      throw new Error(`Root router path may not be empty`);\n    }\n    const conflictingPath = this.#findConflictingPath(path);\n    if (conflictingPath) {\n      throw new Error(\n        `Path ${path} conflicts with the existing path ${conflictingPath}`,\n      );\n    }\n    this.#existingPaths.push(path);\n    this.#namedRoutes.use(path, handler);\n\n    if (this.#indexPath === path) {\n      this.#indexRouter.use(handler);\n    }\n  }\n\n  handler(): Handler {\n    return this.#router;\n  }\n\n  #findConflictingPath(newPath: string): string | undefined {\n    const normalizedNewPath = normalizePath(newPath);\n    for (const path of this.#existingPaths) {\n      const normalizedPath = normalizePath(path);\n      if (normalizedPath.startsWith(normalizedNewPath)) {\n        return path;\n      }\n      if (normalizedNewPath.startsWith(normalizedPath)) {\n        return path;\n      }\n    }\n    return undefined;\n  }\n}\n"],"names":["trimEnd","Router"],"mappings":";;;;;;;;;AAoBA,SAAS,cAAc,IAAsB,EAAA;AAC3C,EAAA,OAAO,CAAG,EAAAA,wBAAA,CAAQ,IAAM,EAAA,GAAG,CAAC,CAAA,CAAA,CAAA;AAC9B;AAqBO,MAAM,qBAAuD,CAAA;AAAA,EAClE,UAAA;AAAA,EAEA,UAAUC,cAAO,EAAA;AAAA,EACjB,eAAeA,cAAO,EAAA;AAAA,EACtB,eAAeA,cAAO,EAAA;AAAA,EACtB,cAAA,GAAiB,IAAI,KAAc,EAAA;AAAA,EAEnC,OAAO,OAAO,OAAwC,EAAA;AACpD,IAAI,IAAA,SAAA;AACJ,IAAI,IAAA,OAAA,EAAS,cAAc,KAAO,EAAA;AAChC,MAAY,SAAA,GAAA,KAAA,CAAA;AAAA,KACd,MAAA,IAAW,OAAS,EAAA,SAAA,KAAc,KAAW,CAAA,EAAA;AAC3C,MAAY,SAAA,GAAA,UAAA;AAAA,KACd,MAAA,IAAW,OAAS,EAAA,SAAA,KAAc,EAAI,EAAA;AACpC,MAAM,MAAA,IAAI,MAAM,6CAA6C,CAAA;AAAA,KACxD,MAAA;AACL,MAAA,SAAA,GAAY,OAAQ,CAAA,SAAA;AAAA;AAEtB,IAAO,OAAA,IAAI,sBAAsB,SAAS,CAAA;AAAA;AAC5C,EAEQ,YAAY,SAAoB,EAAA;AACtC,IAAA,IAAA,CAAK,UAAa,GAAA,SAAA;AAClB,IAAK,IAAA,CAAA,OAAA,CAAQ,GAAI,CAAA,IAAA,CAAK,YAAY,CAAA;AAGlC,IAAA,IAAA,CAAK,QAAQ,GAAI,CAAA,OAAA,EAAS,CAAC,IAAA,EAAM,MAAM,IAAS,KAAA;AAC9C,MAAA,IAAA,CAAK,QAAQ,CAAA;AAAA,KACd,CAAA;AAED,IAAA,IAAI,KAAK,UAAY,EAAA;AACnB,MAAK,IAAA,CAAA,OAAA,CAAQ,GAAI,CAAA,IAAA,CAAK,YAAY,CAAA;AAAA;AACpC;AACF,EAEA,GAAA,CAAI,MAAc,OAAkB,EAAA;AAClC,IAAI,IAAA,IAAA,CAAK,KAAM,CAAA,UAAU,CAAG,EAAA;AAC1B,MAAM,MAAA,IAAI,MAAM,CAAmC,iCAAA,CAAA,CAAA;AAAA;AAErD,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,oBAAA,CAAqB,IAAI,CAAA;AACtD,IAAA,IAAI,eAAiB,EAAA;AACnB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,KAAA,EAAQ,IAAI,CAAA,kCAAA,EAAqC,eAAe,CAAA;AAAA,OAClE;AAAA;AAEF,IAAK,IAAA,CAAA,cAAA,CAAe,KAAK,IAAI,CAAA;AAC7B,IAAK,IAAA,CAAA,YAAA,CAAa,GAAI,CAAA,IAAA,EAAM,OAAO,CAAA;AAEnC,IAAI,IAAA,IAAA,CAAK,eAAe,IAAM,EAAA;AAC5B,MAAK,IAAA,CAAA,YAAA,CAAa,IAAI,OAAO,CAAA;AAAA;AAC/B;AACF,EAEA,OAAmB,GAAA;AACjB,IAAA,OAAO,IAAK,CAAA,OAAA;AAAA;AACd,EAEA,qBAAqB,OAAqC,EAAA;AACxD,IAAM,MAAA,iBAAA,GAAoB,cAAc,OAAO,CAAA;AAC/C,IAAW,KAAA,MAAA,IAAA,IAAQ,KAAK,cAAgB,EAAA;AACtC,MAAM,MAAA,cAAA,GAAiB,cAAc,IAAI,CAAA;AACzC,MAAI,IAAA,cAAA,CAAe,UAAW,CAAA,iBAAiB,CAAG,EAAA;AAChD,QAAO,OAAA,IAAA;AAAA;AAET,MAAI,IAAA,iBAAA,CAAkB,UAAW,CAAA,cAAc,CAAG,EAAA;AAChD,QAAO,OAAA,IAAA;AAAA;AACT;AAEF,IAAO,OAAA,KAAA,CAAA;AAAA;AAEX;;;;"}