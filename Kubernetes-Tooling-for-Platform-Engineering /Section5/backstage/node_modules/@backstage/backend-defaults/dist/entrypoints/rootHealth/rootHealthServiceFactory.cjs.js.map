{"version":3,"file":"rootHealthServiceFactory.cjs.js","sources":["../../../src/entrypoints/rootHealth/rootHealthServiceFactory.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RootHealthService,\n  RootLifecycleService,\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\n\n/** @internal */\nexport class DefaultRootHealthService implements RootHealthService {\n  #state: 'init' | 'up' | 'down' = 'init';\n\n  constructor(readonly options: { lifecycle: RootLifecycleService }) {\n    options.lifecycle.addStartupHook(() => {\n      this.#state = 'up';\n    });\n    options.lifecycle.addBeforeShutdownHook(() => {\n      this.#state = 'down';\n    });\n  }\n\n  async getLiveness(): Promise<{ status: number; payload?: any }> {\n    return { status: 200, payload: { status: 'ok' } };\n  }\n\n  async getReadiness(): Promise<{ status: number; payload?: any }> {\n    if (this.#state === 'init') {\n      return {\n        status: 503,\n        payload: { message: 'Backend has not started yet', status: 'error' },\n      };\n    }\n    if (this.#state === 'down') {\n      return {\n        status: 503,\n        payload: { message: 'Backend is shuttting down', status: 'error' },\n      };\n    }\n\n    return { status: 200, payload: { status: 'ok' } };\n  }\n}\n\n/**\n * @public\n */\nexport const rootHealthServiceFactory = createServiceFactory({\n  service: coreServices.rootHealth,\n  deps: {\n    lifecycle: coreServices.rootLifecycle,\n  },\n  async factory({ lifecycle }) {\n    return new DefaultRootHealthService({ lifecycle });\n  },\n});\n"],"names":["createServiceFactory","coreServices"],"mappings":";;;;AAwBO,MAAM,wBAAsD,CAAA;AAAA,EAGjE,YAAqB,OAA8C,EAAA;AAA9C,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AACnB,IAAQ,OAAA,CAAA,SAAA,CAAU,eAAe,MAAM;AACrC,MAAA,IAAA,CAAK,MAAS,GAAA,IAAA;AAAA,KACf,CAAA;AACD,IAAQ,OAAA,CAAA,SAAA,CAAU,sBAAsB,MAAM;AAC5C,MAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AAAA,KACf,CAAA;AAAA;AACH,EATA,MAAiC,GAAA,MAAA;AAAA,EAWjC,MAAM,WAA0D,GAAA;AAC9D,IAAA,OAAO,EAAE,MAAQ,EAAA,GAAA,EAAK,SAAS,EAAE,MAAA,EAAQ,MAAO,EAAA;AAAA;AAClD,EAEA,MAAM,YAA2D,GAAA;AAC/D,IAAI,IAAA,IAAA,CAAK,WAAW,MAAQ,EAAA;AAC1B,MAAO,OAAA;AAAA,QACL,MAAQ,EAAA,GAAA;AAAA,QACR,OAAS,EAAA,EAAE,OAAS,EAAA,6BAAA,EAA+B,QAAQ,OAAQ;AAAA,OACrE;AAAA;AAEF,IAAI,IAAA,IAAA,CAAK,WAAW,MAAQ,EAAA;AAC1B,MAAO,OAAA;AAAA,QACL,MAAQ,EAAA,GAAA;AAAA,QACR,OAAS,EAAA,EAAE,OAAS,EAAA,2BAAA,EAA6B,QAAQ,OAAQ;AAAA,OACnE;AAAA;AAGF,IAAA,OAAO,EAAE,MAAQ,EAAA,GAAA,EAAK,SAAS,EAAE,MAAA,EAAQ,MAAO,EAAA;AAAA;AAEpD;AAKO,MAAM,2BAA2BA,qCAAqB,CAAA;AAAA,EAC3D,SAASC,6BAAa,CAAA,UAAA;AAAA,EACtB,IAAM,EAAA;AAAA,IACJ,WAAWA,6BAAa,CAAA;AAAA,GAC1B;AAAA,EACA,MAAM,OAAA,CAAQ,EAAE,SAAA,EAAa,EAAA;AAC3B,IAAA,OAAO,IAAI,wBAAA,CAAyB,EAAE,SAAA,EAAW,CAAA;AAAA;AAErD,CAAC;;;;;"}