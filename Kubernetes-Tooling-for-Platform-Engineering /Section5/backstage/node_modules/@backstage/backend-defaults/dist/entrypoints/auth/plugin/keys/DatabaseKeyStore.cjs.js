'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var luxon = require('luxon');

const MIGRATIONS_TABLE = "backstage_backend_public_keys__knex_migrations";
const TABLE = "backstage_backend_public_keys__keys";
function applyDatabaseMigrations(knex) {
  const migrationsDir = backendPluginApi.resolvePackagePath(
    "@backstage/backend-defaults",
    "migrations/auth"
  );
  return knex.migrate.latest({
    directory: migrationsDir,
    tableName: MIGRATIONS_TABLE
  });
}
class DatabaseKeyStore {
  constructor(client, logger) {
    this.client = client;
    this.logger = logger;
  }
  static async create(options) {
    const { database, logger } = options;
    const client = await database.getClient();
    if (!database.migrations?.skip) {
      await applyDatabaseMigrations(client);
    }
    return new DatabaseKeyStore(client, logger);
  }
  async addKey(options) {
    await this.client(TABLE).insert({
      id: options.key.kid,
      key: JSON.stringify(options.key),
      expires_at: options.expiresAt.toISOString()
    });
  }
  async listKeys() {
    const rows = await this.client(TABLE).select();
    const keys = rows.map((row) => ({
      id: row.id,
      key: JSON.parse(row.key),
      expiresAt: new Date(row.expires_at)
    }));
    const validKeys = [];
    const expiredKeys = [];
    for (const key of keys) {
      if (luxon.DateTime.fromJSDate(key.expiresAt) < luxon.DateTime.local()) {
        expiredKeys.push(key);
      } else {
        validKeys.push(key);
      }
    }
    if (expiredKeys.length > 0) {
      const kids = expiredKeys.map(({ key }) => key.kid);
      this.logger.info(
        `Removing expired plugin service keys, '${kids.join("', '")}'`
      );
      this.client(TABLE).delete().whereIn("id", kids).catch((error) => {
        this.logger.error(
          "Failed to remove expired plugin service keys",
          error
        );
      });
    }
    return { keys: validKeys };
  }
}

exports.DatabaseKeyStore = DatabaseKeyStore;
exports.TABLE = TABLE;
exports.applyDatabaseMigrations = applyDatabaseMigrations;
//# sourceMappingURL=DatabaseKeyStore.cjs.js.map
