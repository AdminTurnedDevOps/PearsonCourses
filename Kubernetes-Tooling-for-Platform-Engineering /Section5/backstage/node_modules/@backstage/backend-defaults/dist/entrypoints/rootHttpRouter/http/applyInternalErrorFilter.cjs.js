'use strict';

var errors = require('@backstage/errors');
var crypto = require('crypto');

function handleBadError(error, logger) {
  const logId = crypto.randomBytes(10).toString("hex");
  logger.child({ logId }).error(`Filtered internal error with logId=${logId} from response`, error);
  const newError = new Error(`An internal error occurred logId=${logId}`);
  delete newError.stack;
  return newError;
}
function applyInternalErrorFilter(error, logger) {
  try {
    errors.assertError(error);
  } catch (assertionError) {
    errors.assertError(assertionError);
    return handleBadError(assertionError, logger);
  }
  const constructorName = error.constructor.name;
  if (constructorName === "DatabaseError") {
    return handleBadError(error, logger);
  }
  return error;
}

exports.applyInternalErrorFilter = applyInternalErrorFilter;
//# sourceMappingURL=applyInternalErrorFilter.cjs.js.map
