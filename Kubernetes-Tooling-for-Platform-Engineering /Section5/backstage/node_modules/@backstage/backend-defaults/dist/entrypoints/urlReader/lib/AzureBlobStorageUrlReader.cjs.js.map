{"version":3,"file":"AzureBlobStorageUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/AzureBlobStorageUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BlobDownloadOptions,\n  BlobServiceClient,\n  ContainerClient,\n  StorageSharedKeyCredential,\n} from '@azure/storage-blob';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { ForwardedError, NotModifiedError } from '@backstage/errors';\nimport { Readable } from 'stream';\nimport { relative } from 'path/posix';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport {\n  AzureBlobStorageIntergation,\n  AzureCredentialsManager,\n  DefaultAzureCredentialsManager,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\n\nexport function parseUrl(url: string): { path: string; container: string } {\n  const parsedUrl = new URL(url);\n  const pathSegments = parsedUrl.pathname.split('/').filter(Boolean);\n\n  if (pathSegments.length < 1) {\n    throw new Error(`Invalid Azure Blob Storage URL format: ${url}`);\n  }\n\n  // First segment is the container name, rest is the blob path\n  const container = pathSegments[0];\n  const path = pathSegments.slice(1).join('/');\n\n  return { path, container };\n}\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for Azure storage accounts urls.\n *\n * @public\n */\nexport class AzureBlobStorageUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    const credsManager =\n      DefaultAzureCredentialsManager.fromIntegrations(integrations);\n\n    return integrations.azureBlobStorage.list().map(integrationConfig => {\n      const reader = new AzureBlobStorageUrlReader(\n        credsManager,\n        integrationConfig,\n        {\n          treeResponseFactory,\n        },\n      );\n\n      const predicate = (url: URL) =>\n        url.host.endsWith(\n          `${integrationConfig.config.accountName}.${integrationConfig.config.host}`,\n        );\n      return { reader, predicate };\n    });\n  };\n\n  // private readonly blobServiceClient: BlobServiceClient;\n\n  constructor(\n    private readonly credsManager: AzureCredentialsManager,\n    private readonly integration: AzureBlobStorageIntergation,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n\n  private async createContainerClient(\n    containerName: string,\n  ): Promise<ContainerClient> {\n    const accountName = this.integration.config.accountName; // Use the account name from the integration config\n    const accountKey = this.integration.config.accountKey; // Get the account key if it exists\n\n    if (accountKey && accountName) {\n      const creds = new StorageSharedKeyCredential(accountName, accountKey);\n      const blobServiceClient = new BlobServiceClient(\n        `https://${accountName}.${this.integration.config.host}`,\n        creds,\n      );\n      return blobServiceClient.getContainerClient(containerName);\n    }\n    // Use the credentials manager to get the correct credentials\n    const credential = await this.credsManager.getCredentials(\n      accountName as string,\n    );\n\n    let blobServiceClientUrl: string;\n\n    if (this.integration.config.endpoint) {\n      if (this.integration.config.sasToken) {\n        blobServiceClientUrl = `${this.integration.config.endpoint}?${this.integration.config.sasToken}`;\n      } else {\n        blobServiceClientUrl = `${this.integration.config.endpoint}`;\n      }\n    } else {\n      blobServiceClientUrl = `https://${this.integration.config.accountName}.${this.integration.config.host}`;\n    }\n\n    const blobServiceClient = new BlobServiceClient(\n      blobServiceClientUrl,\n      credential,\n    );\n    return blobServiceClient.getContainerClient(containerName);\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const { etag, lastModifiedAfter } = options ?? {};\n\n    try {\n      const { path, container } = parseUrl(url);\n\n      const containerClient = await this.createContainerClient(container);\n      const blobClient = containerClient.getBlobClient(path);\n\n      const getBlobOptions: BlobDownloadOptions = {\n        abortSignal: options?.signal,\n        conditions: {\n          ...(etag && { ifNoneMatch: etag }),\n          ...(lastModifiedAfter && { ifModifiedSince: lastModifiedAfter }),\n        },\n      };\n\n      const downloadBlockBlobResponse = await blobClient.download(\n        0,\n        undefined,\n        getBlobOptions,\n      );\n\n      return ReadUrlResponseFactory.fromReadable(\n        downloadBlockBlobResponse.readableStreamBody as Readable,\n        {\n          etag: downloadBlockBlobResponse.etag,\n          lastModifiedAt: downloadBlockBlobResponse.lastModified,\n        },\n      );\n    } catch (e) {\n      if (e.statusCode === 304) {\n        throw new NotModifiedError();\n      }\n\n      throw new ForwardedError(\n        'Could not retrieve file from Azure Blob Storage',\n        e,\n      );\n    }\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    try {\n      const { path, container } = parseUrl(url);\n\n      const containerClient = await this.createContainerClient(container);\n\n      const blobs = containerClient.listBlobsFlat({ prefix: path });\n\n      const responses = [];\n\n      for await (const blob of blobs) {\n        const blobClient = containerClient.getBlobClient(blob.name);\n        const downloadBlockBlobResponse = await blobClient.download(\n          undefined,\n          undefined,\n          { abortSignal: options?.signal },\n        );\n\n        responses.push({\n          data: Readable.from(\n            downloadBlockBlobResponse.readableStreamBody as Readable,\n          ),\n          path: relative(path, blob.name),\n          lastModifiedAt: blob.properties.lastModified,\n        });\n      }\n\n      return this.deps.treeResponseFactory.fromReadableArray(responses);\n    } catch (e) {\n      throw new ForwardedError(\n        'Could not retrieve file tree from Azure Blob Storage',\n        e,\n      );\n    }\n  }\n\n  async search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('AzureBlobStorageUrlReader does not implement search');\n  }\n\n  toString() {\n    const accountName = this.integration.config.accountName;\n    const accountKey = this.integration.config.accountKey;\n    return `azureBlobStorage{accountName=${accountName},authed=${Boolean(\n      accountKey,\n    )}}`;\n  }\n}\n"],"names":["ScmIntegrations","DefaultAzureCredentialsManager","StorageSharedKeyCredential","blobServiceClient","BlobServiceClient","ReadUrlResponseFactory","NotModifiedError","ForwardedError","Readable","relative"],"mappings":"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"}