{"version":3,"file":"GerritUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/GerritUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport { Base64Decode } from 'base64-stream';\nimport fetch, { Response } from 'node-fetch';\nimport { Readable } from 'stream';\nimport {\n  GerritIntegration,\n  ScmIntegrations,\n  buildGerritGitilesArchiveUrl,\n  getGerritBranchApiUrl,\n  getGerritFileContentsApiUrl,\n  getGerritRequestOptions,\n  parseGerritGitilesUrl,\n  parseGerritJsonResponse,\n} from '@backstage/integration';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files in Gerrit.\n *\n * @remarks\n * To be able to link to Git contents for Gerrit providers in a user friendly\n * way we are depending on that there is a Gitiles installation somewhere\n * that we can link to. It is perfectly possible to integrate Gerrit with\n * Backstage without Gitiles since all API calls goes directly to Gerrit.\n * However if Gitiles is configured, readTree will use it to fetch\n * an archive instead of cloning the repository.\n *\n * The \"host\" variable in the config is the Gerrit host. The address where\n * Gitiles is installed may be on the same host but it could be on a\n * separate host. For example a Gerrit instance could be hosted on\n * \"gerrit-review.company.com\" but the repos could be browsable on a separate\n * host, e.g. \"gerrit.company.com\" and the human readable URL would then\n * not point to the API host.\n *\n * @public\n */\nexport class GerritUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    if (!integrations.gerrit) {\n      return [];\n    }\n    return integrations.gerrit.list().map(integration => {\n      const reader = new GerritUrlReader(integration, { treeResponseFactory });\n      const predicate = (url: URL) => {\n        const gitilesUrl = new URL(integration.config.gitilesBaseUrl!);\n        // If gitilesUrl is not specified it will default to\n        // \"integration.config.host\".\n        return url.host === gitilesUrl.host;\n      };\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GerritIntegration,\n    private readonly deps: { treeResponseFactory: ReadTreeResponseFactory },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const apiUrl = getGerritFileContentsApiUrl(this.integration.config, url);\n    let response: Response;\n    try {\n      response = await fetch(apiUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n        // TODO(freben): The signal cast is there because pre-3.x versions of\n        // node-fetch have a very slightly deviating AbortSignal type signature.\n        // The difference does not affect us in practice however. The cast can\n        // be removed after we support ESM for CLI dependencies and migrate to\n        // version 3 of node-fetch.\n        // https://github.com/backstage/backstage/issues/8242\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read gerrit file ${url}, ${e}`);\n    }\n\n    if (response.ok) {\n      let responseBody: string;\n      return {\n        buffer: async () => {\n          if (responseBody === undefined) {\n            responseBody = await response.text();\n          }\n          return Buffer.from(responseBody, 'base64');\n        },\n        stream: () => {\n          const readable = Readable.from(response.body);\n          return readable.pipe(new Base64Decode());\n        },\n      };\n    }\n    if (response.status === 404) {\n      throw new NotFoundError(`File ${url} not found.`);\n    }\n    throw new Error(\n      `${url} could not be read as ${apiUrl}, ${response.status} ${response.statusText}`,\n    );\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const apiUrl = getGerritBranchApiUrl(this.integration.config, url);\n    let response: Response;\n    try {\n      response = await fetch(apiUrl, {\n        method: 'GET',\n        ...getGerritRequestOptions(this.integration.config),\n      });\n    } catch (e) {\n      throw new Error(`Unable to read branch state ${url}, ${e}`);\n    }\n\n    if (response.status === 404) {\n      throw new NotFoundError(`Not found: ${url}`);\n    }\n\n    if (!response.ok) {\n      throw new Error(\n        `${url} could not be read as ${apiUrl}, ${response.status} ${response.statusText}`,\n      );\n    }\n    const branchInfo = (await parseGerritJsonResponse(response as any)) as {\n      revision: string;\n    };\n    if (options?.etag === branchInfo.revision) {\n      throw new NotModifiedError();\n    }\n\n    return this.readTreeFromGitiles(url, branchInfo.revision, options);\n  }\n\n  async search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('GerritReader does not implement search');\n  }\n\n  toString() {\n    const { host, password } = this.integration.config;\n    return `gerrit{host=${host},authed=${Boolean(password)}}`;\n  }\n\n  private async readTreeFromGitiles(\n    url: string,\n    revision: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ) {\n    const { branch, filePath, project } = parseGerritGitilesUrl(\n      this.integration.config,\n      url,\n    );\n    const archiveUrl = buildGerritGitilesArchiveUrl(\n      this.integration.config,\n      project,\n      branch,\n      filePath,\n    );\n    const archiveResponse = await fetch(archiveUrl, {\n      ...getGerritRequestOptions(this.integration.config),\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can\n      // be removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      signal: options?.signal as any,\n    });\n\n    if (archiveResponse.status === 404) {\n      throw new NotFoundError(`Not found: ${archiveUrl}`);\n    }\n\n    if (!archiveResponse.ok) {\n      throw new Error(\n        `${url} could not be read as ${archiveUrl}, ${archiveResponse.status} ${archiveResponse.statusText}`,\n      );\n    }\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      stream: archiveResponse.body as unknown as Readable,\n      etag: revision,\n      filter: options?.filter,\n      stripFirstDirectory: false,\n    });\n  }\n}\n"],"names":["ScmIntegrations","getGerritFileContentsApiUrl","fetch","getGerritRequestOptions","Readable","Base64Decode","NotFoundError","getGerritBranchApiUrl","parseGerritJsonResponse","NotModifiedError","parseGerritGitilesUrl","buildGerritGitilesArchiveUrl"],"mappings":"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"}