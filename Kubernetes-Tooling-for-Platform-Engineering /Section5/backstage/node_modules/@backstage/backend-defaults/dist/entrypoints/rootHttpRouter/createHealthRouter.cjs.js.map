{"version":3,"file":"createHealthRouter.cjs.js","sources":["../../../src/entrypoints/rootHttpRouter/createHealthRouter.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RootConfigService,\n  RootHealthService,\n} from '@backstage/backend-plugin-api';\nimport Router from 'express-promise-router';\nimport { Request, Response } from 'express';\n\nconst HEADER_CONFIG_KEY = 'backend.health.headers';\n\n/**\n * @public\n */\nexport function createHealthRouter(options: {\n  health: RootHealthService;\n  config: RootConfigService;\n}) {\n  const headersConfig = options.config\n    .getOptionalConfig(HEADER_CONFIG_KEY)\n    ?.get();\n  if (headersConfig) {\n    for (const [key, value] of Object.entries(headersConfig)) {\n      if (!key || typeof key !== 'string') {\n        throw new Error(\n          `Invalid header name in at ${HEADER_CONFIG_KEY}, must be a non-empty string`,\n        );\n      }\n      if (!value || typeof value !== 'string') {\n        throw new Error(\n          `Invalid header value in at ${HEADER_CONFIG_KEY}, must be a non-empty string`,\n        );\n      }\n    }\n  }\n  const headers = headersConfig && new Headers(headersConfig as HeadersInit);\n\n  const router = Router();\n\n  router.get(\n    '/.backstage/health/v1/readiness',\n    async (_request: Request, response: Response) => {\n      const { status, payload } = await options.health.getReadiness();\n      if (headers) {\n        response.setHeaders(headers);\n      }\n      response.status(status).json(payload);\n    },\n  );\n\n  router.get(\n    '/.backstage/health/v1/liveness',\n    async (_request: Request, response: Response) => {\n      const { status, payload } = await options.health.getLiveness();\n      if (headers) {\n        response.setHeaders(headers);\n      }\n      response.status(status).json(payload);\n    },\n  );\n\n  return router;\n}\n"],"names":["Router"],"mappings":";;;;;;;;AAuBA,MAAM,iBAAoB,GAAA,wBAAA;AAKnB,SAAS,mBAAmB,OAGhC,EAAA;AACD,EAAA,MAAM,gBAAgB,OAAQ,CAAA,MAAA,CAC3B,iBAAkB,CAAA,iBAAiB,GAClC,GAAI,EAAA;AACR,EAAA,IAAI,aAAe,EAAA;AACjB,IAAA,KAAA,MAAW,CAAC,GAAK,EAAA,KAAK,KAAK,MAAO,CAAA,OAAA,CAAQ,aAAa,CAAG,EAAA;AACxD,MAAA,IAAI,CAAC,GAAA,IAAO,OAAO,GAAA,KAAQ,QAAU,EAAA;AACnC,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,6BAA6B,iBAAiB,CAAA,4BAAA;AAAA,SAChD;AAAA;AAEF,MAAA,IAAI,CAAC,KAAA,IAAS,OAAO,KAAA,KAAU,QAAU,EAAA;AACvC,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,8BAA8B,iBAAiB,CAAA,4BAAA;AAAA,SACjD;AAAA;AACF;AACF;AAEF,EAAA,MAAM,OAAU,GAAA,aAAA,IAAiB,IAAI,OAAA,CAAQ,aAA4B,CAAA;AAEzE,EAAA,MAAM,SAASA,uBAAO,EAAA;AAEtB,EAAO,MAAA,CAAA,GAAA;AAAA,IACL,iCAAA;AAAA,IACA,OAAO,UAAmB,QAAuB,KAAA;AAC/C,MAAA,MAAM,EAAE,MAAQ,EAAA,OAAA,KAAY,MAAM,OAAA,CAAQ,OAAO,YAAa,EAAA;AAC9D,MAAA,IAAI,OAAS,EAAA;AACX,QAAA,QAAA,CAAS,WAAW,OAAO,CAAA;AAAA;AAE7B,MAAA,QAAA,CAAS,MAAO,CAAA,MAAM,CAAE,CAAA,IAAA,CAAK,OAAO,CAAA;AAAA;AACtC,GACF;AAEA,EAAO,MAAA,CAAA,GAAA;AAAA,IACL,gCAAA;AAAA,IACA,OAAO,UAAmB,QAAuB,KAAA;AAC/C,MAAA,MAAM,EAAE,MAAQ,EAAA,OAAA,KAAY,MAAM,OAAA,CAAQ,OAAO,WAAY,EAAA;AAC7D,MAAA,IAAI,OAAS,EAAA;AACX,QAAA,QAAA,CAAS,WAAW,OAAO,CAAA;AAAA;AAE7B,MAAA,QAAA,CAAS,MAAO,CAAA,MAAM,CAAE,CAAA,IAAA,CAAK,OAAO,CAAA;AAAA;AACtC,GACF;AAEA,EAAO,OAAA,MAAA;AACT;;;;"}