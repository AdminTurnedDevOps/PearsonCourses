'use strict';

var types = require('@backstage/types');
var jose = require('jose');
var uuid = require('uuid');
var DatabaseKeyStore = require('./DatabaseKeyStore.cjs.js');

const SECONDS_IN_MS = 1e3;
const KEY_EXPIRATION_MARGIN_FACTOR = 3;
class DatabasePluginKeySource {
  constructor(keyStore, logger, keyDurationSeconds, algorithm) {
    this.keyStore = keyStore;
    this.logger = logger;
    this.keyDurationSeconds = keyDurationSeconds;
    this.algorithm = algorithm;
  }
  privateKeyPromise;
  keyExpiry;
  static async create(options) {
    const keyStore = await DatabaseKeyStore.DatabaseKeyStore.create({
      database: options.database,
      logger: options.logger
    });
    return new DatabasePluginKeySource(
      keyStore,
      options.logger,
      Math.round(types.durationToMilliseconds(options.keyDuration) / 1e3),
      options.algorithm ?? "ES256"
    );
  }
  async getPrivateSigningKey() {
    if (this.privateKeyPromise) {
      if (this.keyExpiry && this.keyExpiry.getTime() > Date.now()) {
        return this.privateKeyPromise;
      }
      this.logger.info(`Signing key has expired, generating new key`);
      delete this.privateKeyPromise;
    }
    this.keyExpiry = new Date(
      Date.now() + this.keyDurationSeconds * SECONDS_IN_MS
    );
    const promise = (async () => {
      const kid = uuid.v4();
      const key = await jose.generateKeyPair(this.algorithm);
      const publicKey = await jose.exportJWK(key.publicKey);
      const privateKey = await jose.exportJWK(key.privateKey);
      publicKey.kid = privateKey.kid = kid;
      publicKey.alg = privateKey.alg = this.algorithm;
      this.logger.info(`Created new signing key ${kid}`);
      await this.keyStore.addKey({
        id: kid,
        key: publicKey,
        expiresAt: new Date(
          Date.now() + this.keyDurationSeconds * SECONDS_IN_MS * KEY_EXPIRATION_MARGIN_FACTOR
        )
      });
      return privateKey;
    })();
    this.privateKeyPromise = promise;
    try {
      await promise;
    } catch (error) {
      this.logger.error(`Failed to generate new signing key, ${error}`);
      delete this.keyExpiry;
      delete this.privateKeyPromise;
    }
    return promise;
  }
  listKeys() {
    return this.keyStore.listKeys();
  }
}

exports.DatabasePluginKeySource = DatabasePluginKeySource;
//# sourceMappingURL=DatabasePluginKeySource.cjs.js.map
