{"version":3,"file":"GiteaUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/GiteaUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchResponse,\n} from '@backstage/backend-plugin-api';\nimport {\n  getGiteaFileContentsUrl,\n  getGiteaArchiveUrl,\n  getGiteaLatestCommitUrl,\n  parseGiteaUrl,\n  getGiteaRequestOptions,\n  GiteaIntegration,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { ReaderFactory, ReadTreeResponseFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport {\n  AuthenticationError,\n  NotFoundError,\n  NotModifiedError,\n} from '@backstage/errors';\nimport { Readable } from 'stream';\nimport { parseLastModified } from './util';\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for the Gitea v1 api.\n *\n * @public\n */\nexport class GiteaUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    return ScmIntegrations.fromConfig(config)\n      .gitea.list()\n      .map(integration => {\n        const reader = new GiteaUrlReader(integration, { treeResponseFactory });\n        const predicate = (url: URL) => {\n          return url.host === integration.config.host;\n        };\n        return { reader, predicate };\n      });\n  };\n\n  constructor(\n    private readonly integration: GiteaIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n    },\n  ) {}\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    let response: Response;\n    const blobUrl = getGiteaFileContentsUrl(this.integration.config, url);\n\n    try {\n      response = await fetch(blobUrl, {\n        method: 'GET',\n        ...getGiteaRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${blobUrl}, ${e}`);\n    }\n\n    if (response.ok) {\n      // Gitea returns an object with the file contents encoded, not the file itself\n      const { encoding, content } = await response.json();\n\n      if (encoding === 'base64') {\n        return ReadUrlResponseFactory.fromReadable(\n          Readable.from(Buffer.from(content, 'base64')),\n          {\n            etag: response.headers.get('ETag') ?? undefined,\n            lastModifiedAt: parseLastModified(\n              response.headers.get('Last-Modified'),\n            ),\n          },\n        );\n      }\n\n      throw new Error(`Unknown encoding: ${encoding}`);\n    }\n\n    const message = `${url} could not be read as ${blobUrl}, ${response.status} ${response.statusText}`;\n    if (response.status === 404) {\n      throw new NotFoundError(message);\n    }\n\n    if (response.status === 304) {\n      throw new NotModifiedError();\n    }\n\n    if (response.status === 403) {\n      throw new AuthenticationError();\n    }\n\n    throw new Error(message);\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const lastCommitHash = await this.getLastCommitHash(url);\n    if (options?.etag && options.etag === lastCommitHash) {\n      throw new NotModifiedError();\n    }\n\n    const archiveUri = getGiteaArchiveUrl(this.integration.config, url);\n\n    let response: Response;\n    try {\n      response = await fetch(archiveUri, {\n        method: 'GET',\n        ...getGiteaRequestOptions(this.integration.config),\n        signal: options?.signal as any,\n      });\n    } catch (e) {\n      throw new Error(`Unable to read ${archiveUri}, ${e}`);\n    }\n\n    const parsedUri = parseGiteaUrl(this.integration.config, url);\n\n    return this.deps.treeResponseFactory.fromTarArchive({\n      response: response,\n      subpath: parsedUri.path,\n      etag: lastCommitHash,\n      filter: options?.filter,\n    });\n  }\n\n  search(): Promise<UrlReaderServiceSearchResponse> {\n    throw new Error('GiteaUrlReader search not implemented.');\n  }\n\n  toString() {\n    const { host } = this.integration.config;\n    return `gitea{host=${host},authed=${Boolean(\n      this.integration.config.password,\n    )}}`;\n  }\n\n  private async getLastCommitHash(url: string): Promise<string> {\n    const commitUri = getGiteaLatestCommitUrl(this.integration.config, url);\n\n    const response = await fetch(\n      commitUri,\n      getGiteaRequestOptions(this.integration.config),\n    );\n    if (!response.ok) {\n      const message = `Failed to retrieve latest commit information from ${commitUri}, ${response.status} ${response.statusText}`;\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n      throw new Error(message);\n    }\n\n    return (await response.json()).sha;\n  }\n}\n"],"names":["ScmIntegrations","getGiteaFileContentsUrl","getGiteaRequestOptions","ReadUrlResponseFactory","Readable","parseLastModified","NotFoundError","NotModifiedError","AuthenticationError","getGiteaArchiveUrl","parseGiteaUrl","getGiteaLatestCommitUrl"],"mappings":"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"}