'use strict';

var os = require('os');
var TarArchiveResponse = require('./TarArchiveResponse.cjs.js');
var ZipArchiveResponse = require('./ZipArchiveResponse.cjs.js');
var ReadableArrayResponse = require('./ReadableArrayResponse.cjs.js');
var util = require('../util.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var os__default = /*#__PURE__*/_interopDefaultCompat(os);

class DefaultReadTreeResponseFactory {
  constructor(workDir) {
    this.workDir = workDir;
  }
  static create(options) {
    return new DefaultReadTreeResponseFactory(
      options.config.getOptionalString("backend.workingDirectory") ?? os__default.default.tmpdir()
    );
  }
  async fromTarArchive(options) {
    let stream;
    let etag;
    if ("stream" in options) {
      stream = options.stream;
      etag = options.etag;
    } else {
      stream = util.responseToReadable(options.response);
      etag = (options.etag ?? options.response.headers.get("etag")) || "";
    }
    return new TarArchiveResponse.TarArchiveResponse(
      stream,
      options.subpath ?? "",
      this.workDir,
      etag,
      options.filter,
      options.stripFirstDirectory ?? true
    );
  }
  async fromZipArchive(options) {
    let stream;
    let etag;
    if ("stream" in options) {
      stream = options.stream;
      etag = options.etag;
    } else {
      stream = util.responseToReadable(options.response);
      etag = (options.etag ?? options.response.headers.get("etag")) || "";
    }
    return new ZipArchiveResponse.ZipArchiveResponse(
      stream,
      options.subpath ?? "",
      this.workDir,
      etag,
      options.filter
    );
  }
  async fromReadableArray(options) {
    return new ReadableArrayResponse.ReadableArrayResponse(options, this.workDir, "");
  }
}

exports.DefaultReadTreeResponseFactory = DefaultReadTreeResponseFactory;
//# sourceMappingURL=ReadTreeResponseFactory.cjs.js.map
