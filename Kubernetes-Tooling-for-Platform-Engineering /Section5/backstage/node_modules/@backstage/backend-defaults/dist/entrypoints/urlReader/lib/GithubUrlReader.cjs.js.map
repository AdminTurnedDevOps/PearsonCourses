{"version":3,"file":"GithubUrlReader.cjs.js","sources":["../../../../src/entrypoints/urlReader/lib/GithubUrlReader.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UrlReaderService,\n  UrlReaderServiceReadTreeOptions,\n  UrlReaderServiceReadTreeResponse,\n  UrlReaderServiceReadUrlOptions,\n  UrlReaderServiceReadUrlResponse,\n  UrlReaderServiceSearchOptions,\n  UrlReaderServiceSearchResponse,\n  UrlReaderServiceSearchResponseFile,\n} from '@backstage/backend-plugin-api';\nimport {\n  getGithubFileFetchUrl,\n  DefaultGithubCredentialsProvider,\n  GithubCredentialsProvider,\n  GithubIntegration,\n  ScmIntegrations,\n  GithubCredentials,\n} from '@backstage/integration';\nimport { RestEndpointMethodTypes } from '@octokit/rest';\nimport fetch, { RequestInit, Response } from 'node-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { Minimatch } from 'minimatch';\nimport { Readable } from 'stream';\nimport { NotFoundError, NotModifiedError } from '@backstage/errors';\nimport { ReadTreeResponseFactory, ReaderFactory } from './types';\nimport { ReadUrlResponseFactory } from './ReadUrlResponseFactory';\nimport { parseLastModified } from './util';\n\nexport type GhRepoResponse =\n  RestEndpointMethodTypes['repos']['get']['response']['data'];\nexport type GhCombinedCommitStatusResponse =\n  RestEndpointMethodTypes['repos']['getCombinedStatusForRef']['response']['data'];\nexport type GhTreeResponse =\n  RestEndpointMethodTypes['git']['getTree']['response']['data'];\nexport type GhBlobResponse =\n  RestEndpointMethodTypes['git']['getBlob']['response']['data'];\n\n/**\n * Implements a {@link @backstage/backend-plugin-api#UrlReaderService} for files through the GitHub v3 APIs, such as\n * the one exposed by GitHub itself.\n *\n * @public\n */\nexport class GithubUrlReader implements UrlReaderService {\n  static factory: ReaderFactory = ({ config, treeResponseFactory }) => {\n    const integrations = ScmIntegrations.fromConfig(config);\n    const credentialsProvider =\n      DefaultGithubCredentialsProvider.fromIntegrations(integrations);\n    return integrations.github.list().map(integration => {\n      const reader = new GithubUrlReader(integration, {\n        treeResponseFactory,\n        credentialsProvider,\n      });\n      const predicate = (url: URL) => url.host === integration.config.host;\n      return { reader, predicate };\n    });\n  };\n\n  constructor(\n    private readonly integration: GithubIntegration,\n    private readonly deps: {\n      treeResponseFactory: ReadTreeResponseFactory;\n      credentialsProvider: GithubCredentialsProvider;\n    },\n  ) {\n    if (!integration.config.apiBaseUrl && !integration.config.rawBaseUrl) {\n      throw new Error(\n        `GitHub integration '${integration.title}' must configure an explicit apiBaseUrl or rawBaseUrl`,\n      );\n    }\n  }\n\n  async read(url: string): Promise<Buffer> {\n    const response = await this.readUrl(url);\n    return response.buffer();\n  }\n\n  private getCredentials = async (\n    url: string,\n    options?: { token?: string },\n  ): Promise<GithubCredentials> => {\n    if (options?.token) {\n      return {\n        headers: {\n          Authorization: `Bearer ${options.token}`,\n        },\n        type: 'token',\n        token: options.token,\n      };\n    }\n\n    return await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n  };\n\n  async readUrl(\n    url: string,\n    options?: UrlReaderServiceReadUrlOptions,\n  ): Promise<UrlReaderServiceReadUrlResponse> {\n    const credentials = await this.getCredentials(url, options);\n\n    const ghUrl = getGithubFileFetchUrl(\n      url,\n      this.integration.config,\n      credentials,\n    );\n\n    const response = await this.fetchResponse(ghUrl, {\n      headers: {\n        ...credentials?.headers,\n        ...(options?.etag && { 'If-None-Match': options.etag }),\n        ...(options?.lastModifiedAfter && {\n          'If-Modified-Since': options.lastModifiedAfter.toUTCString(),\n        }),\n        Accept: 'application/vnd.github.v3.raw',\n      },\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can\n      // be removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      signal: options?.signal as any,\n    });\n\n    return ReadUrlResponseFactory.fromNodeJSReadable(response.body, {\n      etag: response.headers.get('ETag') ?? undefined,\n      lastModifiedAt: parseLastModified(response.headers.get('Last-Modified')),\n    });\n  }\n\n  async readTree(\n    url: string,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    const repoDetails = await this.getRepoDetails(url);\n    const commitSha = repoDetails.commitSha;\n\n    if (options?.etag && options.etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const { filepath } = parseGitUrl(url);\n    const { headers } = await this.getCredentials(url, options);\n\n    return this.doReadTree(\n      repoDetails.repo.archive_url,\n      commitSha,\n      filepath,\n      // TODO(freben): The signal cast is there because pre-3.x versions of\n      // node-fetch have a very slightly deviating AbortSignal type signature.\n      // The difference does not affect us in practice however. The cast can be\n      // removed after we support ESM for CLI dependencies and migrate to\n      // version 3 of node-fetch.\n      // https://github.com/backstage/backstage/issues/8242\n      { headers, signal: options?.signal as any },\n      options,\n    );\n  }\n\n  async search(\n    url: string,\n    options?: UrlReaderServiceSearchOptions,\n  ): Promise<UrlReaderServiceSearchResponse> {\n    const repoDetails = await this.getRepoDetails(url);\n    const commitSha = repoDetails.commitSha;\n\n    if (options?.etag && options.etag === commitSha) {\n      throw new NotModifiedError();\n    }\n\n    const { filepath } = parseGitUrl(url);\n    const { headers } = await this.getCredentials(url, options);\n\n    const files = await this.doSearch(\n      url,\n      repoDetails.repo.trees_url,\n      repoDetails.repo.archive_url,\n      commitSha,\n      filepath,\n      { headers, signal: options?.signal as any },\n    );\n\n    return { files, etag: commitSha };\n  }\n\n  toString() {\n    const { host, token } = this.integration.config;\n    return `github{host=${host},authed=${Boolean(token)}}`;\n  }\n\n  private async doReadTree(\n    archiveUrl: string,\n    sha: string,\n    subpath: string,\n    init: RequestInit,\n    options?: UrlReaderServiceReadTreeOptions,\n  ): Promise<UrlReaderServiceReadTreeResponse> {\n    // archive_url looks like \"https://api.github.com/repos/owner/repo/{archive_format}{/ref}\"\n    const archive = await this.fetchResponse(\n      archiveUrl\n        .replace('{archive_format}', 'tarball')\n        .replace('{/ref}', `/${sha}`),\n      init,\n    );\n\n    return await this.deps.treeResponseFactory.fromTarArchive({\n      // TODO(Rugvip): Underlying implementation of fetch will be node-fetch, we probably want\n      //               to stick to using that in exclusively backend code.\n      stream: Readable.from(archive.body),\n      subpath,\n      etag: sha,\n      filter: options?.filter,\n    });\n  }\n\n  private async doSearch(\n    url: string,\n    treesUrl: string,\n    archiveUrl: string,\n    sha: string,\n    query: string,\n    init: RequestInit,\n  ): Promise<UrlReaderServiceSearchResponseFile[]> {\n    function pathToUrl(path: string): string {\n      // TODO(freben): Use the integration package facility for this instead\n      // pathname starts as /backstage/backstage/blob/master/<path>\n      const updated = new URL(url);\n      const base = updated.pathname.split('/').slice(1, 5).join('/');\n      updated.pathname = `${base}/${path}`;\n      return updated.toString();\n    }\n\n    const matcher = new Minimatch(query.replace(/^\\/+/, ''));\n\n    // trees_url looks like \"https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}\"\n    const recursiveTree: GhTreeResponse = await this.fetchJson(\n      treesUrl.replace('{/sha}', `/${sha}?recursive=true`),\n      init,\n    );\n\n    // The simple case is that we got the entire tree in a single operation.\n    if (!recursiveTree.truncated) {\n      const matching = recursiveTree.tree.filter(\n        item =>\n          item.type === 'blob' &&\n          item.path &&\n          item.url &&\n          matcher.match(item.path),\n      );\n\n      return matching.map(item => ({\n        url: pathToUrl(item.path!),\n        content: async () => {\n          const blob: GhBlobResponse = await this.fetchJson(item.url!, init);\n          return Buffer.from(blob.content, 'base64');\n        },\n      }));\n    }\n\n    // For larger repos, we leverage readTree and filter through that instead\n    const tree = await this.doReadTree(archiveUrl, sha, '', init, {\n      filter: path => matcher.match(path),\n    });\n    const files = await tree.files();\n\n    return files.map(file => ({\n      url: pathToUrl(file.path),\n      content: file.content,\n      lastModifiedAt: file.lastModifiedAt,\n    }));\n  }\n\n  private async getRepoDetails(url: string): Promise<{\n    commitSha: string;\n    repo: {\n      archive_url: string;\n      trees_url: string;\n    };\n  }> {\n    const parsed = parseGitUrl(url);\n    const { ref, full_name } = parsed;\n\n    const credentials = await this.deps.credentialsProvider.getCredentials({\n      url,\n    });\n    const { headers } = credentials;\n\n    const commitStatus: GhCombinedCommitStatusResponse = await this.fetchJson(\n      `${this.integration.config.apiBaseUrl}/repos/${full_name}/commits/${\n        ref || (await this.getDefaultBranch(full_name, credentials))\n      }/status?per_page=0`,\n      { headers },\n    );\n\n    return {\n      commitSha: commitStatus.sha,\n      repo: commitStatus.repository,\n    };\n  }\n\n  private async getDefaultBranch(\n    repoFullName: string,\n    credentials: GithubCredentials,\n  ): Promise<string> {\n    const repo: GhRepoResponse = await this.fetchJson(\n      `${this.integration.config.apiBaseUrl}/repos/${repoFullName}`,\n      { headers: credentials.headers },\n    );\n\n    return repo.default_branch;\n  }\n\n  private async fetchResponse(\n    url: string | URL,\n    init: RequestInit,\n  ): Promise<Response> {\n    const urlAsString = url.toString();\n    const response = await fetch(urlAsString, init);\n\n    if (!response.ok) {\n      let message = `Request failed for ${urlAsString}, ${response.status} ${response.statusText}`;\n\n      if (response.status === 304) {\n        throw new NotModifiedError();\n      }\n\n      if (response.status === 404) {\n        throw new NotFoundError(message);\n      }\n\n      // GitHub returns a 403 response with a couple of headers indicating rate\n      // limit status. See more in the GitHub docs:\n      // https://docs.github.com/en/rest/overview/resources-in-the-rest-api#rate-limiting\n      if (this.integration.parseRateLimitInfo(response).isRateLimited) {\n        message += ' (rate limit exceeded)';\n      }\n\n      throw new Error(message);\n    }\n\n    return response;\n  }\n\n  private async fetchJson(url: string | URL, init: RequestInit): Promise<any> {\n    const response = await this.fetchResponse(url, init);\n    return await response.json();\n  }\n}\n"],"names":["ScmIntegrations","DefaultGithubCredentialsProvider","getGithubFileFetchUrl","ReadUrlResponseFactory","parseLastModified","NotModifiedError","parseGitUrl","Readable","Minimatch","fetch","NotFoundError"],"mappings":"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"}