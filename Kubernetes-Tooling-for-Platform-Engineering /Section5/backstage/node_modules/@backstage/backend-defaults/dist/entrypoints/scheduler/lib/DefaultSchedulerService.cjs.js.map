{"version":3,"file":"DefaultSchedulerService.cjs.js","sources":["../../../../src/entrypoints/scheduler/lib/DefaultSchedulerService.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DatabaseService,\n  LoggerService,\n  RootLifecycleService,\n  SchedulerService,\n} from '@backstage/backend-plugin-api';\nimport { once } from 'lodash';\nimport { Duration } from 'luxon';\nimport { migrateBackendTasks } from '../database/migrateBackendTasks';\nimport { PluginTaskSchedulerImpl } from './PluginTaskSchedulerImpl';\nimport { PluginTaskSchedulerJanitor } from './PluginTaskSchedulerJanitor';\n\n/**\n * Default implementation of the task scheduler service.\n *\n * @public\n */\nexport class DefaultSchedulerService {\n  static create(options: {\n    database: DatabaseService;\n    logger: LoggerService;\n    rootLifecycle?: RootLifecycleService;\n  }): SchedulerService {\n    const databaseFactory = once(async () => {\n      const knex = await options.database.getClient();\n\n      if (!options.database.migrations?.skip) {\n        await migrateBackendTasks(knex);\n      }\n\n      if (process.env.NODE_ENV !== 'test') {\n        const abortController = new AbortController();\n        const janitor = new PluginTaskSchedulerJanitor({\n          knex,\n          waitBetweenRuns: Duration.fromObject({ minutes: 1 }),\n          logger: options.logger,\n        });\n\n        options.rootLifecycle?.addShutdownHook(() => abortController.abort());\n        janitor.start(abortController.signal);\n      }\n\n      return knex;\n    });\n\n    return new PluginTaskSchedulerImpl(\n      databaseFactory,\n      options.logger,\n      options.rootLifecycle,\n    );\n  }\n}\n"],"names":["once","migrateBackendTasks","PluginTaskSchedulerJanitor","Duration","PluginTaskSchedulerImpl"],"mappings":";;;;;;;;AAiCO,MAAM,uBAAwB,CAAA;AAAA,EACnC,OAAO,OAAO,OAIO,EAAA;AACnB,IAAM,MAAA,eAAA,GAAkBA,YAAK,YAAY;AACvC,MAAA,MAAM,IAAO,GAAA,MAAM,OAAQ,CAAA,QAAA,CAAS,SAAU,EAAA;AAE9C,MAAA,IAAI,CAAC,OAAA,CAAQ,QAAS,CAAA,UAAA,EAAY,IAAM,EAAA;AACtC,QAAA,MAAMC,wCAAoB,IAAI,CAAA;AAAA;AAGhC,MAAI,IAAA,OAAA,CAAQ,GAAI,CAAA,QAAA,KAAa,MAAQ,EAAA;AACnC,QAAM,MAAA,eAAA,GAAkB,IAAI,eAAgB,EAAA;AAC5C,QAAM,MAAA,OAAA,GAAU,IAAIC,qDAA2B,CAAA;AAAA,UAC7C,IAAA;AAAA,UACA,iBAAiBC,cAAS,CAAA,UAAA,CAAW,EAAE,OAAA,EAAS,GAAG,CAAA;AAAA,UACnD,QAAQ,OAAQ,CAAA;AAAA,SACjB,CAAA;AAED,QAAA,OAAA,CAAQ,aAAe,EAAA,eAAA,CAAgB,MAAM,eAAA,CAAgB,OAAO,CAAA;AACpE,QAAQ,OAAA,CAAA,KAAA,CAAM,gBAAgB,MAAM,CAAA;AAAA;AAGtC,MAAO,OAAA,IAAA;AAAA,KACR,CAAA;AAED,IAAA,OAAO,IAAIC,+CAAA;AAAA,MACT,eAAA;AAAA,MACA,OAAQ,CAAA,MAAA;AAAA,MACR,OAAQ,CAAA;AAAA,KACV;AAAA;AAEJ;;;;"}