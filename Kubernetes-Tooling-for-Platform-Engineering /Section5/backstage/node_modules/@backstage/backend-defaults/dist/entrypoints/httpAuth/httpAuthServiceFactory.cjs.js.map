{"version":3,"file":"httpAuthServiceFactory.cjs.js","sources":["../../../src/entrypoints/httpAuth/httpAuthServiceFactory.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthService,\n  BackstageCredentials,\n  BackstagePrincipalTypes,\n  BackstageUserPrincipal,\n  DiscoveryService,\n  HttpAuthService,\n  coreServices,\n  createServiceFactory,\n} from '@backstage/backend-plugin-api';\nimport { AuthenticationError, NotAllowedError } from '@backstage/errors';\nimport { parse as parseCookie } from 'cookie';\nimport { Request, Response } from 'express';\n\nconst FIVE_MINUTES_MS = 5 * 60 * 1000;\n\nconst BACKSTAGE_AUTH_COOKIE = 'backstage-auth';\n\nfunction getTokenFromRequest(req: Request) {\n  let token: string | undefined;\n  const authHeader = req.headers.authorization;\n  if (typeof authHeader === 'string') {\n    const matches = authHeader.match(/^Bearer[ ]+(\\S+)$/i);\n    token = matches?.[1];\n  }\n\n  return { token };\n}\n\nfunction getCookieFromRequest(req: Request) {\n  const cookieHeader = req.headers.cookie;\n  if (cookieHeader) {\n    const cookies = parseCookie(cookieHeader);\n    const token = cookies[BACKSTAGE_AUTH_COOKIE];\n    if (token) {\n      return token;\n    }\n  }\n\n  return undefined;\n}\n\nfunction willExpireSoon(expiresAt: Date) {\n  return Date.now() + FIVE_MINUTES_MS > expiresAt.getTime();\n}\n\nconst credentialsSymbol = Symbol('backstage-credentials');\nconst limitedCredentialsSymbol = Symbol('backstage-limited-credentials');\n\ntype RequestWithCredentials = Request & {\n  [credentialsSymbol]?: Promise<BackstageCredentials>;\n  [limitedCredentialsSymbol]?: Promise<BackstageCredentials>;\n};\n\n/**\n * @public\n * Options for creating a DefaultHttpAuthService.\n */\nexport interface DefaultHttpAuthServiceOptions {\n  auth: AuthService;\n  discovery: DiscoveryService;\n  pluginId: string;\n  /**\n   * Optionally override logic for extracting the token from the request.\n   */\n  getTokenFromRequest?: (req: Request) => { token?: string };\n}\n\n/**\n * @public\n * DefaultHttpAuthService is the default implementation of the HttpAuthService\n */\nexport class DefaultHttpAuthService implements HttpAuthService {\n  readonly #auth: AuthService;\n  readonly #discovery: DiscoveryService;\n  readonly #pluginId: string;\n  readonly #getToken: (req: Request) => { token?: string };\n\n  private constructor(\n    auth: AuthService,\n    discovery: DiscoveryService,\n    pluginId: string,\n    getToken?: (req: Request) => { token?: string },\n  ) {\n    this.#auth = auth;\n    this.#discovery = discovery;\n    this.#pluginId = pluginId;\n    this.#getToken = getToken ?? getTokenFromRequest;\n  }\n\n  static create(\n    options: DefaultHttpAuthServiceOptions,\n  ): DefaultHttpAuthService {\n    return new DefaultHttpAuthService(\n      options.auth,\n      options.discovery,\n      options.pluginId,\n      options.getTokenFromRequest,\n    );\n  }\n\n  async #extractCredentialsFromRequest(req: Request) {\n    const { token } = this.#getToken(req);\n    if (!token) {\n      return await this.#auth.getNoneCredentials();\n    }\n\n    return await this.#auth.authenticate(token);\n  }\n\n  async #extractLimitedCredentialsFromRequest(req: Request) {\n    const { token } = this.#getToken(req);\n    if (token) {\n      return await this.#auth.authenticate(token, {\n        allowLimitedAccess: true,\n      });\n    }\n\n    const cookie = getCookieFromRequest(req);\n    if (cookie) {\n      return await this.#auth.authenticate(cookie, {\n        allowLimitedAccess: true,\n      });\n    }\n\n    return await this.#auth.getNoneCredentials();\n  }\n\n  async #getCredentials(req: RequestWithCredentials) {\n    return (req[credentialsSymbol] ??=\n      this.#extractCredentialsFromRequest(req));\n  }\n\n  async #getLimitedCredentials(req: RequestWithCredentials) {\n    return (req[limitedCredentialsSymbol] ??=\n      this.#extractLimitedCredentialsFromRequest(req));\n  }\n\n  async credentials<TAllowed extends keyof BackstagePrincipalTypes = 'unknown'>(\n    req: Request,\n    options?: {\n      allow?: Array<TAllowed>;\n      allowLimitedAccess?: boolean;\n    },\n  ): Promise<BackstageCredentials<BackstagePrincipalTypes[TAllowed]>> {\n    // Limited and full credentials are treated as two separate cases, this lets\n    // us avoid internal dependencies between the AuthService and\n    // HttpAuthService implementations\n    const credentials = options?.allowLimitedAccess\n      ? await this.#getLimitedCredentials(req)\n      : await this.#getCredentials(req);\n\n    const allowed = options?.allow;\n    if (!allowed) {\n      return credentials as any;\n    }\n\n    if (this.#auth.isPrincipal(credentials, 'none')) {\n      if (allowed.includes('none' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new AuthenticationError('Missing credentials');\n    } else if (this.#auth.isPrincipal(credentials, 'user')) {\n      if (allowed.includes('user' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new NotAllowedError(\n        `This endpoint does not allow 'user' credentials`,\n      );\n    } else if (this.#auth.isPrincipal(credentials, 'service')) {\n      if (allowed.includes('service' as TAllowed)) {\n        return credentials as any;\n      }\n\n      throw new NotAllowedError(\n        `This endpoint does not allow 'service' credentials`,\n      );\n    }\n\n    throw new NotAllowedError(\n      'Unknown principal type, this should never happen',\n    );\n  }\n\n  async issueUserCookie(\n    res: Response,\n    options?: { credentials?: BackstageCredentials },\n  ): Promise<{ expiresAt: Date }> {\n    if (res.headersSent) {\n      throw new Error('Failed to issue user cookie, headers were already sent');\n    }\n\n    let credentials: BackstageCredentials<BackstageUserPrincipal>;\n    if (options?.credentials) {\n      if (this.#auth.isPrincipal(options.credentials, 'none')) {\n        res.clearCookie(\n          BACKSTAGE_AUTH_COOKIE,\n          await this.#getCookieOptions(res.req),\n        );\n        return { expiresAt: new Date() };\n      }\n      if (!this.#auth.isPrincipal(options.credentials, 'user')) {\n        throw new AuthenticationError(\n          'Refused to issue cookie for non-user principal',\n        );\n      }\n      credentials = options.credentials;\n    } else {\n      credentials = await this.credentials(res.req, { allow: ['user'] });\n    }\n\n    const existingExpiresAt = await this.#existingCookieExpiration(res.req);\n    if (existingExpiresAt && !willExpireSoon(existingExpiresAt)) {\n      return { expiresAt: existingExpiresAt };\n    }\n\n    const { token, expiresAt } = await this.#auth.getLimitedUserToken(\n      credentials,\n    );\n    if (!token) {\n      throw new Error('User credentials is unexpectedly missing token');\n    }\n\n    res.cookie(BACKSTAGE_AUTH_COOKIE, token, {\n      ...(await this.#getCookieOptions(res.req)),\n      expires: expiresAt,\n    });\n\n    return { expiresAt };\n  }\n\n  async #getCookieOptions(_req: Request): Promise<{\n    domain: string;\n    httpOnly: true;\n    secure: boolean;\n    priority: 'high';\n    sameSite: 'none' | 'lax';\n  }> {\n    // TODO: eventually we should read from `${req.protocol}://${req.hostname}`\n    // once https://github.com/backstage/backstage/issues/24169 has landed\n    const externalBaseUrlStr = await this.#discovery.getExternalBaseUrl(\n      this.#pluginId,\n    );\n    const externalBaseUrl = new URL(externalBaseUrlStr);\n\n    const secure =\n      externalBaseUrl.protocol === 'https:' ||\n      externalBaseUrl.hostname === 'localhost';\n\n    return {\n      domain: externalBaseUrl.hostname,\n      httpOnly: true,\n      secure,\n      priority: 'high',\n      sameSite: secure ? 'none' : 'lax',\n    };\n  }\n\n  async #existingCookieExpiration(req: Request): Promise<Date | undefined> {\n    const existingCookie = getCookieFromRequest(req);\n    if (!existingCookie) {\n      return undefined;\n    }\n\n    try {\n      const existingCredentials = await this.#auth.authenticate(\n        existingCookie,\n        {\n          allowLimitedAccess: true,\n        },\n      );\n      if (!this.#auth.isPrincipal(existingCredentials, 'user')) {\n        return undefined;\n      }\n\n      return existingCredentials.expiresAt;\n    } catch (error) {\n      if (error.name === 'AuthenticationError') {\n        return undefined;\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * Authentication of HTTP requests.\n *\n * See {@link @backstage/code-plugin-api#HttpAuthService}\n * and {@link https://backstage.io/docs/backend-system/core-services/http-auth | the service docs}\n * for more information.\n *\n * @public\n */\nexport const httpAuthServiceFactory = createServiceFactory({\n  service: coreServices.httpAuth,\n  deps: {\n    auth: coreServices.auth,\n    discovery: coreServices.discovery,\n    plugin: coreServices.pluginMetadata,\n  },\n  async factory({ auth, discovery, plugin }) {\n    return DefaultHttpAuthService.create({\n      auth,\n      discovery,\n      pluginId: plugin.getId(),\n    });\n  },\n});\n"],"names":["parseCookie","AuthenticationError","NotAllowedError","createServiceFactory","coreServices"],"mappings":"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"}