'use strict';

function createCredentialsWithServicePrincipal(sub, token, accessRestrictions) {
  return Object.defineProperty(
    {
      $$type: "@backstage/BackstageCredentials",
      version: "v1",
      principal: {
        type: "service",
        subject: sub,
        accessRestrictions
      }
    },
    "token",
    {
      enumerable: false,
      configurable: true,
      value: token
    }
  );
}
function createCredentialsWithUserPrincipal(sub, token, expiresAt) {
  return Object.defineProperty(
    {
      $$type: "@backstage/BackstageCredentials",
      version: "v1",
      expiresAt,
      principal: {
        type: "user",
        userEntityRef: sub
      }
    },
    "token",
    {
      enumerable: false,
      configurable: true,
      value: token
    }
  );
}
function createCredentialsWithNonePrincipal() {
  return {
    $$type: "@backstage/BackstageCredentials",
    version: "v1",
    principal: {
      type: "none"
    }
  };
}
function toInternalBackstageCredentials(credentials) {
  if (credentials.$$type !== "@backstage/BackstageCredentials") {
    throw new Error("Invalid credential type");
  }
  const internalCredentials = credentials;
  if (internalCredentials.version !== "v1") {
    throw new Error(
      `Invalid credential version ${internalCredentials.version}`
    );
  }
  return internalCredentials;
}

exports.createCredentialsWithNonePrincipal = createCredentialsWithNonePrincipal;
exports.createCredentialsWithServicePrincipal = createCredentialsWithServicePrincipal;
exports.createCredentialsWithUserPrincipal = createCredentialsWithUserPrincipal;
exports.toInternalBackstageCredentials = toInternalBackstageCredentials;
//# sourceMappingURL=helpers.cjs.js.map
