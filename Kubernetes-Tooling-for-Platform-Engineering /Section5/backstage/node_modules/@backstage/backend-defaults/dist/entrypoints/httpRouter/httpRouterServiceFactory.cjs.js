'use strict';

var Router = require('express-promise-router');
var backendPluginApi = require('@backstage/backend-plugin-api');
var createAuthIntegrationRouter = require('./http/createAuthIntegrationRouter.cjs.js');
var createCredentialsBarrier = require('./http/createCredentialsBarrier.cjs.js');
var createLifecycleMiddleware = require('./http/createLifecycleMiddleware.cjs.js');
var createCookieAuthRefreshMiddleware = require('./http/createCookieAuthRefreshMiddleware.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var Router__default = /*#__PURE__*/_interopDefaultCompat(Router);

const httpRouterServiceFactory = backendPluginApi.createServiceFactory({
  service: backendPluginApi.coreServices.httpRouter,
  initialization: "always",
  deps: {
    plugin: backendPluginApi.coreServices.pluginMetadata,
    config: backendPluginApi.coreServices.rootConfig,
    lifecycle: backendPluginApi.coreServices.lifecycle,
    rootHttpRouter: backendPluginApi.coreServices.rootHttpRouter,
    auth: backendPluginApi.coreServices.auth,
    httpAuth: backendPluginApi.coreServices.httpAuth
  },
  async factory({ auth, httpAuth, config, plugin, rootHttpRouter, lifecycle }) {
    const router = Router__default.default();
    rootHttpRouter.use(`/api/${plugin.getId()}`, router);
    const credentialsBarrier = createCredentialsBarrier.createCredentialsBarrier({
      httpAuth,
      config
    });
    router.use(createAuthIntegrationRouter.createAuthIntegrationRouter({ auth }));
    router.use(createLifecycleMiddleware.createLifecycleMiddleware({ config, lifecycle }));
    router.use(credentialsBarrier.middleware);
    router.use(createCookieAuthRefreshMiddleware.createCookieAuthRefreshMiddleware({ auth, httpAuth }));
    return {
      use(handler) {
        router.use(handler);
      },
      addAuthPolicy(policy) {
        credentialsBarrier.addAuthPolicy(policy);
      }
    };
  }
});

exports.httpRouterServiceFactory = httpRouterServiceFactory;
//# sourceMappingURL=httpRouterServiceFactory.cjs.js.map
