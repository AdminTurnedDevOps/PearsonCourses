{"version":3,"file":"DatabaseManager.cjs.js","sources":["../../../src/entrypoints/database/DatabaseManager.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DatabaseService,\n  LifecycleService,\n  LoggerService,\n  RootConfigService,\n  RootLifecycleService,\n  RootLoggerService,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport { stringifyError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { MysqlConnector } from './connectors/mysql';\nimport { PgConnector } from './connectors/postgres';\nimport { Sqlite3Connector } from './connectors/sqlite3';\nimport { Connector, PluginDatabaseManager } from './types';\n\n/**\n * Provides a config lookup path for a plugin's config block.\n */\nfunction pluginPath(pluginId: string): string {\n  return `plugin.${pluginId}`;\n}\n\n/**\n * Creation options for {@link DatabaseManager}.\n *\n * @public\n */\nexport type DatabaseManagerOptions = {\n  migrations?: DatabaseService['migrations'];\n  rootLogger?: RootLoggerService;\n  rootLifecycle?: RootLifecycleService;\n};\n\n/**\n * Testable implementation class for {@link DatabaseManager} below.\n */\nexport class DatabaseManagerImpl {\n  constructor(\n    private readonly config: Config,\n    private readonly connectors: Record<string, Connector>,\n    private readonly options?: DatabaseManagerOptions,\n    private readonly databaseCache: Map<string, Promise<Knex>> = new Map(),\n    private readonly keepaliveIntervals: Map<\n      string,\n      NodeJS.Timeout\n    > = new Map(),\n  ) {\n    // If a rootLifecycle service was provided, register a shutdown hook to\n    // clean up any database connections.\n    if (options?.rootLifecycle !== undefined) {\n      options.rootLifecycle.addShutdownHook(async () => {\n        await this.shutdown({ logger: options.rootLogger });\n      });\n    }\n  }\n\n  /**\n   * Generates a PluginDatabaseManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the database manager should be created for. Plugin names\n   * should be unique as they are used to look up database config overrides under\n   * `backend.database.plugin`.\n   */\n  forPlugin(\n    pluginId: string,\n    deps: {\n      logger: LoggerService;\n      lifecycle: LifecycleService;\n    },\n  ): PluginDatabaseManager {\n    const client = this.getClientType(pluginId).client;\n    const connector = this.connectors[client];\n    if (!connector) {\n      throw new Error(\n        `Unsupported database client type '${client}' specified for plugin '${pluginId}'`,\n      );\n    }\n    const getClient = () => this.getDatabase(pluginId, connector, deps);\n\n    const skip =\n      this.options?.migrations?.skip ??\n      this.config.getOptionalBoolean(`plugin.${pluginId}.skipMigrations`) ??\n      this.config.getOptionalBoolean('skipMigrations') ??\n      false;\n\n    return { getClient, migrations: { skip } };\n  }\n\n  /**\n   * Destroys all known connections.\n   */\n  private async shutdown(deps?: { logger?: LoggerService }): Promise<void> {\n    const pluginIds = Array.from(this.databaseCache.keys());\n    await Promise.allSettled(\n      pluginIds.map(async pluginId => {\n        // We no longer need to keep connections alive.\n        clearInterval(this.keepaliveIntervals.get(pluginId));\n\n        const connection = await this.databaseCache.get(pluginId);\n        if (connection) {\n          if (connection.client.config.includes('sqlite3')) {\n            return; // sqlite3 does not support destroy, it hangs\n          }\n          await connection.destroy().catch((error: unknown) => {\n            deps?.logger?.error(\n              `Problem closing database connection for ${pluginId}: ${stringifyError(\n                error,\n              )}`,\n            );\n          });\n        }\n      }),\n    );\n  }\n\n  /**\n   * Provides the client type which should be used for a given plugin.\n   *\n   * The client type is determined by plugin specific config if present.\n   * Otherwise the base client is used as the fallback.\n   *\n   * @param pluginId - Plugin to get the client type for\n   * @returns Object with client type returned as `client` and boolean\n   *          representing whether or not the client was overridden as\n   *          `overridden`\n   */\n  private getClientType(pluginId: string): {\n    client: string;\n    overridden: boolean;\n  } {\n    const pluginClient = this.config.getOptionalString(\n      `${pluginPath(pluginId)}.client`,\n    );\n\n    const baseClient = this.config.getString('client');\n    const client = pluginClient ?? baseClient;\n    return {\n      client,\n      overridden: client !== baseClient,\n    };\n  }\n\n  /**\n   * Provides a scoped Knex client for a plugin as per application config.\n   *\n   * @param pluginId - Plugin to get a Knex client for\n   * @returns Promise which resolves to a scoped Knex database client for a\n   *          plugin\n   */\n  private async getDatabase(\n    pluginId: string,\n    connector: Connector,\n    deps: {\n      logger: LoggerService;\n      lifecycle: LifecycleService;\n    },\n  ): Promise<Knex> {\n    if (this.databaseCache.has(pluginId)) {\n      return this.databaseCache.get(pluginId)!;\n    }\n\n    const clientPromise = connector.getClient(pluginId, deps);\n    this.databaseCache.set(pluginId, clientPromise);\n\n    if (process.env.NODE_ENV !== 'test') {\n      clientPromise.then(client =>\n        this.startKeepaliveLoop(pluginId, client, deps.logger),\n      );\n    }\n\n    return clientPromise;\n  }\n\n  private startKeepaliveLoop(\n    pluginId: string,\n    client: Knex,\n    logger: LoggerService,\n  ): void {\n    let lastKeepaliveFailed = false;\n\n    this.keepaliveIntervals.set(\n      pluginId,\n      setInterval(() => {\n        // During testing it can happen that the environment is torn down and\n        // this client is `undefined`, but this interval is still run.\n        client?.raw('select 1').then(\n          () => {\n            lastKeepaliveFailed = false;\n          },\n          (error: unknown) => {\n            if (!lastKeepaliveFailed) {\n              lastKeepaliveFailed = true;\n              logger.warn(\n                `Database keepalive failed for plugin ${pluginId}, ${stringifyError(\n                  error,\n                )}`,\n              );\n            }\n          },\n        );\n      }, 60 * 1000),\n    );\n  }\n}\n\n// NOTE: This class looks odd but is kept around for API compatibility reasons\n/**\n * Manages database connections for Backstage backend plugins.\n *\n * @public\n * @remarks\n *\n * The database manager allows the user to set connection and client settings on\n * a per pluginId basis by defining a database config block under\n * `plugin.<pluginId>` in addition to top level defaults. Optionally, a user may\n * set `prefix` which is used to prefix generated database names if config is\n * not provided.\n */\nexport class DatabaseManager {\n  /**\n   * Creates a {@link DatabaseManager} from `backend.database` config.\n   *\n   * @param config - The loaded application configuration.\n   * @param options - An optional configuration object.\n   */\n  static fromConfig(\n    config: RootConfigService,\n    options?: DatabaseManagerOptions,\n  ): DatabaseManager {\n    const databaseConfig = config.getConfig('backend.database');\n    const prefix =\n      databaseConfig.getOptionalString('prefix') || 'backstage_plugin_';\n    return new DatabaseManager(\n      new DatabaseManagerImpl(\n        databaseConfig,\n        {\n          pg: new PgConnector(databaseConfig, prefix),\n          sqlite3: new Sqlite3Connector(databaseConfig),\n          'better-sqlite3': new Sqlite3Connector(databaseConfig),\n          mysql: new MysqlConnector(databaseConfig, prefix),\n          mysql2: new MysqlConnector(databaseConfig, prefix),\n        },\n        options,\n      ),\n    );\n  }\n\n  private constructor(private readonly impl: DatabaseManagerImpl) {}\n\n  /**\n   * Generates a PluginDatabaseManager for consumption by plugins.\n   *\n   * @param pluginId - The plugin that the database manager should be created for. Plugin names\n   * should be unique as they are used to look up database config overrides under\n   * `backend.database.plugin`.\n   */\n  forPlugin(\n    pluginId: string,\n    deps: {\n      logger: LoggerService;\n      lifecycle: LifecycleService;\n    },\n  ): PluginDatabaseManager {\n    return this.impl.forPlugin(pluginId, deps);\n  }\n}\n"],"names":["stringifyError","PgConnector","Sqlite3Connector","MysqlConnector"],"mappings":"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"}