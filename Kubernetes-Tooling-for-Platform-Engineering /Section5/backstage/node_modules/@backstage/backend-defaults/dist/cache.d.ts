import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { LoggerService, RootConfigService, CacheService } from '@backstage/backend-plugin-api';

/**
 * Key-value store for caching data.
 *
 * See {@link @backstage/code-plugin-api#CacheService}
 * and {@link https://backstage.io/docs/backend-system/core-services/cache | the service docs}
 * for more information.
 *
 * @public
 */
declare const cacheServiceFactory: _backstage_backend_plugin_api.ServiceFactory<_backstage_backend_plugin_api.CacheService, "plugin", "singleton">;

/**
 * Options given when constructing a {@link CacheManager}.
 *
 * @public
 */
type CacheManagerOptions = {
    /**
     * An optional logger for use by the PluginCacheManager.
     */
    logger?: LoggerService;
    /**
     * An optional handler for connection errors emitted from the underlying data
     * store.
     */
    onError?: (err: Error) => void;
};

/**
 * Implements a Cache Manager which will automatically create new cache clients
 * for plugins when requested. All requested cache clients are created with the
 * connection details provided.
 *
 * @public
 */
declare class CacheManager {
    /**
     * Keys represent supported `backend.cache.store` values, mapped to factories
     * that return Keyv instances appropriate to the store.
     */
    private readonly storeFactories;
    private readonly logger?;
    private readonly store;
    private readonly connection;
    private readonly errorHandler;
    private readonly defaultTtl?;
    /**
     * Creates a new {@link CacheManager} instance by reading from the `backend`
     * config section, specifically the `.cache` key.
     *
     * @param config - The loaded application configuration.
     */
    static fromConfig(config: RootConfigService, options?: CacheManagerOptions): CacheManager;
    /**
     * Generates a PluginCacheManager for consumption by plugins.
     *
     * @param pluginId - The plugin that the cache manager should be created for.
     *        Plugin names should be unique.
     */
    forPlugin(pluginId: string): CacheService;
    private getClientWithTtl;
    private createRedisStoreFactory;
    private createMemcacheStoreFactory;
    private createMemoryStoreFactory;
}

export { CacheManager, type CacheManagerOptions, cacheServiceFactory };
