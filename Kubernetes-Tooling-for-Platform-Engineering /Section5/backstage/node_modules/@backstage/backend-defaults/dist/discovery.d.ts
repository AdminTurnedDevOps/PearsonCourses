import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { DiscoveryService, RootConfigService } from '@backstage/backend-plugin-api';

/**
 * Service discovery for inter-plugin communication.
 *
 * See {@link @backstage/code-plugin-api#DiscoveryService}
 * and {@link https://backstage.io/docs/backend-system/core-services/discovery | the service docs}
 * for more information.
 *
 * @public
 */
declare const discoveryServiceFactory: _backstage_backend_plugin_api.ServiceFactory<_backstage_backend_plugin_api.DiscoveryService, "plugin", "singleton">;

/**
 * HostDiscovery is a basic PluginEndpointDiscovery implementation
 * that can handle plugins that are hosted in a single or multiple deployments.
 *
 * The deployment may be scaled horizontally, as long as the external URL
 * is the same for all instances. However, internal URLs will always be
 * resolved to the same host, so there won't be any balancing of internal traffic.
 *
 * @public
 */
declare class HostDiscovery implements DiscoveryService {
    private readonly internalBaseUrl;
    private readonly externalBaseUrl;
    private readonly discoveryConfig;
    /**
     * Creates a new HostDiscovery discovery instance by reading
     * from the `backend` config section, specifically the `.baseUrl` for
     * discovering the external URL, and the `.listen` and `.https` config
     * for the internal one.
     *
     * Can be overridden in config by providing a target and corresponding plugins in `discovery.endpoints`.
     * eg.
     *
     * ```yaml
     * discovery:
     *  endpoints:
     *    - target: https://internal.example.com/internal-catalog
     *      plugins: [catalog]
     *    - target: https://internal.example.com/secure/api/{{pluginId}}
     *      plugins: [auth, permission]
     *    - target:
     *        internal: https://internal.example.com/search
     *        external: https://example.com/search
     *      plugins: [search]
     * ```
     *
     * The fixed base path is `/api`, meaning the default full internal
     * path for the `catalog` plugin will be `http://localhost:7007/api/catalog`.
     */
    static fromConfig(config: RootConfigService): HostDiscovery;
    private constructor();
    private getTargetFromConfig;
    getBaseUrl(pluginId: string): Promise<string>;
    getExternalBaseUrl(pluginId: string): Promise<string>;
}

export { HostDiscovery, discoveryServiceFactory };
