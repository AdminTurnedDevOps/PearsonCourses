'use strict';

var createAuthProviderIntegration = require('../createAuthProviderIntegration.cjs.js');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var pluginAuthBackendModuleOidcProvider = require('@backstage/plugin-auth-backend-module-oidc-provider');
var resolvers = require('../resolvers.cjs.js');

const oidc = createAuthProviderIntegration.createAuthProviderIntegration({
  create(options) {
    const authHandler = options?.authHandler;
    const signInResolver = options?.signIn?.resolver;
    return pluginAuthNode.createOAuthProviderFactory({
      authenticator: pluginAuthBackendModuleOidcProvider.oidcAuthenticator,
      profileTransform: authHandler && ((result, context) => authHandler(result.fullProfile, context)),
      signInResolver: signInResolver && ((info, context) => signInResolver(
        {
          result: info.result.fullProfile,
          profile: info.profile
        },
        context
      ))
    });
  },
  resolvers: {
    /**
     * Looks up the user by matching their email local part to the entity name.
     */
    emailLocalPartMatchingUserEntityName: () => resolvers.commonByEmailLocalPartResolver,
    /**
     * Looks up the user by matching their email to the entity email.
     */
    emailMatchingUserEntityProfileEmail: () => resolvers.commonByEmailResolver
  }
});

exports.oidc = oidc;
//# sourceMappingURL=provider.cjs.js.map
