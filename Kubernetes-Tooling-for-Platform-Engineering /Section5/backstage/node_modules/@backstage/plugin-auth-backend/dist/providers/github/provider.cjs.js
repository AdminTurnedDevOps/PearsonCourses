'use strict';

var createAuthProviderIntegration = require('../createAuthProviderIntegration.cjs.js');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var pluginAuthBackendModuleGithubProvider = require('@backstage/plugin-auth-backend-module-github-provider');

const github = createAuthProviderIntegration.createAuthProviderIntegration({
  create(options) {
    const authHandler = options?.authHandler;
    const signInResolver = options?.signIn?.resolver;
    return pluginAuthNode.createOAuthProviderFactory({
      authenticator: pluginAuthBackendModuleGithubProvider.githubAuthenticator,
      profileTransform: authHandler && (async (result, ctx) => authHandler(
        {
          fullProfile: result.fullProfile,
          accessToken: result.session.accessToken,
          params: {
            scope: result.session.scope,
            expires_in: result.session.expiresInSeconds ? String(result.session.expiresInSeconds) : "",
            refresh_token_expires_in: result.session.refreshTokenExpiresInSeconds ? String(result.session.refreshTokenExpiresInSeconds) : ""
          }
        },
        ctx
      )),
      signInResolver: signInResolver && (async ({ profile, result }, ctx) => signInResolver(
        {
          profile,
          result: {
            fullProfile: result.fullProfile,
            accessToken: result.session.accessToken,
            refreshToken: result.session.refreshToken,
            params: {
              scope: result.session.scope,
              expires_in: result.session.expiresInSeconds ? String(result.session.expiresInSeconds) : "",
              refresh_token_expires_in: result.session.refreshTokenExpiresInSeconds ? String(result.session.refreshTokenExpiresInSeconds) : ""
            }
          }
        },
        ctx
      ))
    });
  },
  resolvers: {
    /**
     * Looks up the user by matching their GitHub username to the entity name.
     */
    usernameMatchingUserEntityName: () => {
      return async (info, ctx) => {
        const { fullProfile } = info.result;
        const userId = fullProfile.username;
        if (!userId) {
          throw new Error(`GitHub user profile does not contain a username`);
        }
        return ctx.signInWithCatalogUser({ entityRef: { name: userId } });
      };
    }
  }
});

exports.github = github;
//# sourceMappingURL=provider.cjs.js.map
