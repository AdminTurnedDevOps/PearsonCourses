'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');
var pluginAuthBackendModuleBitbucketServerProvider = require('@backstage/plugin-auth-backend-module-bitbucket-server-provider');
var adaptLegacyOAuthHandler = require('../../lib/legacy/adaptLegacyOAuthHandler.cjs.js');
var adaptLegacyOAuthSignInResolver = require('../../lib/legacy/adaptLegacyOAuthSignInResolver.cjs.js');
var createAuthProviderIntegration = require('../createAuthProviderIntegration.cjs.js');

const bitbucketServer = createAuthProviderIntegration.createAuthProviderIntegration({
  create(options) {
    return pluginAuthNode.createOAuthProviderFactory({
      authenticator: pluginAuthBackendModuleBitbucketServerProvider.bitbucketServerAuthenticator,
      profileTransform: adaptLegacyOAuthHandler.adaptLegacyOAuthHandler(options?.authHandler),
      signInResolver: adaptLegacyOAuthSignInResolver.adaptLegacyOAuthSignInResolver(options?.signIn?.resolver)
    });
  },
  resolvers: {
    /**
     * Looks up the user by matching their email to the entity email.
     */
    emailMatchingUserEntityProfileEmail: () => {
      const resolver = pluginAuthBackendModuleBitbucketServerProvider.bitbucketServerSignInResolvers.emailMatchingUserEntityProfileEmail();
      return async (info, ctx) => {
        return resolver(
          {
            profile: info.profile,
            result: {
              fullProfile: info.result.fullProfile,
              session: {
                accessToken: info.result.accessToken,
                tokenType: info.result.params.token_type ?? "bearer",
                scope: info.result.params.scope,
                expiresInSeconds: info.result.params.expires_in,
                refreshToken: info.result.refreshToken
              }
            }
          },
          ctx
        );
      };
    }
  }
});

exports.bitbucketServer = bitbucketServer;
//# sourceMappingURL=provider.cjs.js.map
