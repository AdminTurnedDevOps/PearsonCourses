{"version":3,"file":"createAuthProviderIntegration.cjs.js","sources":["../../src/providers/createAuthProviderIntegration.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AuthProviderFactory,\n  SignInResolver,\n} from '@backstage/plugin-auth-node';\n\n/**\n * Creates a standardized representation of an integration with a third-party\n * auth provider.\n *\n * The returned object facilitates the creation of provider instances, and\n * supplies built-in sign-in resolvers for the specific provider.\n *\n * @public\n */\nexport function createAuthProviderIntegration<\n  TCreateOptions extends unknown[],\n  TResolvers extends\n    | {\n        [name in string]: (...args: any[]) => SignInResolver<any>;\n      },\n>(config: {\n  create: (...args: TCreateOptions) => AuthProviderFactory;\n  resolvers?: TResolvers;\n}): Readonly<{\n  create: (...args: TCreateOptions) => AuthProviderFactory;\n  // If no resolvers are defined, this receives the type `never`\n  resolvers: Readonly<string extends keyof TResolvers ? never : TResolvers>;\n}> {\n  return Object.freeze({\n    ...config,\n    resolvers: Object.freeze(config.resolvers ?? ({} as any)),\n  });\n}\n"],"names":[],"mappings":";;AA8BO,SAAS,8BAMd,MAOC,EAAA;AACD,EAAA,OAAO,OAAO,MAAO,CAAA;AAAA,IACnB,GAAG,MAAA;AAAA,IACH,WAAW,MAAO,CAAA,MAAA,CAAO,MAAO,CAAA,SAAA,IAAc,EAAU;AAAA,GACzD,CAAA;AACH;;;;"}