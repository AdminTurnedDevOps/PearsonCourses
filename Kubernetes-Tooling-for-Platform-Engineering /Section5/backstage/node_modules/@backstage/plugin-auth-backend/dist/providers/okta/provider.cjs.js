'use strict';

var createAuthProviderIntegration = require('../createAuthProviderIntegration.cjs.js');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var adaptLegacyOAuthHandler = require('../../lib/legacy/adaptLegacyOAuthHandler.cjs.js');
var adaptLegacyOAuthSignInResolver = require('../../lib/legacy/adaptLegacyOAuthSignInResolver.cjs.js');
var pluginAuthBackendModuleOktaProvider = require('@backstage/plugin-auth-backend-module-okta-provider');
var resolvers = require('../resolvers.cjs.js');

const okta = createAuthProviderIntegration.createAuthProviderIntegration({
  create(options) {
    return pluginAuthNode.createOAuthProviderFactory({
      authenticator: pluginAuthBackendModuleOktaProvider.oktaAuthenticator,
      profileTransform: adaptLegacyOAuthHandler.adaptLegacyOAuthHandler(options?.authHandler),
      signInResolver: adaptLegacyOAuthSignInResolver.adaptLegacyOAuthSignInResolver(options?.signIn?.resolver)
    });
  },
  resolvers: {
    /**
     * Looks up the user by matching their email local part to the entity name.
     */
    emailLocalPartMatchingUserEntityName: () => resolvers.commonByEmailLocalPartResolver,
    /**
     * Looks up the user by matching their email to the entity email.
     */
    emailMatchingUserEntityProfileEmail: () => resolvers.commonByEmailResolver,
    /**
     * Looks up the user by matching their email to the `okta.com/email` annotation.
     */
    emailMatchingUserEntityAnnotation() {
      return async (info, ctx) => {
        const { profile } = info;
        if (!profile.email) {
          throw new Error("Okta profile contained no email");
        }
        return ctx.signInWithCatalogUser({
          annotations: {
            "okta.com/email": profile.email
          }
        });
      };
    }
  }
});

exports.okta = okta;
//# sourceMappingURL=provider.cjs.js.map
