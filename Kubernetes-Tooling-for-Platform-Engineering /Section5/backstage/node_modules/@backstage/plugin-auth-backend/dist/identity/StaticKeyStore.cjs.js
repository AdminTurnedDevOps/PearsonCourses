'use strict';

var jose = require('jose');
var fs = require('fs');

const DEFAULT_ALGORITHM = "ES256";
class StaticKeyStore {
  keyPairs;
  createdAt;
  constructor(keyPairs) {
    if (keyPairs.length === 0) {
      throw new Error("Should provide at least one key pair");
    }
    this.keyPairs = keyPairs;
    this.createdAt = /* @__PURE__ */ new Date();
  }
  static async fromConfig(config) {
    const keyConfigs = config.getConfigArray("auth.keyStore.static.keys").map((c) => {
      const staticKeyConfig = {
        publicKeyFile: c.getString("publicKeyFile"),
        privateKeyFile: c.getString("privateKeyFile"),
        keyId: c.getString("keyId"),
        algorithm: c.getOptionalString("algorithm") ?? DEFAULT_ALGORITHM
      };
      return staticKeyConfig;
    });
    const keyPairs = await Promise.all(
      keyConfigs.map(async (k) => await this.loadKeyPair(k))
    );
    return new StaticKeyStore(keyPairs);
  }
  addKey(_key) {
    throw new Error("Cannot add keys to the static key store");
  }
  listKeys() {
    const keys = this.keyPairs.map((k) => this.keyPairToStoredKey(k));
    return Promise.resolve({ items: keys });
  }
  getPrivateKey(keyId) {
    const keyPair = this.keyPairs.find((k) => k.publicKey.kid === keyId);
    if (keyPair === void 0) {
      throw new Error(`Could not find key with keyId: ${keyId}`);
    }
    return keyPair.privateKey;
  }
  removeKeys(_kids) {
    throw new Error("Cannot remove keys from the static key store");
  }
  keyPairToStoredKey(keyPair) {
    const publicKey = {
      ...keyPair.publicKey,
      use: "sig"
    };
    return {
      key: publicKey,
      createdAt: this.createdAt
    };
  }
  static async loadKeyPair(options) {
    const algorithm = options.algorithm;
    const keyId = options.keyId;
    const publicKey = await this.loadPublicKeyFromFile(
      options.publicKeyFile,
      keyId,
      algorithm
    );
    const privateKey = await this.loadPrivateKeyFromFile(
      options.privateKeyFile,
      keyId,
      algorithm
    );
    return { publicKey, privateKey };
  }
  static async loadPublicKeyFromFile(path, keyId, algorithm) {
    return this.loadKeyFromFile(path, keyId, algorithm, jose.importSPKI);
  }
  static async loadPrivateKeyFromFile(path, keyId, algorithm) {
    return this.loadKeyFromFile(path, keyId, algorithm, jose.importPKCS8);
  }
  static async loadKeyFromFile(path, keyId, algorithm, importer) {
    const content = await fs.promises.readFile(path, { encoding: "utf8", flag: "r" });
    const key = await importer(content, algorithm);
    const jwk = await jose.exportJWK(key);
    jwk.kid = keyId;
    jwk.alg = algorithm;
    return jwk;
  }
}

exports.StaticKeyStore = StaticKeyStore;
//# sourceMappingURL=StaticKeyStore.cjs.js.map
