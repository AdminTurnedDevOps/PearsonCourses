'use strict';

var firestore = require('@google-cloud/firestore');

const DEFAULT_TIMEOUT_MS = 1e4;
const DEFAULT_DOCUMENT_PATH = "sessions";
class FirestoreKeyStore {
  constructor(database, path, timeout) {
    this.database = database;
    this.path = path;
    this.timeout = timeout;
  }
  static async create(settings) {
    const { path, timeout, ...firestoreSettings } = settings ?? {};
    const database = new firestore.Firestore(firestoreSettings);
    return new FirestoreKeyStore(
      database,
      path ?? DEFAULT_DOCUMENT_PATH,
      timeout ?? DEFAULT_TIMEOUT_MS
    );
  }
  static async verifyConnection(keyStore, logger) {
    try {
      await keyStore.verify();
    } catch (error) {
      if (process.env.NODE_ENV !== "development") {
        throw new Error(
          `Failed to connect to database: ${error.message}`
        );
      }
      logger?.warn(
        `Failed to connect to database: ${error.message}`
      );
    }
  }
  async addKey(key) {
    await this.withTimeout(
      this.database.collection(this.path).doc(key.kid).set({
        kid: key.kid,
        key
      })
    );
  }
  async listKeys() {
    const keys = await this.withTimeout(
      this.database.collection(this.path).get()
    );
    return {
      items: keys.docs.map((doc) => {
        const { key } = doc.data();
        return {
          createdAt: doc.createTime.toDate(),
          key: typeof key === "string" ? JSON.parse(key) : key
        };
      })
    };
  }
  async removeKeys(kids) {
    for (const kid of kids) {
      await this.withTimeout(
        this.database.collection(this.path).doc(kid).delete()
      );
    }
  }
  /**
   * Helper function to allow us to modify the timeout used when
   * performing Firestore database operations.
   *
   * The reason for this is that it seems that there's no other
   * practical solution to change the default timeout of 10mins
   * that Firestore has.
   *
   */
  async withTimeout(operation) {
    const timer = new Promise(
      (_, reject) => setTimeout(() => {
        reject(new Error(`Operation timed out after ${this.timeout}ms`));
      }, this.timeout)
    );
    return Promise.race([operation, timer]);
  }
  /**
   * Used to verify that the database is reachable.
   */
  async verify() {
    await this.withTimeout(this.database.collection(this.path).limit(1).get());
  }
}

exports.DEFAULT_DOCUMENT_PATH = DEFAULT_DOCUMENT_PATH;
exports.DEFAULT_TIMEOUT_MS = DEFAULT_TIMEOUT_MS;
exports.FirestoreKeyStore = FirestoreKeyStore;
//# sourceMappingURL=FirestoreKeyStore.cjs.js.map
