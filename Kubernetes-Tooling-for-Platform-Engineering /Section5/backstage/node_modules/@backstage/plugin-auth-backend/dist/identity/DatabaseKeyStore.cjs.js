'use strict';

var luxon = require('luxon');

const TABLE = "signing_keys";
const parseDate = (date) => {
  const parsedDate = typeof date === "string" ? luxon.DateTime.fromSQL(date, { zone: "UTC" }) : luxon.DateTime.fromJSDate(date);
  if (!parsedDate.isValid) {
    throw new Error(
      `Failed to parse date, reason: ${parsedDate.invalidReason}, explanation: ${parsedDate.invalidExplanation}`
    );
  }
  return parsedDate.toJSDate();
};
class DatabaseKeyStore {
  constructor(client) {
    this.client = client;
  }
  async addKey(key) {
    await this.client(TABLE).insert({
      kid: key.kid,
      key: JSON.stringify(key)
    });
  }
  async listKeys() {
    const rows = await this.client(TABLE).select();
    return {
      items: rows.map((row) => ({
        key: JSON.parse(row.key),
        createdAt: parseDate(row.created_at)
      }))
    };
  }
  async removeKeys(kids) {
    await this.client(TABLE).delete().whereIn("kid", kids);
  }
}

exports.DatabaseKeyStore = DatabaseKeyStore;
//# sourceMappingURL=DatabaseKeyStore.cjs.js.map
