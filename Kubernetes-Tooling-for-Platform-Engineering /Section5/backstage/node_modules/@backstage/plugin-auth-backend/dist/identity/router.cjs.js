'use strict';

var Router = require('express-promise-router');
var jose = require('jose');
var errors = require('@backstage/errors');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var Router__default = /*#__PURE__*/_interopDefaultCompat(Router);

function bindOidcRouter(targetRouter, options) {
  const { baseUrl, auth, tokenIssuer, userInfoDatabaseHandler } = options;
  const router = Router__default.default();
  targetRouter.use(router);
  const config = {
    issuer: baseUrl,
    token_endpoint: `${baseUrl}/v1/token`,
    userinfo_endpoint: `${baseUrl}/v1/userinfo`,
    jwks_uri: `${baseUrl}/.well-known/jwks.json`,
    response_types_supported: ["id_token"],
    subject_types_supported: ["public"],
    id_token_signing_alg_values_supported: [
      "RS256",
      "RS384",
      "RS512",
      "ES256",
      "ES384",
      "ES512",
      "PS256",
      "PS384",
      "PS512",
      "EdDSA"
    ],
    scopes_supported: ["openid"],
    token_endpoint_auth_methods_supported: [],
    claims_supported: ["sub", "ent"],
    grant_types_supported: []
  };
  router.get("/.well-known/openid-configuration", (_req, res) => {
    res.json(config);
  });
  router.get("/.well-known/jwks.json", async (_req, res) => {
    const { keys } = await tokenIssuer.listPublicKeys();
    res.json({ keys });
  });
  router.get("/v1/token", (_req, res) => {
    res.status(501).send("Not Implemented");
  });
  router.get("/v1/userinfo", async (req, res) => {
    const matches = req.headers.authorization?.match(/^Bearer[ ]+(\S+)$/i);
    const token = matches?.[1];
    if (!token) {
      throw new errors.AuthenticationError("No token provided");
    }
    const credentials = await auth.authenticate(token, {
      allowLimitedAccess: true
    });
    if (!auth.isPrincipal(credentials, "user")) {
      throw new errors.InputError(
        "Userinfo endpoint must be called with a token that represents a user principal"
      );
    }
    const { sub: userEntityRef } = jose.decodeJwt(token);
    if (typeof userEntityRef !== "string") {
      throw new Error("Invalid user token, user entity ref must be a string");
    }
    const userInfo = await userInfoDatabaseHandler.getUserInfo(userEntityRef);
    if (!userInfo) {
      res.status(404).send("User info not found");
      return;
    }
    res.json(userInfo);
  });
}

exports.bindOidcRouter = bindOidcRouter;
//# sourceMappingURL=router.cjs.js.map
