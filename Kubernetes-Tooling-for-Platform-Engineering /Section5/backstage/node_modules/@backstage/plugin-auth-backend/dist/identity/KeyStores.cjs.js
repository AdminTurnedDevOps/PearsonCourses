'use strict';

var lodash = require('lodash');
var DatabaseKeyStore = require('./DatabaseKeyStore.cjs.js');
var FirestoreKeyStore = require('./FirestoreKeyStore.cjs.js');
var MemoryKeyStore = require('./MemoryKeyStore.cjs.js');
var StaticKeyStore = require('./StaticKeyStore.cjs.js');

class KeyStores {
  /**
   * Looks at the `auth.keyStore` section in the application configuration
   * and returns a KeyStore store. Defaults to `database`
   *
   * @returns a KeyStore store
   */
  static async fromConfig(config, options) {
    const { logger, database } = options;
    const ks = config.getOptionalConfig("auth.keyStore");
    const provider = ks?.getOptionalString("provider") ?? "database";
    logger.info(`Configuring "${provider}" as KeyStore provider`);
    if (provider === "database") {
      return new DatabaseKeyStore.DatabaseKeyStore(await database.get());
    }
    if (provider === "memory") {
      return new MemoryKeyStore.MemoryKeyStore();
    }
    if (provider === "firestore") {
      const settings = ks?.getConfig(provider);
      const keyStore = await FirestoreKeyStore.FirestoreKeyStore.create(
        lodash.pickBy(
          {
            projectId: settings?.getOptionalString("projectId"),
            keyFilename: settings?.getOptionalString("keyFilename"),
            host: settings?.getOptionalString("host"),
            port: settings?.getOptionalNumber("port"),
            ssl: settings?.getOptionalBoolean("ssl"),
            path: settings?.getOptionalString("path"),
            timeout: settings?.getOptionalNumber("timeout")
          },
          (value) => value !== void 0
        )
      );
      await FirestoreKeyStore.FirestoreKeyStore.verifyConnection(keyStore, logger);
      return keyStore;
    }
    if (provider === "static") {
      return await StaticKeyStore.StaticKeyStore.fromConfig(config);
    }
    throw new Error(`Unknown KeyStore provider: ${provider}`);
  }
}

exports.KeyStores = KeyStores;
//# sourceMappingURL=KeyStores.cjs.js.map
