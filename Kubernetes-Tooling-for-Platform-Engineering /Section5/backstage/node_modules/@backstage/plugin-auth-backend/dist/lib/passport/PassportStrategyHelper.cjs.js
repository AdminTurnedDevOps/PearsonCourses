'use strict';

require('jose');
require('@backstage/errors');

const executeRedirectStrategy = async (req, providerStrategy, options) => {
  return new Promise((resolve) => {
    const strategy = Object.create(providerStrategy);
    strategy.redirect = (url, status) => {
      resolve({ url, status: status ?? void 0 });
    };
    strategy.authenticate(req, { ...options });
  });
};
const executeFrameHandlerStrategy = async (req, providerStrategy, options) => {
  return new Promise(
    (resolve, reject) => {
      const strategy = Object.create(providerStrategy);
      strategy.success = (result, privateInfo) => {
        resolve({ result, privateInfo });
      };
      strategy.fail = (info) => {
        reject(new Error(`Authentication rejected, ${info.message ?? ""}`));
      };
      strategy.error = (error) => {
        let message = `Authentication failed, ${error.message}`;
        if (error.oauthError?.data) {
          try {
            const errorData = JSON.parse(error.oauthError.data);
            if (errorData.message) {
              message += ` - ${errorData.message}`;
            }
          } catch (parseError) {
            message += ` - ${error.oauthError}`;
          }
        }
        reject(new Error(message));
      };
      strategy.redirect = () => {
        reject(new Error("Unexpected redirect"));
      };
      strategy.authenticate(req, { ...{} });
    }
  );
};

exports.executeFrameHandlerStrategy = executeFrameHandlerStrategy;
exports.executeRedirectStrategy = executeRedirectStrategy;
//# sourceMappingURL=PassportStrategyHelper.cjs.js.map
