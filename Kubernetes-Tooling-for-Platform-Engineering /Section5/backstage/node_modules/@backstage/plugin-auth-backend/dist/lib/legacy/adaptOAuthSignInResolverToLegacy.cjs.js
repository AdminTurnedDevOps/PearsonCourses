'use strict';

function adaptOAuthSignInResolverToLegacy(resolvers) {
  const legacyResolvers = {};
  for (const name of Object.keys(resolvers)) {
    const resolver = resolvers[name];
    legacyResolvers[name] = () => async (input, ctx) => resolver(
      {
        profile: input.profile,
        result: {
          fullProfile: input.result.fullProfile,
          session: {
            accessToken: input.result.accessToken,
            expiresInSeconds: input.result.params.expires_in,
            scope: input.result.params.scope,
            idToken: input.result.params.id_token,
            tokenType: input.result.params.token_type ?? "bearer",
            refreshToken: input.result.refreshToken
          }
        }
      },
      ctx
    );
  }
  return legacyResolvers;
}

exports.adaptOAuthSignInResolverToLegacy = adaptOAuthSignInResolverToLegacy;
//# sourceMappingURL=adaptOAuthSignInResolverToLegacy.cjs.js.map
