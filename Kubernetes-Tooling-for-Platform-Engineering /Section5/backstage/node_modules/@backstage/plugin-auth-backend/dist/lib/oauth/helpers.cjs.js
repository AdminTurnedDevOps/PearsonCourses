'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');

const readState = pluginAuthNode.decodeOAuthState;
const encodeState = pluginAuthNode.encodeOAuthState;
const verifyNonce = (req, providerId) => {
  const cookieNonce = req.cookies[`${providerId}-nonce`];
  const state = readState(req.query.state?.toString() ?? "");
  const stateNonce = state.nonce;
  if (!cookieNonce) {
    throw new Error("Auth response is missing cookie nonce");
  }
  if (stateNonce.length === 0) {
    throw new Error("Auth response is missing state nonce");
  }
  if (cookieNonce !== stateNonce) {
    throw new Error("Invalid nonce");
  }
};
const defaultCookieConfigurer = ({
  callbackUrl,
  providerId,
  appOrigin
}) => {
  const { hostname: domain, pathname, protocol } = new URL(callbackUrl);
  const secure = protocol === "https:";
  let sameSite = "lax";
  if (new URL(appOrigin).hostname !== domain && secure) {
    sameSite = "none";
  }
  const path = pathname.endsWith(`${providerId}/handler/frame`) ? pathname.slice(0, -"/handler/frame".length) : `${pathname}/${providerId}`;
  return { domain, path, secure, sameSite };
};

exports.defaultCookieConfigurer = defaultCookieConfigurer;
exports.encodeState = encodeState;
exports.readState = readState;
exports.verifyNonce = verifyNonce;
//# sourceMappingURL=helpers.cjs.js.map
