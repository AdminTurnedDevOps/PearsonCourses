'use strict';

var backendCommon = require('@backstage/backend-common');
var backendPluginApi = require('@backstage/backend-plugin-api');
var config = require('@backstage/config');

const migrationsDir = backendPluginApi.resolvePackagePath(
  "@backstage/plugin-auth-backend",
  "migrations"
);
class AuthDatabase {
  #database;
  #promise;
  static create(database) {
    return new AuthDatabase(database);
  }
  /** @internal */
  static forTesting() {
    const config$1 = new config.ConfigReader({
      backend: {
        database: {
          client: "better-sqlite3",
          connection: ":memory:",
          useNullAsDefault: true
        }
      }
    });
    const database = backendCommon.DatabaseManager.fromConfig(config$1).forPlugin("auth");
    return new AuthDatabase(database);
  }
  static async runMigrations(knex) {
    await knex.migrate.latest({
      directory: migrationsDir
    });
  }
  constructor(database) {
    this.#database = database;
  }
  get() {
    this.#promise ??= this.#database.getClient().then(async (client) => {
      if (!this.#database.migrations?.skip) {
        await AuthDatabase.runMigrations(client);
      }
      return client;
    });
    return this.#promise;
  }
}

exports.AuthDatabase = AuthDatabase;
//# sourceMappingURL=AuthDatabase.cjs.js.map
