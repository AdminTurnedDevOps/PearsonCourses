'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var alpha = require('@backstage/plugin-catalog-node/alpha');
var router = require('./service/router.cjs.js');

const authPlugin = backendPluginApi.createBackendPlugin({
  pluginId: "auth",
  register(reg) {
    const providers = /* @__PURE__ */ new Map();
    let ownershipResolver = void 0;
    reg.registerExtensionPoint(pluginAuthNode.authProvidersExtensionPoint, {
      registerProvider({ providerId, factory }) {
        if (providers.has(providerId)) {
          throw new Error(
            `Auth provider '${providerId}' was already registered`
          );
        }
        providers.set(providerId, factory);
      }
    });
    reg.registerExtensionPoint(pluginAuthNode.authOwnershipResolutionExtensionPoint, {
      setAuthOwnershipResolver(resolver) {
        if (ownershipResolver) {
          throw new Error("Auth ownership resolver is already set");
        }
        ownershipResolver = resolver;
      }
    });
    reg.registerInit({
      deps: {
        httpRouter: backendPluginApi.coreServices.httpRouter,
        logger: backendPluginApi.coreServices.logger,
        config: backendPluginApi.coreServices.rootConfig,
        database: backendPluginApi.coreServices.database,
        discovery: backendPluginApi.coreServices.discovery,
        auth: backendPluginApi.coreServices.auth,
        httpAuth: backendPluginApi.coreServices.httpAuth,
        catalogApi: alpha.catalogServiceRef
      },
      async init({
        httpRouter,
        logger,
        config,
        database,
        discovery,
        auth,
        httpAuth,
        catalogApi
      }) {
        const router$1 = await router.createRouter({
          logger,
          config,
          database,
          discovery,
          auth,
          httpAuth,
          catalogApi,
          providerFactories: Object.fromEntries(providers),
          disableDefaultProviderFactories: true,
          ownershipResolver
        });
        httpRouter.addAuthPolicy({
          path: "/",
          allow: "unauthenticated"
        });
        httpRouter.use(router$1);
      }
    });
  }
});

exports.authPlugin = authPlugin;
//# sourceMappingURL=authPlugin.cjs.js.map
