'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');
var googleAuthLibrary = require('google-auth-library');
var passportGoogleOauth20 = require('passport-google-oauth20');

const googleAuthenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  scopes: {
    required: [
      "openid",
      `https://www.googleapis.com/auth/userinfo.email`,
      `https://www.googleapis.com/auth/userinfo.profile`
    ]
  },
  initialize({ callbackUrl, config }) {
    const clientId = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    return pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new passportGoogleOauth20.Strategy(
        {
          clientID: clientId,
          clientSecret,
          callbackURL: callbackUrl,
          passReqToCallback: false
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            {
              fullProfile,
              params,
              accessToken
            },
            {
              refreshToken
            }
          );
        }
      )
    );
  },
  async start(input, helper) {
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent",
      includeGrantedScopes: "true"
    });
  },
  async authenticate(input, helper) {
    return helper.authenticate(input);
  },
  async refresh(input, helper) {
    return helper.refresh(input);
  },
  async logout(input) {
    if (input.refreshToken) {
      const oauthClient = new googleAuthLibrary.OAuth2Client();
      await oauthClient.revokeToken(input.refreshToken);
    }
  }
});

exports.googleAuthenticator = googleAuthenticator;
//# sourceMappingURL=authenticator.cjs.js.map
