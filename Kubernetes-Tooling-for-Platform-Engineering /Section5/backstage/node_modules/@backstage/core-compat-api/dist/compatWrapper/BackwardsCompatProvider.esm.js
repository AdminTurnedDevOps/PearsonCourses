import React, { useMemo } from 'react';
import { AppContextProvider } from '../core-app-api/src/app/AppContext.esm.js';
import { useApi, appTreeApiRef, componentsApiRef, iconsApiRef, coreComponentRefs, routeResolutionApiRef, createFrontendPlugin } from '@backstage/frontend-plugin-api';
import { getOrCreateGlobalSingleton, createVersionedContext, createVersionedValueMap } from '@backstage/version-bridge';
import { convertLegacyRouteRef } from '../convertLegacyRouteRef.esm.js';

const legacyPluginStore = getOrCreateGlobalSingleton(
  "legacy-plugin-compatibility-store",
  () => /* @__PURE__ */ new WeakMap()
);
function toLegacyPlugin(plugin) {
  let legacy = legacyPluginStore.get(plugin);
  if (legacy) {
    return legacy;
  }
  const errorMsg = "Not implemented in legacy plugin compatibility layer";
  const notImplemented = () => {
    throw new Error(errorMsg);
  };
  legacy = {
    getId() {
      return plugin.id;
    },
    get routes() {
      return {};
    },
    get externalRoutes() {
      return {};
    },
    getApis: notImplemented,
    getFeatureFlags: notImplemented,
    provide: notImplemented
  };
  legacyPluginStore.set(plugin, legacy);
  return legacy;
}
function toNewPlugin(plugin) {
  return createFrontendPlugin({
    id: plugin.getId()
  });
}
function LegacyAppContextProvider(props) {
  const appTreeApi = useApi(appTreeApiRef);
  const componentsApi = useApi(componentsApiRef);
  const iconsApi = useApi(iconsApiRef);
  const appContext = useMemo(() => {
    const { tree } = appTreeApi.getTree();
    let gatheredPlugins = void 0;
    const ErrorBoundaryFallback = componentsApi.getComponent(
      coreComponentRefs.errorBoundaryFallback
    );
    const ErrorBoundaryFallbackWrapper = ({ plugin, ...rest }) => /* @__PURE__ */ React.createElement(
      ErrorBoundaryFallback,
      {
        ...rest,
        plugin: plugin && toNewPlugin(plugin)
      }
    );
    return {
      getPlugins() {
        if (gatheredPlugins) {
          return gatheredPlugins;
        }
        const pluginSet = /* @__PURE__ */ new Set();
        for (const node of tree.nodes.values()) {
          const plugin = node.spec.source;
          if (plugin) {
            pluginSet.add(toLegacyPlugin(plugin));
          }
        }
        gatheredPlugins = Array.from(pluginSet);
        return gatheredPlugins;
      },
      getSystemIcon(key) {
        return iconsApi.getIcon(key);
      },
      getSystemIcons() {
        return Object.fromEntries(
          iconsApi.listIconKeys().map((key) => [key, iconsApi.getIcon(key)])
        );
      },
      getComponents() {
        return {
          NotFoundErrorPage: componentsApi.getComponent(
            coreComponentRefs.notFoundErrorPage
          ),
          BootErrorPage() {
            throw new Error(
              "The BootErrorPage app component should not be accessed by plugins"
            );
          },
          Progress: componentsApi.getComponent(coreComponentRefs.progress),
          Router() {
            throw new Error(
              "The Router app component should not be accessed by plugins"
            );
          },
          ErrorBoundaryFallback: ErrorBoundaryFallbackWrapper
        };
      }
    };
  }, [appTreeApi, componentsApi, iconsApi]);
  return /* @__PURE__ */ React.createElement(AppContextProvider, { appContext }, props.children);
}
const RoutingContext = createVersionedContext(
  "routing-context"
);
function LegacyRoutingProvider(props) {
  const routeResolutionApi = useApi(routeResolutionApiRef);
  const value = useMemo(() => {
    return createVersionedValueMap({
      1: {
        resolve(anyRouteRef, location) {
          const sourcePath = typeof location === "string" ? location : location.pathname ?? "";
          return routeResolutionApi.resolve(
            // This removes the requirement to use convertLegacyRouteRef inside plugins, but
            // they still need to converted when passed to the plugin instance
            convertLegacyRouteRef(anyRouteRef),
            { sourcePath }
          );
        }
      }
    });
  }, [routeResolutionApi]);
  return /* @__PURE__ */ React.createElement(RoutingContext.Provider, { value }, props.children);
}
function BackwardsCompatProvider(props) {
  return /* @__PURE__ */ React.createElement(LegacyRoutingProvider, null, /* @__PURE__ */ React.createElement(LegacyAppContextProvider, null, props.children));
}

export { BackwardsCompatProvider, toLegacyPlugin };
//# sourceMappingURL=BackwardsCompatProvider.esm.js.map
