{"version":3,"file":"usePermission.esm.js","sources":["../../src/hooks/usePermission.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { useApi } from '@backstage/core-plugin-api';\nimport { permissionApiRef } from '../apis';\nimport {\n  AuthorizeResult,\n  isResourcePermission,\n  Permission,\n  ResourcePermission,\n} from '@backstage/plugin-permission-common';\nimport useSWR from 'swr';\n\n/** @public */\nexport type AsyncPermissionResult = {\n  loading: boolean;\n  allowed: boolean;\n  error?: Error;\n};\n\n/**\n * React hook utility for authorization. Given either a non-resource\n * {@link @backstage/plugin-permission-common#Permission} or a\n * {@link @backstage/plugin-permission-common#ResourcePermission} and an\n * optional resourceRef, it will return whether or not access is allowed (for\n * the given resource, if resourceRef is provided). See\n * {@link @backstage/plugin-permission-common/PermissionClient#authorize} for\n * more details.\n *\n * The resourceRef field is optional to allow calling this hook with an\n * entity that might be loading asynchronously, but when resourceRef is not\n * supplied, the value of `allowed` will always be false.\n *\n * Note: This hook uses stale-while-revalidate to help avoid flicker in UI\n * elements that would be conditionally rendered based on the `allowed` result\n * of this hook.\n * @public\n */\nexport function usePermission(\n  input:\n    | {\n        permission: Exclude<Permission, ResourcePermission>;\n        resourceRef?: never;\n      }\n    | {\n        permission: ResourcePermission;\n        resourceRef: string | undefined;\n      },\n): AsyncPermissionResult {\n  const permissionApi = useApi(permissionApiRef);\n  const { data, error } = useSWR(input, async (args: typeof input) => {\n    // We could make the resourceRef parameter required to avoid this check, but\n    // it would make using this hook difficult in situations where the entity\n    // must be asynchronously loaded, so instead we short-circuit to a deny when\n    // no resourceRef is supplied, on the assumption that the resourceRef is\n    // still loading outside the hook.\n    if (isResourcePermission(args.permission) && !args.resourceRef) {\n      return AuthorizeResult.DENY;\n    }\n\n    const { result } = await permissionApi.authorize(args);\n    return result;\n  });\n\n  if (error) {\n    return { error, loading: false, allowed: false };\n  }\n  if (data === undefined) {\n    return { loading: true, allowed: false };\n  }\n  return { loading: false, allowed: data === AuthorizeResult.ALLOW };\n}\n"],"names":[],"mappings":";;;;;AAmDO,SAAS,cACd,KASuB,EAAA;AACvB,EAAM,MAAA,aAAA,GAAgB,OAAO,gBAAgB,CAAA;AAC7C,EAAA,MAAM,EAAE,IAAM,EAAA,KAAA,KAAU,MAAO,CAAA,KAAA,EAAO,OAAO,IAAuB,KAAA;AAMlE,IAAA,IAAI,qBAAqB,IAAK,CAAA,UAAU,CAAK,IAAA,CAAC,KAAK,WAAa,EAAA;AAC9D,MAAA,OAAO,eAAgB,CAAA,IAAA;AAAA;AAGzB,IAAA,MAAM,EAAE,MAAO,EAAA,GAAI,MAAM,aAAA,CAAc,UAAU,IAAI,CAAA;AACrD,IAAO,OAAA,MAAA;AAAA,GACR,CAAA;AAED,EAAA,IAAI,KAAO,EAAA;AACT,IAAA,OAAO,EAAE,KAAA,EAAO,OAAS,EAAA,KAAA,EAAO,SAAS,KAAM,EAAA;AAAA;AAEjD,EAAA,IAAI,SAAS,KAAW,CAAA,EAAA;AACtB,IAAA,OAAO,EAAE,OAAA,EAAS,IAAM,EAAA,OAAA,EAAS,KAAM,EAAA;AAAA;AAEzC,EAAA,OAAO,EAAE,OAAS,EAAA,KAAA,EAAO,OAAS,EAAA,IAAA,KAAS,gBAAgB,KAAM,EAAA;AACnE;;;;"}