{"version":3,"file":"module.cjs.js","sources":["../src/module.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @packageDocumentation\n * A module for the search backend that exports TechDocs modules.\n */\n\nimport {\n  coreServices,\n  createBackendModule,\n  createExtensionPoint,\n  readSchedulerServiceTaskScheduleDefinitionFromConfig,\n} from '@backstage/backend-plugin-api';\nimport { catalogServiceRef } from '@backstage/plugin-catalog-node/alpha';\nimport {\n  DefaultTechDocsCollatorFactory,\n  TechDocsCollatorDocumentTransformer,\n  TechDocsCollatorEntityTransformer,\n} from '@backstage/plugin-search-backend-module-techdocs';\nimport { searchIndexRegistryExtensionPoint } from '@backstage/plugin-search-backend-node/alpha';\n\n/** @public */\nexport interface TechDocsCollatorEntityTransformerExtensionPoint {\n  setTransformer(transformer: TechDocsCollatorEntityTransformer): void;\n  setDocumentTransformer(\n    transformer: TechDocsCollatorDocumentTransformer,\n  ): void;\n}\n\n/**\n * Extension point used to customize the TechDocs collator entity transformer.\n *\n * @public\n */\nexport const techdocsCollatorEntityTransformerExtensionPoint =\n  createExtensionPoint<TechDocsCollatorEntityTransformerExtensionPoint>({\n    id: 'search.techdocsCollator.transformer',\n  });\n\n/**\n * @public\n * Search backend module for the TechDocs index.\n */\nexport default createBackendModule({\n  pluginId: 'search',\n  moduleId: 'techdocs-collator',\n  register(env) {\n    let entityTransformer: TechDocsCollatorEntityTransformer | undefined;\n    let documentTransformer: TechDocsCollatorDocumentTransformer | undefined;\n\n    env.registerExtensionPoint(\n      techdocsCollatorEntityTransformerExtensionPoint,\n      {\n        setTransformer(newTransformer) {\n          if (entityTransformer) {\n            throw new Error(\n              'TechDocs collator entity transformer may only be set once',\n            );\n          }\n          entityTransformer = newTransformer;\n        },\n        setDocumentTransformer(newTransformer) {\n          if (documentTransformer) {\n            throw new Error(\n              'TechDocs collator document transformer may only be set once',\n            );\n          }\n          documentTransformer = newTransformer;\n        },\n      },\n    );\n\n    env.registerInit({\n      deps: {\n        config: coreServices.rootConfig,\n        logger: coreServices.logger,\n        auth: coreServices.auth,\n        httpAuth: coreServices.httpAuth,\n        discovery: coreServices.discovery,\n        scheduler: coreServices.scheduler,\n        catalog: catalogServiceRef,\n        indexRegistry: searchIndexRegistryExtensionPoint,\n      },\n      async init({\n        config,\n        logger,\n        auth,\n        httpAuth,\n        discovery,\n        scheduler,\n        catalog,\n        indexRegistry,\n      }) {\n        const defaultSchedule = {\n          frequency: { minutes: 10 },\n          timeout: { minutes: 15 },\n          initialDelay: { seconds: 3 },\n        };\n\n        const schedule = config.has('search.collators.techdocs.schedule')\n          ? readSchedulerServiceTaskScheduleDefinitionFromConfig(\n              config.getConfig('search.collators.techdocs.schedule'),\n            )\n          : defaultSchedule;\n\n        indexRegistry.addCollator({\n          schedule: scheduler.createScheduledTaskRunner(schedule),\n          factory: DefaultTechDocsCollatorFactory.fromConfig(config, {\n            discovery,\n            auth,\n            httpAuth,\n            logger,\n            catalogClient: catalog,\n            entityTransformer,\n            documentTransformer,\n          }),\n        });\n      },\n    });\n  },\n});\n"],"names":["createExtensionPoint","createBackendModule","coreServices","catalogServiceRef","searchIndexRegistryExtensionPoint","readSchedulerServiceTaskScheduleDefinitionFromConfig","DefaultTechDocsCollatorFactory"],"mappings":";;;;;;;;;AAgDO,MAAM,kDACXA,qCAAsE,CAAA;AAAA,EACpE,EAAI,EAAA;AACN,CAAC;AAMH,cAAeC,oCAAoB,CAAA;AAAA,EACjC,QAAU,EAAA,QAAA;AAAA,EACV,QAAU,EAAA,mBAAA;AAAA,EACV,SAAS,GAAK,EAAA;AACZ,IAAI,IAAA,iBAAA;AACJ,IAAI,IAAA,mBAAA;AAEJ,IAAI,GAAA,CAAA,sBAAA;AAAA,MACF,+CAAA;AAAA,MACA;AAAA,QACE,eAAe,cAAgB,EAAA;AAC7B,UAAA,IAAI,iBAAmB,EAAA;AACrB,YAAA,MAAM,IAAI,KAAA;AAAA,cACR;AAAA,aACF;AAAA;AAEF,UAAoB,iBAAA,GAAA,cAAA;AAAA,SACtB;AAAA,QACA,uBAAuB,cAAgB,EAAA;AACrC,UAAA,IAAI,mBAAqB,EAAA;AACvB,YAAA,MAAM,IAAI,KAAA;AAAA,cACR;AAAA,aACF;AAAA;AAEF,UAAsB,mBAAA,GAAA,cAAA;AAAA;AACxB;AACF,KACF;AAEA,IAAA,GAAA,CAAI,YAAa,CAAA;AAAA,MACf,IAAM,EAAA;AAAA,QACJ,QAAQC,6BAAa,CAAA,UAAA;AAAA,QACrB,QAAQA,6BAAa,CAAA,MAAA;AAAA,QACrB,MAAMA,6BAAa,CAAA,IAAA;AAAA,QACnB,UAAUA,6BAAa,CAAA,QAAA;AAAA,QACvB,WAAWA,6BAAa,CAAA,SAAA;AAAA,QACxB,WAAWA,6BAAa,CAAA,SAAA;AAAA,QACxB,OAAS,EAAAC,uBAAA;AAAA,QACT,aAAe,EAAAC;AAAA,OACjB;AAAA,MACA,MAAM,IAAK,CAAA;AAAA,QACT,MAAA;AAAA,QACA,MAAA;AAAA,QACA,IAAA;AAAA,QACA,QAAA;AAAA,QACA,SAAA;AAAA,QACA,SAAA;AAAA,QACA,OAAA;AAAA,QACA;AAAA,OACC,EAAA;AACD,QAAA,MAAM,eAAkB,GAAA;AAAA,UACtB,SAAA,EAAW,EAAE,OAAA,EAAS,EAAG,EAAA;AAAA,UACzB,OAAA,EAAS,EAAE,OAAA,EAAS,EAAG,EAAA;AAAA,UACvB,YAAA,EAAc,EAAE,OAAA,EAAS,CAAE;AAAA,SAC7B;AAEA,QAAA,MAAM,QAAW,GAAA,MAAA,CAAO,GAAI,CAAA,oCAAoC,CAC5D,GAAAC,qEAAA;AAAA,UACE,MAAA,CAAO,UAAU,oCAAoC;AAAA,SAEvD,GAAA,eAAA;AAEJ,QAAA,aAAA,CAAc,WAAY,CAAA;AAAA,UACxB,QAAA,EAAU,SAAU,CAAA,yBAAA,CAA0B,QAAQ,CAAA;AAAA,UACtD,OAAA,EAASC,gEAA+B,CAAA,UAAA,CAAW,MAAQ,EAAA;AAAA,YACzD,SAAA;AAAA,YACA,IAAA;AAAA,YACA,QAAA;AAAA,YACA,MAAA;AAAA,YACA,aAAe,EAAA,OAAA;AAAA,YACf,iBAAA;AAAA,YACA;AAAA,WACD;AAAA,SACF,CAAA;AAAA;AACH,KACD,CAAA;AAAA;AAEL,CAAC,CAAA;;;;;"}