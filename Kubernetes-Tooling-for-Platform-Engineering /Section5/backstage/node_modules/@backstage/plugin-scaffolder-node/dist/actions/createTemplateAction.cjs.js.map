{"version":3,"file":"createTemplateAction.cjs.js","sources":["../../src/actions/createTemplateAction.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ActionContext, TemplateAction } from './types';\nimport { z } from 'zod';\nimport { Schema } from 'jsonschema';\nimport zodToJsonSchema from 'zod-to-json-schema';\nimport { JsonObject } from '@backstage/types';\n\n/** @public */\nexport type TemplateExample = {\n  description: string;\n  example: string;\n};\n\n/** @public */\nexport type TemplateActionOptions<\n  TActionInput extends JsonObject = {},\n  TActionOutput extends JsonObject = {},\n  TInputSchema extends Schema | z.ZodType = {},\n  TOutputSchema extends Schema | z.ZodType = {},\n> = {\n  id: string;\n  description?: string;\n  examples?: TemplateExample[];\n  supportsDryRun?: boolean;\n  schema?: {\n    input?: TInputSchema;\n    output?: TOutputSchema;\n  };\n  handler: (ctx: ActionContext<TActionInput, TActionOutput>) => Promise<void>;\n};\n\n/**\n * This function is used to create new template actions to get type safety.\n * Will convert zod schemas to json schemas for use throughout the system.\n * @public\n */\nexport const createTemplateAction = <\n  TInputParams extends JsonObject = JsonObject,\n  TOutputParams extends JsonObject = JsonObject,\n  TInputSchema extends Schema | z.ZodType = {},\n  TOutputSchema extends Schema | z.ZodType = {},\n  TActionInput extends JsonObject = TInputSchema extends z.ZodType<\n    any,\n    any,\n    infer IReturn\n  >\n    ? IReturn\n    : TInputParams,\n  TActionOutput extends JsonObject = TOutputSchema extends z.ZodType<\n    any,\n    any,\n    infer IReturn\n  >\n    ? IReturn\n    : TOutputParams,\n>(\n  action: TemplateActionOptions<\n    TActionInput,\n    TActionOutput,\n    TInputSchema,\n    TOutputSchema\n  >,\n): TemplateAction<TActionInput, TActionOutput> => {\n  const inputSchema =\n    action.schema?.input && 'safeParseAsync' in action.schema.input\n      ? zodToJsonSchema(action.schema.input)\n      : action.schema?.input;\n\n  const outputSchema =\n    action.schema?.output && 'safeParseAsync' in action.schema.output\n      ? zodToJsonSchema(action.schema.output)\n      : action.schema?.output;\n\n  return {\n    ...action,\n    schema: {\n      ...action.schema,\n      input: inputSchema as TInputSchema,\n      output: outputSchema as TOutputSchema,\n    },\n  };\n};\n"],"names":["zodToJsonSchema"],"mappings":";;;;;;;;AAmDa,MAAA,oBAAA,GAAuB,CAoBlC,MAMgD,KAAA;AAChD,EAAA,MAAM,WACJ,GAAA,MAAA,CAAO,MAAQ,EAAA,KAAA,IAAS,oBAAoB,MAAO,CAAA,MAAA,CAAO,KACtD,GAAAA,gCAAA,CAAgB,MAAO,CAAA,MAAA,CAAO,KAAK,CAAA,GACnC,OAAO,MAAQ,EAAA,KAAA;AAErB,EAAA,MAAM,YACJ,GAAA,MAAA,CAAO,MAAQ,EAAA,MAAA,IAAU,oBAAoB,MAAO,CAAA,MAAA,CAAO,MACvD,GAAAA,gCAAA,CAAgB,MAAO,CAAA,MAAA,CAAO,MAAM,CAAA,GACpC,OAAO,MAAQ,EAAA,MAAA;AAErB,EAAO,OAAA;AAAA,IACL,GAAG,MAAA;AAAA,IACH,MAAQ,EAAA;AAAA,MACN,GAAG,MAAO,CAAA,MAAA;AAAA,MACV,KAAO,EAAA,WAAA;AAAA,MACP,MAAQ,EAAA;AAAA;AACV,GACF;AACF;;;;"}