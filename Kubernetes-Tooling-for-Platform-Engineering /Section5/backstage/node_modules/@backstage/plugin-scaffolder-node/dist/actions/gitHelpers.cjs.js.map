{"version":3,"file":"gitHelpers.cjs.js","sources":["../../src/actions/gitHelpers.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from 'winston';\nimport { Git } from '../scm';\n\n/**\n * @public\n */\nexport async function initRepoAndPush(input: {\n  dir: string;\n  remoteUrl: string;\n  // For use cases where token has to be used with Basic Auth\n  // it has to be provided as password together with a username\n  // which may be a fixed value defined by the provider.\n  auth: { username: string; password: string } | { token: string };\n  logger: Logger;\n  defaultBranch?: string;\n  commitMessage?: string;\n  gitAuthorInfo?: { name?: string; email?: string };\n}): Promise<{ commitHash: string }> {\n  const {\n    dir,\n    remoteUrl,\n    auth,\n    logger,\n    defaultBranch = 'master',\n    commitMessage = 'Initial commit',\n    gitAuthorInfo,\n  } = input;\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  await git.init({\n    dir,\n    defaultBranch,\n  });\n\n  await git.add({ dir, filepath: '.' });\n\n  // use provided info if possible, otherwise use fallbacks\n  const authorInfo = {\n    name: gitAuthorInfo?.name ?? 'Scaffolder',\n    email: gitAuthorInfo?.email ?? 'scaffolder@backstage.io',\n  };\n\n  const commitHash = await git.commit({\n    dir,\n    message: commitMessage,\n    author: authorInfo,\n    committer: authorInfo,\n  });\n\n  await git.push({\n    dir,\n    remote: 'origin',\n    url: remoteUrl,\n  });\n\n  return { commitHash };\n}\n\n/**\n * @public\n */\nexport async function commitAndPushRepo(input: {\n  dir: string;\n  // For use cases where token has to be used with Basic Auth\n  // it has to be provided as password together with a username\n  // which may be a fixed value defined by the provider.\n  auth: { username: string; password: string } | { token: string };\n  logger: Logger;\n  commitMessage: string;\n  gitAuthorInfo?: { name?: string; email?: string };\n  branch?: string;\n  remoteRef?: string;\n}): Promise<{ commitHash: string }> {\n  const {\n    dir,\n    auth,\n    logger,\n    commitMessage,\n    gitAuthorInfo,\n    branch = 'master',\n    remoteRef,\n  } = input;\n\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  await git.fetch({ dir });\n  await git.checkout({ dir, ref: branch });\n  await git.add({ dir, filepath: '.' });\n\n  // use provided info if possible, otherwise use fallbacks\n  const authorInfo = {\n    name: gitAuthorInfo?.name ?? 'Scaffolder',\n    email: gitAuthorInfo?.email ?? 'scaffolder@backstage.io',\n  };\n\n  const commitHash = await git.commit({\n    dir,\n    message: commitMessage,\n    author: authorInfo,\n    committer: authorInfo,\n  });\n\n  await git.push({\n    dir,\n    remote: 'origin',\n    remoteRef: remoteRef ?? `refs/heads/${branch}`,\n  });\n\n  return { commitHash };\n}\n\n/**\n * @public\n */\nexport async function cloneRepo(options: {\n  url: string;\n  dir: string;\n  // For use cases where token has to be used with Basic Auth\n  // it has to be provided as password together with a username\n  // which may be a fixed value defined by the provider.\n  auth: { username: string; password: string } | { token: string };\n  logger?: Logger | undefined;\n  ref?: string | undefined;\n  depth?: number | undefined;\n  noCheckout?: boolean | undefined;\n}): Promise<void> {\n  const { url, dir, auth, logger, ref, depth, noCheckout } = options;\n\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  await git.clone({ url, dir, ref, depth, noCheckout });\n}\n\n/**\n * @public\n */\nexport async function createBranch(options: {\n  dir: string;\n  ref: string;\n  // For use cases where token has to be used with Basic Auth\n  // it has to be provided as password together with a username\n  // which may be a fixed value defined by the provider.\n  auth: { username: string; password: string } | { token: string };\n  logger?: Logger | undefined;\n}): Promise<void> {\n  const { dir, ref, auth, logger } = options;\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  await git.branch({ dir, ref });\n}\n\n/**\n * @public\n */\nexport async function addFiles(options: {\n  dir: string;\n  filepath: string;\n  // For use cases where token has to be used with Basic Auth\n  // it has to be provided as password together with a username\n  // which may be a fixed value defined by the provider.\n  auth: { username: string; password: string } | { token: string };\n  logger?: Logger | undefined;\n}): Promise<void> {\n  const { dir, filepath, auth, logger } = options;\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  await git.add({ dir, filepath });\n}\n\n/**\n * @public\n */\nexport async function commitAndPushBranch(options: {\n  dir: string;\n  // For use cases where token has to be used with Basic Auth\n  // it has to be provided as password together with a username\n  // which may be a fixed value defined by the provider.\n  auth: { username: string; password: string } | { token: string };\n  logger?: Logger | undefined;\n  commitMessage: string;\n  gitAuthorInfo?: { name?: string; email?: string };\n  branch?: string;\n  remoteRef?: string;\n  remote?: string;\n}): Promise<{ commitHash: string }> {\n  const {\n    dir,\n    auth,\n    logger,\n    commitMessage,\n    gitAuthorInfo,\n    branch = 'master',\n    remoteRef,\n    remote = 'origin',\n  } = options;\n  const git = Git.fromAuth({\n    ...auth,\n    logger,\n  });\n\n  // use provided info if possible, otherwise use fallbacks\n  const authorInfo = {\n    name: gitAuthorInfo?.name ?? 'Scaffolder',\n    email: gitAuthorInfo?.email ?? 'scaffolder@backstage.io',\n  };\n\n  const commitHash = await git.commit({\n    dir,\n    message: commitMessage,\n    author: authorInfo,\n    committer: authorInfo,\n  });\n\n  await git.push({\n    dir,\n    remote,\n    remoteRef: remoteRef ?? `refs/heads/${branch}`,\n  });\n\n  return { commitHash };\n}\n"],"names":["git","Git"],"mappings":"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"}