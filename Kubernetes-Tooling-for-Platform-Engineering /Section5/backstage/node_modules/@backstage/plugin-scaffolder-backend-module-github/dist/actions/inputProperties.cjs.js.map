{"version":3,"file":"inputProperties.cjs.js","sources":["../../src/actions/inputProperties.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst repoUrl = {\n  title: 'Repository Location',\n  description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n  type: 'string',\n};\nconst description = {\n  title: 'Repository Description',\n  type: 'string',\n};\nconst homepage = {\n  title: 'Repository Homepage',\n  type: 'string',\n};\nconst access = {\n  title: 'Repository Access',\n  description: `Sets an admin collaborator on the repository. Can either be a user reference different from 'owner' in 'repoUrl' or team reference, eg. 'org/team-name'`,\n  type: 'string',\n};\nconst requireCodeOwnerReviews = {\n  title: 'Require CODEOWNER Reviews?',\n  description:\n    'Require an approved review in PR including files with a designated Code Owner',\n  type: 'boolean',\n};\nconst dismissStaleReviews = {\n  title: 'Dismiss Stale Reviews',\n  description:\n    'New reviewable commits pushed to a matching branch will dismiss pull request review approvals.',\n  type: 'boolean',\n};\nconst requiredStatusCheckContexts = {\n  title: 'Required Status Check Contexts',\n  description:\n    'The list of status checks to require in order to merge into this branch',\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\nconst requireBranchesToBeUpToDate = {\n  title: 'Require Branches To Be Up To Date?',\n  description: `Require branches to be up to date before merging. The default value is 'true'`,\n  type: 'boolean',\n};\nconst requiredConversationResolution = {\n  title: 'Required Conversation Resolution',\n  description:\n    'Requires all conversations on code to be resolved before a pull request can be merged into this branch',\n  type: 'boolean',\n};\nconst requireLastPushApproval = {\n  title: 'Require last push approval',\n  type: 'boolean',\n  description: `Whether the most recent push to a PR must be approved by someone other than the person who pushed it. The default value is 'false'`,\n};\nconst repoVisibility = {\n  title: 'Repository Visibility',\n  type: 'string',\n  enum: ['private', 'public', 'internal'],\n};\nconst deleteBranchOnMerge = {\n  title: 'Delete Branch On Merge',\n  type: 'boolean',\n  description: `Delete the branch after merging the PR. The default value is 'false'`,\n};\nconst gitAuthorName = {\n  title: 'Default Author Name',\n  type: 'string',\n  description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n};\nconst gitAuthorEmail = {\n  title: 'Default Author Email',\n  type: 'string',\n  description: `Sets the default author email for the commit.`,\n};\nconst allowMergeCommit = {\n  title: 'Allow Merge Commits',\n  type: 'boolean',\n  description: `Allow merge commits. The default value is 'true'`,\n};\nconst allowSquashMerge = {\n  title: 'Allow Squash Merges',\n  type: 'boolean',\n  description: `Allow squash merges. The default value is 'true'`,\n};\nconst squashMergeCommitTitle = {\n  title: 'Default squash merge commit title',\n  enum: ['PR_TITLE', 'COMMIT_OR_PR_TITLE'],\n  description: `Sets the default value for a squash merge commit title. The default value is 'COMMIT_OR_PR_TITLE'`,\n};\nconst squashMergeCommitMessage = {\n  title: 'Default squash merge commit message',\n  enum: ['PR_BODY', 'COMMIT_MESSAGES', 'BLANK'],\n  description: `Sets the default value for a squash merge commit message. The default value is 'COMMIT_MESSAGES'`,\n};\n\nconst allowRebaseMerge = {\n  title: 'Allow Rebase Merges',\n  type: 'boolean',\n  description: `Allow rebase merges. The default value is 'true'`,\n};\nconst allowAutoMerge = {\n  title: 'Allow Auto Merges',\n  type: 'boolean',\n  description: `Allow individual PRs to merge automatically when all merge requirements are met. The default value is 'false'`,\n};\nconst collaborators = {\n  title: 'Collaborators',\n  description: 'Provide additional users or teams with permissions',\n  type: 'array',\n  items: {\n    type: 'object',\n    additionalProperties: false,\n    required: ['access'],\n    properties: {\n      access: {\n        type: 'string',\n        description: 'The type of access for the user',\n      },\n      user: {\n        type: 'string',\n        description:\n          'The name of the user that will be added as a collaborator',\n      },\n      team: {\n        type: 'string',\n        description:\n          'The name of the team that will be added as a collaborator',\n      },\n    },\n    oneOf: [{ required: ['user'] }, { required: ['team'] }],\n  },\n};\nconst hasProjects = {\n  title: 'Enable projects',\n  type: 'boolean',\n  description: `Enable projects for the repository. The default value is 'true' unless the organization has disabled repository projects`,\n};\nconst hasWiki = {\n  title: 'Enable the wiki',\n  type: 'boolean',\n  description: `Enable the wiki for the repository. The default value is 'true'`,\n};\nconst hasIssues = {\n  title: 'Enable issues',\n  type: 'boolean',\n  description: `Enable issues for the repository. The default value is 'true'`,\n};\nconst token = {\n  title: 'Authentication Token',\n  type: 'string',\n  description: 'The token to use for authorization to GitHub',\n};\nconst topics = {\n  title: 'Topics',\n  type: 'array',\n  items: {\n    type: 'string',\n  },\n};\nconst defaultBranch = {\n  title: 'Default Branch',\n  type: 'string',\n  description: `Sets the default branch on the repository. The default value is 'master'`,\n};\nconst protectDefaultBranch = {\n  title: 'Protect Default Branch',\n  type: 'boolean',\n  description: `Protect the default branch after creating the repository. The default value is 'true'`,\n};\nconst protectEnforceAdmins = {\n  title: 'Enforce Admins On Protected Branches',\n  type: 'boolean',\n  description: `Enforce admins to adhere to default branch protection. The default value is 'true'`,\n};\n\nconst bypassPullRequestAllowances = {\n  title: 'Bypass pull request requirements',\n  description:\n    'Allow specific users, teams, or apps to bypass pull request requirements.',\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    apps: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n    users: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n    teams: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n  },\n};\n\nconst gitCommitMessage = {\n  title: 'Git Commit Message',\n  type: 'string',\n  description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n};\nconst sourcePath = {\n  title: 'Source Path',\n  description:\n    'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n  type: 'string',\n};\n\nconst requiredApprovingReviewCount = {\n  title: 'Required approving review count',\n  type: 'number',\n  description: `Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. Defaults to 1.`,\n};\n\nconst restrictions = {\n  title: 'Restrict who can push to the protected branch',\n  description:\n    'Restrict who can push to the protected branch. User, app, and team restrictions are only available for organization-owned repositories.',\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    apps: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n    users: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n    teams: {\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n    },\n  },\n};\n\nconst requiredCommitSigning = {\n  title: 'Require commit signing',\n  type: 'boolean',\n  description: `Require commit signing so that you must sign commits on this branch.`,\n};\n\nconst requiredLinearHistory = {\n  title: 'Require linear history',\n  type: 'boolean',\n  description: `Prevent merge commits from being pushed to matching branches.`,\n};\n\nconst repoVariables = {\n  title: 'Repository Variables',\n  description: `Variables attached to the repository`,\n  type: 'object',\n};\n\nconst secrets = {\n  title: 'Repository Secrets',\n  description: `Secrets attached to the repository`,\n  type: 'object',\n};\n\nconst oidcCustomization = {\n  title: 'Repository OIDC customization template',\n  description: `OIDC customization template attached to the repository.`,\n  type: 'object',\n  additionalProperties: false,\n  properties: {\n    useDefault: {\n      title: 'Use Default',\n      type: 'boolean',\n      description: `Whether to use the default OIDC template or not.`,\n    },\n    includeClaimKeys: {\n      title: 'Include claim keys',\n      type: 'array',\n      items: {\n        type: 'string',\n      },\n      description: `Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.`,\n    },\n  },\n};\n\nconst customProperties = {\n  title: 'Custom Repository Properties',\n  description:\n    'Custom properties to be added to the repository (note, this only works for organization repositories)',\n  type: 'object',\n};\n\nexport { access };\nexport { allowMergeCommit };\nexport { allowRebaseMerge };\nexport { allowSquashMerge };\nexport { squashMergeCommitTitle };\nexport { squashMergeCommitMessage };\nexport { allowAutoMerge };\nexport { collaborators };\nexport { defaultBranch };\nexport { deleteBranchOnMerge };\nexport { description };\nexport { gitAuthorEmail };\nexport { gitAuthorName };\nexport { gitCommitMessage };\nexport { homepage };\nexport { protectDefaultBranch };\nexport { protectEnforceAdmins };\nexport { bypassPullRequestAllowances };\nexport { requiredApprovingReviewCount };\nexport { restrictions };\nexport { repoUrl };\nexport { repoVisibility };\nexport { requireCodeOwnerReviews };\nexport { dismissStaleReviews };\nexport { requiredStatusCheckContexts };\nexport { requireBranchesToBeUpToDate };\nexport { requiredConversationResolution };\nexport { requireLastPushApproval };\nexport { hasProjects };\nexport { hasIssues };\nexport { hasWiki };\nexport { sourcePath };\nexport { token };\nexport { topics };\nexport { requiredCommitSigning };\nexport { requiredLinearHistory };\nexport { repoVariables };\nexport { secrets };\nexport { oidcCustomization };\nexport { customProperties };\n"],"names":[],"mappings":"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"}