{"version":3,"file":"githubRepoCreate.cjs.js","sources":["../../src/actions/githubRepoCreate.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { Octokit } from 'octokit';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport {\n  createGithubRepoWithCollaboratorsAndTopics,\n  getOctokitOptions,\n} from './helpers';\nimport * as inputProps from './inputProperties';\nimport * as outputProps from './outputProperties';\nimport { examples } from './githubRepoCreate.examples';\n\n/**\n * Creates a new action that initializes a git repository\n *\n * @public\n */\nexport function createGithubRepoCreateAction(options: {\n  integrations: ScmIntegrationRegistry;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    homepage?: string;\n    access?: string;\n    deleteBranchOnMerge?: boolean;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    allowRebaseMerge?: boolean;\n    allowSquashMerge?: boolean;\n    squashMergeCommitTitle?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';\n    squashMergeCommitMessage?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';\n    allowMergeCommit?: boolean;\n    allowAutoMerge?: boolean;\n    requireCodeOwnerReviews?: boolean;\n    bypassPullRequestAllowances?: {\n      users?: string[];\n      teams?: string[];\n      apps?: string[];\n    };\n    requiredApprovingReviewCount?: number;\n    restrictions?: {\n      users: string[];\n      teams: string[];\n      apps?: string[];\n    };\n    requiredStatusCheckContexts?: string[];\n    requireBranchesToBeUpToDate?: boolean;\n    requiredConversationResolution?: boolean;\n    repoVisibility?: 'private' | 'internal' | 'public';\n    collaborators?: Array<\n      | {\n          user: string;\n          access: string;\n        }\n      | {\n          team: string;\n          access: string;\n        }\n      | {\n          /** @deprecated This field is deprecated in favor of team */\n          username: string;\n          access: 'pull' | 'push' | 'admin' | 'maintain' | 'triage';\n        }\n    >;\n    hasProjects?: boolean;\n    hasWiki?: boolean;\n    hasIssues?: boolean;\n    token?: string;\n    topics?: string[];\n    repoVariables?: { [key: string]: string };\n    secrets?: { [key: string]: string };\n    oidcCustomization?: {\n      useDefault: boolean;\n      includeClaimKeys?: string[];\n    };\n    requireCommitSigning?: boolean;\n    requiredLinearHistory?: boolean;\n    customProperties?: { [key: string]: string };\n  }>({\n    id: 'github:repo:create',\n    description: 'Creates a GitHub repository.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: inputProps.repoUrl,\n          description: inputProps.description,\n          homepage: inputProps.homepage,\n          access: inputProps.access,\n          requireCodeOwnerReviews: inputProps.requireCodeOwnerReviews,\n          bypassPullRequestAllowances: inputProps.bypassPullRequestAllowances,\n          requiredApprovingReviewCount: inputProps.requiredApprovingReviewCount,\n          restrictions: inputProps.restrictions,\n          requiredStatusCheckContexts: inputProps.requiredStatusCheckContexts,\n          requireBranchesToBeUpToDate: inputProps.requireBranchesToBeUpToDate,\n          requiredConversationResolution:\n            inputProps.requiredConversationResolution,\n          repoVisibility: inputProps.repoVisibility,\n          deleteBranchOnMerge: inputProps.deleteBranchOnMerge,\n          allowMergeCommit: inputProps.allowMergeCommit,\n          allowSquashMerge: inputProps.allowSquashMerge,\n          squashMergeCommitTitle: inputProps.squashMergeCommitTitle,\n          squashMergeCommitMessage: inputProps.squashMergeCommitMessage,\n          allowRebaseMerge: inputProps.allowRebaseMerge,\n          allowAutoMerge: inputProps.allowAutoMerge,\n          collaborators: inputProps.collaborators,\n          hasProjects: inputProps.hasProjects,\n          hasWiki: inputProps.hasWiki,\n          hasIssues: inputProps.hasIssues,\n          token: inputProps.token,\n          topics: inputProps.topics,\n          repoVariables: inputProps.repoVariables,\n          secrets: inputProps.secrets,\n          oidcCustomization: inputProps.oidcCustomization,\n          requiredCommitSigning: inputProps.requiredCommitSigning,\n          requiredLinearHistory: inputProps.requiredLinearHistory,\n          customProperties: inputProps.customProperties,\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: outputProps.remoteUrl,\n          repoContentsUrl: outputProps.repoContentsUrl,\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        description,\n        homepage,\n        access,\n        repoVisibility = 'private',\n        deleteBranchOnMerge = false,\n        allowMergeCommit = true,\n        allowSquashMerge = true,\n        squashMergeCommitTitle = 'COMMIT_OR_PR_TITLE',\n        squashMergeCommitMessage = 'COMMIT_MESSAGES',\n        allowRebaseMerge = true,\n        allowAutoMerge = false,\n        collaborators,\n        hasProjects = undefined,\n        hasWiki = undefined,\n        hasIssues = undefined,\n        topics,\n        repoVariables,\n        secrets,\n        oidcCustomization,\n        customProperties,\n        token: providedToken,\n      } = ctx.input;\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        token: providedToken,\n        repoUrl: repoUrl,\n      });\n      const client = new Octokit(octokitOptions);\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const newRepo = await createGithubRepoWithCollaboratorsAndTopics(\n        client,\n        repo,\n        owner,\n        repoVisibility,\n        description,\n        homepage,\n        deleteBranchOnMerge,\n        allowMergeCommit,\n        allowSquashMerge,\n        squashMergeCommitTitle,\n        squashMergeCommitMessage,\n        allowRebaseMerge,\n        allowAutoMerge,\n        access,\n        collaborators,\n        hasProjects,\n        hasWiki,\n        hasIssues,\n        topics,\n        repoVariables,\n        secrets,\n        oidcCustomization,\n        customProperties,\n        ctx.logger,\n      );\n\n      ctx.output('remoteUrl', newRepo.clone_url);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","inputProps.repoUrl","inputProps.description","inputProps.homepage","inputProps.access","inputProps.requireCodeOwnerReviews","inputProps.bypassPullRequestAllowances","inputProps.requiredApprovingReviewCount","inputProps.restrictions","inputProps.requiredStatusCheckContexts","inputProps.requireBranchesToBeUpToDate","inputProps.requiredConversationResolution","inputProps.repoVisibility","inputProps.deleteBranchOnMerge","inputProps.allowMergeCommit","inputProps.allowSquashMerge","inputProps.squashMergeCommitTitle","inputProps.squashMergeCommitMessage","inputProps.allowRebaseMerge","inputProps.allowAutoMerge","inputProps.collaborators","inputProps.hasProjects","inputProps.hasWiki","inputProps.hasIssues","inputProps.token","inputProps.topics","inputProps.repoVariables","inputProps.secrets","inputProps.oidcCustomization","inputProps.requiredCommitSigning","inputProps.requiredLinearHistory","inputProps.customProperties","outputProps.remoteUrl","outputProps.repoContentsUrl","getOctokitOptions","Octokit","parseRepoUrl","InputError","createGithubRepoWithCollaboratorsAndTopics"],"mappings":"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"}