{"version":3,"file":"githubPullRequest.cjs.js","sources":["../../src/actions/githubPullRequest.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n  SerializedFile,\n  serializeDirectoryContents,\n} from '@backstage/plugin-scaffolder-node';\nimport { Octokit } from 'octokit';\nimport { CustomErrorBase, InputError } from '@backstage/errors';\nimport { createPullRequest } from 'octokit-plugin-create-pull-request';\nimport { getOctokitOptions } from './helpers';\nimport { examples } from './githubPullRequest.examples';\nimport {\n  LoggerService,\n  resolveSafeChildPath,\n} from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\n\nexport type Encoding = 'utf-8' | 'base64';\n\nclass GithubResponseError extends CustomErrorBase {}\n\nexport const defaultClientFactory: CreateGithubPullRequestActionOptions['clientFactory'] =\n  async ({\n    integrations,\n    githubCredentialsProvider,\n    owner,\n    repo,\n    host = 'github.com',\n    token: providedToken,\n  }) => {\n    const [encodedHost, encodedOwner, encodedRepo] = [host, owner, repo].map(\n      encodeURIComponent,\n    );\n\n    const octokitOptions = await getOctokitOptions({\n      integrations,\n      credentialsProvider: githubCredentialsProvider,\n      repoUrl: `${encodedHost}?owner=${encodedOwner}&repo=${encodedRepo}`,\n      token: providedToken,\n    });\n\n    const OctokitPR = Octokit.plugin(createPullRequest);\n    return new OctokitPR({\n      ...octokitOptions,\n      ...{ throttle: { enabled: false } },\n    });\n  };\n\n/**\n * The options passed to {@link createPublishGithubPullRequestAction} method\n * @public\n */\nexport interface CreateGithubPullRequestActionOptions {\n  /**\n   * An instance of {@link @backstage/integration#ScmIntegrationRegistry} that will be used in the action.\n   */\n  integrations: ScmIntegrationRegistry;\n  /**\n   * An instance of {@link @backstage/integration#GithubCredentialsProvider} that will be used to get credentials for the action.\n   */\n  githubCredentialsProvider?: GithubCredentialsProvider;\n  /**\n   * A method to return the Octokit client with the Pull Request Plugin.\n   */\n  clientFactory?: (input: {\n    integrations: ScmIntegrationRegistry;\n    githubCredentialsProvider?: GithubCredentialsProvider;\n    host: string;\n    owner: string;\n    repo: string;\n    token?: string;\n  }) => Promise<\n    Octokit & {\n      createPullRequest(options: createPullRequest.Options): Promise<{\n        data: {\n          html_url: string;\n          number: number;\n          base: {\n            ref: string;\n          };\n        };\n      } | null>;\n    }\n  >;\n  /**\n   * An instance of {@link @backstage/config#Config} that will be used in the action.\n   */\n  config?: Config;\n}\n\ntype GithubPullRequest = {\n  owner: string;\n  repo: string;\n  number: number;\n};\n\n/**\n * Creates a Github Pull Request action.\n * @public\n */\nexport const createPublishGithubPullRequestAction = (\n  options: CreateGithubPullRequestActionOptions,\n) => {\n  const {\n    integrations,\n    githubCredentialsProvider,\n    clientFactory = defaultClientFactory,\n    config,\n  } = options;\n\n  return createTemplateAction<{\n    title: string;\n    branchName: string;\n    targetBranchName?: string;\n    description: string;\n    repoUrl: string;\n    draft?: boolean;\n    targetPath?: string;\n    sourcePath?: string;\n    token?: string;\n    reviewers?: string[];\n    teamReviewers?: string[];\n    commitMessage?: string;\n    update?: boolean;\n    forceFork?: boolean;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    forceEmptyGitAuthor?: boolean;\n  }>({\n    id: 'publish:github:pull-request',\n    examples,\n    supportsDryRun: true,\n    schema: {\n      input: {\n        required: ['repoUrl', 'title', 'description', 'branchName'],\n        type: 'object',\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          branchName: {\n            type: 'string',\n            title: 'Branch Name',\n            description: 'The name for the branch',\n          },\n          targetBranchName: {\n            type: 'string',\n            title: 'Target Branch Name',\n            description: 'The target branch name of the merge request',\n          },\n          title: {\n            type: 'string',\n            title: 'Pull Request Name',\n            description: 'The name for the pull request',\n          },\n          description: {\n            type: 'string',\n            title: 'Pull Request Description',\n            description: 'The description of the pull request',\n          },\n          draft: {\n            type: 'boolean',\n            title: 'Create as Draft',\n            description: 'Create a draft pull request',\n          },\n          sourcePath: {\n            type: 'string',\n            title: 'Working Subdirectory',\n            description:\n              'Subdirectory of working directory to copy changes from',\n          },\n          targetPath: {\n            type: 'string',\n            title: 'Repository Subdirectory',\n            description: 'Subdirectory of repository to apply changes to',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitHub',\n          },\n          reviewers: {\n            title: 'Pull Request Reviewers',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            description:\n              'The users that will be added as reviewers to the pull request',\n          },\n          teamReviewers: {\n            title: 'Pull Request Team Reviewers',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            description:\n              'The teams that will be added as reviewers to the pull request',\n          },\n          commitMessage: {\n            type: 'string',\n            title: 'Commit Message',\n            description: 'The commit message for the pull request commit',\n          },\n          update: {\n            type: 'boolean',\n            title: 'Update',\n            description: 'Update pull request if already exists',\n          },\n          forceFork: {\n            type: 'boolean',\n            title: 'Force Fork',\n            description: 'Create pull request from a fork',\n          },\n          gitAuthorName: {\n            type: 'string',\n            title: 'Default Author Name',\n            description:\n              \"Sets the default author name for the commit. The default value is the authenticated user or 'Scaffolder'\",\n          },\n          gitAuthorEmail: {\n            type: 'string',\n            title: 'Default Author Email',\n            description:\n              \"Sets the default author email for the commit. The default value is the authenticated user or 'scaffolder@backstage.io'\",\n          },\n          forceEmptyGitAuthor: {\n            type: 'boolean',\n            title: 'Force Empty Git Author',\n            description:\n              'Forces the author to be empty. This is useful when using a Github App, it permit the commit to be verified on Github',\n          },\n        },\n      },\n      output: {\n        required: ['remoteUrl'],\n        type: 'object',\n        properties: {\n          targetBranchName: {\n            title: 'Target branch name of the merge request',\n            type: 'string',\n          },\n          remoteUrl: {\n            type: 'string',\n            title: 'Pull Request URL',\n            description: 'Link to the pull request in Github',\n          },\n          pullRequestNumber: {\n            type: 'number',\n            title: 'Pull Request Number',\n            description: 'The pull request number',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        branchName,\n        targetBranchName,\n        title,\n        description,\n        draft,\n        targetPath,\n        sourcePath,\n        token: providedToken,\n        reviewers,\n        teamReviewers,\n        commitMessage,\n        update,\n        forceFork,\n        gitAuthorEmail,\n        gitAuthorName,\n        forceEmptyGitAuthor,\n      } = ctx.input;\n\n      const { owner, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(\n          `No owner provided for host: ${host}, and repo ${repo}`,\n        );\n      }\n\n      const client = await clientFactory({\n        integrations,\n        githubCredentialsProvider,\n        host,\n        owner,\n        repo,\n        token: providedToken,\n      });\n\n      const fileRoot = sourcePath\n        ? resolveSafeChildPath(ctx.workspacePath, sourcePath)\n        : ctx.workspacePath;\n\n      const directoryContents = await serializeDirectoryContents(fileRoot, {\n        gitignore: true,\n      });\n\n      const determineFileMode = (file: SerializedFile): string => {\n        if (file.symlink) return '120000';\n        if (file.executable) return '100755';\n        return '100644';\n      };\n\n      const determineFileEncoding = (\n        file: SerializedFile,\n      ): 'utf-8' | 'base64' => (file.symlink ? 'utf-8' : 'base64');\n\n      const files = Object.fromEntries(\n        directoryContents.map(file => [\n          targetPath ? path.posix.join(targetPath, file.path) : file.path,\n          {\n            // See the properties of tree items\n            // in https://docs.github.com/en/rest/reference/git#trees\n            mode: determineFileMode(file),\n            // Always use base64 encoding where possible to avoid doubling a binary file in size\n            // due to interpreting a binary file as utf-8 and sending github\n            // the utf-8 encoded content. Symlinks are kept as utf-8 to avoid them\n            // being formatted as a series of scrambled characters\n            //\n            // For example, the original gradle-wrapper.jar is 57.8k in https://github.com/kennethzfeng/pull-request-test/pull/5/files.\n            // Its size could be doubled to 98.3K (See https://github.com/kennethzfeng/pull-request-test/pull/4/files)\n            encoding: determineFileEncoding(file),\n            content: file.content.toString(determineFileEncoding(file)),\n          },\n        ]),\n      );\n\n      // If this is a dry run, log and return\n      if (ctx.isDryRun) {\n        ctx.logger.info(`Performing dry run of creating pull request`);\n        ctx.output('targetBranchName', branchName);\n        ctx.output('remoteUrl', repoUrl);\n        ctx.output('pullRequestNumber', 43);\n        ctx.logger.info(`Dry run complete`);\n        return;\n      }\n\n      try {\n        const createOptions: createPullRequest.Options = {\n          owner,\n          repo,\n          title,\n          changes: [\n            {\n              files,\n              commit:\n                commitMessage ??\n                config?.getOptionalString('scaffolder.defaultCommitMessage') ??\n                title,\n            },\n          ],\n          body: description,\n          head: branchName,\n          draft,\n          update,\n          forceFork,\n        };\n\n        const gitAuthorInfo = {\n          name:\n            gitAuthorName ??\n            config?.getOptionalString('scaffolder.defaultAuthor.name'),\n          email:\n            gitAuthorEmail ??\n            config?.getOptionalString('scaffolder.defaultAuthor.email'),\n        };\n\n        if (!forceEmptyGitAuthor) {\n          if (gitAuthorInfo.name || gitAuthorInfo.email) {\n            if (Array.isArray(createOptions.changes)) {\n              createOptions.changes = createOptions.changes.map(change => ({\n                ...change,\n                author: {\n                  name: gitAuthorInfo.name || 'Scaffolder',\n                  email: gitAuthorInfo.email || 'scaffolder@backstage.io',\n                },\n              }));\n            } else {\n              createOptions.changes = {\n                ...createOptions.changes,\n                author: {\n                  name: gitAuthorInfo.name || 'Scaffolder',\n                  email: gitAuthorInfo.email || 'scaffolder@backstage.io',\n                },\n              };\n            }\n          }\n        }\n\n        if (targetBranchName) {\n          createOptions.base = targetBranchName;\n        }\n        const response = await client.createPullRequest(createOptions);\n\n        if (!response) {\n          throw new GithubResponseError('null response from Github');\n        }\n\n        const pullRequestNumber = response.data.number;\n        if (reviewers || teamReviewers) {\n          const pullRequest = { owner, repo, number: pullRequestNumber };\n          await requestReviewersOnPullRequest(\n            pullRequest,\n            reviewers,\n            teamReviewers,\n            client,\n            ctx.logger,\n          );\n        }\n\n        const targetBranch = response.data.base.ref;\n        ctx.output('targetBranchName', targetBranch);\n        ctx.output('remoteUrl', response.data.html_url);\n        ctx.output('pullRequestNumber', pullRequestNumber);\n      } catch (e) {\n        throw new GithubResponseError('Pull request creation failed', e);\n      }\n    },\n  });\n\n  async function requestReviewersOnPullRequest(\n    pr: GithubPullRequest,\n    reviewers: string[] | undefined,\n    teamReviewers: string[] | undefined,\n    client: Octokit,\n    logger: LoggerService,\n  ) {\n    try {\n      const result = await client.rest.pulls.requestReviewers({\n        owner: pr.owner,\n        repo: pr.repo,\n        pull_number: pr.number,\n        reviewers,\n        team_reviewers: teamReviewers ? [...new Set(teamReviewers)] : undefined,\n      });\n      const addedUsers = result.data.requested_reviewers?.join(', ') ?? '';\n      const addedTeams = result.data.requested_teams?.join(', ') ?? '';\n      logger.info(\n        `Added users [${addedUsers}] and teams [${addedTeams}] as reviewers to Pull request ${pr.number}`,\n      );\n    } catch (e) {\n      logger.error(\n        `Failure when adding reviewers to Pull request ${pr.number}`,\n        e,\n      );\n    }\n  }\n};\n"],"names":["CustomErrorBase","getOctokitOptions","Octokit","createPullRequest","createTemplateAction","examples","parseRepoUrl","InputError","resolveSafeChildPath","serializeDirectoryContents","path"],"mappings":"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"}