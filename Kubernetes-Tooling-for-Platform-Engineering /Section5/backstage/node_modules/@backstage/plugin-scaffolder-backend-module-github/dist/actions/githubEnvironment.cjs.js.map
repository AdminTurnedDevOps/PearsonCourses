{"version":3,"file":"githubEnvironment.cjs.js","sources":["../../src/actions/githubEnvironment.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { getOctokitOptions } from './helpers';\nimport { Octokit } from 'octokit';\nimport Sodium from 'libsodium-wrappers';\nimport { examples } from './gitHubEnvironment.examples';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport { Entity } from '@backstage/catalog-model';\nimport { AuthService } from '@backstage/backend-plugin-api';\n\n/**\n * Creates an `github:environment:create` Scaffolder action that creates a Github Environment.\n *\n * @public\n */\nexport function createGithubEnvironmentAction(options: {\n  integrations: ScmIntegrationRegistry;\n  catalogClient?: CatalogApi;\n  auth?: AuthService;\n}) {\n  const { integrations, catalogClient, auth } = options;\n  // For more information on how to define custom actions, see\n  //   https://backstage.io/docs/features/software-templates/writing-custom-actions\n  return createTemplateAction<{\n    repoUrl: string;\n    name: string;\n    deploymentBranchPolicy?: {\n      protected_branches: boolean;\n      custom_branch_policies: boolean;\n    };\n    customBranchPolicyNames?: string[];\n    customTagPolicyNames?: string[];\n    environmentVariables?: { [key: string]: string };\n    secrets?: { [key: string]: string };\n    token?: string;\n    waitTimer?: number;\n    preventSelfReview?: boolean;\n    reviewers?: string[];\n  }>({\n    id: 'github:environment:create',\n    description: 'Creates Deployment Environments',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'name'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          name: {\n            title: 'Environment Name',\n            description: `Name of the deployment environment to create`,\n            type: 'string',\n          },\n          deploymentBranchPolicy: {\n            title: 'Deployment Branch Policy',\n            description: `The type of deployment branch policy for this environment. To allow all branches to deploy, set to null.`,\n            type: 'object',\n            required: ['protected_branches', 'custom_branch_policies'],\n            properties: {\n              protected_branches: {\n                title: 'Protected Branches',\n                description: `Whether only branches with branch protection rules can deploy to this environment. If protected_branches is true, custom_branch_policies must be false; if protected_branches is false, custom_branch_policies must be true.`,\n                type: 'boolean',\n              },\n              custom_branch_policies: {\n                title: 'Custom Branch Policies',\n                description: `Whether only branches that match the specified name patterns can deploy to this environment. If custom_branch_policies is true, protected_branches must be false; if custom_branch_policies is false, protected_branches must be true.`,\n                type: 'boolean',\n              },\n            },\n          },\n          customBranchPolicyNames: {\n            title: 'Custom Branch Policy Name',\n            description: `The name pattern that branches must match in order to deploy to the environment.\n\n            Wildcard characters will not match /. For example, to match branches that begin with release/ and contain an additional single slash, use release/*/*. For more information about pattern matching syntax, see the Ruby File.fnmatch documentation.`,\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          customTagPolicyNames: {\n            title: 'Custom Tag Policy Name',\n            description: `The name pattern that tags must match in order to deploy to the environment.\n\n            Wildcard characters will not match /. For example, to match tags that begin with release/ and contain an additional single slash, use release/*/*. For more information about pattern matching syntax, see the Ruby File.fnmatch documentation.`,\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          environmentVariables: {\n            title: 'Environment Variables',\n            description: `Environment variables attached to the deployment environment`,\n            type: 'object',\n          },\n          secrets: {\n            title: 'Deployment Secrets',\n            description: `Secrets attached to the deployment environment`,\n            type: 'object',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitHub',\n          },\n          waitTimer: {\n            title: 'Wait Timer',\n            type: 'integer',\n            description:\n              'The time to wait before creating or updating the environment (in milliseconds)',\n          },\n          preventSelfReview: {\n            title: 'Prevent Self Review',\n            type: 'boolean',\n            description: 'Whether to prevent self-review for this environment',\n          },\n          reviewers: {\n            title: 'Reviewers',\n            type: 'array',\n            description:\n              'Reviewers for this environment. Must be a list of Backstage entity references.',\n            items: {\n              type: 'string',\n            },\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        name,\n        deploymentBranchPolicy,\n        customBranchPolicyNames,\n        customTagPolicyNames,\n        environmentVariables,\n        secrets,\n        token: providedToken,\n        waitTimer,\n        preventSelfReview,\n        reviewers,\n      } = ctx.input;\n\n      const { token } = (await auth?.getPluginRequestToken({\n        onBehalfOf: await ctx.getInitiatorCredentials(),\n        targetPluginId: 'catalog',\n      })) ?? { token: ctx.secrets?.backstageToken };\n\n      // When environment creation step is executed right after a repo publish step, the repository might not be available immediately.\n      // Add a 2-second delay before initiating the steps in this action.\n      await new Promise(resolve => setTimeout(resolve, 2000));\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        token: providedToken,\n        repoUrl: repoUrl,\n      });\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(`No owner provided for repo ${repoUrl}`);\n      }\n\n      const client = new Octokit(octokitOptions);\n      const repository = await client.rest.repos.get({\n        owner: owner,\n        repo: repo,\n      });\n\n      // convert reviewers from catalog entity to Github user or team\n      const githubReviewers: { type: 'User' | 'Team'; id: number }[] = [];\n      if (reviewers) {\n        let reviewersEntityRefs: Array<Entity | undefined> = [];\n        // Fetch reviewers from Catalog\n        const catalogResponse = await catalogClient?.getEntitiesByRefs(\n          {\n            entityRefs: reviewers,\n          },\n          {\n            token,\n          },\n        );\n        if (catalogResponse?.items?.length) {\n          reviewersEntityRefs = catalogResponse.items;\n        }\n\n        for (const reviewerEntityRef of reviewersEntityRefs) {\n          if (reviewerEntityRef?.kind === 'User') {\n            try {\n              const user = await client.rest.users.getByUsername({\n                username: reviewerEntityRef.metadata.name,\n              });\n              githubReviewers.push({\n                type: 'User',\n                id: user.data.id,\n              });\n            } catch (error) {\n              ctx.logger.error('User not found:', error);\n            }\n          } else if (reviewerEntityRef?.kind === 'Group') {\n            try {\n              const team = await client.rest.teams.getByName({\n                org: owner,\n                team_slug: reviewerEntityRef.metadata.name,\n              });\n              githubReviewers.push({\n                type: 'Team',\n                id: team.data.id,\n              });\n            } catch (error) {\n              ctx.logger.error('Team not found:', error);\n            }\n          }\n        }\n      }\n\n      await client.rest.repos.createOrUpdateEnvironment({\n        owner: owner,\n        repo: repo,\n        environment_name: name,\n        deployment_branch_policy: deploymentBranchPolicy ?? null,\n        wait_timer: waitTimer ?? 0,\n        prevent_self_review: preventSelfReview ?? false,\n        reviewers: githubReviewers.length ? githubReviewers : null,\n      });\n\n      if (customBranchPolicyNames) {\n        for (const item of customBranchPolicyNames) {\n          await client.rest.repos.createDeploymentBranchPolicy({\n            owner: owner,\n            repo: repo,\n            type: 'branch',\n            environment_name: name,\n            name: item,\n          });\n        }\n      }\n\n      if (customTagPolicyNames) {\n        for (const item of customTagPolicyNames) {\n          await client.rest.repos.createDeploymentBranchPolicy({\n            owner: owner,\n            repo: repo,\n            type: 'tag',\n            environment_name: name,\n            name: item,\n          });\n        }\n      }\n\n      for (const [key, value] of Object.entries(environmentVariables ?? {})) {\n        await client.rest.actions.createEnvironmentVariable({\n          repository_id: repository.data.id,\n          owner: owner,\n          repo: repo,\n          environment_name: name,\n          name: key,\n          value,\n        });\n      }\n\n      if (secrets) {\n        const publicKeyResponse =\n          await client.rest.actions.getEnvironmentPublicKey({\n            repository_id: repository.data.id,\n            owner: owner,\n            repo: repo,\n            environment_name: name,\n          });\n\n        await Sodium.ready;\n        const binaryKey = Sodium.from_base64(\n          publicKeyResponse.data.key,\n          Sodium.base64_variants.ORIGINAL,\n        );\n        for (const [key, value] of Object.entries(secrets)) {\n          const binarySecret = Sodium.from_string(value);\n          const encryptedBinarySecret = Sodium.crypto_box_seal(\n            binarySecret,\n            binaryKey,\n          );\n          const encryptedBase64Secret = Sodium.to_base64(\n            encryptedBinarySecret,\n            Sodium.base64_variants.ORIGINAL,\n          );\n\n          await client.rest.actions.createOrUpdateEnvironmentSecret({\n            repository_id: repository.data.id,\n            owner: owner,\n            repo: repo,\n            environment_name: name,\n            secret_name: key,\n            encrypted_value: encryptedBase64Secret,\n            key_id: publicKeyResponse.data.key_id,\n          });\n        }\n      }\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","getOctokitOptions","parseRepoUrl","InputError","Octokit","Sodium"],"mappings":"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"}