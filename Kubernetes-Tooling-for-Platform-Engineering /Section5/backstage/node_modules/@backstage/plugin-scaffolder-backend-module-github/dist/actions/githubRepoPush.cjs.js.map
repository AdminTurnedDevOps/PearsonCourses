{"version":3,"file":"githubRepoPush.cjs.js","sources":["../../src/actions/githubRepoPush.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { Octokit } from 'octokit';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { getOctokitOptions, initRepoPushAndProtect } from './helpers';\nimport * as inputProps from './inputProperties';\nimport * as outputProps from './outputProperties';\nimport { examples } from './githubRepoPush.examples';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to GitHub.\n *\n * @public\n */\nexport function createGithubRepoPushAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, config, githubCredentialsProvider } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    description?: string;\n    defaultBranch?: string;\n    protectDefaultBranch?: boolean;\n    protectEnforceAdmins?: boolean;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    requireCodeOwnerReviews?: boolean;\n    dismissStaleReviews?: boolean;\n    bypassPullRequestAllowances?:\n      | {\n          users?: string[];\n          teams?: string[];\n          apps?: string[];\n        }\n      | undefined;\n    requiredApprovingReviewCount?: number;\n    restrictions?:\n      | {\n          users: string[];\n          teams: string[];\n          apps?: string[];\n        }\n      | undefined;\n    requiredStatusCheckContexts?: string[];\n    requireBranchesToBeUpToDate?: boolean;\n    requiredConversationResolution?: boolean;\n    sourcePath?: string;\n    token?: string;\n    requiredCommitSigning?: boolean;\n    requiredLinearHistory?: boolean;\n    requireLastPushApproval?: boolean;\n  }>({\n    id: 'github:repo:push',\n    description:\n      'Initializes a git repository of contents in workspace and publishes it to GitHub.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: inputProps.repoUrl,\n          requireCodeOwnerReviews: inputProps.requireCodeOwnerReviews,\n          dismissStaleReviews: inputProps.dismissStaleReviews,\n          requiredStatusCheckContexts: inputProps.requiredStatusCheckContexts,\n          bypassPullRequestAllowances: inputProps.bypassPullRequestAllowances,\n          requiredApprovingReviewCount: inputProps.requiredApprovingReviewCount,\n          restrictions: inputProps.restrictions,\n          requireBranchesToBeUpToDate: inputProps.requireBranchesToBeUpToDate,\n          requiredConversationResolution:\n            inputProps.requiredConversationResolution,\n          requireLastPushApproval: inputProps.requireLastPushApproval,\n          defaultBranch: inputProps.defaultBranch,\n          protectDefaultBranch: inputProps.protectDefaultBranch,\n          protectEnforceAdmins: inputProps.protectEnforceAdmins,\n          gitCommitMessage: inputProps.gitCommitMessage,\n          gitAuthorName: inputProps.gitAuthorName,\n          gitAuthorEmail: inputProps.gitAuthorEmail,\n          sourcePath: inputProps.sourcePath,\n          token: inputProps.token,\n          requiredCommitSigning: inputProps.requiredCommitSigning,\n          requiredLinearHistory: inputProps.requiredLinearHistory,\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: outputProps.remoteUrl,\n          repoContentsUrl: outputProps.repoContentsUrl,\n          commitHash: outputProps.commitHash,\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        defaultBranch = 'master',\n        protectDefaultBranch = true,\n        protectEnforceAdmins = true,\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n        requireCodeOwnerReviews = false,\n        dismissStaleReviews = false,\n        bypassPullRequestAllowances,\n        requiredApprovingReviewCount = 1,\n        restrictions,\n        requiredStatusCheckContexts = [],\n        requireBranchesToBeUpToDate = true,\n        requiredConversationResolution = false,\n        requireLastPushApproval = false,\n        token: providedToken,\n        requiredCommitSigning = false,\n        requiredLinearHistory = false,\n      } = ctx.input;\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        credentialsProvider: githubCredentialsProvider,\n        token: providedToken,\n        repoUrl,\n      });\n\n      const client = new Octokit(octokitOptions);\n\n      const targetRepo = await client.rest.repos.get({ owner, repo });\n\n      const remoteUrl = targetRepo.data.clone_url;\n      const repoContentsUrl = `${targetRepo.data.html_url}/blob/${defaultBranch}`;\n\n      const { commitHash } = await initRepoPushAndProtect(\n        remoteUrl,\n        octokitOptions.auth,\n        ctx.workspacePath,\n        ctx.input.sourcePath,\n        defaultBranch,\n        protectDefaultBranch,\n        protectEnforceAdmins,\n        owner,\n        client,\n        repo,\n        requireCodeOwnerReviews,\n        bypassPullRequestAllowances,\n        requiredApprovingReviewCount,\n        restrictions,\n        requiredStatusCheckContexts,\n        requireBranchesToBeUpToDate,\n        requiredConversationResolution,\n        requireLastPushApproval,\n        config,\n        ctx.logger,\n        gitCommitMessage,\n        gitAuthorName,\n        gitAuthorEmail,\n        dismissStaleReviews,\n        requiredCommitSigning,\n        requiredLinearHistory,\n      );\n\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n      ctx.output('commitHash', commitHash);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","inputProps.repoUrl","inputProps.requireCodeOwnerReviews","inputProps.dismissStaleReviews","inputProps.requiredStatusCheckContexts","inputProps.bypassPullRequestAllowances","inputProps.requiredApprovingReviewCount","inputProps.restrictions","inputProps.requireBranchesToBeUpToDate","inputProps.requiredConversationResolution","inputProps.requireLastPushApproval","inputProps.defaultBranch","inputProps.protectDefaultBranch","inputProps.protectEnforceAdmins","inputProps.gitCommitMessage","inputProps.gitAuthorName","inputProps.gitAuthorEmail","inputProps.sourcePath","inputProps.token","inputProps.requiredCommitSigning","inputProps.requiredLinearHistory","outputProps.remoteUrl","outputProps.repoContentsUrl","outputProps.commitHash","parseRepoUrl","InputError","getOctokitOptions","Octokit","initRepoPushAndProtect"],"mappings":"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"}