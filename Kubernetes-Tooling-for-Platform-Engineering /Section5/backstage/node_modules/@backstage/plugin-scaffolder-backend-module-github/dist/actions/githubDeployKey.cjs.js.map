{"version":3,"file":"githubDeployKey.cjs.js","sources":["../../src/actions/githubDeployKey.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { getOctokitOptions } from './helpers';\nimport { Octokit } from 'octokit';\nimport Sodium from 'libsodium-wrappers';\nimport { examples } from './githubDeployKey.examples';\n\n/**\n * Creates an `github:deployKey:create` Scaffolder action that creates a Deploy Key\n *\n * @public\n */\nexport function createGithubDeployKeyAction(options: {\n  integrations: ScmIntegrationRegistry;\n}) {\n  const { integrations } = options;\n  // For more information on how to define custom actions, see\n  //   https://backstage.io/docs/features/software-templates/writing-custom-actions\n  return createTemplateAction<{\n    repoUrl: string;\n    publicKey: string;\n    privateKey: string;\n    deployKeyName: string;\n    privateKeySecretName?: string;\n    token?: string;\n  }>({\n    id: 'github:deployKey:create',\n    description: 'Creates and stores Deploy Keys',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'publicKey', 'privateKey', 'deployKeyName'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          publicKey: {\n            title: 'SSH Public Key',\n            description: `Generated from ssh-keygen.  Begins with 'ssh-rsa', 'ecdsa-sha2-nistp256', 'ecdsa-sha2-nistp384', 'ecdsa-sha2-nistp521', 'ssh-ed25519', 'sk-ecdsa-sha2-nistp256@openssh.com', or 'sk-ssh-ed25519@openssh.com'.`,\n            type: 'string',\n          },\n          privateKey: {\n            title: 'SSH Private Key',\n            description: `SSH Private Key generated from ssh-keygen`,\n            type: 'string',\n          },\n          deployKeyName: {\n            title: 'Deploy Key Name',\n            description: `Name of the Deploy Key`,\n            type: 'string',\n          },\n          privateKeySecretName: {\n            title: 'Private Key GitHub Secret Name',\n            description: `Name of the GitHub Secret to store the private key related to the Deploy Key.  Defaults to: 'KEY_NAME_PRIVATE_KEY' where 'KEY_NAME' is the name of the Deploy Key`,\n            type: 'string',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitHub',\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          privateKeySecretName: {\n            title: 'The GitHub Action Repo Secret Name for the Private Key',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        publicKey,\n        privateKey,\n        deployKeyName,\n        privateKeySecretName = `${deployKeyName\n          .split(' ')\n          .join('_')\n          .toLocaleUpperCase('en-US')}_PRIVATE_KEY`,\n        token: providedToken,\n      } = ctx.input;\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        token: providedToken,\n        repoUrl: repoUrl,\n      });\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(`No owner provided for repo ${repoUrl}`);\n      }\n\n      const client = new Octokit(octokitOptions);\n\n      await client.rest.repos.createDeployKey({\n        owner: owner,\n        repo: repo,\n        title: deployKeyName,\n        key: publicKey,\n      });\n      const publicKeyResponse = await client.rest.actions.getRepoPublicKey({\n        owner: owner,\n        repo: repo,\n      });\n\n      await Sodium.ready;\n      const binaryKey = Sodium.from_base64(\n        publicKeyResponse.data.key,\n        Sodium.base64_variants.ORIGINAL,\n      );\n      const binarySecret = Sodium.from_string(privateKey);\n      const encryptedBinarySecret = Sodium.crypto_box_seal(\n        binarySecret,\n        binaryKey,\n      );\n      const encryptedBase64Secret = Sodium.to_base64(\n        encryptedBinarySecret,\n        Sodium.base64_variants.ORIGINAL,\n      );\n\n      await client.rest.actions.createOrUpdateRepoSecret({\n        owner: owner,\n        repo: repo,\n        secret_name: privateKeySecretName,\n        encrypted_value: encryptedBase64Secret,\n        key_id: publicKeyResponse.data.key_id,\n      });\n\n      ctx.output('privateKeySecretName', privateKeySecretName);\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","getOctokitOptions","parseRepoUrl","InputError","Octokit","Sodium"],"mappings":"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"}