{"version":3,"file":"githubWebhook.cjs.js","sources":["../../src/actions/githubWebhook.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  GithubCredentialsProvider,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { emitterEventNames } from '@octokit/webhooks';\nimport { assertError, InputError } from '@backstage/errors';\nimport { Octokit } from 'octokit';\nimport { getOctokitOptions } from './helpers';\nimport { examples } from './githubWebhook.examples';\n\n/**\n * Creates new action that creates a webhook for a repository on GitHub.\n * @public\n */\nexport function createGithubWebhookAction(options: {\n  integrations: ScmIntegrationRegistry;\n  defaultWebhookSecret?: string;\n  githubCredentialsProvider?: GithubCredentialsProvider;\n}) {\n  const { integrations, defaultWebhookSecret, githubCredentialsProvider } =\n    options;\n\n  const eventNames = emitterEventNames.filter(event => !event.includes('.'));\n\n  return createTemplateAction<{\n    repoUrl: string;\n    webhookUrl: string;\n    webhookSecret?: string;\n    events?: string[];\n    active?: boolean;\n    contentType?: 'form' | 'json';\n    insecureSsl?: boolean;\n    token?: string;\n  }>({\n    id: 'github:webhook',\n    description: 'Creates webhook for a repository on GitHub.',\n    examples,\n    supportsDryRun: true,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'webhookUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            description: `Accepts the format 'github.com?repo=reponame&owner=owner' where 'reponame' is the new repository name and 'owner' is an organization or username`,\n            type: 'string',\n          },\n          webhookUrl: {\n            title: 'Webhook URL',\n            description: 'The URL to which the payloads will be delivered',\n            type: 'string',\n          },\n          webhookSecret: {\n            title: 'Webhook Secret',\n            description:\n              'Webhook secret value. The default can be provided internally in action creation',\n            type: 'string',\n          },\n          events: {\n            title: 'Triggering Events',\n            description:\n              'Determines what events the hook is triggered for. Default: push',\n            type: 'array',\n            oneOf: [\n              {\n                items: {\n                  type: 'string',\n                  enum: eventNames,\n                },\n              },\n              {\n                items: {\n                  type: 'string',\n                  const: '*',\n                },\n              },\n            ],\n          },\n          active: {\n            title: 'Active',\n            type: 'boolean',\n            description: `Determines if notifications are sent when the webhook is triggered. Default: true`,\n          },\n          contentType: {\n            title: 'Content Type',\n            type: 'string',\n            enum: ['form', 'json'],\n            description: `The media type used to serialize the payloads. The default is 'form'`,\n          },\n          insecureSsl: {\n            title: 'Insecure SSL',\n            type: 'boolean',\n            description: `Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Default 'false'`,\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The GITHUB_TOKEN to use for authorization to GitHub',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        webhookUrl,\n        webhookSecret = defaultWebhookSecret,\n        events = ['push'],\n        active = true,\n        contentType = 'form',\n        insecureSsl = false,\n        token: providedToken,\n      } = ctx.input;\n\n      ctx.logger.info(`Creating webhook ${webhookUrl} for repo ${repoUrl}`);\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError('Invalid repository owner provided in repoUrl');\n      }\n\n      const client = new Octokit(\n        await getOctokitOptions({\n          integrations,\n          credentialsProvider: githubCredentialsProvider,\n          repoUrl: repoUrl,\n          token: providedToken,\n        }),\n      );\n\n      // If this is a dry run, log and return\n      if (ctx.isDryRun) {\n        ctx.logger.info(`Dry run complete`);\n        return;\n      }\n\n      try {\n        const insecure_ssl = insecureSsl ? '1' : '0';\n        await client.rest.repos.createWebhook({\n          owner,\n          repo,\n          config: {\n            url: webhookUrl,\n            content_type: contentType,\n            secret: webhookSecret,\n            insecure_ssl,\n          },\n          events,\n          active,\n        });\n        ctx.logger.info(`Webhook '${webhookUrl}' created successfully`);\n      } catch (e) {\n        assertError(e);\n        ctx.logger.warn(\n          `Failed: create webhook '${webhookUrl}' on repo: '${repo}', ${e.message}`,\n        );\n      }\n    },\n  });\n}\n"],"names":["emitterEventNames","createTemplateAction","examples","parseRepoUrl","InputError","Octokit","getOctokitOptions","assertError"],"mappings":";;;;;;;;;AAkCO,SAAS,0BAA0B,OAIvC,EAAA;AACD,EAAA,MAAM,EAAE,YAAA,EAAc,oBAAsB,EAAA,yBAAA,EAC1C,GAAA,OAAA;AAEF,EAAM,MAAA,UAAA,GAAaA,2BAAkB,MAAO,CAAA,CAAA,KAAA,KAAS,CAAC,KAAM,CAAA,QAAA,CAAS,GAAG,CAAC,CAAA;AAEzE,EAAA,OAAOC,yCASJ,CAAA;AAAA,IACD,EAAI,EAAA,gBAAA;AAAA,IACJ,WAAa,EAAA,6CAAA;AAAA,cACbC,+BAAA;AAAA,IACA,cAAgB,EAAA,IAAA;AAAA,IAChB,MAAQ,EAAA;AAAA,MACN,KAAO,EAAA;AAAA,QACL,IAAM,EAAA,QAAA;AAAA,QACN,QAAA,EAAU,CAAC,SAAA,EAAW,YAAY,CAAA;AAAA,QAClC,UAAY,EAAA;AAAA,UACV,OAAS,EAAA;AAAA,YACP,KAAO,EAAA,qBAAA;AAAA,YACP,WAAa,EAAA,CAAA,gJAAA,CAAA;AAAA,YACb,IAAM,EAAA;AAAA,WACR;AAAA,UACA,UAAY,EAAA;AAAA,YACV,KAAO,EAAA,aAAA;AAAA,YACP,WAAa,EAAA,iDAAA;AAAA,YACb,IAAM,EAAA;AAAA,WACR;AAAA,UACA,aAAe,EAAA;AAAA,YACb,KAAO,EAAA,gBAAA;AAAA,YACP,WACE,EAAA,iFAAA;AAAA,YACF,IAAM,EAAA;AAAA,WACR;AAAA,UACA,MAAQ,EAAA;AAAA,YACN,KAAO,EAAA,mBAAA;AAAA,YACP,WACE,EAAA,iEAAA;AAAA,YACF,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL;AAAA,gBACE,KAAO,EAAA;AAAA,kBACL,IAAM,EAAA,QAAA;AAAA,kBACN,IAAM,EAAA;AAAA;AACR,eACF;AAAA,cACA;AAAA,gBACE,KAAO,EAAA;AAAA,kBACL,IAAM,EAAA,QAAA;AAAA,kBACN,KAAO,EAAA;AAAA;AACT;AACF;AACF,WACF;AAAA,UACA,MAAQ,EAAA;AAAA,YACN,KAAO,EAAA,QAAA;AAAA,YACP,IAAM,EAAA,SAAA;AAAA,YACN,WAAa,EAAA,CAAA,iFAAA;AAAA,WACf;AAAA,UACA,WAAa,EAAA;AAAA,YACX,KAAO,EAAA,cAAA;AAAA,YACP,IAAM,EAAA,QAAA;AAAA,YACN,IAAA,EAAM,CAAC,MAAA,EAAQ,MAAM,CAAA;AAAA,YACrB,WAAa,EAAA,CAAA,oEAAA;AAAA,WACf;AAAA,UACA,WAAa,EAAA;AAAA,YACX,KAAO,EAAA,cAAA;AAAA,YACP,IAAM,EAAA,SAAA;AAAA,YACN,WAAa,EAAA,CAAA,qHAAA;AAAA,WACf;AAAA,UACA,KAAO,EAAA;AAAA,YACL,KAAO,EAAA,sBAAA;AAAA,YACP,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA;AAAA;AACf;AACF;AACF,KACF;AAAA,IACA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAM,MAAA;AAAA,QACJ,OAAA;AAAA,QACA,UAAA;AAAA,QACA,aAAgB,GAAA,oBAAA;AAAA,QAChB,MAAA,GAAS,CAAC,MAAM,CAAA;AAAA,QAChB,MAAS,GAAA,IAAA;AAAA,QACT,WAAc,GAAA,MAAA;AAAA,QACd,WAAc,GAAA,KAAA;AAAA,QACd,KAAO,EAAA;AAAA,UACL,GAAI,CAAA,KAAA;AAER,MAAA,GAAA,CAAI,OAAO,IAAK,CAAA,CAAA,iBAAA,EAAoB,UAAU,CAAA,UAAA,EAAa,OAAO,CAAE,CAAA,CAAA;AACpE,MAAA,MAAM,EAAE,KAAO,EAAA,IAAA,EAAS,GAAAC,iCAAA,CAAa,SAAS,YAAY,CAAA;AAE1D,MAAA,IAAI,CAAC,KAAO,EAAA;AACV,QAAM,MAAA,IAAIC,kBAAW,8CAA8C,CAAA;AAAA;AAGrE,MAAA,MAAM,SAAS,IAAIC,eAAA;AAAA,QACjB,MAAMC,yBAAkB,CAAA;AAAA,UACtB,YAAA;AAAA,UACA,mBAAqB,EAAA,yBAAA;AAAA,UACrB,OAAA;AAAA,UACA,KAAO,EAAA;AAAA,SACR;AAAA,OACH;AAGA,MAAA,IAAI,IAAI,QAAU,EAAA;AAChB,QAAI,GAAA,CAAA,MAAA,CAAO,KAAK,CAAkB,gBAAA,CAAA,CAAA;AAClC,QAAA;AAAA;AAGF,MAAI,IAAA;AACF,QAAM,MAAA,YAAA,GAAe,cAAc,GAAM,GAAA,GAAA;AACzC,QAAM,MAAA,MAAA,CAAO,IAAK,CAAA,KAAA,CAAM,aAAc,CAAA;AAAA,UACpC,KAAA;AAAA,UACA,IAAA;AAAA,UACA,MAAQ,EAAA;AAAA,YACN,GAAK,EAAA,UAAA;AAAA,YACL,YAAc,EAAA,WAAA;AAAA,YACd,MAAQ,EAAA,aAAA;AAAA,YACR;AAAA,WACF;AAAA,UACA,MAAA;AAAA,UACA;AAAA,SACD,CAAA;AACD,QAAA,GAAA,CAAI,MAAO,CAAA,IAAA,CAAK,CAAY,SAAA,EAAA,UAAU,CAAwB,sBAAA,CAAA,CAAA;AAAA,eACvD,CAAG,EAAA;AACV,QAAAC,kBAAA,CAAY,CAAC,CAAA;AACb,QAAA,GAAA,CAAI,MAAO,CAAA,IAAA;AAAA,UACT,2BAA2B,UAAU,CAAA,YAAA,EAAe,IAAI,CAAA,GAAA,EAAM,EAAE,OAAO,CAAA;AAAA,SACzE;AAAA;AACF;AACF,GACD,CAAA;AACH;;;;"}