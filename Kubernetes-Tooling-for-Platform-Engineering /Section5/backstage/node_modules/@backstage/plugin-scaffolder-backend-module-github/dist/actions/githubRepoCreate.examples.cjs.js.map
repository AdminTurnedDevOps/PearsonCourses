{"version":3,"file":"githubRepoCreate.examples.cjs.js","sources":["../../src/actions/githubRepoCreate.examples.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TemplateExample } from '@backstage/plugin-scaffolder-node';\nimport yaml from 'yaml';\n\nexport const examples: TemplateExample[] = [\n  {\n    description: 'Creates a GitHub repository with default configuration.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Add a description.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with a description',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            description: 'My new repository',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Disable wiki and issues.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository without wiki and issues',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            hasIssues: false,\n            hasWiki: false,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Set repository homepage.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with homepage',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            homepage: 'https://example.com',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a private repository.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new private GitHub repository',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            repoVisibility: 'private',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Enable required code owner reviews.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with required code owner reviews',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requireCodeOwnerReviews: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Set required approving review count to 2.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with required approving review count',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredApprovingReviewCount: 2,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Allow squash merge only.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository allowing only squash merge',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            allowMergeCommit: false,\n            allowSquashMerge: true,\n            allowRebaseMerge: false,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Set squash merge commit title to pull request title.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with squash merge commit title set to pull request title',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            squashMergeCommitTitle: 'pull_request_title',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Set squash merge commit message to blank.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with squash merge commit message set to blank',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            squashMergeCommitMessage: 'blank',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Allow auto-merge.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository allowing auto-merge',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            allowAutoMerge: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Set collaborators with push access.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with collaborators having push access',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            collaborators: [\n              { username: 'user1', permission: 'push' },\n              { username: 'user2', permission: 'push' },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Add topics to repository.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with topics',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            topics: ['devops', 'kubernetes', 'ci-cd'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Add secret variables to repository.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with secret variables',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            secrets: [\n              { name: 'SECRET_KEY', value: 'supersecretkey' },\n              { name: 'API_TOKEN', value: 'tokenvalue' },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Enable branch protection requiring status checks.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with branch protection requiring status checks',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredStatusCheckContexts: ['ci/circleci: build'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Require branches to be up-to-date before merging.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository requiring branches to be up-to-date before merging',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requireBranchesToBeUpToDate: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Require conversation resolution before merging.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository requiring conversation resolution before merging',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredConversationResolution: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Delete branch on merge.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with branch deletion on merge',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            deleteBranchOnMerge: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Customize OIDC token.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with OIDC token customization',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            oidcCustomization: {\n              sub: 'repo:owner/repo',\n              aud: 'https://github.com',\n            },\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Require commit signing.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository requiring commit signing',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredCommitSigning: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Set multiple properties including description, homepage, and visibility.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with multiple properties',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            description: 'A repository for project XYZ',\n            homepage: 'https://project-xyz.com',\n            repoVisibility: 'internal',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Configure branch protection with multiple settings.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with branch protection settings',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredStatusCheckContexts: [\n              'ci/circleci: build',\n              'ci/circleci: test',\n            ],\n            requireBranchesToBeUpToDate: true,\n            requiredConversationResolution: true,\n            requiredApprovingReviewCount: 2,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Set repository access to private and add collaborators with admin access.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new private GitHub repository with collaborators',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            repoVisibility: 'private',\n            collaborators: [\n              { username: 'admin1', permission: 'admin' },\n              { username: 'admin2', permission: 'admin' },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Enable GitHub Projects for the repository.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with GitHub Projects enabled',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            hasProjects: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Disable merge commits and allow only rebase and squash merges.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository allowing only rebase and squash merges',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            allowMergeCommit: false,\n            allowRebaseMerge: true,\n            allowSquashMerge: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Set repository access to internal with no projects and issues.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new internal GitHub repository without projects and issues',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            repoVisibility: 'internal',\n            hasProjects: false,\n            hasIssues: false,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create repository with OIDC customization for specific audience.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with OIDC customization for specific audience',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            oidcCustomization: {\n              sub: 'repo:owner/repo',\n              aud: 'https://specific-audience.com',\n            },\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Require all branches to be up-to-date before merging.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository requiring all branches to be up-to-date',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requireBranchesToBeUpToDate: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Set description and topics for the repository.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with description and topics',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            description: 'Repository for project ABC',\n            topics: ['python', 'machine-learning', 'data-science'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Set repository visibility to public and enable commit signing.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new public GitHub repository with commit signing required',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            repoVisibility: 'public',\n            requiredCommitSigning: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create a repository with collaborators and default branch protection.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with collaborators and branch protection',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            collaborators: [\n              { username: 'contributor1', permission: 'write' },\n              { username: 'contributor2', permission: 'write' },\n            ],\n            requiredStatusCheckContexts: ['ci/travis: build'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Add multiple secret variables.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with multiple secret variables',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            secrets: [\n              { name: 'SECRET_KEY_1', value: 'value1' },\n              { name: 'SECRET_KEY_2', value: 'value2' },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Require a minimum of 2 approving reviews for merging.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with 2 required approving reviews',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredApprovingReviewCount: 2,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Enable branch protection with conversation resolution required.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with branch protection and conversation resolution required',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredConversationResolution: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Set repository visibility to internal with description and homepage.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new internal GitHub repository with description and homepage',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            repoVisibility: 'internal',\n            description: 'Internal repository for team collaboration',\n            homepage: 'https://internal.example.com',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Disable auto-merge.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with auto-merge disabled',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            allowAutoMerge: false,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Set repository topics and enable GitHub Projects.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with topics and GitHub Projects enabled',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            topics: ['opensource', 'nodejs', 'api'],\n            hasProjects: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create a private repository with collaborators having admin and write access.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new private GitHub repository with multiple collaborators',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            repoVisibility: 'private',\n            collaborators: [\n              { username: 'admin1', permission: 'admin' },\n              { username: 'writer1', permission: 'write' },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Disable branch deletion on merge.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with branch deletion on merge disabled',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            deleteBranchOnMerge: false,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Set repository visibility to internal and enable commit signing.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new internal GitHub repository with commit signing required',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            repoVisibility: 'internal',\n            requiredCommitSigning: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create repository with description, homepage, and required status checks.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with description, homepage, and status checks',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            description: 'Repository for web application project',\n            homepage: 'https://webapp.example.com',\n            requiredStatusCheckContexts: [\n              'ci/travis: build',\n              'ci/travis: lint',\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Enable squash merges only and set commit message to pull request description.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository allowing only squash merges with commit message set to pull request description',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            allowMergeCommit: false,\n            allowSquashMerge: true,\n            allowRebaseMerge: false,\n            squashMergeCommitMessage: 'pull_request_description',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Enable rebase merges only and require commit signing.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository allowing only rebase merges with commit signing required',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            allowMergeCommit: false,\n            allowRebaseMerge: true,\n            allowSquashMerge: false,\n            requiredCommitSigning: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create repository with OIDC customization for multiple audiences.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with OIDC customization for multiple audiences',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            oidcCustomization: {\n              sub: 'repo:owner/repo',\n              aud: ['https://audience1.com', 'https://audience2.com'],\n            },\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Enable branch protection with required approving reviews and status checks.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with branch protection requiring approving reviews and status checks',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredApprovingReviewCount: 2,\n            requiredStatusCheckContexts: [\n              'ci/circleci: build',\n              'ci/circleci: test',\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a public repository with topics and secret variables.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new public GitHub repository with topics and secret variables',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            repoVisibility: 'public',\n            topics: ['javascript', 'react', 'frontend'],\n            secrets: [\n              { name: 'API_KEY', value: 'apikeyvalue' },\n              { name: 'DB_PASSWORD', value: 'dbpasswordvalue' },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Set repository description and disable issues and wiki.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with description, and disable issues and wiki',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            description: 'Repository for backend service',\n            hasIssues: false,\n            hasWiki: false,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Enable required conversation resolution and commit signing.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with required conversation resolution and commit signing',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredConversationResolution: true,\n            requiredCommitSigning: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Set repository visibility to private and require branches to be up-to-date.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new private GitHub repository requiring branches to be up-to-date',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            repoVisibility: 'private',\n            requireBranchesToBeUpToDate: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create a repository with default settings and add multiple topics.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with default settings and topics',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            topics: ['devops', 'ci-cd', 'automation'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Disable merge commits, enable auto-merge, and require commit signing.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository disabling merge commits, enabling auto-merge, and requiring commit signing',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            allowMergeCommit: false,\n            allowAutoMerge: true,\n            requiredCommitSigning: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create a repository with homepage, collaborators, and topics.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with homepage, collaborators, and topics',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            homepage: 'https://example.com',\n            collaborators: [\n              { username: 'user1', permission: 'push' },\n              { username: 'user2', permission: 'admin' },\n            ],\n            topics: ['opensource', 'contribution'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a repository with branch protection and description.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with branch protection and description',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredStatusCheckContexts: ['ci/travis: build'],\n            requiredApprovingReviewCount: 1,\n            description: 'Repository for microservice development',\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description: 'Create a repository with OIDC customization and topics.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with OIDC customization and topics',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            oidcCustomization: {\n              sub: 'repo:owner/repo',\n              aud: 'https://api.example.com',\n            },\n            topics: ['api', 'security'],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Enable required code owner reviews and branch deletion on merge.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with required code owner reviews and branch deletion on merge',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requireCodeOwnerReviews: true,\n            deleteBranchOnMerge: true,\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Create a repository with multiple secret variables and collaborators.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with multiple secret variables and collaborators',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            secrets: [\n              { name: 'API_SECRET', value: 'secretvalue' },\n              { name: 'DB_USER', value: 'dbuser' },\n            ],\n            collaborators: [\n              { username: 'dev1', permission: 'write' },\n              { username: 'dev2', permission: 'push' },\n            ],\n          },\n        },\n      ],\n    }),\n  },\n  {\n    description:\n      'Enable branch protection requiring status checks and conversation resolution.',\n    example: yaml.stringify({\n      steps: [\n        {\n          action: 'github:repo:create',\n          name: 'Create a new GitHub repository with branch protection requiring status checks and conversation resolution',\n          input: {\n            repoUrl: 'github.com?repo=repo&owner=owner',\n            requiredStatusCheckContexts: ['ci/build'],\n            requiredConversationResolution: true,\n          },\n        },\n      ],\n    }),\n  },\n];\n"],"names":["yaml"],"mappings":"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"}