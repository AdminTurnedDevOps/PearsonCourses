{"version":3,"file":"githubBranchProtection.cjs.js","sources":["../../src/actions/githubBranchProtection.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  createTemplateAction,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { examples } from './githubBranchProtection.examples';\nimport * as inputProps from './inputProperties';\nimport { getOctokitOptions } from './helpers';\nimport { Octokit } from 'octokit';\nimport { enableBranchProtectionOnDefaultRepoBranch } from './gitHelpers';\n\n/**\n * Creates an `github:branch-protection:create` Scaffolder action that configured Branch Protection in a Github Repository.\n *\n * @public\n */\nexport function createGithubBranchProtectionAction(options: {\n  integrations: ScmIntegrationRegistry;\n}) {\n  const { integrations } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    branch?: string;\n    enforceAdmins?: boolean;\n    requiredApprovingReviewCount?: number;\n    requireCodeOwnerReviews?: boolean;\n    dismissStaleReviews?: boolean;\n    bypassPullRequestAllowances?:\n      | {\n          users?: string[];\n          teams?: string[];\n          apps?: string[];\n        }\n      | undefined;\n    restrictions?:\n      | {\n          users: string[];\n          teams: string[];\n          apps?: string[];\n        }\n      | undefined;\n    requiredStatusCheckContexts?: string[];\n    requireBranchesToBeUpToDate?: boolean;\n    requiredConversationResolution?: boolean;\n    requireLastPushApproval?: boolean;\n    requiredCommitSigning?: boolean;\n    requiredLinearHistory?: boolean;\n    token?: string;\n  }>({\n    id: 'github:branch-protection:create',\n    description: 'Configures Branch Protection',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: inputProps.repoUrl,\n          branch: {\n            title: 'Branch name',\n            description: `The branch to protect. Defaults to the repository's default branch`,\n            type: 'string',\n          },\n          enforceAdmins: inputProps.protectEnforceAdmins,\n          requiredApprovingReviewCount: inputProps.requiredApprovingReviewCount,\n          requireCodeOwnerReviews: inputProps.requireCodeOwnerReviews,\n          dismissStaleReviews: inputProps.dismissStaleReviews,\n          bypassPullRequestAllowances: inputProps.bypassPullRequestAllowances,\n          restrictions: inputProps.restrictions,\n          requiredStatusCheckContexts: inputProps.requiredStatusCheckContexts,\n          requireBranchesToBeUpToDate: inputProps.requireBranchesToBeUpToDate,\n          requiredConversationResolution:\n            inputProps.requiredConversationResolution,\n          requireLastPushApproval: inputProps.requireLastPushApproval,\n          requiredCommitSigning: inputProps.requiredCommitSigning,\n          requiredLinearHistory: inputProps.requiredLinearHistory,\n          token: inputProps.token,\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        branch,\n        enforceAdmins = true,\n        requiredApprovingReviewCount = 1,\n        requireCodeOwnerReviews = false,\n        dismissStaleReviews = false,\n        bypassPullRequestAllowances,\n        restrictions,\n        requiredStatusCheckContexts = [],\n        requireBranchesToBeUpToDate = true,\n        requiredConversationResolution = false,\n        requireLastPushApproval = false,\n        requiredCommitSigning = false,\n        requiredLinearHistory = false,\n        token: providedToken,\n      } = ctx.input;\n\n      const octokitOptions = await getOctokitOptions({\n        integrations,\n        token: providedToken,\n        repoUrl: repoUrl,\n      });\n      const client = new Octokit(octokitOptions);\n\n      const { owner, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(`No owner provided for repo ${repoUrl}`);\n      }\n\n      const repository = await client.rest.repos.get({\n        owner: owner,\n        repo: repo,\n      });\n\n      await enableBranchProtectionOnDefaultRepoBranch({\n        repoName: repo,\n        client,\n        owner,\n        logger: ctx.logger,\n        requireCodeOwnerReviews,\n        bypassPullRequestAllowances,\n        requiredApprovingReviewCount,\n        restrictions,\n        requiredStatusCheckContexts,\n        requireBranchesToBeUpToDate,\n        requiredConversationResolution,\n        requireLastPushApproval,\n        defaultBranch: branch ?? repository.data.default_branch,\n        enforceAdmins,\n        dismissStaleReviews,\n        requiredCommitSigning,\n        requiredLinearHistory,\n      });\n    },\n  });\n}\n"],"names":["createTemplateAction","examples","inputProps.repoUrl","inputProps.protectEnforceAdmins","inputProps.requiredApprovingReviewCount","inputProps.requireCodeOwnerReviews","inputProps.dismissStaleReviews","inputProps.bypassPullRequestAllowances","inputProps.restrictions","inputProps.requiredStatusCheckContexts","inputProps.requireBranchesToBeUpToDate","inputProps.requiredConversationResolution","inputProps.requireLastPushApproval","inputProps.requiredCommitSigning","inputProps.requiredLinearHistory","inputProps.token","getOctokitOptions","Octokit","parseRepoUrl","InputError","enableBranchProtectionOnDefaultRepoBranch"],"mappings":"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"}