{"version":3,"file":"EntityPolicies.esm.js","sources":["../src/EntityPolicies.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, EntityPolicy } from './entity';\n\n// Helper that requires that all of a set of policies can be successfully\n// applied\nclass AllEntityPolicies implements EntityPolicy {\n  constructor(private readonly policies: EntityPolicy[]) {}\n\n  async enforce(entity: Entity): Promise<Entity> {\n    let result = entity;\n    for (const policy of this.policies) {\n      const output = await policy.enforce(result);\n      if (!output) {\n        throw new Error(\n          `Policy ${policy.constructor.name} did not return a result`,\n        );\n      }\n      result = output;\n    }\n    return result;\n  }\n}\n\n// Helper that requires that at least one of a set of policies can be\n// successfully applied\nclass AnyEntityPolicy implements EntityPolicy {\n  constructor(private readonly policies: EntityPolicy[]) {}\n\n  async enforce(entity: Entity): Promise<Entity> {\n    for (const policy of this.policies) {\n      const output = await policy.enforce(entity);\n      if (output) {\n        return output;\n      }\n    }\n    throw new Error(`The entity did not match any known policy`);\n  }\n}\n\n/**\n * Provides helpers for enforcing a set of {@link EntityPolicy} in an `and`/`or` expression.\n *\n * @public\n */\nexport const EntityPolicies = {\n  allOf(policies: EntityPolicy[]): EntityPolicy {\n    return new AllEntityPolicies(policies);\n  },\n  oneOf(policies: EntityPolicy[]): EntityPolicy {\n    return new AnyEntityPolicy(policies);\n  },\n};\n"],"names":[],"mappings":"AAoBA,MAAM,iBAA0C,CAAA;AAAA,EAC9C,YAA6B,QAA0B,EAAA;AAA1B,IAAA,IAAA,CAAA,QAAA,GAAA,QAAA;AAAA;AAA2B,EAExD,MAAM,QAAQ,MAAiC,EAAA;AAC7C,IAAA,IAAI,MAAS,GAAA,MAAA;AACb,IAAW,KAAA,MAAA,MAAA,IAAU,KAAK,QAAU,EAAA;AAClC,MAAA,MAAM,MAAS,GAAA,MAAM,MAAO,CAAA,OAAA,CAAQ,MAAM,CAAA;AAC1C,MAAA,IAAI,CAAC,MAAQ,EAAA;AACX,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,OAAA,EAAU,MAAO,CAAA,WAAA,CAAY,IAAI,CAAA,wBAAA;AAAA,SACnC;AAAA;AAEF,MAAS,MAAA,GAAA,MAAA;AAAA;AAEX,IAAO,OAAA,MAAA;AAAA;AAEX;AAIA,MAAM,eAAwC,CAAA;AAAA,EAC5C,YAA6B,QAA0B,EAAA;AAA1B,IAAA,IAAA,CAAA,QAAA,GAAA,QAAA;AAAA;AAA2B,EAExD,MAAM,QAAQ,MAAiC,EAAA;AAC7C,IAAW,KAAA,MAAA,MAAA,IAAU,KAAK,QAAU,EAAA;AAClC,MAAA,MAAM,MAAS,GAAA,MAAM,MAAO,CAAA,OAAA,CAAQ,MAAM,CAAA;AAC1C,MAAA,IAAI,MAAQ,EAAA;AACV,QAAO,OAAA,MAAA;AAAA;AACT;AAEF,IAAM,MAAA,IAAI,MAAM,CAA2C,yCAAA,CAAA,CAAA;AAAA;AAE/D;AAOO,MAAM,cAAiB,GAAA;AAAA,EAC5B,MAAM,QAAwC,EAAA;AAC5C,IAAO,OAAA,IAAI,kBAAkB,QAAQ,CAAA;AAAA,GACvC;AAAA,EACA,MAAM,QAAwC,EAAA;AAC5C,IAAO,OAAA,IAAI,gBAAgB,QAAQ,CAAA;AAAA;AAEvC;;;;"}