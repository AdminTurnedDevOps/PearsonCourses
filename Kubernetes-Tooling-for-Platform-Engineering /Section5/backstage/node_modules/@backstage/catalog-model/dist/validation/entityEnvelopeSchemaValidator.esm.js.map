{"version":3,"file":"entityEnvelopeSchemaValidator.esm.js","sources":["../../src/validation/entityEnvelopeSchemaValidator.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Schema } from 'ajv';\nimport { EntityEnvelope } from '../entity/EntityEnvelope';\nimport entityEnvelopeSchema from '../schema/EntityEnvelope.schema.json';\nimport { compileAjvSchema, throwAjvError } from './ajv';\n\n/**\n * Creates a validation function that takes some arbitrary data, and either\n * returns that data cast to an {@link EntityEnvelope} (or the given subtype)\n * if it matches that schema, or throws a {@link globals#TypeError} describing the\n * errors.\n *\n * @remarks\n *\n * Note that this validator is only meant for applying the base schema checks;\n * it does not take custom policies or additional processor based validation\n * into account.\n *\n * By default, the plain `EntityEnvelope` schema is used. If you pass in your\n * own, it may contain `$ref` references to the following, which are resolved\n * automatically for you:\n *\n * - {@link EntityEnvelope}\n * - {@link Entity}\n * - {@link EntityMeta}\n * - `common#<id>`\n *\n * See also {@link https://github.com/backstage/backstage/tree/master/packages/catalog-model/src/schema}\n *\n * @public\n *\n */\nexport function entityEnvelopeSchemaValidator<\n  T extends EntityEnvelope = EntityEnvelope,\n>(schema?: unknown): (data: unknown) => T {\n  const validate = compileAjvSchema(\n    schema ? (schema as Schema) : entityEnvelopeSchema,\n  );\n\n  return data => {\n    const result = validate(data);\n    if (result === true) {\n      return data as T;\n    }\n\n    throw throwAjvError(validate.errors);\n  };\n}\n"],"names":[],"mappings":";;;AA+CO,SAAS,8BAEd,MAAwC,EAAA;AACxC,EAAA,MAAM,QAAW,GAAA,gBAAA;AAAA,IACf,SAAU,MAAoB,GAAA;AAAA,GAChC;AAEA,EAAA,OAAO,CAAQ,IAAA,KAAA;AACb,IAAM,MAAA,MAAA,GAAS,SAAS,IAAI,CAAA;AAC5B,IAAA,IAAI,WAAW,IAAM,EAAA;AACnB,MAAO,OAAA,IAAA;AAAA;AAGT,IAAM,MAAA,aAAA,CAAc,SAAS,MAAM,CAAA;AAAA,GACrC;AACF;;;;"}