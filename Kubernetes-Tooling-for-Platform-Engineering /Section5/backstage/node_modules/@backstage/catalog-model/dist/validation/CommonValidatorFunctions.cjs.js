'use strict';

var lodash = require('lodash');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var lodash__default = /*#__PURE__*/_interopDefaultCompat(lodash);

class CommonValidatorFunctions {
  /**
   * Checks that the value is on the form `<suffix>` or `<prefix><separator><suffix>`, and validates
   * those parts separately.
   *
   * @param value - The value to check
   * @param separator - The separator between parts
   * @param isValidPrefix - Checks that the part before the separator is valid, if present
   * @param isValidSuffix - Checks that the part after the separator (or the entire value if there is no separator) is valid
   */
  static isValidPrefixAndOrSuffix(value, separator, isValidPrefix, isValidSuffix) {
    if (typeof value !== "string") {
      return false;
    }
    const parts = value.split(separator);
    if (parts.length === 1) {
      return isValidSuffix(parts[0]);
    } else if (parts.length === 2) {
      return isValidPrefix(parts[0]) && isValidSuffix(parts[1]);
    }
    return false;
  }
  /**
   * Checks that the value can be safely transferred as JSON.
   *
   * @param value - The value to check
   */
  static isJsonSafe(value) {
    try {
      return lodash__default.default.isEqual(value, JSON.parse(JSON.stringify(value)));
    } catch {
      return false;
    }
  }
  /**
   * Checks that the value is a valid DNS subdomain name.
   *
   * @param value - The value to check
   * @see https://tools.ietf.org/html/rfc1123
   */
  static isValidDnsSubdomain(value) {
    return typeof value === "string" && value.length >= 1 && value.length <= 253 && value.split(".").every(CommonValidatorFunctions.isValidDnsLabel);
  }
  /**
   * Checks that the value is a valid DNS label.
   *
   * @param value - The value to check
   * @see https://tools.ietf.org/html/rfc1123
   */
  static isValidDnsLabel(value) {
    return typeof value === "string" && value.length >= 1 && value.length <= 63 && /^[a-z0-9]+(?:\-+[a-z0-9]+)*$/.test(value);
  }
  /**
   * Checks that the value is a valid tag.
   *
   * @deprecated This will be removed in a future release
   * @param value - The value to check
   */
  static isValidTag(value) {
    return typeof value === "string" && value.length >= 1 && value.length <= 63 && /^[a-z0-9+#]+(\-[a-z0-9+#]+)*$/.test(value);
  }
  /**
   * Checks that the value is a valid string URL.
   *
   * @param value - The value to check
   */
  static isValidUrl(value) {
    if (typeof value !== "string") {
      return false;
    }
    try {
      new URL(value);
      return true;
    } catch {
      return false;
    }
  }
  /**
   * Checks that the value is a non empty string value.
   *
   * @deprecated use isNonEmptyString instead
   * @param value - The value to check
   */
  static isValidString(value) {
    return typeof value === "string" && value?.trim()?.length >= 1;
  }
  /**
   * Checks that the value is a string value that's not empty.
   *
   * @param value - The value to check
   */
  static isNonEmptyString(value) {
    return typeof value === "string" && value?.trim()?.length >= 1;
  }
}

exports.CommonValidatorFunctions = CommonValidatorFunctions;
//# sourceMappingURL=CommonValidatorFunctions.cjs.js.map
