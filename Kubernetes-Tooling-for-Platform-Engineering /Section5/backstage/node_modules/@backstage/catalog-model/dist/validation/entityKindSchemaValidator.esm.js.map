{"version":3,"file":"entityKindSchemaValidator.esm.js","sources":["../../src/validation/entityKindSchemaValidator.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Schema } from 'ajv';\nimport { Entity } from '../entity';\nimport { compileAjvSchema, throwAjvError } from './ajv';\n\n/**\n * Creates a validation function that takes some arbitrary data, and either\n * returns that data cast to a `T` if it matches that schema, or `false` if the\n * schema apiVersion/kind didn't apply to that data, or throws a\n * {@link globals#TypeError} describing actual errors.\n *\n * @remarks\n *\n * This validator is highly specialized, in that it has special treatment of\n * the `kind` and `apiVersion` root keys. This only works if your schema has\n * their rule set to `\"enum\"`:\n *\n * ```\n * \"apiVersion\": {\n *    \"enum\": [\"backstage.io/v1alpha1\", \"backstage.io/v1beta1\"]\n * },\n * \"kind\": {\n *   \"enum\": [\"Group\"]\n * },\n * ```\n *\n * In the above example, the created validator will return `false` if and only\n * if the kind and/or apiVersion mismatch.\n *\n * Note that this validator is only meant for applying the base schema checks;\n * it does not take custom policies or additional processor based validation\n * into account.\n *\n * The given schema may contain `$ref` references to the following, which are\n * resolved automatically for you:\n *\n * - {@link Entity}\n *\n * - {@link EntityEnvelope}\n *\n * - {@link EntityMeta}\n *\n * - `common#<id>`\n * @see {@link https://github.com/backstage/backstage/tree/master/packages/catalog-model/src/schema}\n *\n * @public\n */\nexport function entityKindSchemaValidator<T extends Entity>(\n  schema: unknown,\n): (data: unknown) => T | false {\n  const validate = compileAjvSchema(schema as Schema);\n\n  return data => {\n    const result = validate(data);\n    if (result === true) {\n      return data as T;\n    }\n\n    // Only in the case where kind and/or apiVersion have enum mismatches AND\n    // have NO other errors, we call it a soft error.\n    const softCandidates = validate.errors?.filter(e =>\n      ['/kind', '/apiVersion'].includes(e.instancePath),\n    );\n    if (\n      softCandidates?.length &&\n      softCandidates.every(e => e.keyword === 'enum')\n    ) {\n      return false;\n    }\n\n    throw throwAjvError(validate.errors);\n  };\n}\n"],"names":[],"mappings":";;AA8DO,SAAS,0BACd,MAC8B,EAAA;AAC9B,EAAM,MAAA,QAAA,GAAW,iBAAiB,MAAgB,CAAA;AAElD,EAAA,OAAO,CAAQ,IAAA,KAAA;AACb,IAAM,MAAA,MAAA,GAAS,SAAS,IAAI,CAAA;AAC5B,IAAA,IAAI,WAAW,IAAM,EAAA;AACnB,MAAO,OAAA,IAAA;AAAA;AAKT,IAAM,MAAA,cAAA,GAAiB,SAAS,MAAQ,EAAA,MAAA;AAAA,MAAO,OAC7C,CAAC,OAAA,EAAS,aAAa,CAAE,CAAA,QAAA,CAAS,EAAE,YAAY;AAAA,KAClD;AACA,IACE,IAAA,cAAA,EAAgB,UAChB,cAAe,CAAA,KAAA,CAAM,OAAK,CAAE,CAAA,OAAA,KAAY,MAAM,CAC9C,EAAA;AACA,MAAO,OAAA,KAAA;AAAA;AAGT,IAAM,MAAA,aAAA,CAAc,SAAS,MAAM,CAAA;AAAA,GACrC;AACF;;;;"}