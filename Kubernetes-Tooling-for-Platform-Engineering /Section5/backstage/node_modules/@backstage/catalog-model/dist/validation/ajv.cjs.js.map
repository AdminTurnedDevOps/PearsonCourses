{"version":3,"file":"ajv.cjs.js","sources":["../../src/validation/ajv.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Ajv, { Schema, ValidateFunction } from 'ajv';\nimport entitySchema from '../schema/Entity.schema.json';\nimport entityEnvelopeSchema from '../schema/EntityEnvelope.schema.json';\nimport entityMetaSchema from '../schema/EntityMeta.schema.json';\nimport commonSchema from '../schema/shared/common.schema.json';\n\n// A local cache of compiled schemas, to avoid duplicate work.\n// The keys are JSON stringified versions of the schema\nconst compiledSchemaCache = new Map<string, ValidateFunction<unknown>>();\n\n// The core schemas that others can depend on\nconst refDependencyCandidates = [\n  entityEnvelopeSchema,\n  entitySchema,\n  entityMetaSchema,\n  commonSchema,\n];\n\nexport function throwAjvError(\n  errors: ValidateFunction<unknown>['errors'],\n): never {\n  if (!errors?.length) {\n    throw new TypeError('Unknown error');\n  }\n\n  const error = errors[0];\n  throw new TypeError(\n    `${error.instancePath || '<root>'} ${error.message}${\n      error.params\n        ? ` - ${Object.entries(error.params)\n            .map(([key, val]) => `${key}: ${val}`)\n            .join(', ')}`\n        : ''\n    }`,\n  );\n}\n\n// Compiles the given schema, and makes sure to also grab any core dependencies\n// that it depends on\nexport function compileAjvSchema(\n  schema: Schema,\n  options: { disableCache?: boolean } = {},\n): ValidateFunction<unknown> {\n  const disableCache = options?.disableCache ?? false;\n  const cacheKey = disableCache ? '' : JSON.stringify(schema);\n\n  if (!disableCache) {\n    const cached = compiledSchemaCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n  }\n\n  const extraSchemas = getExtraSchemas(schema);\n  const ajv = new Ajv({\n    allowUnionTypes: true,\n    allErrors: true,\n    validateSchema: true,\n  });\n  if (extraSchemas.length) {\n    ajv.addSchema(extraSchemas, undefined, undefined, true);\n  }\n  const compiled = ajv.compile(schema);\n\n  if (!disableCache) {\n    compiledSchemaCache.set(cacheKey, compiled);\n  }\n\n  return compiled;\n}\n\n// Find refs in the given schema and recursively in all known schemas it\n// targets, collecting that list of schemas as we go\nfunction getExtraSchemas(schema: Schema): Schema[] {\n  if (typeof schema !== 'object') {\n    return [];\n  }\n\n  const seen = new Set<string>();\n  if (schema.$id) {\n    seen.add(schema.$id);\n  }\n\n  const selected = new Array<Schema>();\n\n  const todo: Schema[] = [schema];\n  while (todo.length) {\n    const current = todo.pop()!;\n\n    for (const ref of getAllRefs(current)) {\n      if (!seen.has(ref)) {\n        seen.add(ref);\n\n        const match = refDependencyCandidates.find(c => c.$id === ref);\n        if (match) {\n          selected.push(match);\n          todo.push(match);\n        }\n      }\n    }\n  }\n\n  return selected;\n}\n\n// Naively step through the entire schema looking for \"$ref\": \"x\" pairs. The\n// resulting iterator may contain duplicates. Ignores fragments, i.e. for a ref\n// of \"a#b\", it will just yield \"a\".\nfunction* getAllRefs(schema: Schema): Iterable<string> {\n  const todo: any[] = [schema];\n  while (todo.length) {\n    const current = todo.pop()!;\n    if (typeof current === 'object' && current) {\n      for (const [key, value] of Object.entries(current)) {\n        if (key === '$ref' && typeof value === 'string') {\n          yield value.split('#')[0];\n        } else {\n          todo.push(value);\n        }\n      }\n    }\n  }\n}\n"],"names":["entityEnvelopeSchema","entitySchema","entityMetaSchema","commonSchema","Ajv"],"mappings":"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"}