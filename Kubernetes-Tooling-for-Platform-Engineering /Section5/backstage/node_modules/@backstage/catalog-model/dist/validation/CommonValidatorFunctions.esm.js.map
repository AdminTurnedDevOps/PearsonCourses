{"version":3,"file":"CommonValidatorFunctions.esm.js","sources":["../../src/validation/CommonValidatorFunctions.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport lodash from 'lodash';\n\n/**\n * Contains various helper validation and normalization functions that can be\n * composed to form a Validator.\n *\n * @public\n */\nexport class CommonValidatorFunctions {\n  /**\n   * Checks that the value is on the form `<suffix>` or `<prefix><separator><suffix>`, and validates\n   * those parts separately.\n   *\n   * @param value - The value to check\n   * @param separator - The separator between parts\n   * @param isValidPrefix - Checks that the part before the separator is valid, if present\n   * @param isValidSuffix - Checks that the part after the separator (or the entire value if there is no separator) is valid\n   */\n  static isValidPrefixAndOrSuffix(\n    value: unknown,\n    separator: string,\n    isValidPrefix: (value: string) => boolean,\n    isValidSuffix: (value: string) => boolean,\n  ): boolean {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    const parts = value.split(separator);\n    if (parts.length === 1) {\n      return isValidSuffix(parts[0]);\n    } else if (parts.length === 2) {\n      return isValidPrefix(parts[0]) && isValidSuffix(parts[1]);\n    }\n\n    return false;\n  }\n\n  /**\n   * Checks that the value can be safely transferred as JSON.\n   *\n   * @param value - The value to check\n   */\n  static isJsonSafe(value: unknown): boolean {\n    try {\n      return lodash.isEqual(value, JSON.parse(JSON.stringify(value)));\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Checks that the value is a valid DNS subdomain name.\n   *\n   * @param value - The value to check\n   * @see https://tools.ietf.org/html/rfc1123\n   */\n  static isValidDnsSubdomain(value: unknown): boolean {\n    return (\n      typeof value === 'string' &&\n      value.length >= 1 &&\n      value.length <= 253 &&\n      value.split('.').every(CommonValidatorFunctions.isValidDnsLabel)\n    );\n  }\n\n  /**\n   * Checks that the value is a valid DNS label.\n   *\n   * @param value - The value to check\n   * @see https://tools.ietf.org/html/rfc1123\n   */\n  static isValidDnsLabel(value: unknown): boolean {\n    return (\n      typeof value === 'string' &&\n      value.length >= 1 &&\n      value.length <= 63 &&\n      /^[a-z0-9]+(?:\\-+[a-z0-9]+)*$/.test(value)\n    );\n  }\n\n  /**\n   * Checks that the value is a valid tag.\n   *\n   * @deprecated This will be removed in a future release\n   * @param value - The value to check\n   */\n  static isValidTag(value: unknown): boolean {\n    return (\n      typeof value === 'string' &&\n      value.length >= 1 &&\n      value.length <= 63 &&\n      /^[a-z0-9+#]+(\\-[a-z0-9+#]+)*$/.test(value)\n    );\n  }\n\n  /**\n   * Checks that the value is a valid string URL.\n   *\n   * @param value - The value to check\n   */\n  static isValidUrl(value: unknown): boolean {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    try {\n      // eslint-disable-next-line no-new\n      new URL(value);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Checks that the value is a non empty string value.\n   *\n   * @deprecated use isNonEmptyString instead\n   * @param value - The value to check\n   */\n  static isValidString(value: unknown): boolean {\n    return typeof value === 'string' && value?.trim()?.length >= 1;\n  }\n\n  /**\n   * Checks that the value is a string value that's not empty.\n   *\n   * @param value - The value to check\n   */\n  static isNonEmptyString(value: unknown): value is string {\n    return typeof value === 'string' && value?.trim()?.length >= 1;\n  }\n}\n"],"names":[],"mappings":";;AAwBO,MAAM,wBAAyB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUpC,OAAO,wBAAA,CACL,KACA,EAAA,SAAA,EACA,eACA,aACS,EAAA;AACT,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAO,OAAA,KAAA;AAAA;AAGT,IAAM,MAAA,KAAA,GAAQ,KAAM,CAAA,KAAA,CAAM,SAAS,CAAA;AACnC,IAAI,IAAA,KAAA,CAAM,WAAW,CAAG,EAAA;AACtB,MAAO,OAAA,aAAA,CAAc,KAAM,CAAA,CAAC,CAAC,CAAA;AAAA,KAC/B,MAAA,IAAW,KAAM,CAAA,MAAA,KAAW,CAAG,EAAA;AAC7B,MAAO,OAAA,aAAA,CAAc,MAAM,CAAC,CAAC,KAAK,aAAc,CAAA,KAAA,CAAM,CAAC,CAAC,CAAA;AAAA;AAG1D,IAAO,OAAA,KAAA;AAAA;AACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,WAAW,KAAyB,EAAA;AACzC,IAAI,IAAA;AACF,MAAO,OAAA,MAAA,CAAO,QAAQ,KAAO,EAAA,IAAA,CAAK,MAAM,IAAK,CAAA,SAAA,CAAU,KAAK,CAAC,CAAC,CAAA;AAAA,KACxD,CAAA,MAAA;AACN,MAAO,OAAA,KAAA;AAAA;AACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,oBAAoB,KAAyB,EAAA;AAClD,IAAA,OACE,OAAO,KAAA,KAAU,QACjB,IAAA,KAAA,CAAM,UAAU,CAChB,IAAA,KAAA,CAAM,MAAU,IAAA,GAAA,IAChB,MAAM,KAAM,CAAA,GAAG,CAAE,CAAA,KAAA,CAAM,yBAAyB,eAAe,CAAA;AAAA;AAEnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,gBAAgB,KAAyB,EAAA;AAC9C,IACE,OAAA,OAAO,KAAU,KAAA,QAAA,IACjB,KAAM,CAAA,MAAA,IAAU,CAChB,IAAA,KAAA,CAAM,MAAU,IAAA,EAAA,IAChB,8BAA+B,CAAA,IAAA,CAAK,KAAK,CAAA;AAAA;AAE7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,KAAyB,EAAA;AACzC,IACE,OAAA,OAAO,KAAU,KAAA,QAAA,IACjB,KAAM,CAAA,MAAA,IAAU,CAChB,IAAA,KAAA,CAAM,MAAU,IAAA,EAAA,IAChB,+BAAgC,CAAA,IAAA,CAAK,KAAK,CAAA;AAAA;AAE9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,WAAW,KAAyB,EAAA;AACzC,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAO,OAAA,KAAA;AAAA;AAGT,IAAI,IAAA;AAEF,MAAA,IAAI,IAAI,KAAK,CAAA;AACb,MAAO,OAAA,IAAA;AAAA,KACD,CAAA,MAAA;AACN,MAAO,OAAA,KAAA;AAAA;AACT;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,cAAc,KAAyB,EAAA;AAC5C,IAAA,OAAO,OAAO,KAAU,KAAA,QAAA,IAAY,KAAO,EAAA,IAAA,IAAQ,MAAU,IAAA,CAAA;AAAA;AAC/D;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,iBAAiB,KAAiC,EAAA;AACvD,IAAA,OAAO,OAAO,KAAU,KAAA,QAAA,IAAY,KAAO,EAAA,IAAA,IAAQ,MAAU,IAAA,CAAA;AAAA;AAEjE;;;;"}