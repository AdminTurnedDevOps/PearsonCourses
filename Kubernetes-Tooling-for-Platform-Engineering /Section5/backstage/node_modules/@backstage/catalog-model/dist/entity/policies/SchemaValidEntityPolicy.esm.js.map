{"version":3,"file":"SchemaValidEntityPolicy.esm.js","sources":["../../../src/entity/policies/SchemaValidEntityPolicy.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Ajv, { ValidateFunction } from 'ajv';\nimport entitySchema from '../../schema/Entity.schema.json';\nimport entityMetaSchema from '../../schema/EntityMeta.schema.json';\nimport commonSchema from '../../schema/shared/common.schema.json';\nimport { Entity } from '../Entity';\nimport { EntityPolicy } from './types';\n\n/**\n * Ensures that the entity spec is valid according to a schema.\n *\n * @remarks\n *\n * This should be the first policy in the list, to ensure that other downstream\n * policies can work with a structure that is at least valid in therms of the\n * typescript type.\n *\n * @public\n */\nexport class SchemaValidEntityPolicy implements EntityPolicy {\n  private validate: ValidateFunction<Entity> | undefined;\n\n  async enforce(entity: Entity): Promise<Entity> {\n    if (!this.validate) {\n      const ajv = new Ajv({ allowUnionTypes: true });\n      this.validate = ajv\n        .addSchema([commonSchema, entityMetaSchema], undefined, undefined, true)\n        .compile<Entity>(entitySchema);\n    }\n\n    const result = this.validate(entity);\n    if (result === true) {\n      return entity;\n    }\n\n    const [error] = this.validate.errors || [];\n    if (!error) {\n      throw new Error(`Malformed envelope, Unknown error`);\n    }\n\n    throw new Error(\n      `Malformed envelope, ${error.instancePath || '<root>'} ${error.message}`,\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAkCO,MAAM,uBAAgD,CAAA;AAAA,EACnD,QAAA;AAAA,EAER,MAAM,QAAQ,MAAiC,EAAA;AAC7C,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAA,MAAM,MAAM,IAAI,GAAA,CAAI,EAAE,eAAA,EAAiB,MAAM,CAAA;AAC7C,MAAA,IAAA,CAAK,QAAW,GAAA,GAAA,CACb,SAAU,CAAA,CAAC,YAAc,EAAA,gBAAgB,CAAG,EAAA,KAAA,CAAA,EAAW,KAAW,CAAA,EAAA,IAAI,CACtE,CAAA,OAAA,CAAgB,YAAY,CAAA;AAAA;AAGjC,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,QAAA,CAAS,MAAM,CAAA;AACnC,IAAA,IAAI,WAAW,IAAM,EAAA;AACnB,MAAO,OAAA,MAAA;AAAA;AAGT,IAAA,MAAM,CAAC,KAAK,CAAA,GAAI,IAAK,CAAA,QAAA,CAAS,UAAU,EAAC;AACzC,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAM,MAAA,IAAI,MAAM,CAAmC,iCAAA,CAAA,CAAA;AAAA;AAGrD,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,uBAAuB,KAAM,CAAA,YAAA,IAAgB,QAAQ,CAAA,CAAA,EAAI,MAAM,OAAO,CAAA;AAAA,KACxE;AAAA;AAEJ;;;;"}