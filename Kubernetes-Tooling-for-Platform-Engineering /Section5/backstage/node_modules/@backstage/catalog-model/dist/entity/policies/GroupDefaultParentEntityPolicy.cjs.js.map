{"version":3,"file":"GroupDefaultParentEntityPolicy.cjs.js","sources":["../../../src/entity/policies/GroupDefaultParentEntityPolicy.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '../Entity';\nimport { GroupEntity } from '../../kinds';\nimport { EntityPolicy } from './types';\nimport { DEFAULT_NAMESPACE } from '../constants';\nimport { parseEntityRef, stringifyEntityRef } from '../ref';\n\n/**\n * DefaultParentPolicy is an EntityPolicy that updates group entities\n * with a parent of last resort. This ensures that, while we preserve\n * any existing group hierarchies, we can guarantee that there is a\n * single global root of the group hierarchy.\n *\n * @public\n */\nexport class GroupDefaultParentEntityPolicy implements EntityPolicy {\n  private readonly parentRef: string;\n\n  constructor(parentEntityRef: string) {\n    const { kind, namespace, name } = parseEntityRef(parentEntityRef, {\n      defaultKind: 'Group',\n      defaultNamespace: DEFAULT_NAMESPACE,\n    });\n\n    if (kind.toLocaleUpperCase('en-US') !== 'GROUP') {\n      throw new TypeError('group parent must be a group');\n    }\n\n    this.parentRef = stringifyEntityRef({\n      kind: kind,\n      namespace: namespace,\n      name: name,\n    });\n  }\n\n  async enforce(entity: Entity): Promise<Entity> {\n    if (entity.kind !== 'Group') {\n      return entity;\n    }\n\n    const group = entity as GroupEntity;\n    if (group.spec.parent) {\n      return group;\n    }\n\n    // Avoid making the parent entity it's own parent.\n    if (stringifyEntityRef(group) !== this.parentRef) {\n      group.spec.parent = this.parentRef;\n    }\n\n    return group;\n  }\n}\n"],"names":["parseEntityRef","DEFAULT_NAMESPACE","stringifyEntityRef"],"mappings":";;;;;AA8BO,MAAM,8BAAuD,CAAA;AAAA,EACjD,SAAA;AAAA,EAEjB,YAAY,eAAyB,EAAA;AACnC,IAAA,MAAM,EAAE,IAAM,EAAA,SAAA,EAAW,IAAK,EAAA,GAAIA,mBAAe,eAAiB,EAAA;AAAA,MAChE,WAAa,EAAA,OAAA;AAAA,MACb,gBAAkB,EAAAC;AAAA,KACnB,CAAA;AAED,IAAA,IAAI,IAAK,CAAA,iBAAA,CAAkB,OAAO,CAAA,KAAM,OAAS,EAAA;AAC/C,MAAM,MAAA,IAAI,UAAU,8BAA8B,CAAA;AAAA;AAGpD,IAAA,IAAA,CAAK,YAAYC,sBAAmB,CAAA;AAAA,MAClC,IAAA;AAAA,MACA,SAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA;AACH,EAEA,MAAM,QAAQ,MAAiC,EAAA;AAC7C,IAAI,IAAA,MAAA,CAAO,SAAS,OAAS,EAAA;AAC3B,MAAO,OAAA,MAAA;AAAA;AAGT,IAAA,MAAM,KAAQ,GAAA,MAAA;AACd,IAAI,IAAA,KAAA,CAAM,KAAK,MAAQ,EAAA;AACrB,MAAO,OAAA,KAAA;AAAA;AAIT,IAAA,IAAIA,sBAAmB,CAAA,KAAK,CAAM,KAAA,IAAA,CAAK,SAAW,EAAA;AAChD,MAAM,KAAA,CAAA,IAAA,CAAK,SAAS,IAAK,CAAA,SAAA;AAAA;AAG3B,IAAO,OAAA,KAAA;AAAA;AAEX;;;;"}