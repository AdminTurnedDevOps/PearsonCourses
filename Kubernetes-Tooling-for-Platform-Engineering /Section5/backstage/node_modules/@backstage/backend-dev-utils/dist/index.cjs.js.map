{"version":3,"file":"index.cjs.js","sources":["../src/ipcClient.ts","../src/DevDataStore.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ntype SendMessage = Exclude<typeof process.send, undefined>;\n\ninterface Request {\n  id: number;\n  method: string;\n  body: unknown;\n  type: string;\n}\n\ntype Response =\n  | {\n      type: string;\n      id: number;\n      body: unknown;\n    }\n  | {\n      type: string;\n      id: number;\n      error: Error;\n    };\n\ntype ResponseHandler = (response: Response) => void;\n\nconst requestType = '@backstage/cli/channel/request';\nconst responseType = '@backstage/cli/channel/response';\n\nconst IPC_TIMEOUT_MS = 5000;\n\n/**\n * The client side of an IPC communication channel.\n *\n * @internal\n */\nexport class BackstageIpcClient {\n  #messageId = 0;\n  #sendMessage: SendMessage;\n  #handlers: Map<number, ResponseHandler> = new Map();\n\n  /**\n   * Creates a new client if we're in a child process with IPC and BACKSTAGE_CLI_CHANNEL is set.\n   */\n  static create(): BackstageIpcClient | undefined {\n    const sendMessage = process.send?.bind(process);\n    const client =\n      sendMessage && process.env.BACKSTAGE_CLI_CHANNEL\n        ? new BackstageIpcClient(sendMessage)\n        : undefined;\n\n    if (client) {\n      process.on('message', (message, _sendHandle) =>\n        client.handleMessage(message, _sendHandle),\n      );\n    }\n\n    return client;\n  }\n\n  constructor(sendMessage: SendMessage) {\n    this.#sendMessage = sendMessage;\n  }\n\n  private handleMessage(message: unknown, _sendHandle: unknown) {\n    const isResponse = (msg: unknown): msg is Response =>\n      (msg as Response)?.type === responseType;\n\n    if (isResponse(message)) {\n      this.#handlers.get(message.id)?.(message);\n    }\n  }\n\n  /**\n   * Send a request to the parent process and wait for a response.\n   */\n  async request<TRequestBody, TResponseBody>(\n    method: string,\n    body: TRequestBody,\n  ): Promise<TResponseBody> {\n    return new Promise((resolve, reject) => {\n      const id = this.#messageId++;\n\n      const request: Request = {\n        type: requestType,\n        id,\n        method,\n        body,\n      };\n\n      let timeout: NodeJS.Timeout | undefined = undefined;\n\n      const responseHandler: ResponseHandler = (response: Response) => {\n        clearTimeout(timeout);\n        timeout = undefined;\n        this.#handlers.delete(id);\n\n        if ('error' in response) {\n          const error = new Error(response.error.message);\n          if (response.error.name) {\n            error.name = response.error.name;\n          }\n          reject(error);\n        } else {\n          resolve(response.body as TResponseBody);\n        }\n      };\n\n      timeout = setTimeout(() => {\n        reject(new Error(`IPC request '${method}' with ID ${id} timed out`));\n        this.#handlers.delete(id);\n      }, IPC_TIMEOUT_MS);\n      timeout.unref();\n\n      this.#handlers.set(id, responseHandler);\n      this.#sendMessage(request, (e: Error) => {\n        if (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n}\n\nexport const ipcClient = BackstageIpcClient.create();\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BackstageIpcClient, ipcClient } from './ipcClient';\n\ninterface SaveRequest {\n  key: string;\n  data: unknown;\n}\n\ninterface SaveResponse {\n  saved: boolean;\n}\n\ninterface LoadRequest {\n  key: string;\n}\n\ninterface LoadResponse {\n  loaded: boolean;\n  data: unknown;\n}\n\n/**\n * A data store that can be used to store temporary data during development.\n *\n * @public\n */\nexport class DevDataStore {\n  static #instance?: DevDataStore;\n\n  /**\n   * Tries to acquire a DevDataStore instance. This will only succeed when the backend\n   * process is being run through the `@backstage/cli` in development mode.\n   *\n   * @returns A DevDataStore instance, or undefined if not available.\n   */\n  static get(): DevDataStore | undefined {\n    if (ipcClient) {\n      if (!this.#instance) {\n        this.#instance = new DevDataStore(ipcClient);\n      }\n      return this.#instance;\n    }\n    return undefined;\n  }\n\n  /** @internal */\n  static forTest(client: Pick<BackstageIpcClient, 'request'>): DevDataStore {\n    return new DevDataStore(client as BackstageIpcClient);\n  }\n\n  #client: BackstageIpcClient;\n\n  private constructor(client: BackstageIpcClient) {\n    this.#client = client;\n  }\n\n  /**\n   * Save data to the data store.\n   *\n   * @param key - The key used to identify the data.\n   * @param data - The data to save. The data will be serialized using advanced IPC serialization.\n   * @returns A promise that resolves to a result object that indicates whether the data was saved.\n   */\n  async save<T>(key: string, data: T): Promise<{ saved: boolean }> {\n    return this.#client.request<SaveRequest, SaveResponse>(\n      'DevDataStore.save',\n      { key, data },\n    );\n  }\n\n  /**\n   * Loads data from the data store.\n   *\n   * @param key - The key used to identify the data.\n   * @returns A promise that resolves to a result object that indicates whether the data was loaded, as well as the data.\n   */\n  async load<T>(key: string): Promise<{ loaded: boolean; data: T }> {\n    const result = await this.#client.request<LoadRequest, LoadResponse>(\n      'DevDataStore.load',\n      { key },\n    );\n    return result as { loaded: boolean; data: T };\n  }\n}\n"],"names":[],"mappings":"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"}