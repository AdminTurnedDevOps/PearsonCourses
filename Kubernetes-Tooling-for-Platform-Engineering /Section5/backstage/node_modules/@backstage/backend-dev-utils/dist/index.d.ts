/**
 * A data store that can be used to store temporary data during development.
 *
 * @public
 */
declare class DevDataStore {
    #private;
    /**
     * Tries to acquire a DevDataStore instance. This will only succeed when the backend
     * process is being run through the `@backstage/cli` in development mode.
     *
     * @returns A DevDataStore instance, or undefined if not available.
     */
    static get(): DevDataStore | undefined;
    private constructor();
    /**
     * Save data to the data store.
     *
     * @param key - The key used to identify the data.
     * @param data - The data to save. The data will be serialized using advanced IPC serialization.
     * @returns A promise that resolves to a result object that indicates whether the data was saved.
     */
    save<T>(key: string, data: T): Promise<{
        saved: boolean;
    }>;
    /**
     * Loads data from the data store.
     *
     * @param key - The key used to identify the data.
     * @returns A promise that resolves to a result object that indicates whether the data was loaded, as well as the data.
     */
    load<T>(key: string): Promise<{
        loaded: boolean;
        data: T;
    }>;
}

export { DevDataStore };
