{"version":3,"file":"EntityListDocsGrid.esm.js","sources":["../../../../src/home/components/Grids/EntityListDocsGrid.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DocsCardGrid } from './DocsCardGrid';\nimport { Entity } from '@backstage/catalog-model';\nimport {\n  CodeSnippet,\n  Content,\n  ContentHeader,\n  Link,\n  Progress,\n  WarningPanel,\n} from '@backstage/core-components';\nimport {\n  useEntityList,\n  useEntityOwnership,\n} from '@backstage/plugin-catalog-react';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\n\n/**\n * Props for {@link EntityListDocsGrid}\n *\n * @public\n */\nexport type DocsGroupConfig = {\n  title: React.ReactNode;\n  filterPredicate: ((entity: Entity) => boolean) | string;\n};\n\n/**\n * Props for {@link EntityListDocsGrid}\n *\n * @public\n */\nexport type EntityListDocsGridPageProps = {\n  groups?: DocsGroupConfig[];\n};\n\nconst allEntitiesGroup: DocsGroupConfig = {\n  title: 'All Documentation',\n  filterPredicate: () => true,\n};\n\nconst EntityListDocsGridGroup = (props: {\n  group: DocsGroupConfig;\n  entities: Entity[];\n}) => {\n  const { entities, group } = props;\n  const { loading: loadingOwnership, isOwnedEntity } = useEntityOwnership();\n\n  const shownEntities = entities.filter(entity => {\n    if (group.filterPredicate === 'ownedByUser') {\n      if (loadingOwnership) {\n        return false;\n      }\n      return isOwnedEntity(entity);\n    }\n\n    return (\n      typeof group.filterPredicate === 'function' &&\n      group.filterPredicate(entity)\n    );\n  });\n\n  const titleComponent: React.ReactNode = (() => {\n    return typeof group.title === 'string' ? (\n      <ContentHeader title={group.title} />\n    ) : (\n      group.title\n    );\n  })();\n\n  if (shownEntities.length === 0) {\n    return null;\n  }\n\n  return (\n    <Content>\n      {titleComponent}\n      <DocsCardGrid entities={shownEntities} />\n    </Content>\n  );\n};\n\n/**\n * Component responsible to get entities from entity list context and pass down to DocsCardGrid\n *\n * @public\n */\nexport const EntityListDocsGrid = (props: EntityListDocsGridPageProps) => {\n  const { loading, error, entities } = useEntityList();\n\n  if (error) {\n    return (\n      <WarningPanel\n        severity=\"error\"\n        title=\"Could not load available documentation.\"\n      >\n        <CodeSnippet language=\"text\" text={error.toString()} />\n      </WarningPanel>\n    );\n  }\n\n  if (loading) {\n    return <Progress />;\n  }\n\n  if (entities.length === 0) {\n    return (\n      <div data-testid=\"doc-not-found\">\n        <Typography variant=\"body2\">\n          No documentation found that match your filter. Learn more about{' '}\n          <Link to=\"https://backstage.io/docs/features/techdocs/creating-and-publishing\">\n            publishing documentation\n          </Link>\n          .\n        </Typography>\n      </div>\n    );\n  }\n\n  entities.sort((a, b) =>\n    (a.metadata.title ?? a.metadata.name).localeCompare(\n      b.metadata.title ?? b.metadata.name,\n    ),\n  );\n\n  return (\n    <Content>\n      {(props.groups || [allEntitiesGroup]).map((group, index: number) => (\n        <EntityListDocsGridGroup\n          entities={entities}\n          group={group}\n          key={`${group.title}-${index}`}\n        />\n      ))}\n    </Content>\n  );\n};\n"],"names":[],"mappings":";;;;;;AAoDA,MAAM,gBAAoC,GAAA;AAAA,EACxC,KAAO,EAAA,mBAAA;AAAA,EACP,iBAAiB,MAAM;AACzB,CAAA;AAEA,MAAM,uBAAA,GAA0B,CAAC,KAG3B,KAAA;AACJ,EAAM,MAAA,EAAE,QAAU,EAAA,KAAA,EAAU,GAAA,KAAA;AAC5B,EAAA,MAAM,EAAE,OAAA,EAAS,gBAAkB,EAAA,aAAA,KAAkB,kBAAmB,EAAA;AAExE,EAAM,MAAA,aAAA,GAAgB,QAAS,CAAA,MAAA,CAAO,CAAU,MAAA,KAAA;AAC9C,IAAI,IAAA,KAAA,CAAM,oBAAoB,aAAe,EAAA;AAC3C,MAAA,IAAI,gBAAkB,EAAA;AACpB,QAAO,OAAA,KAAA;AAAA;AAET,MAAA,OAAO,cAAc,MAAM,CAAA;AAAA;AAG7B,IAAA,OACE,OAAO,KAAM,CAAA,eAAA,KAAoB,UACjC,IAAA,KAAA,CAAM,gBAAgB,MAAM,CAAA;AAAA,GAE/B,CAAA;AAED,EAAA,MAAM,kBAAmC,MAAM;AAC7C,IAAO,OAAA,OAAO,KAAM,CAAA,KAAA,KAAU,QAC5B,mBAAA,KAAA,CAAA,aAAA,CAAC,iBAAc,KAAO,EAAA,KAAA,CAAM,KAAO,EAAA,CAAA,GAEnC,KAAM,CAAA,KAAA;AAAA,GAEP,GAAA;AAEH,EAAI,IAAA,aAAA,CAAc,WAAW,CAAG,EAAA;AAC9B,IAAO,OAAA,IAAA;AAAA;AAGT,EAAA,2CACG,OACE,EAAA,IAAA,EAAA,cAAA,sCACA,YAAa,EAAA,EAAA,QAAA,EAAU,eAAe,CACzC,CAAA;AAEJ,CAAA;AAOa,MAAA,kBAAA,GAAqB,CAAC,KAAuC,KAAA;AACxE,EAAA,MAAM,EAAE,OAAA,EAAS,KAAO,EAAA,QAAA,KAAa,aAAc,EAAA;AAEnD,EAAA,IAAI,KAAO,EAAA;AACT,IACE,uBAAA,KAAA,CAAA,aAAA;AAAA,MAAC,YAAA;AAAA,MAAA;AAAA,QACC,QAAS,EAAA,OAAA;AAAA,QACT,KAAM,EAAA;AAAA,OAAA;AAAA,0CAEL,WAAY,EAAA,EAAA,QAAA,EAAS,QAAO,IAAM,EAAA,KAAA,CAAM,UAAY,EAAA;AAAA,KACvD;AAAA;AAIJ,EAAA,IAAI,OAAS,EAAA;AACX,IAAA,2CAAQ,QAAS,EAAA,IAAA,CAAA;AAAA;AAGnB,EAAI,IAAA,QAAA,CAAS,WAAW,CAAG,EAAA;AACzB,IAAA,2CACG,KAAI,EAAA,EAAA,aAAA,EAAY,eACf,EAAA,kBAAA,KAAA,CAAA,aAAA,CAAC,cAAW,OAAQ,EAAA,OAAA,EAAA,EAAQ,iEACsC,EAAA,GAAA,sCAC/D,IAAK,EAAA,EAAA,EAAA,EAAG,yEAAsE,0BAE/E,CAAA,EAAO,GAET,CACF,CAAA;AAAA;AAIJ,EAAS,QAAA,CAAA,IAAA;AAAA,IAAK,CAAC,GAAG,CACf,KAAA,CAAA,CAAA,CAAE,SAAS,KAAS,IAAA,CAAA,CAAE,SAAS,IAAM,EAAA,aAAA;AAAA,MACpC,CAAE,CAAA,QAAA,CAAS,KAAS,IAAA,CAAA,CAAE,QAAS,CAAA;AAAA;AACjC,GACF;AAEA,EACE,uBAAA,KAAA,CAAA,aAAA,CAAC,OACG,EAAA,IAAA,EAAA,CAAA,KAAA,CAAM,MAAU,IAAA,CAAC,gBAAgB,CAAG,EAAA,GAAA,CAAI,CAAC,KAAA,EAAO,KAChD,qBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,uBAAA;AAAA,IAAA;AAAA,MACC,QAAA;AAAA,MACA,KAAA;AAAA,MACA,GAAK,EAAA,CAAA,EAAG,KAAM,CAAA,KAAK,IAAI,KAAK,CAAA;AAAA;AAAA,GAE/B,CACH,CAAA;AAEJ;;;;"}