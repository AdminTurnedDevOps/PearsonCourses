import React from 'react';
import useCopyToClipboard from 'react-use/esm/useCopyToClipboard';
import { capitalize } from 'lodash';
import { WarningPanel, CodeSnippet } from '@backstage/core-components';
import { useRouteRef, useApi, configApiRef } from '@backstage/core-plugin-api';
import { useEntityList, useStarredEntities } from '@backstage/plugin-catalog-react';
import { DocsTable } from './DocsTable.esm.js';
import { OffsetPaginatedDocsTable } from './OffsetPaginatedDocsTable.esm.js';
import { CursorPaginatedDocsTable } from './CursorPaginatedDocsTable.esm.js';
import { actionFactories } from './actions.esm.js';
import { defaultColumns, columnFactories } from './columns.esm.js';
import { rootDocsRouteRef } from '../../../routes.esm.js';
import { entitiesToDocsMapper } from './helpers.esm.js';

const EntityListDocsTable = (props) => {
  const { columns, actions, options } = props;
  const { loading, error, entities, filters, paginationMode, pageInfo } = useEntityList();
  const { isStarredEntity, toggleStarredEntity } = useStarredEntities();
  const [, copyToClipboard] = useCopyToClipboard();
  const getRouteToReaderPageFor = useRouteRef(rootDocsRouteRef);
  const config = useApi(configApiRef);
  const title = capitalize(filters.user?.value ?? "all");
  const defaultActions = [
    actionFactories.createCopyDocsUrlAction(copyToClipboard),
    actionFactories.createStarEntityAction(
      isStarredEntity,
      toggleStarredEntity
    )
  ];
  const documents = entitiesToDocsMapper(
    entities,
    getRouteToReaderPageFor,
    config
  );
  if (paginationMode === "cursor") {
    return /* @__PURE__ */ React.createElement(
      CursorPaginatedDocsTable,
      {
        columns: columns || defaultColumns,
        isLoading: loading,
        title,
        actions: actions || defaultActions,
        options,
        data: documents,
        next: pageInfo?.next,
        prev: pageInfo?.prev
      }
    );
  } else if (paginationMode === "offset") {
    return /* @__PURE__ */ React.createElement(
      OffsetPaginatedDocsTable,
      {
        columns: columns || defaultColumns,
        isLoading: loading,
        title,
        actions: actions || defaultActions,
        options,
        data: documents
      }
    );
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(
      WarningPanel,
      {
        severity: "error",
        title: "Could not load available documentation."
      },
      /* @__PURE__ */ React.createElement(CodeSnippet, { language: "text", text: error.toString() })
    );
  }
  return /* @__PURE__ */ React.createElement(
    DocsTable,
    {
      title,
      entities,
      loading,
      actions: actions || defaultActions,
      columns,
      options
    }
  );
};
EntityListDocsTable.columns = columnFactories;
EntityListDocsTable.actions = actionFactories;

export { EntityListDocsTable };
//# sourceMappingURL=EntityListDocsTable.esm.js.map
