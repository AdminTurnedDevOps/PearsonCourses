import React from 'react';
import { Routes, Route, useRoutes } from 'react-router-dom';
import { EntityPageDocs } from './EntityPageDocs.esm.js';
import { TechDocsIndexPage } from './home/components/TechDocsIndexPage.esm.js';
import { TechDocsReaderPage } from './reader/components/TechDocsReaderPage/TechDocsReaderPage.esm.js';
import { useEntity, MissingAnnotationEmptyState } from '@backstage/plugin-catalog-react';
import { TECHDOCS_ANNOTATION, TECHDOCS_EXTERNAL_ANNOTATION } from '@backstage/plugin-techdocs-common';

const isTechDocsAvailable = (entity) => Boolean(entity?.metadata?.annotations?.[TECHDOCS_ANNOTATION]) || Boolean(entity?.metadata?.annotations?.[TECHDOCS_EXTERNAL_ANNOTATION]);
const Router = () => {
  return /* @__PURE__ */ React.createElement(Routes, null, /* @__PURE__ */ React.createElement(Route, { path: "/", element: /* @__PURE__ */ React.createElement(TechDocsIndexPage, null) }), /* @__PURE__ */ React.createElement(
    Route,
    {
      path: "/:namespace/:kind/:name/*",
      element: /* @__PURE__ */ React.createElement(TechDocsReaderPage, null)
    }
  ));
};
const EmbeddedDocsRouter = (props) => {
  const { children, emptyState } = props;
  const { entity } = useEntity();
  const element = useRoutes([
    {
      path: "/*",
      element: /* @__PURE__ */ React.createElement(EntityPageDocs, { entity }),
      children: [
        {
          path: "*",
          element: children
        }
      ]
    }
  ]);
  const projectId = entity.metadata.annotations?.[TECHDOCS_ANNOTATION] || entity.metadata.annotations?.[TECHDOCS_EXTERNAL_ANNOTATION];
  if (!projectId) {
    return emptyState ?? /* @__PURE__ */ React.createElement(MissingAnnotationEmptyState, { annotation: [TECHDOCS_ANNOTATION] });
  }
  return element;
};
const LegacyEmbeddedDocsRouter = (props) => {
  return /* @__PURE__ */ React.createElement(EmbeddedDocsRouter, { children: props.children });
};

export { EmbeddedDocsRouter, LegacyEmbeddedDocsRouter, Router, isTechDocsAvailable };
//# sourceMappingURL=Router.esm.js.map
