import * as _backstage_catalog_model from '@backstage/catalog-model';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import * as _backstage_frontend_plugin_api from '@backstage/frontend-plugin-api';
import * as _backstage_plugin_search_react_alpha from '@backstage/plugin-search-react/alpha';
import React__default from 'react';

/** @alpha */
declare const techDocsSearchResultListItemExtension: _backstage_frontend_plugin_api.ExtensionDefinition<{
    config: {
        title: string | undefined;
        lineClamp: number;
        asLink: boolean;
        asListItem: boolean;
    } & {
        noTrack: boolean;
    };
    configInput: {
        title?: string | undefined;
        lineClamp?: number | undefined;
        asListItem?: boolean | undefined;
        asLink?: boolean | undefined;
    } & {
        noTrack?: boolean | undefined;
    };
    output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<{
        predicate?: _backstage_plugin_search_react_alpha.SearchResultItemExtensionPredicate | undefined;
        component: _backstage_plugin_search_react_alpha.SearchResultItemExtensionComponent;
    }, "search.search-result-list-item.item", {}>;
    inputs: {
        [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.AnyExtensionDataRef, {
            optional: boolean;
            singleton: boolean;
        }>;
    };
    kind: "search-result-list-item";
    name: undefined;
    params: _backstage_plugin_search_react_alpha.SearchResultListItemBlueprintParams;
}>;
/** @alpha */
declare const _default: _backstage_frontend_plugin_api.FrontendPlugin<{
    root: _backstage_frontend_plugin_api.RouteRef<undefined>;
    docRoot: _backstage_frontend_plugin_api.RouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }>;
    entityContent: _backstage_frontend_plugin_api.RouteRef<undefined>;
}, {}, {
    "page:techdocs": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "page";
        name: undefined;
        config: {
            path: string | undefined;
        };
        configInput: {
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<React__default.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }>;
        inputs: {};
        params: {
            defaultPath: string;
            loader: () => Promise<JSX.Element>;
            routeRef?: _backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams> | undefined;
        };
    }>;
    "nav-item:techdocs": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "nav-item";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<{
            title: string;
            icon: _backstage_core_plugin_api.IconComponent;
            routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
        }, "core.nav-item.target", {}>;
        inputs: {};
        params: {
            title: string;
            icon: _backstage_core_plugin_api.IconComponent;
            routeRef: _backstage_frontend_plugin_api.RouteRef<undefined>;
        };
    }>;
    "api:techdocs": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: undefined;
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: {
            factory: _backstage_frontend_plugin_api.AnyApiFactory;
        };
    }>;
    "api:techdocs/storage": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "api";
        name: "storage";
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.AnyApiFactory, "core.api.factory", {}>;
        inputs: {};
        params: {
            factory: _backstage_frontend_plugin_api.AnyApiFactory;
        };
    }>;
    "search-result-list-item:techdocs": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            title: string | undefined;
            lineClamp: number;
            asLink: boolean;
            asListItem: boolean;
        } & {
            noTrack: boolean;
        };
        configInput: {
            title?: string | undefined;
            lineClamp?: number | undefined;
            asListItem?: boolean | undefined;
            asLink?: boolean | undefined;
        } & {
            noTrack?: boolean | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<{
            predicate?: _backstage_plugin_search_react_alpha.SearchResultItemExtensionPredicate | undefined;
            component: _backstage_plugin_search_react_alpha.SearchResultItemExtensionComponent;
        }, "search.search-result-list-item.item", {}>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.AnyExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        kind: "search-result-list-item";
        name: undefined;
        params: _backstage_plugin_search_react_alpha.SearchResultListItemBlueprintParams;
    }>;
    "page:techdocs/reader": _backstage_frontend_plugin_api.ExtensionDefinition<{
        kind: "page";
        name: "reader";
        config: {
            path: string | undefined;
        };
        configInput: {
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<React__default.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }>;
        inputs: {};
        params: {
            defaultPath: string;
            loader: () => Promise<JSX.Element>;
            routeRef?: _backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams> | undefined;
        };
    }>;
    "entity-content:techdocs": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {
            path: string | undefined;
            title: string | undefined;
            filter: string | undefined;
        };
        configInput: {
            filter?: string | undefined;
            title?: string | undefined;
            path?: string | undefined;
        };
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<React__default.JSX.Element, "core.reactElement", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "core.routing.path", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<_backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams>, "core.routing.ref", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-content-title", {}> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<(entity: _backstage_catalog_model.Entity) => boolean, "catalog.entity-filter-function", {
            optional: true;
        }> | _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<string, "catalog.entity-filter-expression", {
            optional: true;
        }>;
        inputs: {
            emptyState: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.ConfigurableExtensionDataRef<React__default.JSX.Element, "core.reactElement", {
                optional: true;
            }>, {
                singleton: true;
                optional: true;
            }>;
        };
        kind: "entity-content";
        name: undefined;
        params: {
            loader: () => Promise<JSX.Element>;
            defaultPath: string;
            defaultTitle: string;
            routeRef?: _backstage_frontend_plugin_api.RouteRef<_backstage_frontend_plugin_api.AnyRouteRefParams> | undefined;
            filter?: string | ((entity: _backstage_catalog_model.Entity) => boolean) | undefined;
        };
    }>;
    "empty-state:techdocs/entity-content": _backstage_frontend_plugin_api.ExtensionDefinition<{
        config: {};
        configInput: {};
        output: _backstage_frontend_plugin_api.ConfigurableExtensionDataRef<React__default.JSX.Element, "core.reactElement", {
            optional: true;
        }>;
        inputs: {
            [x: string]: _backstage_frontend_plugin_api.ExtensionInput<_backstage_frontend_plugin_api.AnyExtensionDataRef, {
                optional: boolean;
                singleton: boolean;
            }>;
        };
        params: never;
        kind: "empty-state";
        name: "entity-content";
    }>;
}>;

export { _default as default, techDocsSearchResultListItemExtension };
