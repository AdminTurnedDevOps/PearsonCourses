{"version":3,"file":"client.esm.js","sources":["../src/client.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CompoundEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  DiscoveryApi,\n  FetchApi,\n  IdentityApi,\n} from '@backstage/core-plugin-api';\nimport { NotFoundError, ResponseError } from '@backstage/errors';\nimport {\n  SyncResult,\n  TechDocsApi,\n  TechDocsEntityMetadata,\n  TechDocsMetadata,\n  TechDocsStorageApi,\n} from '@backstage/plugin-techdocs-react';\nimport { fetchEventSource } from '@microsoft/fetch-event-source';\n\n/**\n * API to talk to `techdocs-backend`.\n *\n * @public\n */\nexport class TechDocsClient implements TechDocsApi {\n  public configApi: Config;\n  public discoveryApi: DiscoveryApi;\n  private fetchApi: FetchApi;\n\n  constructor(options: {\n    configApi: Config;\n    discoveryApi: DiscoveryApi;\n    fetchApi: FetchApi;\n  }) {\n    this.configApi = options.configApi;\n    this.discoveryApi = options.discoveryApi;\n    this.fetchApi = options.fetchApi;\n  }\n\n  public async getCookie(): Promise<{ expiresAt: string }> {\n    const apiOrigin = await this.getApiOrigin();\n    const requestUrl = `${apiOrigin}/cookie`;\n    const response = await this.fetchApi.fetch(`${requestUrl}`, {\n      credentials: 'include',\n    });\n    if (!response.ok) {\n      throw await ResponseError.fromResponse(response);\n    }\n    return await response.json();\n  }\n\n  async getApiOrigin(): Promise<string> {\n    return await this.discoveryApi.getBaseUrl('techdocs');\n  }\n\n  /**\n   * Retrieve TechDocs metadata.\n   *\n   * When docs are built, we generate a techdocs_metadata.json and store it along with the generated\n   * static files. It includes necessary data about the docs site. This method requests techdocs-backend\n   * which retrieves the TechDocs metadata.\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   */\n  async getTechDocsMetadata(\n    entityId: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const requestUrl = `${apiOrigin}/metadata/techdocs/${namespace}/${kind}/${name}`;\n    const request = await this.fetchApi.fetch(`${requestUrl}`);\n    if (!request.ok) {\n      throw await ResponseError.fromResponse(request);\n    }\n\n    return await request.json();\n  }\n\n  /**\n   * Retrieve metadata about an entity.\n   *\n   * This method requests techdocs-backend which uses the catalog APIs to respond with filtered\n   * information required here.\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   */\n  async getEntityMetadata(\n    entityId: CompoundEntityRef,\n  ): Promise<TechDocsEntityMetadata> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const requestUrl = `${apiOrigin}/metadata/entity/${namespace}/${kind}/${name}`;\n\n    const request = await this.fetchApi.fetch(`${requestUrl}`);\n    if (!request.ok) {\n      throw await ResponseError.fromResponse(request);\n    }\n\n    return await request.json();\n  }\n}\n\n/**\n * API which talks to TechDocs storage to fetch files to render.\n *\n * @public\n */\nexport class TechDocsStorageClient implements TechDocsStorageApi {\n  public configApi: Config;\n  public discoveryApi: DiscoveryApi;\n  private fetchApi: FetchApi;\n\n  constructor(options: {\n    configApi: Config;\n    discoveryApi: DiscoveryApi;\n    fetchApi: FetchApi;\n    /** @deprecated identityApi is not needed any more */\n    identityApi?: IdentityApi;\n  }) {\n    this.configApi = options.configApi;\n    this.discoveryApi = options.discoveryApi;\n    this.fetchApi = options.fetchApi;\n  }\n\n  async getApiOrigin(): Promise<string> {\n    return await this.discoveryApi.getBaseUrl('techdocs');\n  }\n\n  async getStorageUrl(): Promise<string> {\n    return (\n      this.configApi.getOptionalString('techdocs.storageUrl') ??\n      `${await this.discoveryApi.getBaseUrl('techdocs')}/static/docs`\n    );\n  }\n\n  async getBuilder(): Promise<string> {\n    return this.configApi.getOptionalString('techdocs.builder') || 'local';\n  }\n\n  /**\n   * Fetch HTML content as text for an individual docs page in an entity's docs site.\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   * @param path - The unique path to an individual docs page e.g. overview/what-is-new\n   * @returns HTML content of the docs page as string\n   * @throws Throws error when the page is not found.\n   */\n  async getEntityDocs(\n    entityId: CompoundEntityRef,\n    path: string,\n  ): Promise<string> {\n    const { kind, namespace, name } = entityId;\n\n    const storageUrl = await this.getStorageUrl();\n    const url = `${storageUrl}/${namespace}/${kind}/${name}/${path}`;\n\n    const request = await this.fetchApi.fetch(\n      `${url.endsWith('/') ? url : `${url}/`}index.html`,\n    );\n\n    let errorMessage = '';\n    switch (request.status) {\n      case 404:\n        errorMessage = 'Page not found. ';\n        // path is empty for the home page of an entity's docs site\n        if (!path) {\n          errorMessage +=\n            'This could be because there is no index.md file in the root of the docs directory of this repository.';\n        }\n        throw new NotFoundError(errorMessage);\n      case 500:\n        errorMessage =\n          'Could not generate documentation or an error in the TechDocs backend. ';\n        throw new Error(errorMessage);\n      default:\n        // Do nothing\n        break;\n    }\n\n    return request.text();\n  }\n\n  /**\n   * Check if docs are on the latest version and trigger rebuild if not\n   *\n   * @param entityId - Object containing entity data like name, namespace, etc.\n   * @param logHandler - Callback to receive log messages from the build process\n   * @returns Whether documents are currently synchronized to newest version\n   * @throws Throws error on error from sync endpoint in TechDocs Backend\n   */\n  async syncEntityDocs(\n    entityId: CompoundEntityRef,\n    logHandler: (line: string) => void = () => {},\n  ): Promise<SyncResult> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const url = `${apiOrigin}/sync/${namespace}/${kind}/${name}`;\n\n    return new Promise((resolve, reject) => {\n      const ctrl = new AbortController();\n      fetchEventSource(url, {\n        fetch: this.fetchApi.fetch,\n        signal: ctrl.signal,\n        onmessage(e: any) {\n          if (e.event === 'log') {\n            if (e.data) {\n              logHandler(JSON.parse(e.data));\n            }\n          } else if (e.event === 'finish') {\n            let updated: boolean = false;\n            if (e.data) {\n              ({ updated } = JSON.parse(e.data));\n            }\n            resolve(updated ? 'updated' : 'cached');\n          } else if (e.event === 'error') {\n            reject(new Error(e.data));\n          }\n        },\n        onerror(err) {\n          ctrl.abort();\n          reject(err);\n        },\n      });\n    });\n  }\n\n  async getBaseUrl(\n    oldBaseUrl: string,\n    entityId: CompoundEntityRef,\n    path: string,\n  ): Promise<string> {\n    const { kind, namespace, name } = entityId;\n\n    const apiOrigin = await this.getApiOrigin();\n    const newBaseUrl = `${apiOrigin}/static/docs/${namespace}/${kind}/${name}/${path}`;\n\n    return new URL(\n      oldBaseUrl,\n      newBaseUrl.endsWith('/') ? newBaseUrl : `${newBaseUrl}/`,\n    ).toString();\n  }\n}\n"],"names":[],"mappings":"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"}