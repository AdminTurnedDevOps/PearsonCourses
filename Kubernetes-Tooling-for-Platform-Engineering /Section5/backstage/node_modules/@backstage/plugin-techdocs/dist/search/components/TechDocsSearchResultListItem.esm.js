import React from 'react';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import { Link } from '@backstage/core-components';
import { HighlightedSearchResultText } from '@backstage/plugin-search-react';

const useStyles = makeStyles({
  flexContainer: {
    flexWrap: "wrap"
  },
  itemText: {
    width: "100%",
    marginBottom: "1rem"
  }
});
const TechDocsSearchResultListItem = (props) => {
  const {
    result,
    highlight,
    lineClamp = 5,
    asListItem = true,
    asLink = true,
    title,
    icon
  } = props;
  const classes = useStyles();
  const LinkWrapper = ({ children }) => asLink ? /* @__PURE__ */ React.createElement(Link, { noTrack: true, to: result.location }, children) : /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  const TextItem = () => {
    const resultTitle = highlight?.fields.title ? /* @__PURE__ */ React.createElement(
      HighlightedSearchResultText,
      {
        text: highlight.fields.title,
        preTag: highlight.preTag,
        postTag: highlight.postTag
      }
    ) : result.title;
    const entityTitle = highlight?.fields.entityTitle ? /* @__PURE__ */ React.createElement(
      HighlightedSearchResultText,
      {
        text: highlight.fields.entityTitle,
        preTag: highlight.preTag,
        postTag: highlight.postTag
      }
    ) : result.entityTitle;
    const resultName = highlight?.fields.name ? /* @__PURE__ */ React.createElement(
      HighlightedSearchResultText,
      {
        text: highlight.fields.name,
        preTag: highlight.preTag,
        postTag: highlight.postTag
      }
    ) : result.name;
    if (!result) return null;
    return /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        className: classes.itemText,
        primaryTypographyProps: { variant: "h6" },
        primary: /* @__PURE__ */ React.createElement(LinkWrapper, null, title ? title : /* @__PURE__ */ React.createElement(React.Fragment, null, resultTitle, " | ", entityTitle ?? resultName, " docs")),
        secondary: /* @__PURE__ */ React.createElement(
          Typography,
          {
            component: "span",
            style: {
              display: "-webkit-box",
              WebkitBoxOrient: "vertical",
              WebkitLineClamp: lineClamp,
              overflow: "hidden"
            },
            color: "textSecondary",
            variant: "body2"
          },
          highlight?.fields.text ? /* @__PURE__ */ React.createElement(
            HighlightedSearchResultText,
            {
              text: highlight.fields.text,
              preTag: highlight.preTag,
              postTag: highlight.postTag
            }
          ) : result.text
        )
      }
    );
  };
  const ListItemWrapper = ({ children }) => asListItem ? /* @__PURE__ */ React.createElement(React.Fragment, null, icon && /* @__PURE__ */ React.createElement(ListItemIcon, null, typeof icon === "function" ? icon(result) : icon), /* @__PURE__ */ React.createElement("div", { className: classes.flexContainer }, children)) : /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  return /* @__PURE__ */ React.createElement(ListItemWrapper, null, /* @__PURE__ */ React.createElement(TextItem, null));
};

export { TechDocsSearchResultListItem };
//# sourceMappingURL=TechDocsSearchResultListItem.esm.js.map
