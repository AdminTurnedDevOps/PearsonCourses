{"version":3,"file":"addBaseUrl.esm.js","sources":["../../../src/reader/transformers/addBaseUrl.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CompoundEntityRef } from '@backstage/catalog-model';\nimport { TechDocsStorageApi } from '../../api';\nimport type { Transformer } from './transformer';\n\ntype AddBaseUrlOptions = {\n  techdocsStorageApi: TechDocsStorageApi;\n  entityId: CompoundEntityRef;\n  path: string;\n};\n\n/**\n * TechDocs backend serves SVGs with text/plain content-type for security. This\n * helper determines if an SVG is being loaded from the backend, and thus needs\n * inlining to be displayed properly.\n */\nconst isSvgNeedingInlining = (\n  attrName: string,\n  attrVal: string,\n  apiOrigin: string,\n) => {\n  const isSrcToSvg = attrName === 'src' && attrVal.endsWith('.svg');\n  const isRelativeUrl = !attrVal.match(/^([a-z]*:)?\\/\\//i);\n  const pointsToOurBackend = attrVal.startsWith(apiOrigin);\n  return isSrcToSvg && (isRelativeUrl || pointsToOurBackend);\n};\n\nexport const addBaseUrl = ({\n  techdocsStorageApi,\n  entityId,\n  path,\n}: AddBaseUrlOptions): Transformer => {\n  return async dom => {\n    const apiOrigin = await techdocsStorageApi.getApiOrigin();\n\n    const updateDom = async <T extends Element>(\n      list: HTMLCollectionOf<T> | NodeListOf<T>,\n      attributeName: string,\n    ) => {\n      for (const elem of list) {\n        if (elem.hasAttribute(attributeName)) {\n          const elemAttribute = elem.getAttribute(attributeName);\n          if (!elemAttribute) return;\n\n          // Special handling for SVG images.\n          const newValue = await techdocsStorageApi.getBaseUrl(\n            elemAttribute,\n            entityId,\n            path,\n          );\n\n          if (isSvgNeedingInlining(attributeName, elemAttribute, apiOrigin)) {\n            try {\n              const svg = await fetch(newValue, { credentials: 'include' });\n              const svgContent = await svg.text();\n              elem.setAttribute(\n                attributeName,\n                `data:image/svg+xml;base64,${btoa(\n                  unescape(encodeURIComponent(svgContent)),\n                )}`,\n              );\n            } catch (e) {\n              elem.setAttribute('alt', `Error: ${elemAttribute}`);\n            }\n          } else {\n            elem.setAttribute(attributeName, newValue);\n          }\n        }\n      }\n    };\n\n    await Promise.all([\n      updateDom<HTMLImageElement>(dom.querySelectorAll('img'), 'src'),\n      updateDom<HTMLScriptElement>(dom.querySelectorAll('script'), 'src'),\n      updateDom<HTMLSourceElement>(dom.querySelectorAll('source'), 'src'),\n      updateDom<HTMLLinkElement>(dom.querySelectorAll('link'), 'href'),\n      updateDom<HTMLAnchorElement>(dom.querySelectorAll('a[download]'), 'href'),\n    ]);\n\n    return dom;\n  };\n};\n"],"names":[],"mappings":"AA8BA,MAAM,oBAAuB,GAAA,CAC3B,QACA,EAAA,OAAA,EACA,SACG,KAAA;AACH,EAAA,MAAM,UAAa,GAAA,QAAA,KAAa,KAAS,IAAA,OAAA,CAAQ,SAAS,MAAM,CAAA;AAChE,EAAA,MAAM,aAAgB,GAAA,CAAC,OAAQ,CAAA,KAAA,CAAM,kBAAkB,CAAA;AACvD,EAAM,MAAA,kBAAA,GAAqB,OAAQ,CAAA,UAAA,CAAW,SAAS,CAAA;AACvD,EAAA,OAAO,eAAe,aAAiB,IAAA,kBAAA,CAAA;AACzC,CAAA;AAEO,MAAM,aAAa,CAAC;AAAA,EACzB,kBAAA;AAAA,EACA,QAAA;AAAA,EACA;AACF,CAAsC,KAAA;AACpC,EAAA,OAAO,OAAM,GAAO,KAAA;AAClB,IAAM,MAAA,SAAA,GAAY,MAAM,kBAAA,CAAmB,YAAa,EAAA;AAExD,IAAM,MAAA,SAAA,GAAY,OAChB,IAAA,EACA,aACG,KAAA;AACH,MAAA,KAAA,MAAW,QAAQ,IAAM,EAAA;AACvB,QAAI,IAAA,IAAA,CAAK,YAAa,CAAA,aAAa,CAAG,EAAA;AACpC,UAAM,MAAA,aAAA,GAAgB,IAAK,CAAA,YAAA,CAAa,aAAa,CAAA;AACrD,UAAA,IAAI,CAAC,aAAe,EAAA;AAGpB,UAAM,MAAA,QAAA,GAAW,MAAM,kBAAmB,CAAA,UAAA;AAAA,YACxC,aAAA;AAAA,YACA,QAAA;AAAA,YACA;AAAA,WACF;AAEA,UAAA,IAAI,oBAAqB,CAAA,aAAA,EAAe,aAAe,EAAA,SAAS,CAAG,EAAA;AACjE,YAAI,IAAA;AACF,cAAA,MAAM,MAAM,MAAM,KAAA,CAAM,UAAU,EAAE,WAAA,EAAa,WAAW,CAAA;AAC5D,cAAM,MAAA,UAAA,GAAa,MAAM,GAAA,CAAI,IAAK,EAAA;AAClC,cAAK,IAAA,CAAA,YAAA;AAAA,gBACH,aAAA;AAAA,gBACA,CAA6B,0BAAA,EAAA,IAAA;AAAA,kBAC3B,QAAA,CAAS,kBAAmB,CAAA,UAAU,CAAC;AAAA,iBACxC,CAAA;AAAA,eACH;AAAA,qBACO,CAAG,EAAA;AACV,cAAA,IAAA,CAAK,YAAa,CAAA,KAAA,EAAO,CAAU,OAAA,EAAA,aAAa,CAAE,CAAA,CAAA;AAAA;AACpD,WACK,MAAA;AACL,YAAK,IAAA,CAAA,YAAA,CAAa,eAAe,QAAQ,CAAA;AAAA;AAC3C;AACF;AACF,KACF;AAEA,IAAA,MAAM,QAAQ,GAAI,CAAA;AAAA,MAChB,SAA4B,CAAA,GAAA,CAAI,gBAAiB,CAAA,KAAK,GAAG,KAAK,CAAA;AAAA,MAC9D,SAA6B,CAAA,GAAA,CAAI,gBAAiB,CAAA,QAAQ,GAAG,KAAK,CAAA;AAAA,MAClE,SAA6B,CAAA,GAAA,CAAI,gBAAiB,CAAA,QAAQ,GAAG,KAAK,CAAA;AAAA,MAClE,SAA2B,CAAA,GAAA,CAAI,gBAAiB,CAAA,MAAM,GAAG,MAAM,CAAA;AAAA,MAC/D,SAA6B,CAAA,GAAA,CAAI,gBAAiB,CAAA,aAAa,GAAG,MAAM;AAAA,KACzE,CAAA;AAED,IAAO,OAAA,GAAA;AAAA,GACT;AACF;;;;"}