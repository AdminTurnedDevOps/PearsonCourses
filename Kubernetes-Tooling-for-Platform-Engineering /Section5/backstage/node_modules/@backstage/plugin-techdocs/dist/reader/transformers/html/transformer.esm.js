import DOMPurify from 'dompurify';
import { useCallback, useMemo } from 'react';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import { removeUnsafeLinks } from './hooks/links.esm.js';
import { removeUnsafeIframes } from './hooks/iframes.esm.js';

const useSanitizerConfig = () => {
  const configApi = useApi(configApiRef);
  return useMemo(() => {
    return configApi.getOptionalConfig("techdocs.sanitizer");
  }, [configApi]);
};
const useSanitizerTransformer = () => {
  const config = useSanitizerConfig();
  return useCallback(
    async (dom) => {
      const hosts = config?.getOptionalStringArray("allowedIframeHosts");
      DOMPurify.addHook("beforeSanitizeElements", removeUnsafeLinks);
      const tags = ["link", "meta"];
      if (hosts) {
        tags.push("iframe");
        DOMPurify.addHook("beforeSanitizeElements", removeUnsafeIframes(hosts));
      }
      DOMPurify.addHook("uponSanitizeElement", (currNode, data) => {
        if (data.tagName === "meta") {
          const isMetaRefreshTag = currNode.getAttribute("http-equiv") === "refresh" && currNode.getAttribute("content")?.includes("url=");
          if (!isMetaRefreshTag) {
            currNode.parentNode?.removeChild(currNode);
          }
        }
      });
      DOMPurify.addHook("uponSanitizeAttribute", (currNode, data) => {
        if (currNode.tagName !== "meta") {
          if (data.attrName === "http-equiv" || data.attrName === "content") {
            currNode.removeAttribute(data.attrName);
          }
        }
      });
      const tagNameCheck = config?.getOptionalString(
        "allowedCustomElementTagNameRegExp"
      );
      const attributeNameCheck = config?.getOptionalString(
        "allowedCustomElementAttributeNameRegExp"
      );
      return DOMPurify.sanitize(dom.outerHTML, {
        ADD_TAGS: tags,
        FORBID_TAGS: ["style"],
        ADD_ATTR: ["http-equiv", "content"],
        WHOLE_DOCUMENT: true,
        RETURN_DOM: true,
        CUSTOM_ELEMENT_HANDLING: {
          tagNameCheck: tagNameCheck ? new RegExp(tagNameCheck) : void 0,
          attributeNameCheck: attributeNameCheck ? new RegExp(attributeNameCheck) : void 0
        }
      });
    },
    [config]
  );
};

export { useSanitizerTransformer };
//# sourceMappingURL=transformer.esm.js.map
