{"version":3,"file":"transformer.esm.js","sources":["../../../../src/reader/transformers/html/transformer.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DOMPurify from 'dompurify';\nimport { useCallback, useMemo } from 'react';\n\nimport { configApiRef, useApi } from '@backstage/core-plugin-api';\n\nimport { Transformer } from '../transformer';\nimport { removeUnsafeIframes, removeUnsafeLinks } from './hooks';\n\n/**\n * Returns html sanitizer configuration\n */\nconst useSanitizerConfig = () => {\n  const configApi = useApi(configApiRef);\n\n  return useMemo(() => {\n    return configApi.getOptionalConfig('techdocs.sanitizer');\n  }, [configApi]);\n};\n\n/**\n * Returns a transformer that sanitizes the dom\n */\nexport const useSanitizerTransformer = (): Transformer => {\n  const config = useSanitizerConfig();\n\n  return useCallback(\n    async (dom: Element) => {\n      const hosts = config?.getOptionalStringArray('allowedIframeHosts');\n\n      DOMPurify.addHook('beforeSanitizeElements', removeUnsafeLinks);\n      const tags = ['link', 'meta'];\n\n      if (hosts) {\n        tags.push('iframe');\n        DOMPurify.addHook('beforeSanitizeElements', removeUnsafeIframes(hosts));\n      }\n\n      // Only allow meta tags if they are used for refreshing the page. They are required for the redirect feature.\n      DOMPurify.addHook('uponSanitizeElement', (currNode, data) => {\n        if (data.tagName === 'meta') {\n          const isMetaRefreshTag =\n            currNode.getAttribute('http-equiv') === 'refresh' &&\n            currNode.getAttribute('content')?.includes('url=');\n          if (!isMetaRefreshTag) {\n            currNode.parentNode?.removeChild(currNode);\n          }\n        }\n      });\n\n      // Only allow http-equiv and content attributes on meta tags. They are required for the redirect feature.\n      DOMPurify.addHook('uponSanitizeAttribute', (currNode, data) => {\n        if (currNode.tagName !== 'meta') {\n          if (data.attrName === 'http-equiv' || data.attrName === 'content') {\n            currNode.removeAttribute(data.attrName);\n          }\n        }\n      });\n\n      const tagNameCheck = config?.getOptionalString(\n        'allowedCustomElementTagNameRegExp',\n      );\n      const attributeNameCheck = config?.getOptionalString(\n        'allowedCustomElementAttributeNameRegExp',\n      );\n\n      // using outerHTML as we want to preserve the html tag attributes (lang)\n      return DOMPurify.sanitize(dom.outerHTML, {\n        ADD_TAGS: tags,\n        FORBID_TAGS: ['style'],\n        ADD_ATTR: ['http-equiv', 'content'],\n        WHOLE_DOCUMENT: true,\n        RETURN_DOM: true,\n        CUSTOM_ELEMENT_HANDLING: {\n          tagNameCheck: tagNameCheck ? new RegExp(tagNameCheck) : undefined,\n          attributeNameCheck: attributeNameCheck\n            ? new RegExp(attributeNameCheck)\n            : undefined,\n        },\n      });\n    },\n    [config],\n  );\n};\n"],"names":[],"mappings":";;;;;;AA2BA,MAAM,qBAAqB,MAAM;AAC/B,EAAM,MAAA,SAAA,GAAY,OAAO,YAAY,CAAA;AAErC,EAAA,OAAO,QAAQ,MAAM;AACnB,IAAO,OAAA,SAAA,CAAU,kBAAkB,oBAAoB,CAAA;AAAA,GACzD,EAAG,CAAC,SAAS,CAAC,CAAA;AAChB,CAAA;AAKO,MAAM,0BAA0B,MAAmB;AACxD,EAAA,MAAM,SAAS,kBAAmB,EAAA;AAElC,EAAO,OAAA,WAAA;AAAA,IACL,OAAO,GAAiB,KAAA;AACtB,MAAM,MAAA,KAAA,GAAQ,MAAQ,EAAA,sBAAA,CAAuB,oBAAoB,CAAA;AAEjE,MAAU,SAAA,CAAA,OAAA,CAAQ,0BAA0B,iBAAiB,CAAA;AAC7D,MAAM,MAAA,IAAA,GAAO,CAAC,MAAA,EAAQ,MAAM,CAAA;AAE5B,MAAA,IAAI,KAAO,EAAA;AACT,QAAA,IAAA,CAAK,KAAK,QAAQ,CAAA;AAClB,QAAA,SAAA,CAAU,OAAQ,CAAA,wBAAA,EAA0B,mBAAoB,CAAA,KAAK,CAAC,CAAA;AAAA;AAIxE,MAAA,SAAA,CAAU,OAAQ,CAAA,qBAAA,EAAuB,CAAC,QAAA,EAAU,IAAS,KAAA;AAC3D,QAAI,IAAA,IAAA,CAAK,YAAY,MAAQ,EAAA;AAC3B,UAAM,MAAA,gBAAA,GACJ,QAAS,CAAA,YAAA,CAAa,YAAY,CAAA,KAAM,SACxC,IAAA,QAAA,CAAS,YAAa,CAAA,SAAS,CAAG,EAAA,QAAA,CAAS,MAAM,CAAA;AACnD,UAAA,IAAI,CAAC,gBAAkB,EAAA;AACrB,YAAS,QAAA,CAAA,UAAA,EAAY,YAAY,QAAQ,CAAA;AAAA;AAC3C;AACF,OACD,CAAA;AAGD,MAAA,SAAA,CAAU,OAAQ,CAAA,uBAAA,EAAyB,CAAC,QAAA,EAAU,IAAS,KAAA;AAC7D,QAAI,IAAA,QAAA,CAAS,YAAY,MAAQ,EAAA;AAC/B,UAAA,IAAI,IAAK,CAAA,QAAA,KAAa,YAAgB,IAAA,IAAA,CAAK,aAAa,SAAW,EAAA;AACjE,YAAS,QAAA,CAAA,eAAA,CAAgB,KAAK,QAAQ,CAAA;AAAA;AACxC;AACF,OACD,CAAA;AAED,MAAA,MAAM,eAAe,MAAQ,EAAA,iBAAA;AAAA,QAC3B;AAAA,OACF;AACA,MAAA,MAAM,qBAAqB,MAAQ,EAAA,iBAAA;AAAA,QACjC;AAAA,OACF;AAGA,MAAO,OAAA,SAAA,CAAU,QAAS,CAAA,GAAA,CAAI,SAAW,EAAA;AAAA,QACvC,QAAU,EAAA,IAAA;AAAA,QACV,WAAA,EAAa,CAAC,OAAO,CAAA;AAAA,QACrB,QAAA,EAAU,CAAC,YAAA,EAAc,SAAS,CAAA;AAAA,QAClC,cAAgB,EAAA,IAAA;AAAA,QAChB,UAAY,EAAA,IAAA;AAAA,QACZ,uBAAyB,EAAA;AAAA,UACvB,YAAc,EAAA,YAAA,GAAe,IAAI,MAAA,CAAO,YAAY,CAAI,GAAA,KAAA,CAAA;AAAA,UACxD,kBAAoB,EAAA,kBAAA,GAChB,IAAI,MAAA,CAAO,kBAAkB,CAC7B,GAAA,KAAA;AAAA;AACN,OACD,CAAA;AAAA,KACH;AAAA,IACA,CAAC,MAAM;AAAA,GACT;AACF;;;;"}