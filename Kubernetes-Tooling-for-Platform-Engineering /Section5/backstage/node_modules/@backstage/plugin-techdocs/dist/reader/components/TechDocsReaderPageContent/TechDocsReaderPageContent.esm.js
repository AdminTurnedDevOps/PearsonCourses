import React, { useEffect, useCallback } from 'react';
import Grid from '@material-ui/core/Grid';
import { makeStyles } from '@material-ui/core/styles';
import { useTechDocsReaderPage, useShadowDomStylesLoading, useShadowRootElements, TechDocsShadowDom } from '@backstage/plugin-techdocs-react';
import { ErrorPage, Content, Progress } from '@backstage/core-components';
import { TechDocsSearch } from '../../../search/components/TechDocsSearch.esm.js';
import { TechDocsStateIndicator } from '../TechDocsStateIndicator.esm.js';
import { useTechDocsReaderDom } from './dom.esm.js';
import { withTechDocsReaderProvider, useTechDocsReader } from '../TechDocsReaderProvider.esm.js';
import { TechDocsReaderPageContentAddons } from './TechDocsReaderPageContentAddons.esm.js';

const useStyles = makeStyles({
  search: {
    width: "100%",
    "@media (min-width: 76.1875em)": {
      width: "calc(100% - 34.4rem)",
      margin: "0 auto"
    },
    "@media print": {
      display: "none"
    }
  }
});
const TechDocsReaderPageContent = withTechDocsReaderProvider(
  (props) => {
    const { withSearch = true, searchResultUrlMapper, onReady } = props;
    const classes = useStyles();
    const {
      entityMetadata: { value: entityMetadata, loading: entityMetadataLoading },
      entityRef,
      setShadowRoot
    } = useTechDocsReaderPage();
    const { state } = useTechDocsReader();
    const dom = useTechDocsReaderDom(entityRef);
    const path = window.location.pathname;
    const hash = window.location.hash;
    const isStyleLoading = useShadowDomStylesLoading(dom);
    const [hashElement] = useShadowRootElements([`[id="${hash.slice(1)}"]`]);
    useEffect(() => {
      if (isStyleLoading) return;
      if (hash) {
        if (hashElement) {
          hashElement.scrollIntoView();
        }
      } else {
        document?.querySelector("header")?.scrollIntoView();
      }
    }, [path, hash, hashElement, isStyleLoading]);
    const handleAppend = useCallback(
      (newShadowRoot) => {
        setShadowRoot(newShadowRoot);
        if (onReady instanceof Function) {
          onReady();
        }
      },
      [setShadowRoot, onReady]
    );
    if (entityMetadataLoading === false && !entityMetadata)
      return /* @__PURE__ */ React.createElement(ErrorPage, { status: "404", statusMessage: "PAGE NOT FOUND" });
    if (!dom) {
      return /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(Grid, { container: true }, /* @__PURE__ */ React.createElement(Grid, { xs: 12, item: true }, /* @__PURE__ */ React.createElement(TechDocsStateIndicator, null))));
    }
    return /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(Grid, { container: true }, /* @__PURE__ */ React.createElement(Grid, { xs: 12, item: true }, /* @__PURE__ */ React.createElement(TechDocsStateIndicator, null)), withSearch && /* @__PURE__ */ React.createElement(Grid, { className: classes.search, xs: "auto", item: true }, /* @__PURE__ */ React.createElement(
      TechDocsSearch,
      {
        entityId: entityRef,
        entityTitle: entityMetadata?.metadata?.title,
        searchResultUrlMapper
      }
    )), /* @__PURE__ */ React.createElement(Grid, { xs: 12, item: true }, (state === "CHECKING" || isStyleLoading) && /* @__PURE__ */ React.createElement(Progress, null), /* @__PURE__ */ React.createElement(TechDocsShadowDom, { element: dom, onAppend: handleAppend }, /* @__PURE__ */ React.createElement(TechDocsReaderPageContentAddons, null)))));
  }
);
const Reader = TechDocsReaderPageContent;

export { Reader, TechDocsReaderPageContent };
//# sourceMappingURL=TechDocsReaderPageContent.esm.js.map
