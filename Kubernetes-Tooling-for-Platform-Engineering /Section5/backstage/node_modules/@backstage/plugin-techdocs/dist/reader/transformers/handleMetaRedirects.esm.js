import { normalizeUrl } from './rewriteDocLinks.esm.js';
import React from 'react';
import { renderReactElement } from './renderReactElement.esm.js';
import { TechDocsRedirectNotification } from '../components/TechDocsRedirectNotification/TechDocsRedirectNotification.esm.js';

const handleMetaRedirects = (navigate, entityName) => {
  const redirectAfterMs = 3e3;
  const determineRedirectURL = (metaUrl) => {
    const normalizedCurrentUrl = normalizeUrl(window.location.href);
    const absoluteRedirectObj = new URL(metaUrl, normalizedCurrentUrl);
    const isExternalRedirect = absoluteRedirectObj.hostname !== window.location.hostname;
    if (isExternalRedirect) {
      const currentTechDocPath = window.location.pathname;
      const indexOfSiteHome = currentTechDocPath.indexOf(entityName);
      const siteHomePath = currentTechDocPath.slice(
        0,
        indexOfSiteHome + entityName.length
      );
      return new URL(siteHomePath, normalizedCurrentUrl).href;
    }
    return absoluteRedirectObj.href;
  };
  return (dom) => {
    for (const elem of Array.from(dom.querySelectorAll("meta"))) {
      if (elem.getAttribute("http-equiv") === "refresh") {
        const metaContentParameters = elem.getAttribute("content")?.split("url=");
        if (!metaContentParameters || metaContentParameters.length < 2) {
          return dom;
        }
        const metaUrl = metaContentParameters[1];
        const redirectURL = determineRedirectURL(metaUrl);
        if (window.location.href === redirectURL) {
          return dom;
        }
        const container = document.createElement("div");
        renderReactElement(
          /* @__PURE__ */ React.createElement(
            TechDocsRedirectNotification,
            {
              message: "This TechDocs page is no longer maintained. Will automatically redirect to the designated replacement.",
              handleButtonClick: () => navigate(redirectURL),
              autoHideDuration: redirectAfterMs
            }
          ),
          container
        );
        document.body.appendChild(container);
        setTimeout(() => {
          navigate(redirectURL);
        }, redirectAfterMs);
        return dom;
      }
    }
    return dom;
  };
};

export { handleMetaRedirects };
//# sourceMappingURL=handleMetaRedirects.esm.js.map
