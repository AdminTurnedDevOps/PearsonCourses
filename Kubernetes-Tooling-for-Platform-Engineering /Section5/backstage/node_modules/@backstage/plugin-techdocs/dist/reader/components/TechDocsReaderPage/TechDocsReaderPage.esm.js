import React, { Children } from 'react';
import { useOutlet } from 'react-router-dom';
import { Page } from '@backstage/core-components';
import { TECHDOCS_ADDONS_WRAPPER_KEY, TECHDOCS_ADDONS_KEY, TechDocsReaderPageProvider } from '@backstage/plugin-techdocs-react';
import { TechDocsReaderPageContent } from '../TechDocsReaderPageContent/TechDocsReaderPageContent.esm.js';
import { TechDocsReaderPageHeader } from '../TechDocsReaderPageHeader/TechDocsReaderPageHeader.esm.js';
import { TechDocsReaderPageSubheader } from '../TechDocsReaderPageSubheader/TechDocsReaderPageSubheader.esm.js';
import { rootDocsRouteRef } from '../../../routes.esm.js';
import { useRouteRefParams, getComponentData } from '@backstage/core-plugin-api';
import { CookieAuthRefreshProvider } from '@backstage/plugin-auth-react';
import { useTheme, createTheme, ThemeProvider } from '@material-ui/core/styles';

const TechDocsReaderLayout = (props) => {
  const { withSearch, withHeader = true } = props;
  return /* @__PURE__ */ React.createElement(Page, { themeId: "documentation" }, withHeader && /* @__PURE__ */ React.createElement(TechDocsReaderPageHeader, null), /* @__PURE__ */ React.createElement(TechDocsReaderPageSubheader, null), /* @__PURE__ */ React.createElement(TechDocsReaderPageContent, { withSearch }));
};
const TechDocsReaderPage = (props) => {
  const currentTheme = useTheme();
  const readerPageTheme = createTheme({
    ...currentTheme,
    ...props.overrideThemeOptions || {}
  });
  const { kind, name, namespace } = useRouteRefParams(rootDocsRouteRef);
  const { children, entityRef = { kind, name, namespace } } = props;
  const outlet = useOutlet();
  if (!children) {
    const childrenList = outlet ? Children.toArray(outlet.props.children) : [];
    const grandChildren = childrenList.flatMap(
      (child) => child?.props?.children ?? []
    );
    const page = grandChildren.find(
      (grandChild) => !getComponentData(grandChild, TECHDOCS_ADDONS_WRAPPER_KEY) && !getComponentData(grandChild, TECHDOCS_ADDONS_KEY)
    );
    return /* @__PURE__ */ React.createElement(ThemeProvider, { theme: readerPageTheme }, /* @__PURE__ */ React.createElement(CookieAuthRefreshProvider, { pluginId: "techdocs" }, /* @__PURE__ */ React.createElement(TechDocsReaderPageProvider, { entityRef }, page || /* @__PURE__ */ React.createElement(TechDocsReaderLayout, null))));
  }
  return /* @__PURE__ */ React.createElement(ThemeProvider, { theme: readerPageTheme }, /* @__PURE__ */ React.createElement(CookieAuthRefreshProvider, { pluginId: "techdocs" }, /* @__PURE__ */ React.createElement(TechDocsReaderPageProvider, { entityRef }, ({ metadata, entityMetadata, onReady }) => /* @__PURE__ */ React.createElement("div", { className: "techdocs-reader-page" }, /* @__PURE__ */ React.createElement(Page, { themeId: "documentation" }, children instanceof Function ? children({
    entityRef,
    techdocsMetadataValue: metadata.value,
    entityMetadataValue: entityMetadata.value,
    onReady
  }) : children)))));
};

export { TechDocsReaderLayout, TechDocsReaderPage };
//# sourceMappingURL=TechDocsReaderPage.esm.js.map
