{"version":3,"file":"rewriteDocLinks.esm.js","sources":["../../../src/reader/transformers/rewriteDocLinks.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Transformer } from './transformer';\n\nexport const rewriteDocLinks = (): Transformer => {\n  return dom => {\n    const updateDom = <T extends Element>(\n      list: Array<T>,\n      attributeName: string,\n    ): void => {\n      Array.from(list)\n        .filter(elem => elem.hasAttribute(attributeName))\n        .forEach((elem: T) => {\n          const elemAttribute = elem.getAttribute(attributeName);\n          if (elemAttribute) {\n            // if link is external, add target to open in a new window or tab\n            if (elemAttribute.match(/^https?:\\/\\//i)) {\n              elem.setAttribute('target', '_blank');\n            }\n\n            try {\n              const normalizedWindowLocation = normalizeUrl(\n                window.location.href,\n              );\n              elem.setAttribute(\n                attributeName,\n                new URL(elemAttribute, normalizedWindowLocation).toString(),\n              );\n            } catch (_e) {\n              // Non-parseable links should be re-written as plain text.\n              elem.replaceWith(elem.textContent || elemAttribute);\n            }\n          }\n        });\n    };\n\n    updateDom(Array.from(dom.getElementsByTagName('a')), 'href');\n\n    return dom;\n  };\n};\n\n/** Make sure that the input url always ends with a '/' */\nexport function normalizeUrl(input: string): string {\n  const url = new URL(input);\n\n  if (!url.pathname.endsWith('/') && !url.pathname.endsWith('.html')) {\n    url.pathname += '/';\n  }\n\n  return url.toString();\n}\n"],"names":[],"mappings":"AAkBO,MAAM,kBAAkB,MAAmB;AAChD,EAAA,OAAO,CAAO,GAAA,KAAA;AACZ,IAAM,MAAA,SAAA,GAAY,CAChB,IAAA,EACA,aACS,KAAA;AACT,MAAA,KAAA,CAAM,IAAK,CAAA,IAAI,CACZ,CAAA,MAAA,CAAO,CAAQ,IAAA,KAAA,IAAA,CAAK,YAAa,CAAA,aAAa,CAAC,CAAA,CAC/C,OAAQ,CAAA,CAAC,IAAY,KAAA;AACpB,QAAM,MAAA,aAAA,GAAgB,IAAK,CAAA,YAAA,CAAa,aAAa,CAAA;AACrD,QAAA,IAAI,aAAe,EAAA;AAEjB,UAAI,IAAA,aAAA,CAAc,KAAM,CAAA,eAAe,CAAG,EAAA;AACxC,YAAK,IAAA,CAAA,YAAA,CAAa,UAAU,QAAQ,CAAA;AAAA;AAGtC,UAAI,IAAA;AACF,YAAA,MAAM,wBAA2B,GAAA,YAAA;AAAA,cAC/B,OAAO,QAAS,CAAA;AAAA,aAClB;AACA,YAAK,IAAA,CAAA,YAAA;AAAA,cACH,aAAA;AAAA,cACA,IAAI,GAAA,CAAI,aAAe,EAAA,wBAAwB,EAAE,QAAS;AAAA,aAC5D;AAAA,mBACO,EAAI,EAAA;AAEX,YAAK,IAAA,CAAA,WAAA,CAAY,IAAK,CAAA,WAAA,IAAe,aAAa,CAAA;AAAA;AACpD;AACF,OACD,CAAA;AAAA,KACL;AAEA,IAAA,SAAA,CAAU,MAAM,IAAK,CAAA,GAAA,CAAI,qBAAqB,GAAG,CAAC,GAAG,MAAM,CAAA;AAE3D,IAAO,OAAA,GAAA;AAAA,GACT;AACF;AAGO,SAAS,aAAa,KAAuB,EAAA;AAClD,EAAM,MAAA,GAAA,GAAM,IAAI,GAAA,CAAI,KAAK,CAAA;AAEzB,EAAI,IAAA,CAAC,GAAI,CAAA,QAAA,CAAS,QAAS,CAAA,GAAG,CAAK,IAAA,CAAC,GAAI,CAAA,QAAA,CAAS,QAAS,CAAA,OAAO,CAAG,EAAA;AAClE,IAAA,GAAA,CAAI,QAAY,IAAA,GAAA;AAAA;AAGlB,EAAA,OAAO,IAAI,QAAS,EAAA;AACtB;;;;"}