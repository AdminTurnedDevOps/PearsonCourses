import { createRouteRef, createPlugin, createApiFactory, discoveryApiRef, fetchApiRef, configApiRef, createRoutableExtension } from '@backstage/core-plugin-api';
import { scmAuthApiRef, scmIntegrationsApiRef } from '@backstage/integration-react';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import { catalogImportApiRef } from './api/CatalogImportApi.esm.js';
import { CatalogImportClient } from './api/CatalogImportClient.esm.js';

const rootRouteRef = createRouteRef({
  id: "catalog-import"
});
const catalogImportPlugin = createPlugin({
  id: "catalog-import",
  apis: [
    createApiFactory({
      api: catalogImportApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        scmAuthApi: scmAuthApiRef,
        fetchApi: fetchApiRef,
        scmIntegrationsApi: scmIntegrationsApiRef,
        catalogApi: catalogApiRef,
        configApi: configApiRef
      },
      factory: ({
        discoveryApi,
        scmAuthApi,
        fetchApi,
        scmIntegrationsApi,
        catalogApi,
        configApi
      }) => new CatalogImportClient({
        discoveryApi,
        scmAuthApi,
        scmIntegrationsApi,
        fetchApi,
        catalogApi,
        configApi
      })
    })
  ],
  routes: {
    importPage: rootRouteRef
  }
});
const CatalogImportPage = catalogImportPlugin.provide(
  createRoutableExtension({
    name: "CatalogImportPage",
    component: () => import('./components/ImportPage/index.esm.js').then((m) => m.ImportPage),
    mountPoint: rootRouteRef
  })
);

export { CatalogImportPage, catalogImportPlugin, rootRouteRef };
//# sourceMappingURL=plugin.esm.js.map
