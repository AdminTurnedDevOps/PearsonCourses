import { createApiFactory, discoveryApiRef, fetchApiRef, configApiRef } from '@backstage/core-plugin-api';
import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { PageBlueprint, ApiBlueprint, createFrontendPlugin } from '@backstage/frontend-plugin-api';
import { scmAuthApiRef, scmIntegrationsApiRef } from '@backstage/integration-react';
import React from 'react';
import { catalogImportApiRef } from './api/CatalogImportApi.esm.js';
import { CatalogImportClient } from './api/CatalogImportClient.esm.js';
import { rootRouteRef } from './plugin.esm.js';
import { catalogApiRef } from '@backstage/plugin-catalog-react';

const catalogImportPage = PageBlueprint.make({
  params: {
    defaultPath: "/catalog-import",
    routeRef: convertLegacyRouteRef(rootRouteRef),
    loader: () => import('./components/ImportPage/index.esm.js').then(
      (m) => compatWrapper(/* @__PURE__ */ React.createElement(m.ImportPage, null))
    )
  }
});
const catalogImportApi = ApiBlueprint.make({
  params: {
    factory: createApiFactory({
      api: catalogImportApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        scmAuthApi: scmAuthApiRef,
        fetchApi: fetchApiRef,
        scmIntegrationsApi: scmIntegrationsApiRef,
        catalogApi: catalogApiRef,
        configApi: configApiRef
      },
      factory: ({
        discoveryApi,
        scmAuthApi,
        fetchApi,
        scmIntegrationsApi,
        catalogApi,
        configApi
      }) => new CatalogImportClient({
        discoveryApi,
        scmAuthApi,
        scmIntegrationsApi,
        fetchApi,
        catalogApi,
        configApi
      })
    })
  }
});
var alpha = createFrontendPlugin({
  id: "catalog-import",
  extensions: [catalogImportApi, catalogImportPage],
  routes: {
    importPage: convertLegacyRouteRef(rootRouteRef)
  }
});

export { alpha as default };
//# sourceMappingURL=alpha.esm.js.map
