import 'git-url-parse';
import { Octokit } from '@octokit/rest';
import { getBranchName, getCatalogFilename } from '../components/helpers.esm.js';
import { Base64 } from 'js-base64';

async function submitGitHubPrToRepo(options, scmAuthApi, configApi) {
  const {
    owner,
    repo,
    title,
    body,
    fileContent,
    repositoryUrl,
    githubIntegrationConfig
  } = options;
  const { token } = await scmAuthApi.getCredentials({
    url: repositoryUrl,
    additionalScope: {
      repoWrite: true
    }
  });
  const octo = new Octokit({
    auth: token,
    baseUrl: githubIntegrationConfig.apiBaseUrl
  });
  const branchName = getBranchName(configApi);
  const fileName = getCatalogFilename(configApi);
  const repoData = await octo.repos.get({
    owner,
    repo
  }).catch((e) => {
    throw new Error(formatHttpErrorMessage("Couldn't fetch repo data", e));
  });
  const parentRef = await octo.git.getRef({
    owner,
    repo,
    ref: `heads/${repoData.data.default_branch}`
  }).catch((e) => {
    throw new Error(
      formatHttpErrorMessage("Couldn't fetch default branch data", e)
    );
  });
  await octo.git.createRef({
    owner,
    repo,
    ref: `refs/heads/${branchName}`,
    sha: parentRef.data.object.sha
  }).catch((e) => {
    throw new Error(
      formatHttpErrorMessage(
        `Couldn't create a new branch with name '${branchName}'`,
        e
      )
    );
  });
  await octo.repos.createOrUpdateFileContents({
    owner,
    repo,
    path: fileName,
    message: title,
    content: Base64.encode(fileContent),
    branch: branchName
  }).catch((e) => {
    throw new Error(
      formatHttpErrorMessage(
        `Couldn't create a commit with ${fileName} file added`,
        e
      )
    );
  });
  const pullRequestResponse = await octo.pulls.create({
    owner,
    repo,
    title,
    head: branchName,
    body,
    base: repoData.data.default_branch
  }).catch((e) => {
    throw new Error(
      formatHttpErrorMessage(
        `Couldn't create a pull request for ${branchName} branch`,
        e
      )
    );
  });
  return {
    link: pullRequestResponse.data.html_url,
    location: `https://${githubIntegrationConfig.host}/${owner}/${repo}/blob/${repoData.data.default_branch}/${fileName}`
  };
}
function formatHttpErrorMessage(message, error) {
  return `${message}, received http response status code ${error.status}: ${error.message}`;
}

export { submitGitHubPrToRepo };
//# sourceMappingURL=GitHub.esm.js.map
