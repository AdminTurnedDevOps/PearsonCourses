import { getBranchName, getCatalogFilename } from '../components/helpers.esm.js';
import { createAzurePullRequest } from './AzureRepoApiClient.esm.js';

function parseAzureUrl(repoUrl) {
  const { org, repo, project, host } = parseRepoUrl(repoUrl);
  if (!org || !repo || !project) {
    throw new Error(
      "Invalid AzureDevops Repository. Please use a valid repository url and try again "
    );
  }
  const tenantUrl = `https://${host}/${org}`;
  return { tenantUrl, repoName: repo, project };
}
async function submitAzurePrToRepo(options, scmAuthApi, configApi) {
  const { repositoryUrl, fileContent, title, body } = options;
  const branchName = getBranchName(configApi);
  const fileName = getCatalogFilename(configApi);
  const { token } = await scmAuthApi.getCredentials({
    url: repositoryUrl,
    additionalScope: {
      repoWrite: true
    }
  });
  const { tenantUrl, repoName, project } = parseAzureUrl(repositoryUrl);
  const result = await createAzurePullRequest({
    token,
    fileContent,
    title,
    description: body,
    project,
    repository: repoName,
    branchName,
    tenantUrl,
    fileName
  });
  const catalogLocation = `${result.repository.webUrl}?path=/${fileName}`;
  const prLocation = `${result.repository.webUrl}/pullrequest/${result.pullRequestId}`;
  return {
    link: prLocation,
    location: catalogLocation
  };
}
function parseRepoUrl(sourceUrl) {
  const url = new URL(sourceUrl);
  let host = url.host;
  let org;
  let project;
  let repo;
  const parts = url.pathname.split("/").map((part) => decodeURIComponent(part));
  if (parts[2] === "_git") {
    org = parts[1];
    project = repo = parts[3];
  } else if (parts[3] === "_git") {
    org = parts[1];
    project = parts[2];
    repo = parts[4];
  } else if (parts[4] === "_git") {
    host = `${host}/${parts[1]}`;
    org = parts[2];
    project = parts[3];
    repo = parts[5];
  }
  return { host, org, project, repo };
}

export { parseAzureUrl, parseRepoUrl, submitAzurePrToRepo };
//# sourceMappingURL=AzureDevops.esm.js.map
