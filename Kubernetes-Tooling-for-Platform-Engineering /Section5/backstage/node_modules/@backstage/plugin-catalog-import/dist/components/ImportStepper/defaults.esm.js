import Box from '@material-ui/core/Box';
import Checkbox from '@material-ui/core/Checkbox';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import FormHelperText from '@material-ui/core/FormHelperText';
import StepLabel from '@material-ui/core/StepLabel';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import React from 'react';
import { BackButton } from '../Buttons/index.esm.js';
import { asInputRef } from '../helpers.esm.js';
import { StepFinishImportLocation } from '../StepFinishImportLocation/StepFinishImportLocation.esm.js';
import { StepInitAnalyzeUrl } from '../StepInitAnalyzeUrl/StepInitAnalyzeUrl.esm.js';
import { AutocompleteTextField } from '../StepPrepareCreatePullRequest/AutocompleteTextField.esm.js';
import 'react-hook-form';
import '@material-ui/core/Card';
import '@material-ui/core/CardContent';
import '@material-ui/core/CardHeader';
import 'yaml';
import '@backstage/core-components';
import 'lodash';
import '@backstage/core-plugin-api';
import { StepPrepareCreatePullRequest } from '../StepPrepareCreatePullRequest/StepPrepareCreatePullRequest.esm.js';
import { StepPrepareSelectLocations } from '../StepPrepareSelectLocations/StepPrepareSelectLocations.esm.js';
import { StepReviewLocation } from '../StepReviewLocation/StepReviewLocation.esm.js';

function defaultGenerateStepper(flow, defaults) {
  switch (flow) {
    // the prepare step is skipped but the label of the step is updated
    case "single-location":
      return {
        ...defaults,
        prepare: () => ({
          stepLabel: /* @__PURE__ */ React.createElement(
            StepLabel,
            {
              optional: /* @__PURE__ */ React.createElement(Typography, { variant: "caption" }, "Discovered Locations: 1")
            },
            "Select Locations"
          ),
          content: /* @__PURE__ */ React.createElement(React.Fragment, null)
        })
      };
    // let the user select one or more of the discovered locations in the prepare step
    case "multiple-locations":
      return {
        ...defaults,
        prepare: (state, opts) => {
          if (state.analyzeResult.type !== "locations") {
            return defaults.prepare(state, opts);
          }
          return {
            stepLabel: /* @__PURE__ */ React.createElement(
              StepLabel,
              {
                optional: /* @__PURE__ */ React.createElement(Typography, { variant: "caption" }, "Discovered Locations: ", state.analyzeResult.locations.length)
              },
              "Select Locations"
            ),
            content: /* @__PURE__ */ React.createElement(
              StepPrepareSelectLocations,
              {
                analyzeResult: state.analyzeResult,
                prepareResult: state.prepareResult,
                onPrepare: state.onPrepare,
                onGoBack: state.onGoBack
              }
            )
          };
        }
      };
    case "no-location":
      return {
        ...defaults,
        prepare: (state, opts) => {
          if (state.analyzeResult.type !== "repository") {
            return defaults.prepare(state, opts);
          }
          return {
            stepLabel: /* @__PURE__ */ React.createElement(StepLabel, null, "Create Pull Request"),
            content: /* @__PURE__ */ React.createElement(
              StepPrepareCreatePullRequest,
              {
                analyzeResult: state.analyzeResult,
                onPrepare: state.onPrepare,
                onGoBack: state.onGoBack,
                renderFormFields: ({
                  values,
                  setValue,
                  formState,
                  groupsLoading,
                  groups,
                  register
                }) => /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Box, { marginTop: 2 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h6" }, "Pull Request Details")), /* @__PURE__ */ React.createElement(
                  TextField,
                  {
                    ...asInputRef(
                      register("title", {
                        required: true
                      })
                    ),
                    label: "Pull Request Title",
                    placeholder: "Add Backstage catalog entity descriptor files",
                    margin: "normal",
                    variant: "outlined",
                    fullWidth: true,
                    error: Boolean(formState.errors.title),
                    required: true
                  }
                ), /* @__PURE__ */ React.createElement(
                  TextField,
                  {
                    ...asInputRef(
                      register("body", {
                        required: true
                      })
                    ),
                    label: "Pull Request Body",
                    placeholder: "A describing text with Markdown support",
                    margin: "normal",
                    variant: "outlined",
                    fullWidth: true,
                    error: Boolean(formState.errors.body),
                    multiline: true,
                    required: true
                  }
                ), /* @__PURE__ */ React.createElement(Box, { marginTop: 2 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h6" }, "Entity Configuration")), /* @__PURE__ */ React.createElement(
                  TextField,
                  {
                    ...asInputRef(
                      register("componentName", { required: true })
                    ),
                    label: "Name of the created component",
                    placeholder: "my-component",
                    margin: "normal",
                    variant: "outlined",
                    fullWidth: true,
                    error: Boolean(formState.errors.componentName),
                    required: true
                  }
                ), !values.useCodeowners && /* @__PURE__ */ React.createElement(
                  AutocompleteTextField,
                  {
                    name: "owner",
                    errors: formState.errors,
                    options: groups || [],
                    loading: groupsLoading,
                    loadingText: "Loading groups\u2026",
                    helperText: "Select an owner from the list or enter a reference to a Group or a User",
                    errorHelperText: "required value",
                    textFieldProps: {
                      label: "Entity Owner",
                      placeholder: "my-group"
                    },
                    rules: { required: true },
                    required: true
                  }
                ), /* @__PURE__ */ React.createElement(
                  FormControlLabel,
                  {
                    control: /* @__PURE__ */ React.createElement(
                      Checkbox,
                      {
                        ...asInputRef(register("useCodeowners")),
                        onChange: (_, value) => {
                          if (value) {
                            setValue("owner", "");
                          }
                        }
                      }
                    ),
                    label: /* @__PURE__ */ React.createElement(React.Fragment, null, "Use ", /* @__PURE__ */ React.createElement("em", null, "CODEOWNERS"), " file as Entity Owner")
                  }
                ), /* @__PURE__ */ React.createElement(FormHelperText, null, "WARNING: This may fail if no CODEOWNERS file is found at the target location."))
              }
            )
          };
        }
      };
    default:
      return defaults;
  }
}
const defaultStepper = {
  analyze: (state, { apis }) => ({
    stepLabel: /* @__PURE__ */ React.createElement(StepLabel, null, "Select URL"),
    content: /* @__PURE__ */ React.createElement(
      StepInitAnalyzeUrl,
      {
        key: "analyze",
        analysisUrl: state.analysisUrl,
        onAnalysis: state.onAnalysis,
        disablePullRequest: !apis.catalogImportApi.preparePullRequest
      }
    )
  }),
  prepare: (state) => ({
    stepLabel: /* @__PURE__ */ React.createElement(StepLabel, { optional: /* @__PURE__ */ React.createElement(Typography, { variant: "caption" }, "Optional") }, "Import Actions"),
    content: /* @__PURE__ */ React.createElement(BackButton, { onClick: state.onGoBack })
  }),
  review: (state) => ({
    stepLabel: /* @__PURE__ */ React.createElement(StepLabel, null, "Review"),
    content: /* @__PURE__ */ React.createElement(
      StepReviewLocation,
      {
        prepareResult: state.prepareResult,
        onReview: state.onReview,
        onGoBack: state.onGoBack
      }
    )
  }),
  finish: (state) => ({
    stepLabel: /* @__PURE__ */ React.createElement(StepLabel, null, "Finish"),
    content: /* @__PURE__ */ React.createElement(
      StepFinishImportLocation,
      {
        prepareResult: state.prepareResult,
        onReset: state.onReset
      }
    )
  })
};

export { defaultGenerateStepper, defaultStepper };
//# sourceMappingURL=defaults.esm.js.map
