import { InfoCard } from '@backstage/core-components';
import { useApi, configApiRef } from '@backstage/core-plugin-api';
import Chip from '@material-ui/core/Chip';
import Typography from '@material-ui/core/Typography';
import React from 'react';
import { catalogImportApiRef } from '../../api/CatalogImportApi.esm.js';
import 'yaml';
import 'git-url-parse';
import '@octokit/rest';
import 'js-base64';
import { useCatalogFilename } from '../../hooks/useCatalogFilename.esm.js';

const ImportInfoCard = (props) => {
  const {
    exampleLocationUrl = "https://github.com/backstage/backstage/blob/master/catalog-info.yaml",
    exampleRepositoryUrl = "https://github.com/backstage/backstage"
  } = props;
  const configApi = useApi(configApiRef);
  const appTitle = configApi.getOptionalString("app.title") || "Backstage";
  const catalogImportApi = useApi(catalogImportApiRef);
  const hasGithubIntegration = configApi.has("integrations.github");
  const catalogFilename = useCatalogFilename();
  return /* @__PURE__ */ React.createElement(
    InfoCard,
    {
      title: "Register an existing component",
      titleTypographyProps: { component: "h3" },
      deepLink: {
        title: "Learn more about the Software Catalog",
        link: "https://backstage.io/docs/features/software-catalog/"
      }
    },
    /* @__PURE__ */ React.createElement(Typography, { variant: "body2", paragraph: true }, "Enter the URL to your source code repository to add it to ", appTitle, "."),
    /* @__PURE__ */ React.createElement(Typography, { component: "h4", variant: "h6" }, "Link to an existing entity file"),
    /* @__PURE__ */ React.createElement(Typography, { variant: "subtitle2", color: "textSecondary", paragraph: true }, "Example: ", /* @__PURE__ */ React.createElement("code", null, exampleLocationUrl)),
    /* @__PURE__ */ React.createElement(Typography, { variant: "body2", paragraph: true }, "The wizard analyzes the file, previews the entities, and adds them to the ", appTitle, " catalog."),
    hasGithubIntegration && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { component: "h4", variant: "h6" }, "Link to a repository", " ", /* @__PURE__ */ React.createElement(Chip, { label: "GitHub only", variant: "outlined", size: "small" })), /* @__PURE__ */ React.createElement(Typography, { variant: "subtitle2", color: "textSecondary", paragraph: true }, "Example: ", /* @__PURE__ */ React.createElement("code", null, exampleRepositoryUrl)), /* @__PURE__ */ React.createElement(Typography, { variant: "body2", paragraph: true }, "The wizard discovers all ", /* @__PURE__ */ React.createElement("code", null, catalogFilename), " files in the repository, previews the entities, and adds them to the ", appTitle, " ", "catalog."), catalogImportApi.preparePullRequest && /* @__PURE__ */ React.createElement(Typography, { variant: "body2", paragraph: true }, "If no entities are found, the wizard will prepare a Pull Request that adds an example ", /* @__PURE__ */ React.createElement("code", null, catalogFilename), " and prepares the ", appTitle, " catalog to load all entities as soon as the Pull Request is merged."))
  );
};

export { ImportInfoCard };
//# sourceMappingURL=ImportInfoCard.esm.js.map
