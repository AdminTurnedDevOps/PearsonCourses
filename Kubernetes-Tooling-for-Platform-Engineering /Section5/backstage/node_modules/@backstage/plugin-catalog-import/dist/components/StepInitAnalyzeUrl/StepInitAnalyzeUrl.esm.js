import { useApi, errorApiRef } from '@backstage/core-plugin-api';
import FormHelperText from '@material-ui/core/FormHelperText';
import Grid from '@material-ui/core/Grid';
import TextField from '@material-ui/core/TextField';
import React, { useState, useCallback } from 'react';
import { useForm } from 'react-hook-form';
import { catalogImportApiRef } from '../../api/CatalogImportApi.esm.js';
import 'yaml';
import 'git-url-parse';
import '@octokit/rest';
import { asInputRef } from '../helpers.esm.js';
import 'js-base64';
import { NextButton } from '../Buttons/index.esm.js';

const StepInitAnalyzeUrl = (props) => {
  const {
    onAnalysis,
    analysisUrl = "",
    disablePullRequest = false,
    exampleLocationUrl = "https://github.com/backstage/backstage/blob/master/catalog-info.yaml"
  } = props;
  const errorApi = useApi(errorApiRef);
  const catalogImportApi = useApi(catalogImportApiRef);
  const {
    register,
    handleSubmit,
    formState: { errors },
    watch
  } = useForm({
    mode: "onTouched",
    defaultValues: {
      url: analysisUrl
    }
  });
  const [submitted, setSubmitted] = useState(false);
  const [error, setError] = useState(void 0);
  const handleResult = useCallback(
    async ({ url }) => {
      setSubmitted(true);
      try {
        const analysisResult = await catalogImportApi.analyzeUrl(url);
        switch (analysisResult.type) {
          case "repository":
            if (!disablePullRequest && analysisResult.generatedEntities.length > 0) {
              onAnalysis("no-location", url, analysisResult);
            } else {
              setError("Couldn't generate entities for your repository");
              setSubmitted(false);
            }
            break;
          case "locations": {
            if (analysisResult.locations.length === 1) {
              onAnalysis("single-location", url, analysisResult, {
                prepareResult: analysisResult
              });
            } else if (analysisResult.locations.length > 1) {
              onAnalysis("multiple-locations", url, analysisResult);
            } else {
              setError("There are no entities at this location");
              setSubmitted(false);
            }
            break;
          }
          default: {
            const err = `Received unknown analysis result of type ${analysisResult.type}. Please contact the support team.`;
            setError(err);
            setSubmitted(false);
            errorApi.post(new Error(err));
            break;
          }
        }
      } catch (e) {
        setError(e?.data?.error?.message ?? e.message);
        setSubmitted(false);
      }
    },
    [catalogImportApi, disablePullRequest, errorApi, onAnalysis]
  );
  return /* @__PURE__ */ React.createElement("form", { onSubmit: handleSubmit(handleResult) }, /* @__PURE__ */ React.createElement(
    TextField,
    {
      ...asInputRef(
        register("url", {
          required: true,
          validate: {
            httpsValidator: (value) => typeof value === "string" && value.match(/^http[s]?:\/\//) !== null || "Must start with http:// or https://."
          }
        })
      ),
      fullWidth: true,
      id: "url",
      label: "URL",
      placeholder: exampleLocationUrl,
      helperText: "Enter the full path to your entity file to start tracking your component",
      margin: "normal",
      variant: "outlined",
      error: Boolean(errors.url),
      required: true
    }
  ), errors.url && /* @__PURE__ */ React.createElement(FormHelperText, { error: true }, errors.url.message), error && /* @__PURE__ */ React.createElement(FormHelperText, { error: true }, error), /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 0 }, /* @__PURE__ */ React.createElement(
    NextButton,
    {
      disabled: Boolean(errors.url) || !watch("url"),
      loading: submitted,
      type: "submit"
    },
    "Analyze"
  )));
};

export { StepInitAnalyzeUrl };
//# sourceMappingURL=StepInitAnalyzeUrl.esm.js.map
