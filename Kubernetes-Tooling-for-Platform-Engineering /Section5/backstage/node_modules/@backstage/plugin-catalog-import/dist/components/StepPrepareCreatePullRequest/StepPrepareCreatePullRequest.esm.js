import { useApi, errorApiRef } from '@backstage/core-plugin-api';
import { assertError } from '@backstage/errors';
import { catalogApiRef, humanizeEntityRef } from '@backstage/plugin-catalog-react';
import Box from '@material-ui/core/Box';
import FormHelperText from '@material-ui/core/FormHelperText';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import React, { useState, useEffect, useCallback } from 'react';
import useAsync from 'react-use/esm/useAsync';
import YAML from 'yaml';
import { catalogImportApiRef } from '../../api/CatalogImportApi.esm.js';
import 'git-url-parse';
import '@octokit/rest';
import 'js-base64';
import { useCatalogFilename } from '../../hooks/useCatalogFilename.esm.js';
import { BackButton, NextButton } from '../Buttons/index.esm.js';
import { PreparePullRequestForm } from './PreparePullRequestForm.esm.js';
import { PreviewCatalogInfoComponent } from './PreviewCatalogInfoComponent.esm.js';
import { PreviewPullRequestComponent } from './PreviewPullRequestComponent.esm.js';

const useStyles = makeStyles((theme) => ({
  previewCard: {
    marginTop: theme.spacing(1)
  },
  previewCardContent: {
    paddingTop: 0
  }
}));
function generateEntities(entities, componentName, owner) {
  return entities.map((e) => ({
    ...e,
    apiVersion: e.apiVersion,
    kind: e.kind,
    metadata: {
      ...e.metadata,
      name: componentName
    },
    spec: {
      ...e.spec,
      ...owner ? { owner } : {}
    }
  }));
}
const StepPrepareCreatePullRequest = (props) => {
  const { analyzeResult, onPrepare, onGoBack, renderFormFields } = props;
  const classes = useStyles();
  const catalogApi = useApi(catalogApiRef);
  const catalogImportApi = useApi(catalogImportApiRef);
  const errorApi = useApi(errorApiRef);
  const [submitted, setSubmitted] = useState(false);
  const [error, setError] = useState();
  const catalogFilename = useCatalogFilename();
  const {
    loading: prDefaultsLoading,
    value: prDefaults,
    error: prDefaultsError
  } = useAsync(
    () => catalogImportApi.preparePullRequest(),
    [catalogImportApi.preparePullRequest]
  );
  useEffect(() => {
    if (prDefaultsError) {
      errorApi.post(prDefaultsError);
    }
  }, [prDefaultsError, errorApi]);
  const { loading: groupsLoading, value: groups } = useAsync(async () => {
    const groupEntities = await catalogApi.getEntities({
      filter: { kind: "group" }
    });
    return groupEntities.items.map((e) => humanizeEntityRef(e, { defaultKind: "group" })).sort();
  });
  const handleResult = useCallback(
    async (data) => {
      setSubmitted(true);
      try {
        const pr = await catalogImportApi.submitPullRequest({
          repositoryUrl: analyzeResult.url,
          title: data.title,
          body: data.body,
          fileContent: generateEntities(
            analyzeResult.generatedEntities,
            data.componentName,
            data.owner
          ).map((e) => YAML.stringify(e)).join("---\n")
        });
        onPrepare(
          {
            type: "repository",
            url: analyzeResult.url,
            integrationType: analyzeResult.integrationType,
            pullRequest: {
              url: pr.link
            },
            locations: [
              {
                target: pr.location,
                entities: generateEntities(
                  analyzeResult.generatedEntities,
                  data.componentName,
                  data.owner
                ).map((e) => ({
                  kind: e.kind,
                  namespace: e.metadata.namespace,
                  name: e.metadata.name
                }))
              }
            ]
          },
          { notRepeatable: true }
        );
      } catch (e) {
        assertError(e);
        setError(e.message);
        setSubmitted(false);
      }
    },
    [
      analyzeResult.generatedEntities,
      analyzeResult.integrationType,
      analyzeResult.url,
      catalogImportApi,
      onPrepare
    ]
  );
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, null, "You entered a link to a ", analyzeResult.integrationType, " repository but a", " ", /* @__PURE__ */ React.createElement("code", null, catalogFilename), " could not be found. Use this form to open a Pull Request that creates one."), !prDefaultsLoading && /* @__PURE__ */ React.createElement(
    PreparePullRequestForm,
    {
      onSubmit: handleResult,
      defaultValues: {
        title: prDefaults?.title ?? "",
        body: prDefaults?.body ?? "",
        owner: analyzeResult.generatedEntities[0]?.spec?.owner || "",
        componentName: analyzeResult.generatedEntities[0]?.metadata?.name || "",
        useCodeowners: false
      },
      render: ({ values, formState, register, setValue }) => /* @__PURE__ */ React.createElement(React.Fragment, null, renderFormFields({
        values,
        formState,
        register,
        setValue,
        groups: groups ?? [],
        groupsLoading
      }), /* @__PURE__ */ React.createElement(Box, { marginTop: 2 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h6" }, "Preview Pull Request")), /* @__PURE__ */ React.createElement(
        PreviewPullRequestComponent,
        {
          title: values.title,
          description: values.body,
          classes: {
            card: classes.previewCard,
            cardContent: classes.previewCardContent
          }
        }
      ), /* @__PURE__ */ React.createElement(Box, { marginTop: 2, marginBottom: 1 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h6" }, "Preview Entities")), /* @__PURE__ */ React.createElement(
        PreviewCatalogInfoComponent,
        {
          entities: generateEntities(
            analyzeResult.generatedEntities,
            values.componentName,
            values.owner
          ),
          repositoryUrl: analyzeResult.url,
          classes: {
            card: classes.previewCard,
            cardContent: classes.previewCardContent
          }
        }
      ), error && /* @__PURE__ */ React.createElement(FormHelperText, { error: true }, error), /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 0 }, onGoBack && /* @__PURE__ */ React.createElement(BackButton, { onClick: onGoBack, disabled: submitted }), /* @__PURE__ */ React.createElement(
        NextButton,
        {
          type: "submit",
          disabled: Boolean(
            formState.errors.title || formState.errors.body || formState.errors.owner
          ),
          loading: submitted
        },
        "Create PR"
      )))
    }
  ));
};

export { StepPrepareCreatePullRequest, generateEntities };
//# sourceMappingURL=StepPrepareCreatePullRequest.esm.js.map
