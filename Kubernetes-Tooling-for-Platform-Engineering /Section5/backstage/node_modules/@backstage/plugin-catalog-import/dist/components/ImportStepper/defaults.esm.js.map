{"version":3,"file":"defaults.esm.js","sources":["../../../src/components/ImportStepper/defaults.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport { BackButton } from '../Buttons';\nimport { asInputRef } from '../helpers';\nimport { StepFinishImportLocation } from '../StepFinishImportLocation';\nimport { StepInitAnalyzeUrl } from '../StepInitAnalyzeUrl';\nimport {\n  AutocompleteTextField,\n  StepPrepareCreatePullRequest,\n} from '../StepPrepareCreatePullRequest';\nimport { StepPrepareSelectLocations } from '../StepPrepareSelectLocations';\nimport { StepReviewLocation } from '../StepReviewLocation';\nimport { StepperApis } from '../types';\nimport { ImportFlows, ImportState } from '../useImportState';\n\nexport type StepConfiguration = {\n  stepLabel: React.ReactElement;\n  content: React.ReactElement;\n};\n\n/**\n * Defines the details of the stepper.\n *\n * @public\n */\nexport interface StepperProvider {\n  analyze: (\n    s: Extract<ImportState, { activeState: 'analyze' }>,\n    opts: { apis: StepperApis },\n  ) => StepConfiguration;\n  prepare: (\n    s: Extract<ImportState, { activeState: 'prepare' }>,\n    opts: { apis: StepperApis },\n  ) => StepConfiguration;\n  review: (\n    s: Extract<ImportState, { activeState: 'review' }>,\n    opts: { apis: StepperApis },\n  ) => StepConfiguration;\n  finish: (\n    s: Extract<ImportState, { activeState: 'finish' }>,\n    opts: { apis: StepperApis },\n  ) => StepConfiguration;\n}\n\n/**\n * The default stepper generation function.\n *\n * Override this function to customize the import flow. Each flow should at\n * least override the prepare operation.\n *\n * @param flow - the name of the active flow\n * @param defaults - the default steps\n * @public\n */\nexport function defaultGenerateStepper(\n  flow: ImportFlows,\n  defaults: StepperProvider,\n): StepperProvider {\n  switch (flow) {\n    // the prepare step is skipped but the label of the step is updated\n    case 'single-location':\n      return {\n        ...defaults,\n        prepare: () => ({\n          stepLabel: (\n            <StepLabel\n              optional={\n                <Typography variant=\"caption\">\n                  Discovered Locations: 1\n                </Typography>\n              }\n            >\n              Select Locations\n            </StepLabel>\n          ),\n          content: <></>,\n        }),\n      };\n\n    // let the user select one or more of the discovered locations in the prepare step\n    case 'multiple-locations':\n      return {\n        ...defaults,\n        prepare: (state, opts) => {\n          if (state.analyzeResult.type !== 'locations') {\n            return defaults.prepare(state, opts);\n          }\n\n          return {\n            stepLabel: (\n              <StepLabel\n                optional={\n                  <Typography variant=\"caption\">\n                    Discovered Locations: {state.analyzeResult.locations.length}\n                  </Typography>\n                }\n              >\n                Select Locations\n              </StepLabel>\n            ),\n            content: (\n              <StepPrepareSelectLocations\n                analyzeResult={state.analyzeResult}\n                prepareResult={state.prepareResult}\n                onPrepare={state.onPrepare}\n                onGoBack={state.onGoBack}\n              />\n            ),\n          };\n        },\n      };\n\n    case 'no-location':\n      return {\n        ...defaults,\n        prepare: (state, opts) => {\n          if (state.analyzeResult.type !== 'repository') {\n            return defaults.prepare(state, opts);\n          }\n\n          return {\n            stepLabel: <StepLabel>Create Pull Request</StepLabel>,\n            content: (\n              <StepPrepareCreatePullRequest\n                analyzeResult={state.analyzeResult}\n                onPrepare={state.onPrepare}\n                onGoBack={state.onGoBack}\n                renderFormFields={({\n                  values,\n                  setValue,\n                  formState,\n                  groupsLoading,\n                  groups,\n                  register,\n                }) => (\n                  <>\n                    <Box marginTop={2}>\n                      <Typography variant=\"h6\">Pull Request Details</Typography>\n                    </Box>\n\n                    <TextField\n                      {...asInputRef(\n                        register('title', {\n                          required: true,\n                        }),\n                      )}\n                      label=\"Pull Request Title\"\n                      placeholder=\"Add Backstage catalog entity descriptor files\"\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      fullWidth\n                      error={Boolean(formState.errors.title)}\n                      required\n                    />\n\n                    <TextField\n                      {...asInputRef(\n                        register('body', {\n                          required: true,\n                        }),\n                      )}\n                      label=\"Pull Request Body\"\n                      placeholder=\"A describing text with Markdown support\"\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      fullWidth\n                      error={Boolean(formState.errors.body)}\n                      multiline\n                      required\n                    />\n\n                    <Box marginTop={2}>\n                      <Typography variant=\"h6\">Entity Configuration</Typography>\n                    </Box>\n\n                    <TextField\n                      {...asInputRef(\n                        register('componentName', { required: true }),\n                      )}\n                      label=\"Name of the created component\"\n                      placeholder=\"my-component\"\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      fullWidth\n                      error={Boolean(formState.errors.componentName)}\n                      required\n                    />\n\n                    {!values.useCodeowners && (\n                      <AutocompleteTextField\n                        name=\"owner\"\n                        errors={formState.errors}\n                        options={groups || []}\n                        loading={groupsLoading}\n                        loadingText=\"Loading groupsâ€¦\"\n                        helperText=\"Select an owner from the list or enter a reference to a Group or a User\"\n                        errorHelperText=\"required value\"\n                        textFieldProps={{\n                          label: 'Entity Owner',\n                          placeholder: 'my-group',\n                        }}\n                        rules={{ required: true }}\n                        required\n                      />\n                    )}\n\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          {...asInputRef(register('useCodeowners'))}\n                          onChange={(_, value) => {\n                            if (value) {\n                              setValue('owner', '');\n                            }\n                          }}\n                        />\n                      }\n                      label={\n                        <>\n                          Use <em>CODEOWNERS</em> file as Entity Owner\n                        </>\n                      }\n                    />\n                    <FormHelperText>\n                      WARNING: This may fail if no CODEOWNERS file is found at\n                      the target location.\n                    </FormHelperText>\n                  </>\n                )}\n              />\n            ),\n          };\n        },\n      };\n\n    default:\n      return defaults;\n  }\n}\n\nexport const defaultStepper: StepperProvider = {\n  analyze: (state, { apis }) => ({\n    stepLabel: <StepLabel>Select URL</StepLabel>,\n    content: (\n      <StepInitAnalyzeUrl\n        key=\"analyze\"\n        analysisUrl={state.analysisUrl}\n        onAnalysis={state.onAnalysis}\n        disablePullRequest={!apis.catalogImportApi.preparePullRequest}\n      />\n    ),\n  }),\n\n  prepare: state => ({\n    stepLabel: (\n      <StepLabel optional={<Typography variant=\"caption\">Optional</Typography>}>\n        Import Actions\n      </StepLabel>\n    ),\n    content: <BackButton onClick={state.onGoBack} />,\n  }),\n\n  review: state => ({\n    stepLabel: <StepLabel>Review</StepLabel>,\n    content: (\n      <StepReviewLocation\n        prepareResult={state.prepareResult}\n        onReview={state.onReview}\n        onGoBack={state.onGoBack}\n      />\n    ),\n  }),\n\n  finish: state => ({\n    stepLabel: <StepLabel>Finish</StepLabel>,\n    content: (\n      <StepFinishImportLocation\n        prepareResult={state.prepareResult}\n        onReset={state.onReset}\n      />\n    ),\n  }),\n};\n"],"names":[],"mappings":"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"}