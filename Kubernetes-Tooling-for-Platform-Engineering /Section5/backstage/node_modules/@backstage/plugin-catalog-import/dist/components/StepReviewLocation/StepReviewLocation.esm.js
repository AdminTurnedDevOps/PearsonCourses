import { catalogApiRef } from '@backstage/plugin-catalog-react';
import FormHelperText from '@material-ui/core/FormHelperText';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import LocationOnIcon from '@material-ui/icons/LocationOn';
import React, { useState, useCallback } from 'react';
import { BackButton, NextButton } from '../Buttons/index.esm.js';
import { EntityListComponent } from '../EntityListComponent/EntityListComponent.esm.js';
import { useApi, configApiRef, useAnalytics } from '@backstage/core-plugin-api';
import { Link } from '@backstage/core-components';
import { stringifyEntityRef } from '@backstage/catalog-model';
import { assertError } from '@backstage/errors';

const StepReviewLocation = ({
  prepareResult,
  onReview,
  onGoBack
}) => {
  const catalogApi = useApi(catalogApiRef);
  const configApi = useApi(configApiRef);
  const analytics = useAnalytics();
  const appTitle = configApi.getOptionalString("app.title") || "Backstage";
  const [submitted, setSubmitted] = useState(false);
  const [error, setError] = useState();
  const exists = prepareResult.type === "locations" && prepareResult.locations.some((l) => l.exists) ? true : false;
  const handleClick = useCallback(async () => {
    setSubmitted(true);
    analytics.captureEvent("click", "import entity");
    try {
      let refreshed = new Array();
      if (prepareResult.type === "locations") {
        refreshed = await Promise.all(
          prepareResult.locations.filter((l) => l.exists).map(async (l) => {
            const ref = stringifyEntityRef(l.entities[0] ?? l);
            await catalogApi.refreshEntity(ref);
            return { target: l.target };
          })
        );
      }
      const locations = await Promise.all(
        prepareResult.locations.filter((l) => !l.exists).map(async (l) => {
          const result = await catalogApi.addLocation({
            type: "url",
            target: l.target
          });
          return {
            target: result.location.target,
            entities: result.entities
          };
        })
      );
      onReview({
        ...prepareResult,
        ...{ refreshed },
        locations
      });
    } catch (e) {
      assertError(e);
      if (prepareResult.type === "repository" && e.message.startsWith(
        "Location was added but has no entities specified yet"
      )) {
        onReview({
          ...prepareResult,
          locations: prepareResult.locations.map((l) => ({
            target: l.target,
            entities: []
          }))
        });
      } else {
        setError(e.message);
        setSubmitted(false);
      }
    }
  }, [prepareResult, onReview, catalogApi, analytics]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, prepareResult.type === "repository" && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "The following Pull Request has been opened:", " ", /* @__PURE__ */ React.createElement(
    Link,
    {
      to: prepareResult.pullRequest.url,
      target: "_blank",
      rel: "noopener noreferrer"
    },
    prepareResult.pullRequest.url
  )), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "You can already import the location and ", appTitle, " will fetch the entities as soon as the Pull Request is merged.")), /* @__PURE__ */ React.createElement(Typography, null, exists ? "The following locations already exist in the catalog:" : "The following entities will be added to the catalog:"), /* @__PURE__ */ React.createElement(
    EntityListComponent,
    {
      locations: prepareResult.locations,
      locationListItemIcon: () => /* @__PURE__ */ React.createElement(LocationOnIcon, null)
    }
  ), error && /* @__PURE__ */ React.createElement(FormHelperText, { error: true }, error), /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 0 }, onGoBack && /* @__PURE__ */ React.createElement(BackButton, { onClick: onGoBack, disabled: submitted }), /* @__PURE__ */ React.createElement(
    NextButton,
    {
      disabled: submitted,
      loading: submitted,
      onClick: () => handleClick()
    },
    exists ? "Refresh" : "Import"
  )));
};

export { StepReviewLocation };
//# sourceMappingURL=StepReviewLocation.esm.js.map
