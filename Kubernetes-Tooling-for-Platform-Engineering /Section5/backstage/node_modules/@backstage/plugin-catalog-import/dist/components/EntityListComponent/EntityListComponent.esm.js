import { stringifyEntityRef } from '@backstage/catalog-model';
import { useApi } from '@backstage/core-plugin-api';
import { entityPresentationApiRef, EntityRefLink, EntityDisplayName } from '@backstage/plugin-catalog-react';
import Collapse from '@material-ui/core/Collapse';
import IconButton from '@material-ui/core/IconButton';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import { makeStyles } from '@material-ui/core/styles';
import ExpandLessIcon from '@material-ui/icons/ExpandLess';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import React, { useState } from 'react';

const useStyles = makeStyles((theme) => ({
  nested: {
    paddingLeft: theme.spacing(4)
  }
}));
const EntityListComponent = (props) => {
  const {
    locations,
    collapsed = false,
    locationListItemIcon,
    onItemClick,
    firstListItem,
    withLinks = false
  } = props;
  const classes = useStyles();
  const entityPresentationApi = useApi(entityPresentationApiRef);
  const [expandedUrls, setExpandedUrls] = useState([]);
  const handleClick = (url) => {
    setExpandedUrls(
      (urls) => urls.includes(url) ? urls.filter((u) => u !== url) : urls.concat(url)
    );
  };
  function sortEntities(entities) {
    return entities.sort(
      (a, b) => entityPresentationApi.forEntity(stringifyEntityRef(a)).snapshot.entityRef.localeCompare(
        entityPresentationApi.forEntity(stringifyEntityRef(b)).snapshot.entityRef
      )
    );
  }
  return /* @__PURE__ */ React.createElement(List, null, firstListItem, locations.map((r) => /* @__PURE__ */ React.createElement(React.Fragment, { key: r.target }, /* @__PURE__ */ React.createElement(
    ListItem,
    {
      dense: true,
      button: Boolean(onItemClick),
      onClick: () => onItemClick?.(r.target)
    },
    /* @__PURE__ */ React.createElement(ListItemIcon, null, locationListItemIcon(r.target)),
    /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        primary: r.target,
        secondary: `Entities: ${r.entities.length}`
      }
    ),
    collapsed && /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, /* @__PURE__ */ React.createElement(IconButton, { edge: "end", onClick: () => handleClick(r.target) }, expandedUrls.includes(r.target) ? /* @__PURE__ */ React.createElement(ExpandLessIcon, null) : /* @__PURE__ */ React.createElement(ExpandMoreIcon, null)))
  ), /* @__PURE__ */ React.createElement(
    Collapse,
    {
      in: !collapsed || expandedUrls.includes(r.target),
      timeout: "auto",
      unmountOnExit: true
    },
    /* @__PURE__ */ React.createElement(List, { component: "div", disablePadding: true, dense: true }, sortEntities(r.entities).map((entity) => {
      return /* @__PURE__ */ React.createElement(
        ListItem,
        {
          key: stringifyEntityRef(entity),
          className: classes.nested,
          ...withLinks ? {
            component: EntityRefLink,
            entityRef: entity,
            button: withLinks
          } : {}
        },
        /* @__PURE__ */ React.createElement(
          ListItemText,
          {
            primary: /* @__PURE__ */ React.createElement(EntityDisplayName, { entityRef: entity })
          }
        )
      );
    }))
  ))));
};

export { EntityListComponent };
//# sourceMappingURL=EntityListComponent.esm.js.map
