import Checkbox from '@material-ui/core/Checkbox';
import Grid from '@material-ui/core/Grid';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Typography from '@material-ui/core/Typography';
import LocationOnIcon from '@material-ui/icons/LocationOn';
import React, { useState, useCallback } from 'react';
import { BackButton, NextButton } from '../Buttons/index.esm.js';
import { EntityListComponent } from '../EntityListComponent/EntityListComponent.esm.js';
import partition from 'lodash/partition';

const StepPrepareSelectLocations = ({
  analyzeResult,
  prepareResult,
  onPrepare,
  onGoBack
}) => {
  const [selectedUrls, setSelectedUrls] = useState(
    prepareResult?.locations.map((l) => l.target) || []
  );
  const [existingLocations, locations] = partition(
    analyzeResult?.locations,
    (l) => l.exists
  );
  const handleResult = useCallback(async () => {
    onPrepare({
      type: "locations",
      locations: locations.filter((l) => selectedUrls.includes(l.target))
    });
  }, [locations, onPrepare, selectedUrls]);
  const onItemClick = (url) => {
    setSelectedUrls(
      (urls) => urls.includes(url) ? urls.filter((u) => u !== url) : urls.concat(url)
    );
  };
  const onSelectAll = () => {
    setSelectedUrls(
      (urls) => urls.length < locations.length ? locations.map((l) => l.target) : []
    );
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, locations.length > 0 && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, null, "Select one or more locations that are present in your git repository:"), /* @__PURE__ */ React.createElement(
    EntityListComponent,
    {
      firstListItem: /* @__PURE__ */ React.createElement(ListItem, { dense: true, button: true, onClick: onSelectAll }, /* @__PURE__ */ React.createElement(ListItemIcon, null, /* @__PURE__ */ React.createElement(
        Checkbox,
        {
          edge: "start",
          checked: selectedUrls.length === locations.length,
          indeterminate: selectedUrls.length > 0 && selectedUrls.length < locations.length,
          tabIndex: -1,
          disableRipple: true
        }
      )), /* @__PURE__ */ React.createElement(ListItemText, { primary: "Select All" })),
      onItemClick,
      locations,
      locationListItemIcon: (target) => /* @__PURE__ */ React.createElement(
        Checkbox,
        {
          edge: "start",
          checked: selectedUrls.includes(target),
          tabIndex: -1,
          disableRipple: true
        }
      ),
      collapsed: true
    }
  )), existingLocations.length > 0 && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, null, "These locations already exist in the catalog:"), /* @__PURE__ */ React.createElement(
    EntityListComponent,
    {
      locations: existingLocations,
      locationListItemIcon: () => /* @__PURE__ */ React.createElement(LocationOnIcon, null),
      withLinks: true,
      collapsed: true
    }
  )), /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 0 }, onGoBack && /* @__PURE__ */ React.createElement(BackButton, { onClick: onGoBack }), /* @__PURE__ */ React.createElement(NextButton, { disabled: selectedUrls.length === 0, onClick: handleResult }, "Review")));
};

export { StepPrepareSelectLocations };
//# sourceMappingURL=StepPrepareSelectLocations.esm.js.map
