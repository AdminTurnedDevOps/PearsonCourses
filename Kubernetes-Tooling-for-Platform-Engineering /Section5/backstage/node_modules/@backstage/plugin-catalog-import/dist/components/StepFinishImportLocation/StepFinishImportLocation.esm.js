import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import LocationOnIcon from '@material-ui/icons/LocationOn';
import React from 'react';
import { BackButton, ViewComponentButton } from '../Buttons/index.esm.js';
import { EntityListComponent } from '../EntityListComponent/EntityListComponent.esm.js';
import { Link } from '@backstage/core-components';
import partition from 'lodash/partition';
import { DEFAULT_NAMESPACE } from '@backstage/catalog-model';
import { entityRouteRef } from '@backstage/plugin-catalog-react';
import { useRouteRef } from '@backstage/core-plugin-api';

const filterComponentEntity = (newLocations) => {
  for (const location of newLocations) {
    for (const entity of location.entities) {
      if (["component", "api", "resource"].includes(
        entity.kind.toLocaleLowerCase("en-US")
      )) {
        return {
          kind: entity.kind.toLocaleLowerCase("en-US"),
          namespace: entity.namespace?.toLocaleLowerCase("en-US") ?? DEFAULT_NAMESPACE,
          name: entity.name
        };
      }
    }
  }
  return null;
};
const StepFinishImportLocation = ({ prepareResult, onReset }) => {
  const entityRoute = useRouteRef(entityRouteRef);
  if (prepareResult.type === "repository") {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "The following Pull Request has been opened:", " ", /* @__PURE__ */ React.createElement(
      Link,
      {
        to: prepareResult.pullRequest.url,
        target: "_blank",
        rel: "noreferrer"
      },
      prepareResult.pullRequest.url
    )), /* @__PURE__ */ React.createElement(Typography, { paragraph: true }, "Your entities will be imported as soon as the Pull Request is merged."), /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 0 }, /* @__PURE__ */ React.createElement(BackButton, { onClick: onReset }, "Register another")));
  }
  const [existingLocations, newLocations] = partition(
    prepareResult.locations,
    (l) => l.exists
  );
  const newComponentEntity = filterComponentEntity(newLocations);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, newLocations.length > 0 && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, null, "The following entities have been added to the catalog:"), /* @__PURE__ */ React.createElement(
    EntityListComponent,
    {
      locations: newLocations,
      locationListItemIcon: () => /* @__PURE__ */ React.createElement(LocationOnIcon, null),
      withLinks: true
    }
  )), existingLocations.length > 0 && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Typography, null, "A refresh was triggered for the following locations:"), /* @__PURE__ */ React.createElement(
    EntityListComponent,
    {
      locations: existingLocations,
      locationListItemIcon: () => /* @__PURE__ */ React.createElement(LocationOnIcon, null),
      withLinks: true
    }
  )), /* @__PURE__ */ React.createElement(Grid, { container: true, spacing: 0 }, newComponentEntity && /* @__PURE__ */ React.createElement(ViewComponentButton, { to: entityRoute(newComponentEntity) }, "View Component"), /* @__PURE__ */ React.createElement(BackButton, { onClick: onReset }, "Register another")));
};

export { StepFinishImportLocation };
//# sourceMappingURL=StepFinishImportLocation.esm.js.map
