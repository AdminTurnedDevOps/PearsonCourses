{"version":3,"file":"createSignInResolverFactory.cjs.js","sources":["../../src/sign-in/createSignInResolverFactory.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ZodSchema, ZodTypeDef } from 'zod';\nimport { SignInResolver } from '../types';\nimport zodToJsonSchema from 'zod-to-json-schema';\nimport { JsonObject } from '@backstage/types';\nimport { fromError } from 'zod-validation-error';\nimport { InputError } from '@backstage/errors';\n\n/** @public */\nexport interface SignInResolverFactory<TAuthResult = any, TOptions = any> {\n  (\n    ...options: undefined extends TOptions\n      ? [options?: TOptions]\n      : [options: TOptions]\n  ): SignInResolver<TAuthResult>;\n  optionsJsonSchema?: JsonObject;\n}\n\n/** @public */\nexport interface SignInResolverFactoryOptions<\n  TAuthResult,\n  TOptionsOutput,\n  TOptionsInput,\n> {\n  optionsSchema?: ZodSchema<TOptionsOutput, ZodTypeDef, TOptionsInput>;\n  create(options: TOptionsOutput): SignInResolver<TAuthResult>;\n}\n\n/** @public */\nexport function createSignInResolverFactory<\n  TAuthResult,\n  TOptionsOutput,\n  TOptionsInput,\n>(\n  options: SignInResolverFactoryOptions<\n    TAuthResult,\n    TOptionsOutput,\n    TOptionsInput\n  >,\n): SignInResolverFactory<TAuthResult, TOptionsInput> {\n  const { optionsSchema } = options;\n  if (!optionsSchema) {\n    return (resolverOptions?: TOptionsInput) => {\n      if (resolverOptions) {\n        throw new InputError('sign-in resolver does not accept options');\n      }\n      return options.create(undefined as TOptionsOutput);\n    };\n  }\n  const factory = (\n    ...[resolverOptions]: undefined extends TOptionsInput\n      ? [options?: TOptionsInput]\n      : [options: TOptionsInput]\n  ) => {\n    let parsedOptions;\n    try {\n      parsedOptions = optionsSchema.parse(resolverOptions);\n    } catch (error) {\n      throw new InputError(\n        `Invalid sign-in resolver options, ${fromError(error)}`,\n      );\n    }\n    return options.create(parsedOptions);\n  };\n\n  factory.optionsJsonSchema = zodToJsonSchema(optionsSchema) as JsonObject;\n  return factory;\n}\n"],"names":["InputError","fromError","zodToJsonSchema"],"mappings":";;;;;;;;;;AA4CO,SAAS,4BAKd,OAKmD,EAAA;AACnD,EAAM,MAAA,EAAE,eAAkB,GAAA,OAAA;AAC1B,EAAA,IAAI,CAAC,aAAe,EAAA;AAClB,IAAA,OAAO,CAAC,eAAoC,KAAA;AAC1C,MAAA,IAAI,eAAiB,EAAA;AACnB,QAAM,MAAA,IAAIA,kBAAW,0CAA0C,CAAA;AAAA;AAEjE,MAAO,OAAA,OAAA,CAAQ,OAAO,KAA2B,CAAA,CAAA;AAAA,KACnD;AAAA;AAEF,EAAA,MAAM,OAAU,GAAA,CAAA,GACX,CAAC,eAAe,CAGhB,KAAA;AACH,IAAI,IAAA,aAAA;AACJ,IAAI,IAAA;AACF,MAAgB,aAAA,GAAA,aAAA,CAAc,MAAM,eAAe,CAAA;AAAA,aAC5C,KAAO,EAAA;AACd,MAAA,MAAM,IAAIA,iBAAA;AAAA,QACR,CAAA,kCAAA,EAAqCC,4BAAU,CAAA,KAAK,CAAC,CAAA;AAAA,OACvD;AAAA;AAEF,IAAO,OAAA,OAAA,CAAQ,OAAO,aAAa,CAAA;AAAA,GACrC;AAEA,EAAQ,OAAA,CAAA,iBAAA,GAAoBC,iCAAgB,aAAa,CAAA;AACzD,EAAO,OAAA,OAAA;AACT;;;;"}