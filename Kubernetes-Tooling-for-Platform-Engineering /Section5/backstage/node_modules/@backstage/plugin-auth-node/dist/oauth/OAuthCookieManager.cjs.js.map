{"version":3,"file":"OAuthCookieManager.cjs.js","sources":["../../src/oauth/OAuthCookieManager.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CookieOptions, Request, Response } from 'express';\nimport { CookieConfigurer } from '../types';\n\nconst THOUSAND_DAYS_MS = 1000 * 24 * 60 * 60 * 1000;\nconst TEN_MINUTES_MS = 600 * 1000;\n\nconst MAX_COOKIE_SIZE_CHARACTERS = 4000;\n\nconst defaultCookieConfigurer: CookieConfigurer = ({\n  callbackUrl,\n  providerId,\n  appOrigin,\n}) => {\n  const { hostname: domain, pathname, protocol } = new URL(callbackUrl);\n  const secure = protocol === 'https:';\n\n  // For situations where the auth-backend is running on a\n  // different domain than the app, we set the SameSite attribute\n  // to 'none' to allow third-party access to the cookie, but\n  // only if it's in a secure context (https).\n  let sameSite: ReturnType<CookieConfigurer>['sameSite'] = 'lax';\n  if (new URL(appOrigin).hostname !== domain && secure) {\n    sameSite = 'none';\n  }\n\n  // If the provider supports callbackUrls, the pathname will\n  // contain the complete path to the frame handler so we need\n  // to slice off the trailing part of the path.\n  const path = pathname.endsWith(`${providerId}/handler/frame`)\n    ? pathname.slice(0, -'/handler/frame'.length)\n    : `${pathname}/${providerId}`;\n\n  return { domain, path, secure, sameSite };\n};\n\n/** @internal */\nexport class OAuthCookieManager {\n  private readonly cookieConfigurer: CookieConfigurer;\n  private readonly nonceCookie: string;\n  private readonly refreshTokenCookie: string;\n  private readonly grantedScopeCookie: string;\n\n  constructor(\n    private readonly options: {\n      providerId: string;\n      defaultAppOrigin: string;\n      baseUrl: string;\n      callbackUrl: string;\n      cookieConfigurer?: CookieConfigurer;\n    },\n  ) {\n    this.cookieConfigurer = options.cookieConfigurer ?? defaultCookieConfigurer;\n\n    this.nonceCookie = `${options.providerId}-nonce`;\n    this.refreshTokenCookie = `${options.providerId}-refresh-token`;\n    this.grantedScopeCookie = `${options.providerId}-granted-scope`;\n  }\n\n  private getConfig(origin?: string, pathSuffix: string = '') {\n    const cookieConfig = this.cookieConfigurer({\n      providerId: this.options.providerId,\n      baseUrl: this.options.baseUrl,\n      callbackUrl: this.options.callbackUrl,\n      appOrigin: origin ?? this.options.defaultAppOrigin,\n    });\n    return {\n      httpOnly: true,\n      sameSite: 'lax' as const,\n      ...cookieConfig,\n      path: cookieConfig.path + pathSuffix,\n    };\n  }\n\n  setNonce(res: Response, nonce: string, origin?: string): void {\n    this.setCookie(\n      res,\n      this.nonceCookie,\n      nonce,\n      TEN_MINUTES_MS,\n      origin,\n      '/handler',\n    );\n  }\n\n  setRefreshToken(res: Response, refreshToken: string, origin?: string): void {\n    this.setCookie(\n      res,\n      this.refreshTokenCookie,\n      refreshToken,\n      THOUSAND_DAYS_MS,\n      origin,\n    );\n  }\n\n  removeRefreshToken(res: Response, origin?: string): void {\n    this.removeCookie(res, this.refreshTokenCookie, origin);\n  }\n\n  removeGrantedScopes(res: Response, origin?: string): void {\n    this.removeCookie(res, this.grantedScopeCookie, origin);\n  }\n\n  setGrantedScopes(res: Response, scope: string, origin?: string): void {\n    this.setCookie(\n      res,\n      this.grantedScopeCookie,\n      scope,\n      THOUSAND_DAYS_MS,\n      origin,\n    );\n  }\n\n  getNonce(req: Request): string | undefined {\n    return this.getCookie(req, this.nonceCookie);\n  }\n\n  getRefreshToken(req: Request): string | undefined {\n    return this.getCookie(req, this.refreshTokenCookie);\n  }\n\n  getGrantedScopes(req: Request): string | undefined {\n    return this.getCookie(req, this.grantedScopeCookie);\n  }\n\n  private setCookie(\n    res: Response,\n    name: string,\n    val: string,\n    maxAge: number,\n    origin?: string,\n    pathSuffix: string = '',\n  ): Response {\n    const options = {\n      maxAge,\n      ...this.getConfig(origin, pathSuffix),\n    };\n    const req = res.req;\n    let output = res;\n    if (val.length > MAX_COOKIE_SIZE_CHARACTERS) {\n      const nonChunkedFormatExists = !!req.cookies[name];\n      if (nonChunkedFormatExists) {\n        output = output.cookie(name, '', this.getRemoveCookieOptions());\n      }\n\n      const chunked = this.splitCookieToChunks(val, MAX_COOKIE_SIZE_CHARACTERS);\n      chunked.forEach((value, chunkNumber) => {\n        output = output.cookie(\n          OAuthCookieManager.getCookieChunkName(name, chunkNumber),\n          value,\n          options,\n        );\n      });\n      return output;\n    }\n\n    const chunkedFormatExists = OAuthCookieManager.chunkedCookieExists(\n      req,\n      name,\n    );\n    if (chunkedFormatExists) {\n      for (let chunkNumber = 0; ; chunkNumber++) {\n        const key = OAuthCookieManager.getCookieChunkName(name, chunkNumber);\n        const exists = !!req.cookies[key];\n        if (!exists) {\n          break;\n        }\n        output = output.cookie(key, '', this.getRemoveCookieOptions());\n      }\n    }\n\n    return output.cookie(name, val, options);\n  }\n\n  private getCookie(req: Request, name: string): string | undefined {\n    const isChunked = OAuthCookieManager.chunkedCookieExists(req, name);\n    if (isChunked) {\n      const chunks: string[] = [];\n      let chunkNumber = 0;\n      let chunk =\n        req.cookies[OAuthCookieManager.getCookieChunkName(name, chunkNumber)];\n      while (chunk) {\n        chunks.push(chunk);\n        chunkNumber++;\n        chunk =\n          req.cookies[OAuthCookieManager.getCookieChunkName(name, chunkNumber)];\n      }\n      return chunks.join('');\n    }\n    return req.cookies[name];\n  }\n\n  private removeCookie(res: Response, name: string, origin?: string): Response {\n    const req = res.req;\n    const options = this.getRemoveCookieOptions(origin);\n    const isChunked = OAuthCookieManager.chunkedCookieExists(req, name);\n    if (isChunked) {\n      const nonChunkedFormatExists = !!req.cookies[name];\n      let output: Response = nonChunkedFormatExists\n        ? res.cookie(name, '', options)\n        : res;\n      for (let chunkNumber = 0; ; chunkNumber++) {\n        const key = OAuthCookieManager.getCookieChunkName(name, chunkNumber);\n        const exists = !!req.cookies[key];\n        if (!exists) {\n          break;\n        }\n        output = output.cookie(key, '', options);\n      }\n      return output;\n    }\n    return res.cookie(name, '', options);\n  }\n\n  private splitCookieToChunks(val: string, chunkSize: number): string[] {\n    const numChunks = Math.ceil(val.length / chunkSize);\n    const chunks: string[] = Array<string>(numChunks);\n\n    let offset: number = 0;\n    for (let i = 0; i < numChunks; i++) {\n      chunks[i] = val.substring(offset, offset + chunkSize);\n      offset += chunkSize;\n    }\n    return chunks;\n  }\n\n  private static chunkedCookieExists(req: Request, name: string): boolean {\n    return !!req.cookies[OAuthCookieManager.getCookieChunkName(name, 0)];\n  }\n\n  private static getCookieChunkName(name: string, chunkIndex: number): string {\n    return `${name}-${chunkIndex}`;\n  }\n\n  private getRemoveCookieOptions(origin?: string): CookieOptions {\n    return {\n      maxAge: 0,\n      ...this.getConfig(origin),\n    };\n  }\n}\n"],"names":[],"mappings":"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"}