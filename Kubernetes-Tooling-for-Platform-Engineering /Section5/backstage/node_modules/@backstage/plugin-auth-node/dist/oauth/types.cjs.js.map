{"version":3,"file":"types.cjs.js","sources":["../../src/oauth/types.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { Request } from 'express';\nimport { ProfileTransform } from '../types';\n\n/** @public */\nexport interface OAuthSession {\n  accessToken: string;\n  tokenType: string;\n  idToken?: string;\n  scope: string;\n  expiresInSeconds?: number;\n  refreshToken?: string;\n  refreshTokenExpiresInSeconds?: number;\n}\n\n/** @public */\nexport interface OAuthAuthenticatorScopeOptions {\n  persist?: boolean;\n  required?: string[];\n  transform?: (options: {\n    /** Scopes requested by the client */\n    requested: Iterable<string>;\n    /** Scopes which have already been granted */\n    granted: Iterable<string>;\n    /** Scopes that are required for the authenticator to function */\n    required: Iterable<string>;\n    /** Additional scopes added through configuration */\n    additional: Iterable<string>;\n  }) => Iterable<string>;\n}\n\n/** @public */\nexport interface OAuthAuthenticatorStartInput {\n  scope: string;\n  state: string;\n  req: Request;\n}\n\n/** @public */\nexport interface OAuthAuthenticatorAuthenticateInput {\n  req: Request;\n}\n\n/** @public */\nexport interface OAuthAuthenticatorRefreshInput {\n  scope: string;\n  refreshToken: string;\n  req: Request;\n}\n\n/** @public */\nexport interface OAuthAuthenticatorLogoutInput {\n  accessToken?: string;\n  refreshToken?: string;\n  req: Request;\n}\n\n/** @public */\nexport interface OAuthAuthenticatorResult<TProfile> {\n  fullProfile: TProfile;\n  session: OAuthSession;\n}\n\n/** @public */\nexport interface OAuthAuthenticator<TContext, TProfile> {\n  defaultProfileTransform: ProfileTransform<OAuthAuthenticatorResult<TProfile>>;\n  /** @deprecated use `scopes.persist` instead */\n  shouldPersistScopes?: boolean;\n  scopes?: OAuthAuthenticatorScopeOptions;\n  initialize(ctx: { callbackUrl: string; config: Config }): TContext;\n  start(\n    input: OAuthAuthenticatorStartInput,\n    ctx: TContext,\n  ): Promise<{ url: string; status?: number }>;\n  authenticate(\n    input: OAuthAuthenticatorAuthenticateInput,\n    ctx: TContext,\n  ): Promise<OAuthAuthenticatorResult<TProfile>>;\n  refresh(\n    input: OAuthAuthenticatorRefreshInput,\n    ctx: TContext,\n  ): Promise<OAuthAuthenticatorResult<TProfile>>;\n  logout?(input: OAuthAuthenticatorLogoutInput, ctx: TContext): Promise<void>;\n}\n\n/** @public */\nexport function createOAuthAuthenticator<TContext, TProfile>(\n  authenticator: OAuthAuthenticator<TContext, TProfile>,\n): OAuthAuthenticator<TContext, TProfile> {\n  return authenticator;\n}\n"],"names":[],"mappings":";;AAsGO,SAAS,yBACd,aACwC,EAAA;AACxC,EAAO,OAAA,aAAA;AACT;;;;"}