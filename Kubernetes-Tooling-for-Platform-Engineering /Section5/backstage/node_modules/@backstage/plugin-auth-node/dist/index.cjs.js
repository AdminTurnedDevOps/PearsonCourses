'use strict';

var AuthProvidersExtensionPoint = require('./extensions/AuthProvidersExtensionPoint.cjs.js');
var AuthOwnershipResolutionExtensionPoint = require('./extensions/AuthOwnershipResolutionExtensionPoint.cjs.js');
var sendWebMessageResponse = require('./flow/sendWebMessageResponse.cjs.js');
var prepareBackstageIdentityResponse = require('./identity/prepareBackstageIdentityResponse.cjs.js');
var getBearerTokenFromAuthorizationHeader = require('./identity/getBearerTokenFromAuthorizationHeader.cjs.js');
var DefaultIdentityClient = require('./identity/DefaultIdentityClient.cjs.js');
var IdentityClient = require('./identity/IdentityClient.cjs.js');
var createOAuthRouteHandlers = require('./oauth/createOAuthRouteHandlers.cjs.js');
var PassportOAuthAuthenticatorHelper = require('./oauth/PassportOAuthAuthenticatorHelper.cjs.js');
var OAuthEnvironmentHandler = require('./oauth/OAuthEnvironmentHandler.cjs.js');
var createOAuthProviderFactory = require('./oauth/createOAuthProviderFactory.cjs.js');
var state = require('./oauth/state.cjs.js');
var types$1 = require('./oauth/types.cjs.js');
var PassportHelpers = require('./passport/PassportHelpers.cjs.js');
var types$2 = require('./proxy/types.cjs.js');
var createProxyAuthProviderFactory = require('./proxy/createProxyAuthProviderFactory.cjs.js');
var createProxyRouteHandlers = require('./proxy/createProxyRouteHandlers.cjs.js');
var createSignInResolverFactory = require('./sign-in/createSignInResolverFactory.cjs.js');
var readDeclarativeSignInResolver = require('./sign-in/readDeclarativeSignInResolver.cjs.js');
var commonSignInResolvers = require('./sign-in/commonSignInResolvers.cjs.js');
var types = require('./types.cjs.js');



exports.authProvidersExtensionPoint = AuthProvidersExtensionPoint.authProvidersExtensionPoint;
exports.authOwnershipResolutionExtensionPoint = AuthOwnershipResolutionExtensionPoint.authOwnershipResolutionExtensionPoint;
exports.sendWebMessageResponse = sendWebMessageResponse.sendWebMessageResponse;
exports.prepareBackstageIdentityResponse = prepareBackstageIdentityResponse.prepareBackstageIdentityResponse;
exports.getBearerTokenFromAuthorizationHeader = getBearerTokenFromAuthorizationHeader.getBearerTokenFromAuthorizationHeader;
exports.DefaultIdentityClient = DefaultIdentityClient.DefaultIdentityClient;
exports.IdentityClient = IdentityClient.IdentityClient;
exports.createOAuthRouteHandlers = createOAuthRouteHandlers.createOAuthRouteHandlers;
exports.PassportOAuthAuthenticatorHelper = PassportOAuthAuthenticatorHelper.PassportOAuthAuthenticatorHelper;
exports.OAuthEnvironmentHandler = OAuthEnvironmentHandler.OAuthEnvironmentHandler;
exports.createOAuthProviderFactory = createOAuthProviderFactory.createOAuthProviderFactory;
exports.decodeOAuthState = state.decodeOAuthState;
exports.encodeOAuthState = state.encodeOAuthState;
exports.createOAuthAuthenticator = types$1.createOAuthAuthenticator;
exports.PassportHelpers = PassportHelpers.PassportHelpers;
exports.createProxyAuthenticator = types$2.createProxyAuthenticator;
exports.createProxyAuthProviderFactory = createProxyAuthProviderFactory.createProxyAuthProviderFactory;
exports.createProxyAuthRouteHandlers = createProxyRouteHandlers.createProxyAuthRouteHandlers;
exports.createSignInResolverFactory = createSignInResolverFactory.createSignInResolverFactory;
exports.readDeclarativeSignInResolver = readDeclarativeSignInResolver.readDeclarativeSignInResolver;
Object.defineProperty(exports, "commonSignInResolvers", {
  enumerable: true,
  get: function () { return commonSignInResolvers.commonSignInResolvers; }
});
exports.tokenTypes = types.tokenTypes;
//# sourceMappingURL=index.cjs.js.map
