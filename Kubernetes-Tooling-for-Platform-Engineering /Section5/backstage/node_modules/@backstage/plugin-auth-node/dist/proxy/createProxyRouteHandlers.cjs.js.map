{"version":3,"file":"createProxyRouteHandlers.cjs.js","sources":["../../src/proxy/createProxyRouteHandlers.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Request, Response } from 'express';\nimport { Config } from '@backstage/config';\nimport {\n  AuthProviderRouteHandlers,\n  AuthResolverContext,\n  ClientAuthResponse,\n  ProfileTransform,\n  SignInResolver,\n} from '../types';\nimport { ProxyAuthenticator } from './types';\nimport { prepareBackstageIdentityResponse } from '../identity';\nimport { NotImplementedError } from '@backstage/errors';\n\n/** @public */\nexport interface ProxyAuthRouteHandlersOptions<TResult> {\n  authenticator: ProxyAuthenticator<any, TResult, unknown>;\n  config: Config;\n  resolverContext: AuthResolverContext;\n  signInResolver: SignInResolver<TResult>;\n  profileTransform?: ProfileTransform<TResult>;\n}\n\n/** @public */\nexport function createProxyAuthRouteHandlers<TResult>(\n  options: ProxyAuthRouteHandlersOptions<TResult>,\n): AuthProviderRouteHandlers {\n  const { authenticator, config, resolverContext, signInResolver } = options;\n\n  const profileTransform =\n    options.profileTransform ?? authenticator.defaultProfileTransform;\n  const authenticatorCtx = authenticator.initialize({ config });\n\n  return {\n    async start(): Promise<void> {\n      throw new NotImplementedError('Not implemented');\n    },\n\n    async frameHandler(): Promise<void> {\n      throw new NotImplementedError('Not implemented');\n    },\n\n    async refresh(this: never, req: Request, res: Response): Promise<void> {\n      const { result, providerInfo } = await authenticator.authenticate(\n        { req },\n        authenticatorCtx,\n      );\n\n      const { profile } = await profileTransform(result, resolverContext);\n\n      const identity = await signInResolver(\n        { profile, result },\n        resolverContext,\n      );\n\n      const response: ClientAuthResponse<unknown> = {\n        profile,\n        providerInfo,\n        backstageIdentity: prepareBackstageIdentityResponse(identity),\n      };\n\n      res.status(200).json(response);\n    },\n  };\n}\n"],"names":["NotImplementedError","prepareBackstageIdentityResponse"],"mappings":";;;;;;AAuCO,SAAS,6BACd,OAC2B,EAAA;AAC3B,EAAA,MAAM,EAAE,aAAA,EAAe,MAAQ,EAAA,eAAA,EAAiB,gBAAmB,GAAA,OAAA;AAEnE,EAAM,MAAA,gBAAA,GACJ,OAAQ,CAAA,gBAAA,IAAoB,aAAc,CAAA,uBAAA;AAC5C,EAAA,MAAM,gBAAmB,GAAA,aAAA,CAAc,UAAW,CAAA,EAAE,QAAQ,CAAA;AAE5D,EAAO,OAAA;AAAA,IACL,MAAM,KAAuB,GAAA;AAC3B,MAAM,MAAA,IAAIA,2BAAoB,iBAAiB,CAAA;AAAA,KACjD;AAAA,IAEA,MAAM,YAA8B,GAAA;AAClC,MAAM,MAAA,IAAIA,2BAAoB,iBAAiB,CAAA;AAAA,KACjD;AAAA,IAEA,MAAM,OAAqB,CAAA,GAAA,EAAc,GAA8B,EAAA;AACrE,MAAA,MAAM,EAAE,MAAA,EAAQ,YAAa,EAAA,GAAI,MAAM,aAAc,CAAA,YAAA;AAAA,QACnD,EAAE,GAAI,EAAA;AAAA,QACN;AAAA,OACF;AAEA,MAAA,MAAM,EAAE,OAAQ,EAAA,GAAI,MAAM,gBAAA,CAAiB,QAAQ,eAAe,CAAA;AAElE,MAAA,MAAM,WAAW,MAAM,cAAA;AAAA,QACrB,EAAE,SAAS,MAAO,EAAA;AAAA,QAClB;AAAA,OACF;AAEA,MAAA,MAAM,QAAwC,GAAA;AAAA,QAC5C,OAAA;AAAA,QACA,YAAA;AAAA,QACA,iBAAA,EAAmBC,kEAAiC,QAAQ;AAAA,OAC9D;AAEA,MAAA,GAAA,CAAI,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,QAAQ,CAAA;AAAA;AAC/B,GACF;AACF;;;;"}