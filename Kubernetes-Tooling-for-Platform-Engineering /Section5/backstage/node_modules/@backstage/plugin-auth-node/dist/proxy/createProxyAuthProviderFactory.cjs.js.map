{"version":3,"file":"createProxyAuthProviderFactory.cjs.js","sources":["../../src/proxy/createProxyAuthProviderFactory.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  readDeclarativeSignInResolver,\n  SignInResolverFactory,\n} from '../sign-in';\nimport {\n  AuthProviderFactory,\n  ProfileTransform,\n  SignInResolver,\n} from '../types';\nimport { createProxyAuthRouteHandlers } from './createProxyRouteHandlers';\nimport { ProxyAuthenticator } from './types';\n\n/** @public */\nexport function createProxyAuthProviderFactory<TResult>(options: {\n  authenticator: ProxyAuthenticator<unknown, TResult, unknown>;\n  profileTransform?: ProfileTransform<TResult>;\n  signInResolver?: SignInResolver<TResult>;\n  signInResolverFactories?: Record<string, SignInResolverFactory>;\n}): AuthProviderFactory {\n  return ctx => {\n    const signInResolver =\n      options.signInResolver ??\n      readDeclarativeSignInResolver({\n        config: ctx.config,\n        signInResolverFactories: options.signInResolverFactories ?? {},\n      });\n\n    if (!signInResolver) {\n      throw new Error(\n        `No sign-in resolver configured for proxy auth provider '${ctx.providerId}'`,\n      );\n    }\n\n    return createProxyAuthRouteHandlers<TResult>({\n      signInResolver,\n      config: ctx.config,\n      authenticator: options.authenticator,\n      resolverContext: ctx.resolverContext,\n      profileTransform: options.profileTransform,\n    });\n  };\n}\n"],"names":["readDeclarativeSignInResolver","createProxyAuthRouteHandlers"],"mappings":";;;;;;;;;AA6BO,SAAS,+BAAwC,OAKhC,EAAA;AACtB,EAAA,OAAO,CAAO,GAAA,KAAA;AACZ,IAAM,MAAA,cAAA,GACJ,OAAQ,CAAA,cAAA,IACRA,2DAA8B,CAAA;AAAA,MAC5B,QAAQ,GAAI,CAAA,MAAA;AAAA,MACZ,uBAAA,EAAyB,OAAQ,CAAA,uBAAA,IAA2B;AAAC,KAC9D,CAAA;AAEH,IAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,wDAAA,EAA2D,IAAI,UAAU,CAAA,CAAA;AAAA,OAC3E;AAAA;AAGF,IAAA,OAAOC,qDAAsC,CAAA;AAAA,MAC3C,cAAA;AAAA,MACA,QAAQ,GAAI,CAAA,MAAA;AAAA,MACZ,eAAe,OAAQ,CAAA,aAAA;AAAA,MACvB,iBAAiB,GAAI,CAAA,eAAA;AAAA,MACrB,kBAAkB,OAAQ,CAAA;AAAA,KAC3B,CAAA;AAAA,GACH;AACF;;;;"}