{"version":3,"file":"KubernetesFetcher.cjs.js","sources":["../../src/service/KubernetesFetcher.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  bufferFromFileOrString,\n  Cluster,\n  CoreV1Api,\n  KubeConfig,\n  Metrics,\n  topPods,\n} from '@kubernetes/client-node';\nimport lodash, { Dictionary } from 'lodash';\nimport {\n  FetchResponseWrapper,\n  KubernetesFetcher,\n  ObjectFetchParams,\n} from '../types/types';\nimport {\n  ANNOTATION_KUBERNETES_AUTH_PROVIDER,\n  SERVICEACCOUNT_CA_PATH,\n  FetchResponse,\n  KubernetesErrorTypes,\n  KubernetesFetchError,\n  PodStatusFetchResponse,\n} from '@backstage/plugin-kubernetes-common';\nimport fetch, { RequestInit, Response } from 'node-fetch';\nimport * as https from 'https';\nimport fs from 'fs-extra';\nimport { JsonObject } from '@backstage/types';\nimport {\n  ClusterDetails,\n  KubernetesCredential,\n} from '@backstage/plugin-kubernetes-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nexport interface KubernetesClientBasedFetcherOptions {\n  logger: LoggerService;\n}\n\ntype FetchResult = FetchResponse | KubernetesFetchError;\n\nconst isError = (fr: FetchResult): fr is KubernetesFetchError =>\n  fr.hasOwnProperty('errorType');\n\nfunction fetchResultsToResponseWrapper(\n  results: FetchResult[],\n): FetchResponseWrapper {\n  const groupBy: Dictionary<FetchResult[]> = lodash.groupBy(results, value => {\n    return isError(value) ? 'errors' : 'responses';\n  });\n\n  return {\n    errors: groupBy.errors ?? [],\n    responses: groupBy.responses ?? [],\n  } as FetchResponseWrapper; // TODO would be nice to get rid of this 'as'\n}\n\nconst statusCodeToErrorType = (statusCode: number): KubernetesErrorTypes => {\n  switch (statusCode) {\n    case 400:\n      return 'BAD_REQUEST';\n    case 401:\n      return 'UNAUTHORIZED_ERROR';\n    case 404:\n      return 'NOT_FOUND';\n    case 500:\n      return 'SYSTEM_ERROR';\n    default:\n      return 'UNKNOWN_ERROR';\n  }\n};\n\nexport class KubernetesClientBasedFetcher implements KubernetesFetcher {\n  private readonly logger: LoggerService;\n\n  constructor({ logger }: KubernetesClientBasedFetcherOptions) {\n    this.logger = logger;\n  }\n\n  fetchObjectsForService(\n    params: ObjectFetchParams,\n  ): Promise<FetchResponseWrapper> {\n    const fetchResults = Array.from(params.objectTypesToFetch)\n      .concat(params.customResources)\n      .map(({ objectType, group, apiVersion, plural }) =>\n        this.fetchResource(\n          params.clusterDetails,\n          params.credential,\n          group,\n          apiVersion,\n          plural,\n          params.namespace,\n          params.labelSelector,\n        ).then(\n          (r: Response): Promise<FetchResult> =>\n            r.ok\n              ? r.json().then(\n                  ({ kind, items }): FetchResponse => ({\n                    type: objectType,\n                    resources:\n                      objectType === 'customresources'\n                        ? items.map((item: JsonObject) => ({\n                            ...item,\n                            kind: kind.replace(/(List)$/, ''),\n                          }))\n                        : items,\n                  }),\n                )\n              : this.handleUnsuccessfulResponse(params.clusterDetails.name, r),\n        ),\n      );\n\n    return Promise.all(fetchResults).then(fetchResultsToResponseWrapper);\n  }\n\n  fetchPodMetricsByNamespaces(\n    clusterDetails: ClusterDetails,\n    credential: KubernetesCredential,\n    namespaces: Set<string>,\n    labelSelector?: string,\n  ): Promise<FetchResponseWrapper> {\n    const fetchResults = Array.from(namespaces).map(async ns => {\n      const [podMetrics, podList] = await Promise.all([\n        this.fetchResource(\n          clusterDetails,\n          credential,\n          'metrics.k8s.io',\n          'v1beta1',\n          'pods',\n          ns,\n          labelSelector,\n        ),\n        this.fetchResource(\n          clusterDetails,\n          credential,\n          '',\n          'v1',\n          'pods',\n          ns,\n          labelSelector,\n        ),\n      ]);\n      if (podMetrics.ok && podList.ok) {\n        return topPods(\n          {\n            listPodForAllNamespaces: () => podList.json(),\n          } as unknown as CoreV1Api,\n          {\n            getPodMetrics: () => podMetrics.json(),\n          } as unknown as Metrics,\n        ).then(\n          (resources): PodStatusFetchResponse => ({\n            type: 'podstatus',\n            resources,\n          }),\n        );\n      } else if (podMetrics.ok) {\n        return this.handleUnsuccessfulResponse(clusterDetails.name, podList);\n      }\n      return this.handleUnsuccessfulResponse(clusterDetails.name, podMetrics);\n    });\n\n    return Promise.all(fetchResults).then(fetchResultsToResponseWrapper);\n  }\n\n  private async handleUnsuccessfulResponse(\n    clusterName: string,\n    res: Response,\n  ): Promise<KubernetesFetchError> {\n    const resourcePath = new URL(res.url).pathname;\n    this.logger.warn(\n      `Received ${\n        res.status\n      } status when fetching \"${resourcePath}\" from cluster \"${clusterName}\"; body=[${await res.text()}]`,\n    );\n    return {\n      errorType: statusCodeToErrorType(res.status),\n      statusCode: res.status,\n      resourcePath,\n    };\n  }\n\n  private fetchResource(\n    clusterDetails: ClusterDetails,\n    credential: KubernetesCredential,\n    group: string,\n    apiVersion: string,\n    plural: string,\n    namespace?: string,\n    labelSelector?: string,\n  ): Promise<Response> {\n    const encode = (s: string) => encodeURIComponent(s);\n    let resourcePath = group\n      ? `/apis/${encode(group)}/${encode(apiVersion)}`\n      : `/api/${encode(apiVersion)}`;\n    if (namespace) {\n      resourcePath += `/namespaces/${encode(namespace)}`;\n    }\n    resourcePath += `/${encode(plural)}`;\n\n    let url: URL;\n    let requestInit: RequestInit;\n    const authProvider =\n      clusterDetails.authMetadata[ANNOTATION_KUBERNETES_AUTH_PROVIDER];\n\n    if (this.isServiceAccountAuthentication(authProvider, clusterDetails)) {\n      [url, requestInit] = this.fetchArgsInCluster(credential);\n    } else if (!this.isCredentialMissing(authProvider, credential)) {\n      [url, requestInit] = this.fetchArgs(clusterDetails, credential);\n    } else {\n      return Promise.reject(\n        new Error(\n          `no bearer token or client cert for cluster '${clusterDetails.name}' and not running in Kubernetes`,\n        ),\n      );\n    }\n\n    if (url.pathname === '/') {\n      url.pathname = resourcePath;\n    } else {\n      url.pathname += resourcePath;\n    }\n\n    if (labelSelector) {\n      url.search = `labelSelector=${encode(labelSelector)}`;\n    }\n\n    return fetch(url, requestInit);\n  }\n\n  private isServiceAccountAuthentication(\n    authProvider: string,\n    clusterDetails: ClusterDetails,\n  ) {\n    return (\n      authProvider === 'serviceAccount' &&\n      !clusterDetails.authMetadata.serviceAccountToken &&\n      fs.pathExistsSync(SERVICEACCOUNT_CA_PATH)\n    );\n  }\n\n  private isCredentialMissing(\n    authProvider: string,\n    credential: KubernetesCredential,\n  ) {\n    return (\n      authProvider !== 'localKubectlProxy' && credential.type === 'anonymous'\n    );\n  }\n\n  private fetchArgs(\n    clusterDetails: ClusterDetails,\n    credential: KubernetesCredential,\n  ): [URL, RequestInit] {\n    const requestInit: RequestInit = {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        ...(credential.type === 'bearer token' && {\n          Authorization: `Bearer ${credential.token}`,\n        }),\n      },\n    };\n\n    const url: URL = new URL(clusterDetails.url);\n    if (url.protocol === 'https:') {\n      requestInit.agent = new https.Agent({\n        ca:\n          bufferFromFileOrString(\n            clusterDetails.caFile,\n            clusterDetails.caData,\n          ) ?? undefined,\n        rejectUnauthorized: !clusterDetails.skipTLSVerify,\n        ...(credential.type === 'x509 client certificate' && {\n          cert: credential.cert,\n          key: credential.key,\n        }),\n      });\n    }\n    return [url, requestInit];\n  }\n  private fetchArgsInCluster(\n    credential: KubernetesCredential,\n  ): [URL, RequestInit] {\n    const requestInit: RequestInit = {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        ...(credential.type === 'bearer token' && {\n          Authorization: `Bearer ${credential.token}`,\n        }),\n      },\n    };\n\n    const kc = new KubeConfig();\n    kc.loadFromCluster();\n    // loadFromCluster is guaranteed to populate the cluster/user/context\n    const cluster = kc.getCurrentCluster() as Cluster;\n\n    const url = new URL(cluster.server);\n    if (url.protocol === 'https:') {\n      requestInit.agent = new https.Agent({\n        ca: fs.readFileSync(cluster.caFile as string),\n      });\n    }\n    return [url, requestInit];\n  }\n}\n"],"names":["lodash","topPods","ANNOTATION_KUBERNETES_AUTH_PROVIDER","fetch","fs","SERVICEACCOUNT_CA_PATH","https","bufferFromFileOrString","KubeConfig"],"mappings":"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"}