{"version":3,"file":"DispatchStrategy.cjs.js","sources":["../../src/auth/DispatchStrategy.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_KUBERNETES_AUTH_PROVIDER,\n  KubernetesRequestAuth,\n} from '@backstage/plugin-kubernetes-common';\nimport {\n  AuthMetadata,\n  AuthenticationStrategy,\n  ClusterDetails,\n  KubernetesCredential,\n} from '@backstage/plugin-kubernetes-node';\n\n/**\n *\n * @public\n */\nexport type DispatchStrategyOptions = {\n  authStrategyMap: {\n    [key: string]: AuthenticationStrategy;\n  };\n};\n/**\n * used to direct a KubernetesAuthProvider to its corresponding AuthenticationStrategy\n * @public\n */\nexport class DispatchStrategy implements AuthenticationStrategy {\n  private readonly strategyMap: { [key: string]: AuthenticationStrategy };\n\n  constructor(options: DispatchStrategyOptions) {\n    this.strategyMap = options.authStrategyMap;\n  }\n\n  public getCredential(\n    clusterDetails: ClusterDetails,\n    auth: KubernetesRequestAuth,\n  ): Promise<KubernetesCredential> {\n    const authProvider =\n      clusterDetails.authMetadata[ANNOTATION_KUBERNETES_AUTH_PROVIDER];\n    if (this.strategyMap[authProvider]) {\n      return this.strategyMap[authProvider].getCredential(clusterDetails, auth);\n    }\n    throw new Error(\n      `authProvider \"${authProvider}\" has no AuthenticationStrategy associated with it`,\n    );\n  }\n\n  public validateCluster(authMetadata: AuthMetadata): Error[] {\n    const authProvider = authMetadata[ANNOTATION_KUBERNETES_AUTH_PROVIDER];\n    const strategy = this.strategyMap[authProvider];\n    if (!strategy) {\n      return [\n        new Error(\n          `authProvider \"${authProvider}\" has no config associated with it`,\n        ),\n      ];\n    }\n    return strategy.validateCluster(authMetadata);\n  }\n\n  public presentAuthMetadata(_authMetadata: AuthMetadata): AuthMetadata {\n    return {};\n  }\n}\n"],"names":["ANNOTATION_KUBERNETES_AUTH_PROVIDER"],"mappings":";;;;AAwCO,MAAM,gBAAmD,CAAA;AAAA,EAC7C,WAAA;AAAA,EAEjB,YAAY,OAAkC,EAAA;AAC5C,IAAA,IAAA,CAAK,cAAc,OAAQ,CAAA,eAAA;AAAA;AAC7B,EAEO,aAAA,CACL,gBACA,IAC+B,EAAA;AAC/B,IAAM,MAAA,YAAA,GACJ,cAAe,CAAA,YAAA,CAAaA,0DAAmC,CAAA;AACjE,IAAI,IAAA,IAAA,CAAK,WAAY,CAAA,YAAY,CAAG,EAAA;AAClC,MAAA,OAAO,KAAK,WAAY,CAAA,YAAY,CAAE,CAAA,aAAA,CAAc,gBAAgB,IAAI,CAAA;AAAA;AAE1E,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,iBAAiB,YAAY,CAAA,kDAAA;AAAA,KAC/B;AAAA;AACF,EAEO,gBAAgB,YAAqC,EAAA;AAC1D,IAAM,MAAA,YAAA,GAAe,aAAaA,0DAAmC,CAAA;AACrE,IAAM,MAAA,QAAA,GAAW,IAAK,CAAA,WAAA,CAAY,YAAY,CAAA;AAC9C,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAO,OAAA;AAAA,QACL,IAAI,KAAA;AAAA,UACF,iBAAiB,YAAY,CAAA,kCAAA;AAAA;AAC/B,OACF;AAAA;AAEF,IAAO,OAAA,QAAA,CAAS,gBAAgB,YAAY,CAAA;AAAA;AAC9C,EAEO,oBAAoB,aAA2C,EAAA;AACpE,IAAA,OAAO,EAAC;AAAA;AAEZ;;;;"}