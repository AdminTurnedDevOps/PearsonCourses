{"version":3,"file":"AzureIdentityStrategy.cjs.js","sources":["../../src/auth/AzureIdentityStrategy.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AccessToken,\n  DefaultAzureCredential,\n  TokenCredential,\n} from '@azure/identity';\nimport {\n  AuthenticationStrategy,\n  AuthMetadata,\n  KubernetesCredential,\n} from '@backstage/plugin-kubernetes-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst aksScope = '6dae42f8-4368-4678-94ff-3960e28e3630/.default'; // This scope is the same for all Azure Managed Kubernetes\n\n/**\n *\n * @public\n */\nexport class AzureIdentityStrategy implements AuthenticationStrategy {\n  private accessToken: AccessToken = { token: '', expiresOnTimestamp: 0 };\n  private newTokenPromise: Promise<string> | undefined;\n\n  constructor(\n    private readonly logger: LoggerService,\n    private readonly tokenCredential: TokenCredential = new DefaultAzureCredential(),\n  ) {}\n\n  public async getCredential(): Promise<KubernetesCredential> {\n    if (!this.tokenRequiresRefresh()) {\n      return { type: 'bearer token', token: this.accessToken.token };\n    }\n\n    if (!this.newTokenPromise) {\n      this.newTokenPromise = this.fetchNewToken();\n    }\n\n    return this.newTokenPromise\n      ? { type: 'bearer token', token: await this.newTokenPromise }\n      : { type: 'anonymous' };\n  }\n\n  public validateCluster(): Error[] {\n    return [];\n  }\n\n  private async fetchNewToken(): Promise<string> {\n    try {\n      this.logger.info('Fetching new Azure token for AKS');\n\n      const newAccessToken = await this.tokenCredential.getToken(aksScope, {\n        requestOptions: { timeout: 10_000 }, // 10 seconds\n      });\n      if (!newAccessToken) {\n        throw new Error('AccessToken is null');\n      }\n\n      this.accessToken = newAccessToken;\n    } catch (err) {\n      this.logger.error('Unable to fetch Azure token', err);\n\n      // only throw the error if the token has already expired, otherwise re-use existing until we're able to fetch a new token\n      if (this.tokenExpired()) {\n        throw err;\n      }\n    }\n\n    this.newTokenPromise = undefined;\n    return this.accessToken.token;\n  }\n\n  private tokenRequiresRefresh(): boolean {\n    // Set tokens to expire 15 minutes before its actual expiry time\n    const expiresOn = this.accessToken.expiresOnTimestamp - 15 * 60 * 1000;\n    return Date.now() >= expiresOn;\n  }\n\n  private tokenExpired(): boolean {\n    return Date.now() >= this.accessToken.expiresOnTimestamp;\n  }\n\n  public presentAuthMetadata(_authMetadata: AuthMetadata): AuthMetadata {\n    return {};\n  }\n}\n"],"names":["DefaultAzureCredential"],"mappings":";;;;AA4BA,MAAM,QAAW,GAAA,+CAAA;AAMV,MAAM,qBAAwD,CAAA;AAAA,EAInE,WACmB,CAAA,MAAA,EACA,eAAmC,GAAA,IAAIA,iCACxD,EAAA;AAFiB,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AACA,IAAA,IAAA,CAAA,eAAA,GAAA,eAAA;AAAA;AAChB,EANK,WAA2B,GAAA,EAAE,KAAO,EAAA,EAAA,EAAI,oBAAoB,CAAE,EAAA;AAAA,EAC9D,eAAA;AAAA,EAOR,MAAa,aAA+C,GAAA;AAC1D,IAAI,IAAA,CAAC,IAAK,CAAA,oBAAA,EAAwB,EAAA;AAChC,MAAA,OAAO,EAAE,IAAM,EAAA,cAAA,EAAgB,KAAO,EAAA,IAAA,CAAK,YAAY,KAAM,EAAA;AAAA;AAG/D,IAAI,IAAA,CAAC,KAAK,eAAiB,EAAA;AACzB,MAAK,IAAA,CAAA,eAAA,GAAkB,KAAK,aAAc,EAAA;AAAA;AAG5C,IAAA,OAAO,IAAK,CAAA,eAAA,GACR,EAAE,IAAA,EAAM,cAAgB,EAAA,KAAA,EAAO,MAAM,IAAA,CAAK,eAAgB,EAAA,GAC1D,EAAE,IAAA,EAAM,WAAY,EAAA;AAAA;AAC1B,EAEO,eAA2B,GAAA;AAChC,IAAA,OAAO,EAAC;AAAA;AACV,EAEA,MAAc,aAAiC,GAAA;AAC7C,IAAI,IAAA;AACF,MAAK,IAAA,CAAA,MAAA,CAAO,KAAK,kCAAkC,CAAA;AAEnD,MAAA,MAAM,cAAiB,GAAA,MAAM,IAAK,CAAA,eAAA,CAAgB,SAAS,QAAU,EAAA;AAAA,QACnE,cAAA,EAAgB,EAAE,OAAA,EAAS,GAAO;AAAA;AAAA,OACnC,CAAA;AACD,MAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,QAAM,MAAA,IAAI,MAAM,qBAAqB,CAAA;AAAA;AAGvC,MAAA,IAAA,CAAK,WAAc,GAAA,cAAA;AAAA,aACZ,GAAK,EAAA;AACZ,MAAK,IAAA,CAAA,MAAA,CAAO,KAAM,CAAA,6BAAA,EAA+B,GAAG,CAAA;AAGpD,MAAI,IAAA,IAAA,CAAK,cAAgB,EAAA;AACvB,QAAM,MAAA,GAAA;AAAA;AACR;AAGF,IAAA,IAAA,CAAK,eAAkB,GAAA,KAAA,CAAA;AACvB,IAAA,OAAO,KAAK,WAAY,CAAA,KAAA;AAAA;AAC1B,EAEQ,oBAAgC,GAAA;AAEtC,IAAA,MAAM,SAAY,GAAA,IAAA,CAAK,WAAY,CAAA,kBAAA,GAAqB,KAAK,EAAK,GAAA,GAAA;AAClE,IAAO,OAAA,IAAA,CAAK,KAAS,IAAA,SAAA;AAAA;AACvB,EAEQ,YAAwB,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,GAAA,EAAS,IAAA,IAAA,CAAK,WAAY,CAAA,kBAAA;AAAA;AACxC,EAEO,oBAAoB,aAA2C,EAAA;AACpE,IAAA,OAAO,EAAC;AAAA;AAEZ;;;;"}