{"version":3,"file":"OidcStrategy.cjs.js","sources":["../../src/auth/OidcStrategy.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JsonObject } from '@backstage/types';\nimport {\n  ANNOTATION_KUBERNETES_OIDC_TOKEN_PROVIDER,\n  KubernetesRequestAuth,\n} from '@backstage/plugin-kubernetes-common';\nimport {\n  AuthMetadata,\n  AuthenticationStrategy,\n  ClusterDetails,\n  KubernetesCredential,\n} from '@backstage/plugin-kubernetes-node';\n\n/**\n *\n * @public\n */\nexport class OidcStrategy implements AuthenticationStrategy {\n  public async getCredential(\n    clusterDetails: ClusterDetails,\n    authConfig: KubernetesRequestAuth,\n  ): Promise<KubernetesCredential> {\n    const oidcTokenProvider =\n      clusterDetails.authMetadata[ANNOTATION_KUBERNETES_OIDC_TOKEN_PROVIDER];\n\n    if (!oidcTokenProvider || oidcTokenProvider === '') {\n      throw new Error(\n        `oidc authProvider requires a configured oidcTokenProvider`,\n      );\n    }\n\n    const token = (authConfig.oidc as JsonObject | null)?.[oidcTokenProvider];\n\n    if (!token) {\n      throw new Error(\n        `Auth token not found under oidc.${oidcTokenProvider} in request body`,\n      );\n    }\n    return { type: 'bearer token', token: token as string };\n  }\n\n  public validateCluster(authMetadata: AuthMetadata): Error[] {\n    const oidcTokenProvider =\n      authMetadata[ANNOTATION_KUBERNETES_OIDC_TOKEN_PROVIDER];\n    if (!oidcTokenProvider || oidcTokenProvider === '') {\n      return [new Error(`Must specify a token provider for 'oidc' strategy`)];\n    }\n    return [];\n  }\n\n  public presentAuthMetadata(_authMetadata: AuthMetadata): AuthMetadata {\n    return {};\n  }\n}\n"],"names":["ANNOTATION_KUBERNETES_OIDC_TOKEN_PROVIDER"],"mappings":";;;;AA+BO,MAAM,YAA+C,CAAA;AAAA,EAC1D,MAAa,aACX,CAAA,cAAA,EACA,UAC+B,EAAA;AAC/B,IAAM,MAAA,iBAAA,GACJ,cAAe,CAAA,YAAA,CAAaA,gEAAyC,CAAA;AAEvE,IAAI,IAAA,CAAC,iBAAqB,IAAA,iBAAA,KAAsB,EAAI,EAAA;AAClD,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,yDAAA;AAAA,OACF;AAAA;AAGF,IAAM,MAAA,KAAA,GAAS,UAAW,CAAA,IAAA,GAA6B,iBAAiB,CAAA;AAExE,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,mCAAmC,iBAAiB,CAAA,gBAAA;AAAA,OACtD;AAAA;AAEF,IAAO,OAAA,EAAE,IAAM,EAAA,cAAA,EAAgB,KAAuB,EAAA;AAAA;AACxD,EAEO,gBAAgB,YAAqC,EAAA;AAC1D,IAAM,MAAA,iBAAA,GACJ,aAAaA,gEAAyC,CAAA;AACxD,IAAI,IAAA,CAAC,iBAAqB,IAAA,iBAAA,KAAsB,EAAI,EAAA;AAClD,MAAA,OAAO,CAAC,IAAI,KAAM,CAAA,CAAA,iDAAA,CAAmD,CAAC,CAAA;AAAA;AAExE,IAAA,OAAO,EAAC;AAAA;AACV,EAEO,oBAAoB,aAA2C,EAAA;AACpE,IAAA,OAAO,EAAC;AAAA;AAEZ;;;;"}