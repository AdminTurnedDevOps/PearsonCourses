{"version":3,"file":"CatalogRelationServiceLocator.cjs.js","sources":["../../src/service-locator/CatalogRelationServiceLocator.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity } from '@backstage/catalog-model';\nimport {\n  ClusterDetails,\n  KubernetesClustersSupplier,\n  KubernetesServiceLocator,\n  ServiceLocatorRequestContext,\n} from '@backstage/plugin-kubernetes-node';\n\n// This locator assumes that service is located on the clusters it depends on\n// Therefore it will return the clusters based on the relations it has or none otherwise\nexport class CatalogRelationServiceLocator implements KubernetesServiceLocator {\n  private readonly clusterSupplier: KubernetesClustersSupplier;\n\n  constructor(clusterSupplier: KubernetesClustersSupplier) {\n    this.clusterSupplier = clusterSupplier;\n  }\n\n  // As this implementation always returns all clusters serviceId is ignored here\n  getClustersByEntity(\n    entity: Entity,\n    requestContext: ServiceLocatorRequestContext,\n  ): Promise<{ clusters: ClusterDetails[] }> {\n    if (\n      entity.relations &&\n      entity.relations.some(\n        r => r.type === 'dependsOn' && r.targetRef.includes('resource:'),\n      )\n    ) {\n      return this.clusterSupplier\n        .getClusters({ credentials: requestContext.credentials })\n        .then(clusters => {\n          return {\n            clusters: clusters.filter(c =>\n              this.doesEntityDependOnCluster(entity, c),\n            ),\n          };\n        });\n    }\n    return Promise.resolve({ clusters: [] });\n  }\n\n  protected doesEntityDependOnCluster(\n    entity: Entity,\n    cluster: ClusterDetails,\n  ): boolean {\n    return entity.relations!.some(\n      rel =>\n        rel.type === 'dependsOn' &&\n        rel.targetRef ===\n          `resource:${entity.metadata.namespace ?? 'default'}/${cluster.name}`,\n    );\n  }\n}\n"],"names":[],"mappings":";;AAyBO,MAAM,6BAAkE,CAAA;AAAA,EAC5D,eAAA;AAAA,EAEjB,YAAY,eAA6C,EAAA;AACvD,IAAA,IAAA,CAAK,eAAkB,GAAA,eAAA;AAAA;AACzB;AAAA,EAGA,mBAAA,CACE,QACA,cACyC,EAAA;AACzC,IACE,IAAA,MAAA,CAAO,SACP,IAAA,MAAA,CAAO,SAAU,CAAA,IAAA;AAAA,MACf,OAAK,CAAE,CAAA,IAAA,KAAS,eAAe,CAAE,CAAA,SAAA,CAAU,SAAS,WAAW;AAAA,KAEjE,EAAA;AACA,MAAO,OAAA,IAAA,CAAK,eACT,CAAA,WAAA,CAAY,EAAE,WAAA,EAAa,eAAe,WAAY,EAAC,CACvD,CAAA,IAAA,CAAK,CAAY,QAAA,KAAA;AAChB,QAAO,OAAA;AAAA,UACL,UAAU,QAAS,CAAA,MAAA;AAAA,YAAO,CACxB,CAAA,KAAA,IAAA,CAAK,yBAA0B,CAAA,MAAA,EAAQ,CAAC;AAAA;AAC1C,SACF;AAAA,OACD,CAAA;AAAA;AAEL,IAAA,OAAO,QAAQ,OAAQ,CAAA,EAAE,QAAU,EAAA,IAAI,CAAA;AAAA;AACzC,EAEU,yBAAA,CACR,QACA,OACS,EAAA;AACT,IAAA,OAAO,OAAO,SAAW,CAAA,IAAA;AAAA,MACvB,CACE,GAAA,KAAA,GAAA,CAAI,IAAS,KAAA,WAAA,IACb,GAAI,CAAA,SAAA,KACF,CAAY,SAAA,EAAA,MAAA,CAAO,QAAS,CAAA,SAAA,IAAa,SAAS,CAAA,CAAA,EAAI,QAAQ,IAAI,CAAA;AAAA,KACxE;AAAA;AAEJ;;;;"}