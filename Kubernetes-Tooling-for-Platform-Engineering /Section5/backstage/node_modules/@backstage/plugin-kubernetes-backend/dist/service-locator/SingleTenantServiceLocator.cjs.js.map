{"version":3,"file":"SingleTenantServiceLocator.cjs.js","sources":["../../src/service-locator/SingleTenantServiceLocator.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Entity } from '@backstage/catalog-model';\nimport {\n  ClusterDetails,\n  KubernetesClustersSupplier,\n  KubernetesServiceLocator,\n  ServiceLocatorRequestContext,\n} from '../types/types';\n\n// This locator assumes that service is located on one cluster\n// Therefore it will always return specified cluster provided in backstage.io/kubernetes-cluster annotation\n// If backstage.io/kubernetes-cluster annotation not provided will always return all cluster provided\nexport class SingleTenantServiceLocator implements KubernetesServiceLocator {\n  private readonly clusterSupplier: KubernetesClustersSupplier;\n\n  constructor(clusterSupplier: KubernetesClustersSupplier) {\n    this.clusterSupplier = clusterSupplier;\n  }\n\n  // As this implementation always returns all clusters serviceId is ignored here\n  getClustersByEntity(\n    _entity: Entity,\n    requestContext: ServiceLocatorRequestContext,\n  ): Promise<{ clusters: ClusterDetails[] }> {\n    return this.clusterSupplier\n      .getClusters({ credentials: requestContext.credentials })\n      .then(clusters => {\n        if (\n          _entity.metadata?.annotations?.['backstage.io/kubernetes-cluster']\n        ) {\n          return {\n            clusters: clusters.filter(\n              c =>\n                c.name ===\n                _entity.metadata?.annotations?.[\n                  'backstage.io/kubernetes-cluster'\n                ],\n            ),\n          };\n        }\n        return { clusters };\n      });\n  }\n}\n"],"names":[],"mappings":";;AA0BO,MAAM,0BAA+D,CAAA;AAAA,EACzD,eAAA;AAAA,EAEjB,YAAY,eAA6C,EAAA;AACvD,IAAA,IAAA,CAAK,eAAkB,GAAA,eAAA;AAAA;AACzB;AAAA,EAGA,mBAAA,CACE,SACA,cACyC,EAAA;AACzC,IAAO,OAAA,IAAA,CAAK,eACT,CAAA,WAAA,CAAY,EAAE,WAAA,EAAa,eAAe,WAAY,EAAC,CACvD,CAAA,IAAA,CAAK,CAAY,QAAA,KAAA;AAChB,MAAA,IACE,OAAQ,CAAA,QAAA,EAAU,WAAc,GAAA,iCAAiC,CACjE,EAAA;AACA,QAAO,OAAA;AAAA,UACL,UAAU,QAAS,CAAA,MAAA;AAAA,YACjB,OACE,CAAE,CAAA,IAAA,KACF,OAAQ,CAAA,QAAA,EAAU,cAChB,iCACF;AAAA;AACJ,SACF;AAAA;AAEF,MAAA,OAAO,EAAE,QAAS,EAAA;AAAA,KACnB,CAAA;AAAA;AAEP;;;;"}