{"version":3,"file":"MultiTenantServiceLocator.cjs.js","sources":["../../src/service-locator/MultiTenantServiceLocator.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport {\n  ClusterDetails,\n  KubernetesClustersSupplier,\n  KubernetesServiceLocator,\n  ServiceLocatorRequestContext,\n} from '../types/types';\n\n// This locator assumes that every service is located on every cluster\n// Therefore it will always return all clusters provided\nexport class MultiTenantServiceLocator implements KubernetesServiceLocator {\n  private readonly clusterSupplier: KubernetesClustersSupplier;\n\n  constructor(clusterSupplier: KubernetesClustersSupplier) {\n    this.clusterSupplier = clusterSupplier;\n  }\n\n  // As this implementation always returns all clusters serviceId is ignored here\n  getClustersByEntity(\n    _entity: Entity,\n    requestContext: ServiceLocatorRequestContext,\n  ): Promise<{ clusters: ClusterDetails[] }> {\n    return this.clusterSupplier\n      .getClusters({ credentials: requestContext.credentials })\n      .then(clusters => ({ clusters }));\n  }\n}\n"],"names":[],"mappings":";;AA0BO,MAAM,yBAA8D,CAAA;AAAA,EACxD,eAAA;AAAA,EAEjB,YAAY,eAA6C,EAAA;AACvD,IAAA,IAAA,CAAK,eAAkB,GAAA,eAAA;AAAA;AACzB;AAAA,EAGA,mBAAA,CACE,SACA,cACyC,EAAA;AACzC,IAAA,OAAO,IAAK,CAAA,eAAA,CACT,WAAY,CAAA,EAAE,WAAa,EAAA,cAAA,CAAe,WAAY,EAAC,CACvD,CAAA,IAAA,CAAK,CAAa,QAAA,MAAA,EAAE,UAAW,CAAA,CAAA;AAAA;AAEtC;;;;"}