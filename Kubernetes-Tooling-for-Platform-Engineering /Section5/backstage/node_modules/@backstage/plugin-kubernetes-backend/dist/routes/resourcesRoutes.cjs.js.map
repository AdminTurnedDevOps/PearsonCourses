{"version":3,"file":"resourcesRoutes.cjs.js","sources":["../../src/routes/resourcesRoutes.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  CompoundEntityRef,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport { InputError } from '@backstage/errors';\nimport express, { Request } from 'express';\nimport { KubernetesObjectsProvider } from '@backstage/plugin-kubernetes-node';\nimport { AuthService, HttpAuthService } from '@backstage/backend-plugin-api';\n\nexport const addResourceRoutesToRouter = (\n  router: express.Router,\n  catalogApi: CatalogApi,\n  objectsProvider: KubernetesObjectsProvider,\n  auth: AuthService,\n  httpAuth: HttpAuthService,\n) => {\n  const getEntityByReq = async (req: Request<any>) => {\n    const rawEntityRef = req.body.entityRef;\n    if (rawEntityRef && typeof rawEntityRef !== 'string') {\n      throw new InputError(`entity query must be a string`);\n    } else if (!rawEntityRef) {\n      throw new InputError('entity is a required field');\n    }\n    let entityRef: CompoundEntityRef | undefined = undefined;\n\n    try {\n      entityRef = parseEntityRef(rawEntityRef);\n    } catch (error) {\n      throw new InputError(`Invalid entity ref, ${error}`);\n    }\n\n    const { token } = await auth.getPluginRequestToken({\n      onBehalfOf: await httpAuth.credentials(req),\n      targetPluginId: 'catalog',\n    });\n\n    const entity = await catalogApi.getEntityByRef(entityRef, { token });\n    if (!entity) {\n      throw new InputError(\n        `Entity ref missing, ${stringifyEntityRef(entityRef)}`,\n      );\n    }\n\n    return entity;\n  };\n\n  router.post('/resources/workloads/query', async (req, res) => {\n    const entity = await getEntityByReq(req);\n    const response = await objectsProvider.getKubernetesObjectsByEntity(\n      {\n        entity,\n        auth: req.body.auth,\n      },\n      { credentials: await httpAuth.credentials(req) },\n    );\n    res.json(response);\n  });\n\n  router.post('/resources/custom/query', async (req, res) => {\n    const entity = await getEntityByReq(req);\n\n    if (!req.body.customResources) {\n      throw new InputError('customResources is a required field');\n    } else if (!Array.isArray(req.body.customResources)) {\n      throw new InputError('customResources must be an array');\n    } else if (req.body.customResources.length === 0) {\n      throw new InputError('at least 1 customResource is required');\n    }\n\n    const response = await objectsProvider.getCustomResourcesByEntity(\n      {\n        entity,\n        customResources: req.body.customResources,\n        auth: req.body.auth,\n      },\n      { credentials: await httpAuth.credentials(req) },\n    );\n    res.json(response);\n  });\n};\n"],"names":["InputError","parseEntityRef","stringifyEntityRef"],"mappings":";;;;;AA0BO,MAAM,4BAA4B,CACvC,MAAA,EACA,UACA,EAAA,eAAA,EACA,MACA,QACG,KAAA;AACH,EAAM,MAAA,cAAA,GAAiB,OAAO,GAAsB,KAAA;AAClD,IAAM,MAAA,YAAA,GAAe,IAAI,IAAK,CAAA,SAAA;AAC9B,IAAI,IAAA,YAAA,IAAgB,OAAO,YAAA,KAAiB,QAAU,EAAA;AACpD,MAAM,MAAA,IAAIA,kBAAW,CAA+B,6BAAA,CAAA,CAAA;AAAA,KACtD,MAAA,IAAW,CAAC,YAAc,EAAA;AACxB,MAAM,MAAA,IAAIA,kBAAW,4BAA4B,CAAA;AAAA;AAEnD,IAAA,IAAI,SAA2C,GAAA,KAAA,CAAA;AAE/C,IAAI,IAAA;AACF,MAAA,SAAA,GAAYC,4BAAe,YAAY,CAAA;AAAA,aAChC,KAAO,EAAA;AACd,MAAA,MAAM,IAAID,iBAAA,CAAW,CAAuB,oBAAA,EAAA,KAAK,CAAE,CAAA,CAAA;AAAA;AAGrD,IAAA,MAAM,EAAE,KAAA,EAAU,GAAA,MAAM,KAAK,qBAAsB,CAAA;AAAA,MACjD,UAAY,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,MAC1C,cAAgB,EAAA;AAAA,KACjB,CAAA;AAED,IAAA,MAAM,SAAS,MAAM,UAAA,CAAW,eAAe,SAAW,EAAA,EAAE,OAAO,CAAA;AACnE,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAA,MAAM,IAAIA,iBAAA;AAAA,QACR,CAAA,oBAAA,EAAuBE,+BAAmB,CAAA,SAAS,CAAC,CAAA;AAAA,OACtD;AAAA;AAGF,IAAO,OAAA,MAAA;AAAA,GACT;AAEA,EAAA,MAAA,CAAO,IAAK,CAAA,4BAAA,EAA8B,OAAO,GAAA,EAAK,GAAQ,KAAA;AAC5D,IAAM,MAAA,MAAA,GAAS,MAAM,cAAA,CAAe,GAAG,CAAA;AACvC,IAAM,MAAA,QAAA,GAAW,MAAM,eAAgB,CAAA,4BAAA;AAAA,MACrC;AAAA,QACE,MAAA;AAAA,QACA,IAAA,EAAM,IAAI,IAAK,CAAA;AAAA,OACjB;AAAA,MACA,EAAE,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAE;AAAA,KACjD;AACA,IAAA,GAAA,CAAI,KAAK,QAAQ,CAAA;AAAA,GAClB,CAAA;AAED,EAAA,MAAA,CAAO,IAAK,CAAA,yBAAA,EAA2B,OAAO,GAAA,EAAK,GAAQ,KAAA;AACzD,IAAM,MAAA,MAAA,GAAS,MAAM,cAAA,CAAe,GAAG,CAAA;AAEvC,IAAI,IAAA,CAAC,GAAI,CAAA,IAAA,CAAK,eAAiB,EAAA;AAC7B,MAAM,MAAA,IAAIF,kBAAW,qCAAqC,CAAA;AAAA,eACjD,CAAC,KAAA,CAAM,QAAQ,GAAI,CAAA,IAAA,CAAK,eAAe,CAAG,EAAA;AACnD,MAAM,MAAA,IAAIA,kBAAW,kCAAkC,CAAA;AAAA,KAC9C,MAAA,IAAA,GAAA,CAAI,IAAK,CAAA,eAAA,CAAgB,WAAW,CAAG,EAAA;AAChD,MAAM,MAAA,IAAIA,kBAAW,uCAAuC,CAAA;AAAA;AAG9D,IAAM,MAAA,QAAA,GAAW,MAAM,eAAgB,CAAA,0BAAA;AAAA,MACrC;AAAA,QACE,MAAA;AAAA,QACA,eAAA,EAAiB,IAAI,IAAK,CAAA,eAAA;AAAA,QAC1B,IAAA,EAAM,IAAI,IAAK,CAAA;AAAA,OACjB;AAAA,MACA,EAAE,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAE;AAAA,KACjD;AACA,IAAA,GAAA,CAAI,KAAK,QAAQ,CAAA;AAAA,GAClB,CAAA;AACH;;;;"}