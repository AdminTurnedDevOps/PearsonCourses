{"version":3,"file":"ConfigClusterLocator.cjs.js","sources":["../../src/cluster-locator/ConfigClusterLocator.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport {\n  ANNOTATION_KUBERNETES_AUTH_PROVIDER,\n  ANNOTATION_KUBERNETES_AWS_ASSUME_ROLE,\n  ANNOTATION_KUBERNETES_AWS_EXTERNAL_ID,\n  ANNOTATION_KUBERNETES_OIDC_TOKEN_PROVIDER,\n} from '@backstage/plugin-kubernetes-common';\nimport { ClusterDetails, KubernetesClustersSupplier } from '../types/types';\nimport { AuthenticationStrategy } from '../auth';\n\nexport class ConfigClusterLocator implements KubernetesClustersSupplier {\n  private readonly clusterDetails: ClusterDetails[];\n\n  constructor(clusterDetails: ClusterDetails[]) {\n    this.clusterDetails = clusterDetails;\n  }\n\n  static fromConfig(\n    config: Config,\n    authStrategy: AuthenticationStrategy,\n  ): ConfigClusterLocator {\n    const clusterNames = new Set();\n    return new ConfigClusterLocator(\n      config.getConfigArray('clusters').map(c => {\n        const authMetadataBlock = c.getOptional<{\n          [ANNOTATION_KUBERNETES_AUTH_PROVIDER]?: string;\n        }>('authMetadata');\n        const name = c.getString('name');\n        if (clusterNames.has(name)) {\n          throw new Error(`Duplicate cluster name '${name}'`);\n        }\n        clusterNames.add(name);\n        const authProvider =\n          authMetadataBlock?.[ANNOTATION_KUBERNETES_AUTH_PROVIDER] ??\n          c.getOptionalString('authProvider');\n        if (!authProvider) {\n          throw new Error(\n            `cluster '${name}' has no auth provider configured; this must be ` +\n              `specified via the 'authProvider' or ` +\n              `'authMetadata.${ANNOTATION_KUBERNETES_AUTH_PROVIDER}' parameter`,\n          );\n        }\n        const title = c.getOptionalString('title');\n        const clusterDetails: ClusterDetails = {\n          name,\n          ...(title && { title }),\n          url: c.getString('url'),\n          skipTLSVerify: c.getOptionalBoolean('skipTLSVerify') ?? false,\n          skipMetricsLookup: c.getOptionalBoolean('skipMetricsLookup') ?? false,\n          caData: c.getOptionalString('caData'),\n          caFile: c.getOptionalString('caFile'),\n          authMetadata: {\n            [ANNOTATION_KUBERNETES_AUTH_PROVIDER]: authProvider,\n            ...ConfigClusterLocator.parseAuthMetadata(c),\n            ...authMetadataBlock,\n          },\n        };\n\n        const customResources = c.getOptionalConfigArray('customResources');\n        if (customResources) {\n          clusterDetails.customResources = customResources.map(cr => {\n            return {\n              group: cr.getString('group'),\n              apiVersion: cr.getString('apiVersion'),\n              plural: cr.getString('plural'),\n            };\n          });\n        }\n\n        const dashboardUrl = c.getOptionalString('dashboardUrl');\n        if (dashboardUrl) {\n          clusterDetails.dashboardUrl = dashboardUrl;\n        }\n        const dashboardApp = c.getOptionalString('dashboardApp');\n        if (dashboardApp) {\n          clusterDetails.dashboardApp = dashboardApp;\n        }\n        if (c.has('dashboardParameters')) {\n          clusterDetails.dashboardParameters = c.get('dashboardParameters');\n        }\n\n        const validationErrors = authStrategy.validateCluster(\n          clusterDetails.authMetadata,\n        );\n        if (validationErrors.length !== 0) {\n          throw new Error(\n            `Invalid cluster '${clusterDetails.name}': ${validationErrors\n              .map(e => e.message)\n              .join(', ')}`,\n          );\n        }\n        return clusterDetails;\n      }),\n    );\n  }\n\n  private static parseAuthMetadata(\n    clusterConfig: Config,\n  ): Record<string, string> | undefined {\n    const serviceAccountToken = clusterConfig.getOptionalString(\n      'serviceAccountToken',\n    );\n    const assumeRole = clusterConfig.getOptionalString('assumeRole');\n    const externalId = clusterConfig.getOptionalString('externalId');\n    const oidcTokenProvider =\n      clusterConfig.getOptionalString('oidcTokenProvider');\n\n    return serviceAccountToken || assumeRole || externalId || oidcTokenProvider\n      ? {\n          ...(serviceAccountToken && { serviceAccountToken }),\n          ...(assumeRole && {\n            [ANNOTATION_KUBERNETES_AWS_ASSUME_ROLE]: assumeRole,\n          }),\n          ...(externalId && {\n            [ANNOTATION_KUBERNETES_AWS_EXTERNAL_ID]: externalId,\n          }),\n          ...(oidcTokenProvider && {\n            [ANNOTATION_KUBERNETES_OIDC_TOKEN_PROVIDER]: oidcTokenProvider,\n          }),\n        }\n      : undefined;\n  }\n\n  async getClusters(): Promise<ClusterDetails[]> {\n    return this.clusterDetails;\n  }\n}\n"],"names":["ANNOTATION_KUBERNETES_AUTH_PROVIDER","ANNOTATION_KUBERNETES_AWS_ASSUME_ROLE","ANNOTATION_KUBERNETES_AWS_EXTERNAL_ID","ANNOTATION_KUBERNETES_OIDC_TOKEN_PROVIDER"],"mappings":"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"}