{"version":3,"file":"gerritReview.cjs.js","sources":["../../src/actions/gerritReview.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport crypto from 'crypto';\nimport { InputError } from '@backstage/errors';\nimport { Config } from '@backstage/config';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport {\n  createTemplateAction,\n  commitAndPushRepo,\n  getRepoSourceDirectory,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { examples } from './gerritReview.examples';\n\nconst generateGerritChangeId = (): string => {\n  const changeId = crypto.randomBytes(20).toString('hex');\n  return `I${changeId}`;\n};\n\n/**\n * Creates a new action that creates a Gerrit review\n * @public\n */\nexport function createPublishGerritReviewAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    branch?: string;\n    sourcePath?: string;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n  }>({\n    id: 'publish:gerrit:review',\n    description: 'Creates a new Gerrit review.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl', 'gitCommitMessage'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n          },\n          branch: {\n            title: 'Repository branch',\n            type: 'string',\n            description:\n              'Branch of the repository the review will be created on',\n          },\n          sourcePath: {\n            type: 'string',\n            title: 'Working Subdirectory',\n            description:\n              'Subdirectory of working directory containing the repository',\n          },\n          gitCommitMessage: {\n            title: 'Git Commit Message',\n            type: 'string',\n            description: `Sets the commit message on the repository.`,\n          },\n          gitAuthorName: {\n            title: 'Default Author Name',\n            type: 'string',\n            description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n          },\n          gitAuthorEmail: {\n            title: 'Default Author Email',\n            type: 'string',\n            description: `Sets the default author email for the commit.`,\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          reviewUrl: {\n            title: 'A URL to the review',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the root of the repository',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        branch = 'master',\n        sourcePath,\n        gitAuthorName,\n        gitAuthorEmail,\n        gitCommitMessage,\n      } = ctx.input;\n      const { host, repo } = parseRepoUrl(repoUrl, integrations);\n\n      if (!gitCommitMessage) {\n        throw new InputError(`Missing gitCommitMessage input`);\n      }\n\n      const integrationConfig = integrations.gerrit.byHost(host);\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      const auth = {\n        username: integrationConfig.config.username!,\n        password: integrationConfig.config.password!,\n      };\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n      const changeId = generateGerritChangeId();\n      const commitMessage = `${gitCommitMessage}\\n\\nChange-Id: ${changeId}`;\n\n      await commitAndPushRepo({\n        dir: getRepoSourceDirectory(ctx.workspacePath, sourcePath),\n        auth,\n        logger: ctx.logger,\n        commitMessage,\n        gitAuthorInfo,\n        branch,\n        remoteRef: `refs/for/${branch}`,\n      });\n\n      const repoContentsUrl = `${integrationConfig.config.gitilesBaseUrl}/${repo}/+/refs/heads/${branch}`;\n      const reviewUrl = `${integrationConfig.config.baseUrl}/#/q/${changeId}`;\n      ctx.logger?.info(`Review available on ${reviewUrl}`);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n      ctx.output('reviewUrl', reviewUrl);\n    },\n  });\n}\n"],"names":["crypto","createTemplateAction","examples","parseRepoUrl","InputError","commitAndPushRepo","getRepoSourceDirectory"],"mappings":"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"}