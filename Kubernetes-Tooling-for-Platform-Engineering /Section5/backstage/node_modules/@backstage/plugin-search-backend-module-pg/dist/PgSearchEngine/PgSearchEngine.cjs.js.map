{"version":3,"file":"PgSearchEngine.cjs.js","sources":["../../src/PgSearchEngine/PgSearchEngine.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SearchEngine } from '@backstage/plugin-search-backend-node';\nimport {\n  SearchQuery,\n  IndexableResultSet,\n  IndexableResult,\n} from '@backstage/plugin-search-common';\nimport { PgSearchEngineIndexer } from './PgSearchEngineIndexer';\nimport {\n  DatabaseDocumentStore,\n  DatabaseStore,\n  PgSearchQuery,\n} from '../database';\nimport { v4 as uuid } from 'uuid';\nimport { Config } from '@backstage/config';\nimport { DatabaseService, LoggerService } from '@backstage/backend-plugin-api';\n\n/**\n * Search query that the Postgres search engine understands.\n * @public\n */\nexport type ConcretePgSearchQuery = {\n  pgQuery: PgSearchQuery;\n  pageSize: number;\n};\n\n/**\n * Options available for the Postgres specific query translator.\n * @public\n */\nexport type PgSearchQueryTranslatorOptions = {\n  highlightOptions: PgSearchHighlightOptions;\n};\n\n/**\n * Postgres specific query translator.\n * @public\n */\nexport type PgSearchQueryTranslator = (\n  query: SearchQuery,\n  options: PgSearchQueryTranslatorOptions,\n) => ConcretePgSearchQuery;\n\n/**\n * Options to instantiate PgSearchEngine\n * @public\n */\nexport type PgSearchOptions = {\n  database: DatabaseService;\n  logger?: LoggerService;\n};\n\n/**\n * Options for highlighting search terms\n * @public\n */\nexport type PgSearchHighlightOptions = {\n  useHighlight?: boolean;\n  maxWords?: number;\n  minWords?: number;\n  shortWord?: number;\n  highlightAll?: boolean;\n  maxFragments?: number;\n  fragmentDelimiter?: string;\n  preTag: string;\n  postTag: string;\n};\n\n/** @public */\nexport class PgSearchEngine implements SearchEngine {\n  private readonly logger?: LoggerService;\n  private readonly highlightOptions: PgSearchHighlightOptions;\n  private readonly indexerBatchSize: number;\n\n  /**\n   * @deprecated This will be marked as private in a future release, please us fromConfig instead\n   */\n  constructor(\n    private readonly databaseStore: DatabaseStore,\n    config: Config,\n    logger?: LoggerService,\n  ) {\n    const uuidTag = uuid();\n    const highlightConfig = config.getOptionalConfig(\n      'search.pg.highlightOptions',\n    );\n\n    const highlightOptions: PgSearchHighlightOptions = {\n      preTag: `<${uuidTag}>`,\n      postTag: `</${uuidTag}>`,\n      useHighlight: highlightConfig?.getOptionalBoolean('useHighlight') ?? true,\n      maxWords: highlightConfig?.getOptionalNumber('maxWords') ?? 35,\n      minWords: highlightConfig?.getOptionalNumber('minWords') ?? 15,\n      shortWord: highlightConfig?.getOptionalNumber('shortWord') ?? 3,\n      highlightAll:\n        highlightConfig?.getOptionalBoolean('highlightAll') ?? false,\n      maxFragments: highlightConfig?.getOptionalNumber('maxFragments') ?? 0,\n      fragmentDelimiter:\n        highlightConfig?.getOptionalString('fragmentDelimiter') ?? ' ... ',\n    };\n    this.highlightOptions = highlightOptions;\n    this.indexerBatchSize =\n      config.getOptionalNumber('search.pg.indexerBatchSize') ?? 1000;\n    this.logger = logger;\n  }\n\n  /**\n   * @deprecated This will be removed in a future release, please use fromConfig instead\n   */\n  static async from(options: {\n    database: DatabaseService;\n    config: Config;\n    logger?: LoggerService;\n  }): Promise<PgSearchEngine> {\n    return new PgSearchEngine(\n      await DatabaseDocumentStore.create(options.database),\n      options.config,\n      options.logger,\n    );\n  }\n\n  static async fromConfig(config: Config, options: PgSearchOptions) {\n    return new PgSearchEngine(\n      await DatabaseDocumentStore.create(options.database),\n      config,\n      options.logger,\n    );\n  }\n\n  static async supported(database: DatabaseService): Promise<boolean> {\n    return await DatabaseDocumentStore.supported(await database.getClient());\n  }\n\n  translator(\n    query: SearchQuery,\n    options: PgSearchQueryTranslatorOptions,\n  ): ConcretePgSearchQuery {\n    const pageSize = query.pageLimit || 25;\n    const { page } = decodePageCursor(query.pageCursor);\n    const offset = page * pageSize;\n    // We request more result to know whether there is another page\n    const limit = pageSize + 1;\n\n    return {\n      pgQuery: {\n        pgTerm: query.term\n          .split(/\\s/)\n          .map(p => p.replace(/[\\0()|&:*!]/g, '').trim())\n          .filter(p => p !== '')\n          .map(p => `(${JSON.stringify(p)} | ${JSON.stringify(p)}:*)`)\n          .join('&'),\n        fields: query.filters as Record<string, string | string[]>,\n        types: query.types,\n        offset,\n        limit,\n        options: options.highlightOptions,\n      },\n      pageSize,\n    };\n  }\n\n  setTranslator(translator: PgSearchQueryTranslator) {\n    this.translator = translator;\n  }\n\n  async getIndexer(type: string) {\n    return new PgSearchEngineIndexer({\n      batchSize: this.indexerBatchSize,\n      type,\n      databaseStore: this.databaseStore,\n      logger: this.logger?.child({ documentType: type }),\n    });\n  }\n\n  async query(query: SearchQuery): Promise<IndexableResultSet> {\n    const { pgQuery, pageSize } = this.translator(query, {\n      highlightOptions: this.highlightOptions,\n    });\n\n    const rows = await this.databaseStore.transaction(async tx =>\n      this.databaseStore.query(tx, pgQuery),\n    );\n\n    // We requested one result more than the page size to know whether there is\n    // another page.\n    const { page } = decodePageCursor(query.pageCursor);\n    const hasNextPage = rows.length > pageSize;\n    const hasPreviousPage = page > 0;\n    const pageRows = rows.slice(0, pageSize);\n    const nextPageCursor = hasNextPage\n      ? encodePageCursor({ page: page + 1 })\n      : undefined;\n    const previousPageCursor = hasPreviousPage\n      ? encodePageCursor({ page: page - 1 })\n      : undefined;\n\n    const results = pageRows.map(\n      ({ type, document, highlight }, index): IndexableResult => ({\n        type,\n        document,\n        rank: page * pageSize + index + 1,\n        highlight: {\n          preTag: pgQuery.options.preTag,\n          postTag: pgQuery.options.postTag,\n          fields: highlight\n            ? {\n                text: highlight.text,\n                title: highlight.title,\n                location: highlight.location,\n                path: '',\n              }\n            : {},\n        },\n      }),\n    );\n\n    return { results, nextPageCursor, previousPageCursor };\n  }\n}\n\nexport function decodePageCursor(pageCursor?: string): { page: number } {\n  if (!pageCursor) {\n    return { page: 0 };\n  }\n\n  return {\n    page: Number(Buffer.from(pageCursor, 'base64').toString('utf-8')),\n  };\n}\n\nexport function encodePageCursor({ page }: { page: number }): string {\n  return Buffer.from(`${page}`, 'utf-8').toString('base64');\n}\n"],"names":["uuid","DatabaseDocumentStore","PgSearchEngineIndexer"],"mappings":"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"}