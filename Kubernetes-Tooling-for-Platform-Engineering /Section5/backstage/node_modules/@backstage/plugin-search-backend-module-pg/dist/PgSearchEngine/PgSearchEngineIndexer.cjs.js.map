{"version":3,"file":"PgSearchEngineIndexer.cjs.js","sources":["../../src/PgSearchEngine/PgSearchEngineIndexer.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchSearchEngineIndexer } from '@backstage/plugin-search-backend-node';\nimport { IndexableDocument } from '@backstage/plugin-search-common';\nimport { Knex } from 'knex';\nimport { DatabaseStore } from '../database';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n/** @public */\nexport type PgSearchEngineIndexerOptions = {\n  batchSize: number;\n  type: string;\n  databaseStore: DatabaseStore;\n  logger?: LoggerService;\n};\n\n/** @public */\nexport class PgSearchEngineIndexer extends BatchSearchEngineIndexer {\n  private logger?: LoggerService;\n  private store: DatabaseStore;\n  private type: string;\n  private tx: Knex.Transaction | undefined;\n  private numRecords = 0;\n\n  constructor(options: PgSearchEngineIndexerOptions) {\n    super({ batchSize: options.batchSize });\n    this.store = options.databaseStore;\n    this.type = options.type;\n    this.logger = options.logger;\n  }\n\n  async initialize(): Promise<void> {\n    this.tx = await this.store.getTransaction();\n    try {\n      await this.store.prepareInsert(this.tx);\n    } catch (e) {\n      // In case of error, rollback the transaction and re-throw the error so\n      // that the stream can be closed and destroyed properly.\n      this.tx.rollback(e);\n      throw e;\n    }\n  }\n\n  async index(documents: IndexableDocument[]): Promise<void> {\n    this.numRecords += documents.length;\n\n    const refs = [...new Set(documents.map(d => d.authorization?.resourceRef))];\n    this.logger?.debug(\n      `Attempting to index the following entities: ${refs.toString()}`,\n    );\n\n    try {\n      await this.store.insertDocuments(this.tx!, this.type, documents);\n    } catch (e) {\n      // In case of error, rollback the transaction and re-throw the error so\n      // that the stream can be closed and destroyed properly.\n      this.tx!.rollback(e);\n      throw e;\n    }\n  }\n\n  async finalize(): Promise<void> {\n    // If no documents were indexed, rollback the transaction, log a warning,\n    // and do not continue. This ensures that collators that return empty sets\n    // of documents do not cause the index to be deleted.\n    if (this.numRecords === 0) {\n      this.logger?.warn(\n        `Index for ${this.type} was not replaced: indexer received 0 documents`,\n      );\n      this.tx!.rollback!();\n      return;\n    }\n\n    // Attempt to complete and commit the transaction.\n    try {\n      await this.store.completeInsert(this.tx!, this.type);\n      this.tx!.commit();\n    } catch (e) {\n      // Otherwise, rollback the transaction and re-throw the error so that the\n      // stream can be closed and destroyed properly.\n      this.tx!.rollback!(e);\n      throw e;\n    }\n  }\n\n  /**\n   * Custom handler covering the case where an error occurred somewhere else in\n   * the indexing pipeline (e.g. a collator or decorator). In such cases, the\n   * finalize method is not called, which leaves a dangling transaction and\n   * therefore an open connection to PG. This handler ensures we close the\n   * transaction and associated connection.\n   *\n   * todo(@backstage/search-maintainers): Consider introducing a more\n   * formal mechanism for handling such errors in BatchSearchEngineIndexer and\n   * replacing this method with it. See: #17291\n   *\n   * @internal\n   */\n  async _destroy(error: Error | null, done: (error?: Error | null) => void) {\n    // Ignore situations where there was no error.\n    if (!error) {\n      done();\n      return;\n    }\n\n    if (!this.tx!.isCompleted()) {\n      await this.tx!.rollback(error);\n    }\n\n    done(error);\n  }\n}\n"],"names":["BatchSearchEngineIndexer"],"mappings":";;;;AA+BO,MAAM,8BAA8BA,gDAAyB,CAAA;AAAA,EAC1D,MAAA;AAAA,EACA,KAAA;AAAA,EACA,IAAA;AAAA,EACA,EAAA;AAAA,EACA,UAAa,GAAA,CAAA;AAAA,EAErB,YAAY,OAAuC,EAAA;AACjD,IAAA,KAAA,CAAM,EAAE,SAAA,EAAW,OAAQ,CAAA,SAAA,EAAW,CAAA;AACtC,IAAA,IAAA,CAAK,QAAQ,OAAQ,CAAA,aAAA;AACrB,IAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,IAAA;AACpB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA;AAAA;AACxB,EAEA,MAAM,UAA4B,GAAA;AAChC,IAAA,IAAA,CAAK,EAAK,GAAA,MAAM,IAAK,CAAA,KAAA,CAAM,cAAe,EAAA;AAC1C,IAAI,IAAA;AACF,MAAA,MAAM,IAAK,CAAA,KAAA,CAAM,aAAc,CAAA,IAAA,CAAK,EAAE,CAAA;AAAA,aAC/B,CAAG,EAAA;AAGV,MAAK,IAAA,CAAA,EAAA,CAAG,SAAS,CAAC,CAAA;AAClB,MAAM,MAAA,CAAA;AAAA;AACR;AACF,EAEA,MAAM,MAAM,SAA+C,EAAA;AACzD,IAAA,IAAA,CAAK,cAAc,SAAU,CAAA,MAAA;AAE7B,IAAA,MAAM,IAAO,GAAA,CAAC,GAAG,IAAI,GAAI,CAAA,SAAA,CAAU,GAAI,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,aAAA,EAAe,WAAW,CAAC,CAAC,CAAA;AAC1E,IAAA,IAAA,CAAK,MAAQ,EAAA,KAAA;AAAA,MACX,CAAA,4CAAA,EAA+C,IAAK,CAAA,QAAA,EAAU,CAAA;AAAA,KAChE;AAEA,IAAI,IAAA;AACF,MAAA,MAAM,KAAK,KAAM,CAAA,eAAA,CAAgB,KAAK,EAAK,EAAA,IAAA,CAAK,MAAM,SAAS,CAAA;AAAA,aACxD,CAAG,EAAA;AAGV,MAAK,IAAA,CAAA,EAAA,CAAI,SAAS,CAAC,CAAA;AACnB,MAAM,MAAA,CAAA;AAAA;AACR;AACF,EAEA,MAAM,QAA0B,GAAA;AAI9B,IAAI,IAAA,IAAA,CAAK,eAAe,CAAG,EAAA;AACzB,MAAA,IAAA,CAAK,MAAQ,EAAA,IAAA;AAAA,QACX,CAAA,UAAA,EAAa,KAAK,IAAI,CAAA,+CAAA;AAAA,OACxB;AACA,MAAA,IAAA,CAAK,GAAI,QAAU,EAAA;AACnB,MAAA;AAAA;AAIF,IAAI,IAAA;AACF,MAAA,MAAM,KAAK,KAAM,CAAA,cAAA,CAAe,IAAK,CAAA,EAAA,EAAK,KAAK,IAAI,CAAA;AACnD,MAAA,IAAA,CAAK,GAAI,MAAO,EAAA;AAAA,aACT,CAAG,EAAA;AAGV,MAAK,IAAA,CAAA,EAAA,CAAI,SAAU,CAAC,CAAA;AACpB,MAAM,MAAA,CAAA;AAAA;AACR;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,MAAM,QAAS,CAAA,KAAA,EAAqB,IAAsC,EAAA;AAExE,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAK,IAAA,EAAA;AACL,MAAA;AAAA;AAGF,IAAA,IAAI,CAAC,IAAA,CAAK,EAAI,CAAA,WAAA,EAAe,EAAA;AAC3B,MAAM,MAAA,IAAA,CAAK,EAAI,CAAA,QAAA,CAAS,KAAK,CAAA;AAAA;AAG/B,IAAA,IAAA,CAAK,KAAK,CAAA;AAAA;AAEd;;;;"}