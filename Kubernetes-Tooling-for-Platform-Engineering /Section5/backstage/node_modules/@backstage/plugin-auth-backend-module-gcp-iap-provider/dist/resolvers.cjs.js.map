{"version":3,"file":"resolvers.cjs.js","sources":["../src/resolvers.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createSignInResolverFactory,\n  SignInInfo,\n} from '@backstage/plugin-auth-node';\nimport { GcpIapResult } from './types';\n\n/**\n * Available sign-in resolvers for the Google auth provider.\n *\n * @public\n */\nexport namespace gcpIapSignInResolvers {\n  /**\n   * Looks up the user by matching their email to the `google.com/email` annotation.\n   */\n  export const emailMatchingUserEntityAnnotation = createSignInResolverFactory({\n    create() {\n      return async (info: SignInInfo<GcpIapResult>, ctx) => {\n        const email = info.result.iapToken.email;\n\n        if (!email) {\n          throw new Error('Google IAP sign-in result is missing email');\n        }\n\n        return ctx.signInWithCatalogUser({\n          annotations: {\n            'google.com/email': email,\n          },\n        });\n      };\n    },\n  });\n\n  /**\n   * Looks up the user by matching their user ID to the `google.com/user-id` annotation.\n   */\n  export const idMatchingUserEntityAnnotation = createSignInResolverFactory({\n    create() {\n      return async (info: SignInInfo<GcpIapResult>, ctx) => {\n        const userId = info.result.iapToken.sub.split(':')[1];\n\n        return ctx.signInWithCatalogUser({\n          annotations: {\n            'google.com/user-id': userId,\n          },\n        });\n      };\n    },\n  });\n}\n"],"names":["gcpIapSignInResolvers","createSignInResolverFactory"],"mappings":";;;;AA2BiBA;AAAA,CAAV,CAAUA,sBAAV,KAAA;AAIE,EAAMA,sBAAAA,CAAA,oCAAoCC,0CAA4B,CAAA;AAAA,IAC3E,MAAS,GAAA;AACP,MAAO,OAAA,OAAO,MAAgC,GAAQ,KAAA;AACpD,QAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,QAAS,CAAA,KAAA;AAEnC,QAAA,IAAI,CAAC,KAAO,EAAA;AACV,UAAM,MAAA,IAAI,MAAM,4CAA4C,CAAA;AAAA;AAG9D,QAAA,OAAO,IAAI,qBAAsB,CAAA;AAAA,UAC/B,WAAa,EAAA;AAAA,YACX,kBAAoB,EAAA;AAAA;AACtB,SACD,CAAA;AAAA,OACH;AAAA;AACF,GACD,CAAA;AAKM,EAAMD,sBAAAA,CAAA,iCAAiCC,0CAA4B,CAAA;AAAA,IACxE,MAAS,GAAA;AACP,MAAO,OAAA,OAAO,MAAgC,GAAQ,KAAA;AACpD,QAAM,MAAA,MAAA,GAAS,KAAK,MAAO,CAAA,QAAA,CAAS,IAAI,KAAM,CAAA,GAAG,EAAE,CAAC,CAAA;AAEpD,QAAA,OAAO,IAAI,qBAAsB,CAAA;AAAA,UAC/B,WAAa,EAAA;AAAA,YACX,oBAAsB,EAAA;AAAA;AACxB,SACD,CAAA;AAAA,OACH;AAAA;AACF,GACD,CAAA;AAAA,CArCc,EAAAD,6BAAA,KAAAA,6BAAA,GAAA,EAAA,CAAA,CAAA;;"}