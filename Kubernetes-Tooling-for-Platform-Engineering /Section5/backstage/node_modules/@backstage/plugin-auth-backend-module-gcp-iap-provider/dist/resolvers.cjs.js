'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');

exports.gcpIapSignInResolvers = void 0;
((gcpIapSignInResolvers2) => {
  gcpIapSignInResolvers2.emailMatchingUserEntityAnnotation = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const email = info.result.iapToken.email;
        if (!email) {
          throw new Error("Google IAP sign-in result is missing email");
        }
        return ctx.signInWithCatalogUser({
          annotations: {
            "google.com/email": email
          }
        });
      };
    }
  });
  gcpIapSignInResolvers2.idMatchingUserEntityAnnotation = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const userId = info.result.iapToken.sub.split(":")[1];
        return ctx.signInWithCatalogUser({
          annotations: {
            "google.com/user-id": userId
          }
        });
      };
    }
  });
})(exports.gcpIapSignInResolvers || (exports.gcpIapSignInResolvers = {}));
//# sourceMappingURL=resolvers.cjs.js.map
