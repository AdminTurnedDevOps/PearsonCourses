'use strict';

var errors = require('@backstage/errors');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var helpers = require('./helpers.cjs.js');

const DEFAULT_IAP_JWT_HEADER = "x-goog-iap-jwt-assertion";
const gcpIapAuthenticator = pluginAuthNode.createProxyAuthenticator({
  defaultProfileTransform: async (result) => {
    return { profile: { email: result.iapToken.email } };
  },
  initialize({ config }) {
    const audience = config.getString("audience");
    const jwtHeader = config.getOptionalString("jwtHeader") ?? DEFAULT_IAP_JWT_HEADER;
    const tokenValidator = helpers.createTokenValidator(audience);
    return { jwtHeader, tokenValidator };
  },
  async authenticate({ req }, { jwtHeader, tokenValidator }) {
    const token = req.header(jwtHeader);
    if (!token || typeof token !== "string") {
      throw new errors.AuthenticationError("Missing Google IAP header");
    }
    const iapToken = await tokenValidator(token);
    return {
      result: { iapToken },
      providerInfo: { iapToken }
    };
  }
});

exports.gcpIapAuthenticator = gcpIapAuthenticator;
//# sourceMappingURL=authenticator.cjs.js.map
