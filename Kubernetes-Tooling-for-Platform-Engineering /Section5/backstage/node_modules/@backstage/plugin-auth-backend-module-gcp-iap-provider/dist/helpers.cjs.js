'use strict';

var errors = require('@backstage/errors');
var googleAuthLibrary = require('google-auth-library');

function createTokenValidator(audience, providedClient) {
  const client = new googleAuthLibrary.OAuth2Client();
  return async function tokenValidator(token) {
    const response = await client.getIapPublicKeys().catch((error) => {
      throw new errors.AuthenticationError(
        `Unable to list Google IAP token verification keys, ${error}`
      );
    });
    const ticket = await client.verifySignedJwtWithCertsAsync(token, response.pubkeys, audience, [
      "https://cloud.google.com/iap"
    ]).catch((error) => {
      throw new errors.AuthenticationError(
        `Google IAP token verification failed, ${error}`
      );
    });
    const payload = ticket.getPayload();
    if (!payload) {
      throw new errors.AuthenticationError(
        "Google IAP token verification failed, token had no payload"
      );
    }
    if (!payload.sub) {
      throw new errors.AuthenticationError(
        "Google IAP token payload is missing subject claim"
      );
    }
    if (!payload.email) {
      throw new errors.AuthenticationError(
        "Google IAP token payload is missing email claim"
      );
    }
    return payload;
  };
}

exports.createTokenValidator = createTokenValidator;
//# sourceMappingURL=helpers.cjs.js.map
