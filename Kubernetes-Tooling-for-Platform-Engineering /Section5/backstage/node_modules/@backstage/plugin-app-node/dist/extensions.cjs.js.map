{"version":3,"file":"extensions.cjs.js","sources":["../src/extensions.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createExtensionPoint } from '@backstage/backend-plugin-api';\nimport { ConfigSchema } from '@backstage/config-loader';\nimport { Handler } from 'express';\n\n/**\n * The interface for {@link staticFallbackHandlerExtensionPoint}.\n *\n * @public\n */\nexport interface StaticFallbackHandlerExtensionPoint {\n  /**\n   * Sets the static fallback handler. This can only be done once.\n   */\n  setStaticFallbackHandler(handler: Handler): void;\n}\n\n/**\n * An extension point the exposes the ability to configure a static fallback handler for the app backend.\n *\n * The static fallback handler is a request handler to handle requests for static content that is not\n * present in the app bundle.\n *\n * This can be used to avoid issues with clients on older deployment versions trying to access lazy\n * loaded content that is no longer present. Typically the requests would fall back to a long-term\n * object store where all recently deployed versions of the app are present.\n *\n * Another option is to provide a `database` that will take care of storing the static assets instead.\n *\n * If both `database` and `staticFallbackHandler` are provided, the `database` will attempt to serve\n * static assets first, and if they are not found, the `staticFallbackHandler` will be called.\n *\n * @public\n */\nexport const staticFallbackHandlerExtensionPoint =\n  createExtensionPoint<StaticFallbackHandlerExtensionPoint>({\n    id: 'app.staticFallbackHandler',\n  });\n\n/**\n * The interface for {@link configSchemaExtensionPoint}.\n *\n * @public\n */\nexport interface ConfigSchemaExtensionPoint {\n  /**\n   * Sets the config schema. This can only be done once.\n   */\n  setConfigSchema(configSchema: ConfigSchema): void;\n}\n\n/**\n * An extension point the exposes the ability to override the config schema used by the frontend application.\n *\n * @public\n */\nexport const configSchemaExtensionPoint =\n  createExtensionPoint<ConfigSchemaExtensionPoint>({\n    id: 'app.configSchema',\n  });\n"],"names":["createExtensionPoint"],"mappings":";;;;AAiDO,MAAM,sCACXA,qCAA0D,CAAA;AAAA,EACxD,EAAI,EAAA;AACN,CAAC;AAmBI,MAAM,6BACXA,qCAAiD,CAAA;AAAA,EAC/C,EAAI,EAAA;AACN,CAAC;;;;;"}