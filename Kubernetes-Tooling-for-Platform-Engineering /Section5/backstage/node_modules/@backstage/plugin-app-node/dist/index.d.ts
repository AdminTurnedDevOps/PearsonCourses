import * as _backstage_backend_plugin_api from '@backstage/backend-plugin-api';
import { ConfigSchema } from '@backstage/config-loader';
import { Handler } from 'express';

/**
 * The interface for {@link staticFallbackHandlerExtensionPoint}.
 *
 * @public
 */
interface StaticFallbackHandlerExtensionPoint {
    /**
     * Sets the static fallback handler. This can only be done once.
     */
    setStaticFallbackHandler(handler: Handler): void;
}
/**
 * An extension point the exposes the ability to configure a static fallback handler for the app backend.
 *
 * The static fallback handler is a request handler to handle requests for static content that is not
 * present in the app bundle.
 *
 * This can be used to avoid issues with clients on older deployment versions trying to access lazy
 * loaded content that is no longer present. Typically the requests would fall back to a long-term
 * object store where all recently deployed versions of the app are present.
 *
 * Another option is to provide a `database` that will take care of storing the static assets instead.
 *
 * If both `database` and `staticFallbackHandler` are provided, the `database` will attempt to serve
 * static assets first, and if they are not found, the `staticFallbackHandler` will be called.
 *
 * @public
 */
declare const staticFallbackHandlerExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<StaticFallbackHandlerExtensionPoint>;
/**
 * The interface for {@link configSchemaExtensionPoint}.
 *
 * @public
 */
interface ConfigSchemaExtensionPoint {
    /**
     * Sets the config schema. This can only be done once.
     */
    setConfigSchema(configSchema: ConfigSchema): void;
}
/**
 * An extension point the exposes the ability to override the config schema used by the frontend application.
 *
 * @public
 */
declare const configSchemaExtensionPoint: _backstage_backend_plugin_api.ExtensionPoint<ConfigSchemaExtensionPoint>;

/**
 * Loads the config schema that is embedded in the frontend build.
 *
 * @public
 */
declare function loadCompiledConfigSchema(appDistDir: string): Promise<ConfigSchema | undefined>;

export { type ConfigSchemaExtensionPoint, type StaticFallbackHandlerExtensionPoint, configSchemaExtensionPoint, loadCompiledConfigSchema, staticFallbackHandlerExtensionPoint };
