{"version":3,"file":"createExtensionTester.esm.js","sources":["../../src/app/createExtensionTester.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnyExtensionDataRef,\n  AppNode,\n  AppTree,\n  Extension,\n  ExtensionDataRef,\n  ExtensionDefinition,\n  ExtensionDefinitionParameters,\n  coreExtensionData,\n} from '@backstage/frontend-plugin-api';\nimport { Config, ConfigReader } from '@backstage/config';\nimport { JsonArray, JsonObject, JsonValue } from '@backstage/types';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { resolveExtensionDefinition } from '../../../frontend-plugin-api/src/wiring/resolveExtensionDefinition';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { resolveAppTree } from '../../../frontend-app-api/src/tree/resolveAppTree';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { resolveAppNodeSpecs } from '../../../frontend-app-api/src/tree/resolveAppNodeSpecs';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { instantiateAppNodeTree } from '../../../frontend-app-api/src/tree/instantiateAppNodeTree';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { readAppExtensionsConfig } from '../../../frontend-app-api/src/tree/readAppExtensionsConfig';\nimport { TestApiRegistry } from '@backstage/test-utils';\nimport { OpaqueExtensionDefinition } from '@internal/frontend';\n\n/** @public */\nexport class ExtensionQuery<UOutput extends AnyExtensionDataRef> {\n  #node: AppNode;\n\n  constructor(node: AppNode) {\n    this.#node = node;\n  }\n\n  get node() {\n    return this.#node;\n  }\n\n  get instance() {\n    const instance = this.#node.instance;\n    if (!instance) {\n      throw new Error(\n        `Unable to access the instance of extension with ID '${\n          this.#node.spec.id\n        }'`,\n      );\n    }\n    return instance;\n  }\n\n  get<TId extends UOutput['id']>(\n    ref: ExtensionDataRef<any, TId, any>,\n  ): UOutput extends ExtensionDataRef<infer IData, TId, infer IConfig>\n    ? IConfig['optional'] extends true\n      ? IData | undefined\n      : IData\n    : never {\n    return this.instance.getData(ref);\n  }\n}\n\n/** @public */\nexport class ExtensionTester<UOutput extends AnyExtensionDataRef> {\n  /** @internal */\n  static forSubject<T extends ExtensionDefinitionParameters>(\n    subject: ExtensionDefinition<T>,\n    options?: { config?: T['configInput'] },\n  ): ExtensionTester<NonNullable<T['output']>> {\n    const tester = new ExtensionTester();\n    tester.add(subject, options as T['configInput'] & {});\n    return tester;\n  }\n\n  #tree?: AppTree;\n\n  readonly #extensions = new Array<{\n    id: string;\n    extension: Extension<any>;\n    definition: ExtensionDefinition;\n    config?: JsonValue;\n  }>();\n\n  add<T extends ExtensionDefinitionParameters>(\n    extension: ExtensionDefinition<T>,\n    options?: { config?: T['configInput'] },\n  ): ExtensionTester<UOutput> {\n    if (this.#tree) {\n      throw new Error(\n        'Cannot add more extensions accessing the extension tree',\n      );\n    }\n\n    const { name, namespace } = OpaqueExtensionDefinition.toInternal(extension);\n\n    const definition = {\n      ...extension,\n      // setting name \"test\" as fallback\n      name: !namespace && !name ? 'test' : name,\n    };\n\n    const resolvedExtension = resolveExtensionDefinition(definition);\n\n    this.#extensions.push({\n      id: resolvedExtension.id,\n      extension: resolvedExtension,\n      definition,\n      config: options?.config as JsonValue,\n    });\n\n    return this;\n  }\n\n  get<TId extends UOutput['id']>(\n    ref: ExtensionDataRef<any, TId, any>,\n  ): UOutput extends ExtensionDataRef<infer IData, TId, infer IConfig>\n    ? IConfig['optional'] extends true\n      ? IData | undefined\n      : IData\n    : never {\n    const tree = this.#resolveTree();\n\n    return new ExtensionQuery(tree.root).get(ref);\n  }\n\n  query<T extends ExtensionDefinitionParameters>(\n    extension: ExtensionDefinition<T>,\n  ): ExtensionQuery<NonNullable<T['output']>> {\n    const tree = this.#resolveTree();\n\n    // Same fallback logic as in .add\n    const { name, namespace } = OpaqueExtensionDefinition.toInternal(extension);\n    const definition = {\n      ...extension,\n      name: !namespace && !name ? 'test' : name,\n    };\n    const actualId = resolveExtensionDefinition(definition).id;\n\n    const node = tree.nodes.get(actualId);\n\n    if (!node) {\n      throw new Error(\n        `Extension with ID '${actualId}' not found, please make sure it's added to the tester.`,\n      );\n    } else if (!node.instance) {\n      throw new Error(\n        `Extension with ID '${actualId}' has not been instantiated, because it is not part of the test subject's extension tree.`,\n      );\n    }\n    return new ExtensionQuery(node);\n  }\n\n  reactElement(): JSX.Element {\n    const tree = this.#resolveTree();\n\n    const element = new ExtensionQuery(tree.root).get(\n      coreExtensionData.reactElement,\n    );\n\n    if (!element) {\n      throw new Error(\n        'No element found. Make sure the extension has a `coreExtensionData.reactElement` output, or use the `.get(...)` to access output data directly instead',\n      );\n    }\n\n    return element;\n  }\n\n  #resolveTree() {\n    if (this.#tree) {\n      return this.#tree;\n    }\n\n    const [subject] = this.#extensions;\n    if (!subject) {\n      throw new Error(\n        'No subject found. At least one extension should be added to the tester.',\n      );\n    }\n\n    const tree = resolveAppTree(\n      subject.id,\n      resolveAppNodeSpecs({\n        features: [],\n        builtinExtensions: this.#extensions.map(_ => _.extension),\n        parameters: readAppExtensionsConfig(this.#getConfig()),\n      }),\n    );\n\n    instantiateAppNodeTree(tree.root, TestApiRegistry.from());\n\n    this.#tree = tree;\n\n    return tree;\n  }\n\n  #getConfig(additionalConfig?: JsonObject): Config {\n    const [subject, ...rest] = this.#extensions;\n\n    const extensionsConfig: JsonArray = [\n      ...rest.flatMap(extension =>\n        extension.config\n          ? [\n              {\n                [extension.id]: {\n                  config: extension.config,\n                },\n              },\n            ]\n          : [],\n      ),\n      {\n        [subject.id]: {\n          config: subject.config,\n          disabled: false,\n        },\n      },\n    ];\n\n    return ConfigReader.fromConfigs([\n      { context: 'render-config', data: additionalConfig ?? {} },\n      {\n        context: 'test',\n        data: {\n          app: {\n            extensions: extensionsConfig,\n          },\n        },\n      },\n    ]);\n  }\n}\n\n/** @public */\nexport function createExtensionTester<T extends ExtensionDefinitionParameters>(\n  subject: ExtensionDefinition<T>,\n  options?: { config?: T['configInput'] },\n): ExtensionTester<NonNullable<T['output']>> {\n  return ExtensionTester.forSubject(subject, options);\n}\n"],"names":[],"mappings":"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"}