import { coreExtensionData } from '@backstage/frontend-plugin-api';
import { ConfigReader } from '@backstage/config';
import { resolveExtensionDefinition } from '../frontend-plugin-api/src/wiring/resolveExtensionDefinition.esm.js';
import { resolveAppTree } from '../frontend-app-api/src/tree/resolveAppTree.esm.js';
import { resolveAppNodeSpecs } from '../frontend-app-api/src/tree/resolveAppNodeSpecs.esm.js';
import { instantiateAppNodeTree } from '../frontend-app-api/src/tree/instantiateAppNodeTree.esm.js';
import { readAppExtensionsConfig } from '../frontend-app-api/src/tree/readAppExtensionsConfig.esm.js';
import { TestApiRegistry } from '@backstage/test-utils';
import { OpaqueExtensionDefinition } from '../frontend-internal/src/wiring/InternalExtensionDefinition.esm.js';

class ExtensionQuery {
  #node;
  constructor(node) {
    this.#node = node;
  }
  get node() {
    return this.#node;
  }
  get instance() {
    const instance = this.#node.instance;
    if (!instance) {
      throw new Error(
        `Unable to access the instance of extension with ID '${this.#node.spec.id}'`
      );
    }
    return instance;
  }
  get(ref) {
    return this.instance.getData(ref);
  }
}
class ExtensionTester {
  /** @internal */
  static forSubject(subject, options) {
    const tester = new ExtensionTester();
    tester.add(subject, options);
    return tester;
  }
  #tree;
  #extensions = new Array();
  add(extension, options) {
    if (this.#tree) {
      throw new Error(
        "Cannot add more extensions accessing the extension tree"
      );
    }
    const { name, namespace } = OpaqueExtensionDefinition.toInternal(extension);
    const definition = {
      ...extension,
      // setting name "test" as fallback
      name: !namespace && !name ? "test" : name
    };
    const resolvedExtension = resolveExtensionDefinition(definition);
    this.#extensions.push({
      id: resolvedExtension.id,
      extension: resolvedExtension,
      definition,
      config: options?.config
    });
    return this;
  }
  get(ref) {
    const tree = this.#resolveTree();
    return new ExtensionQuery(tree.root).get(ref);
  }
  query(extension) {
    const tree = this.#resolveTree();
    const { name, namespace } = OpaqueExtensionDefinition.toInternal(extension);
    const definition = {
      ...extension,
      name: !namespace && !name ? "test" : name
    };
    const actualId = resolveExtensionDefinition(definition).id;
    const node = tree.nodes.get(actualId);
    if (!node) {
      throw new Error(
        `Extension with ID '${actualId}' not found, please make sure it's added to the tester.`
      );
    } else if (!node.instance) {
      throw new Error(
        `Extension with ID '${actualId}' has not been instantiated, because it is not part of the test subject's extension tree.`
      );
    }
    return new ExtensionQuery(node);
  }
  reactElement() {
    const tree = this.#resolveTree();
    const element = new ExtensionQuery(tree.root).get(
      coreExtensionData.reactElement
    );
    if (!element) {
      throw new Error(
        "No element found. Make sure the extension has a `coreExtensionData.reactElement` output, or use the `.get(...)` to access output data directly instead"
      );
    }
    return element;
  }
  #resolveTree() {
    if (this.#tree) {
      return this.#tree;
    }
    const [subject] = this.#extensions;
    if (!subject) {
      throw new Error(
        "No subject found. At least one extension should be added to the tester."
      );
    }
    const tree = resolveAppTree(
      subject.id,
      resolveAppNodeSpecs({
        features: [],
        builtinExtensions: this.#extensions.map((_) => _.extension),
        parameters: readAppExtensionsConfig(this.#getConfig())
      })
    );
    instantiateAppNodeTree(tree.root, TestApiRegistry.from());
    this.#tree = tree;
    return tree;
  }
  #getConfig(additionalConfig) {
    const [subject, ...rest] = this.#extensions;
    const extensionsConfig = [
      ...rest.flatMap(
        (extension) => extension.config ? [
          {
            [extension.id]: {
              config: extension.config
            }
          }
        ] : []
      ),
      {
        [subject.id]: {
          config: subject.config,
          disabled: false
        }
      }
    ];
    return ConfigReader.fromConfigs([
      { context: "render-config", data: additionalConfig ?? {} },
      {
        context: "test",
        data: {
          app: {
            extensions: extensionsConfig
          }
        }
      }
    ]);
  }
}
function createExtensionTester(subject, options) {
  return ExtensionTester.forSubject(subject, options);
}

export { ExtensionQuery, ExtensionTester, createExtensionTester };
//# sourceMappingURL=createExtensionTester.esm.js.map
