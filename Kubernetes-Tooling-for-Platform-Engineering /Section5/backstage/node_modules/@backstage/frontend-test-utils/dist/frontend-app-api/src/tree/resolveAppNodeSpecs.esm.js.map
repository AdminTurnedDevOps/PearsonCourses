{"version":3,"file":"resolveAppNodeSpecs.esm.js","sources":["../../../../../frontend-app-api/src/tree/resolveAppNodeSpecs.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Extension } from '@backstage/frontend-plugin-api';\nimport { ExtensionParameters } from './readAppExtensionsConfig';\nimport { AppNodeSpec } from '@backstage/frontend-plugin-api';\nimport { OpaqueFrontendPlugin } from '@internal/frontend';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport {\n  isInternalFrontendModule,\n  toInternalFrontendModule,\n} from '../../../frontend-plugin-api/src/wiring/createFrontendModule';\n// eslint-disable-next-line @backstage/no-relative-monorepo-imports\nimport { toInternalExtension } from '../../../frontend-plugin-api/src/wiring/resolveExtensionDefinition';\nimport { FrontendFeature } from '../wiring';\n\n/** @internal */\nexport function resolveAppNodeSpecs(options: {\n  features?: FrontendFeature[];\n  builtinExtensions?: Extension<any, any>[];\n  parameters?: Array<ExtensionParameters>;\n  forbidden?: Set<string>;\n}): AppNodeSpec[] {\n  const {\n    builtinExtensions = [],\n    parameters = [],\n    forbidden = new Set(),\n    features = [],\n  } = options;\n\n  const plugins = features.filter(OpaqueFrontendPlugin.isType);\n  const modules = features.filter(isInternalFrontendModule);\n\n  const pluginExtensions = plugins.flatMap(source => {\n    return OpaqueFrontendPlugin.toInternal(source).extensions.map(\n      extension => ({\n        ...extension,\n        source,\n      }),\n    );\n  });\n  const moduleExtensions = modules.flatMap(mod =>\n    toInternalFrontendModule(mod).extensions.flatMap(extension => {\n      // Modules for plugins that are not installed are ignored\n      const source = plugins.find(p => p.id === mod.pluginId);\n      if (!source) {\n        return [];\n      }\n\n      return [{ ...extension, source }];\n    }),\n  );\n\n  // Prevent core override\n  if (pluginExtensions.some(({ id }) => forbidden.has(id))) {\n    const pluginsStr = pluginExtensions\n      .filter(({ id }) => forbidden.has(id))\n      .map(({ source }) => `'${source.id}'`)\n      .join(', ');\n    const forbiddenStr = [...forbidden].map(id => `'${id}'`).join(', ');\n    throw new Error(\n      `It is forbidden to override the following extension(s): ${forbiddenStr}, which is done by the following plugin(s): ${pluginsStr}`,\n    );\n  }\n  if (moduleExtensions.some(({ id }) => forbidden.has(id))) {\n    const pluginsStr = moduleExtensions\n      .filter(({ id }) => forbidden.has(id))\n      .map(({ source }) => `'${source.id}'`)\n      .join(', ');\n    const forbiddenStr = [...forbidden].map(id => `'${id}'`).join(', ');\n    throw new Error(\n      `It is forbidden to override the following extension(s): ${forbiddenStr}, which is done by a module for the following plugin(s): ${pluginsStr}`,\n    );\n  }\n\n  const configuredExtensions = [\n    ...pluginExtensions.map(({ source, ...extension }) => {\n      const internalExtension = toInternalExtension(extension);\n      return {\n        extension: internalExtension,\n        params: {\n          source,\n          attachTo: internalExtension.attachTo,\n          disabled: internalExtension.disabled,\n          config: undefined as unknown,\n        },\n      };\n    }),\n    ...builtinExtensions.map(extension => {\n      const internalExtension = toInternalExtension(extension);\n      return {\n        extension: internalExtension,\n        params: {\n          source: undefined,\n          attachTo: internalExtension.attachTo,\n          disabled: internalExtension.disabled,\n          config: undefined as unknown,\n        },\n      };\n    }),\n  ];\n\n  // Install all module overrides\n  for (const extension of moduleExtensions) {\n    const internalExtension = toInternalExtension(extension);\n\n    // Check if our override is overriding an extension that already exists\n    const index = configuredExtensions.findIndex(\n      e => e.extension.id === extension.id,\n    );\n    if (index !== -1) {\n      // Only implementation, attachment point and default disabled status are overridden, the source is kept\n      configuredExtensions[index].extension = internalExtension;\n      configuredExtensions[index].params.attachTo = internalExtension.attachTo;\n      configuredExtensions[index].params.disabled = internalExtension.disabled;\n    } else {\n      // Add the extension as a new one when not overriding an existing one\n      configuredExtensions.push({\n        extension: internalExtension,\n        params: {\n          source: extension.source,\n          attachTo: internalExtension.attachTo,\n          disabled: internalExtension.disabled,\n          config: undefined,\n        },\n      });\n    }\n  }\n\n  const duplicatedExtensionIds = new Set<string>();\n  const duplicatedExtensionData = configuredExtensions.reduce<\n    Record<string, Record<string, number>>\n  >((data, { extension, params }) => {\n    const extensionId = extension.id;\n    const extensionData = data?.[extensionId];\n    if (extensionData) duplicatedExtensionIds.add(extensionId);\n    const pluginId = params.source?.id ?? 'internal';\n    const pluginCount = extensionData?.[pluginId] ?? 0;\n    return {\n      ...data,\n      [extensionId]: { ...extensionData, [pluginId]: pluginCount + 1 },\n    };\n  }, {});\n\n  if (duplicatedExtensionIds.size > 0) {\n    throw new Error(\n      `The following extensions are duplicated: ${Array.from(\n        duplicatedExtensionIds,\n      )\n        .map(\n          extensionId =>\n            `The extension '${extensionId}' was provided ${Object.keys(\n              duplicatedExtensionData[extensionId],\n            )\n              .map(\n                pluginId =>\n                  `${duplicatedExtensionData[extensionId][pluginId]} time(s) by the plugin '${pluginId}'`,\n              )\n              .join(' and ')}`,\n        )\n        .join(', ')}`,\n    );\n  }\n\n  const order = new Map<string, (typeof configuredExtensions)[number]>();\n  for (const overrideParam of parameters) {\n    const extensionId = overrideParam.id;\n\n    if (forbidden.has(extensionId)) {\n      throw new Error(\n        `Configuration of the '${extensionId}' extension is forbidden`,\n      );\n    }\n\n    const existing = configuredExtensions.find(\n      e => e.extension.id === extensionId,\n    );\n    if (existing) {\n      if (overrideParam.attachTo) {\n        existing.params.attachTo = overrideParam.attachTo;\n      }\n      if (overrideParam.config) {\n        // TODO: merge config?\n        existing.params.config = overrideParam.config;\n      }\n      if (\n        Boolean(existing.params.disabled) !== Boolean(overrideParam.disabled)\n      ) {\n        existing.params.disabled = Boolean(overrideParam.disabled);\n      }\n      order.set(extensionId, existing);\n    } else {\n      throw new Error(`Extension ${extensionId} does not exist`);\n    }\n  }\n\n  const orderedExtensions = [\n    ...order.values(),\n    ...configuredExtensions.filter(e => !order.has(e.extension.id)),\n  ];\n\n  return orderedExtensions.map(param => ({\n    id: param.extension.id,\n    attachTo: param.params.attachTo,\n    extension: param.extension,\n    disabled: param.params.disabled,\n    source: param.params.source,\n    config: param.params.config,\n  }));\n}\n"],"names":[],"mappings":"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"}