{"version":3,"file":"readAppExtensionsConfig.esm.js","sources":["../../../../../frontend-app-api/src/tree/readAppExtensionsConfig.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { JsonValue } from '@backstage/types';\n\nexport interface ExtensionParameters {\n  id: string;\n  attachTo?: { id: string; input: string };\n  disabled?: boolean;\n  config?: unknown;\n}\n\nconst knownExtensionParameters = ['attachTo', 'disabled', 'config'];\n\n// Since we'll never merge arrays in config the config reader context\n// isn't too much of a help. Fall back to manual config reading logic\n// as the Config interface makes it quite hard for us otherwise.\n/** @internal */\nexport function readAppExtensionsConfig(\n  rootConfig: Config,\n): ExtensionParameters[] {\n  const arr = rootConfig.getOptional('app.extensions');\n  if (!Array.isArray(arr)) {\n    if (arr === undefined) {\n      return [];\n    }\n    // This will throw, and show which part of config had the wrong type\n    rootConfig.getConfigArray('app.extensions');\n    return [];\n  }\n\n  return arr.map((arrayEntry, arrayIndex) =>\n    expandShorthandExtensionParameters(arrayEntry, arrayIndex),\n  );\n}\n\n/** @internal */\nexport function expandShorthandExtensionParameters(\n  arrayEntry: JsonValue,\n  arrayIndex: number,\n): ExtensionParameters {\n  function errorMsg(msg: string, key?: string, prop?: string) {\n    return `Invalid extension configuration at app.extensions[${arrayIndex}]${\n      key ? `[${key}]` : ''\n    }${prop ? `.${prop}` : ''}, ${msg}`;\n  }\n\n  // NOTE(freben): This check is intentionally not complete and doesn't check\n  // whether letters and digits are used, etc. It's not up to the config reading\n  // logic to decide what constitutes a valid extension ID; that should be\n  // decided by the logic that loads and instantiates the extensions. This check\n  // is just here to catch real mistakes or truly conceptually wrong input.\n  function assertValidId(id: string) {\n    if (!id || id !== id.trim()) {\n      throw new Error(\n        errorMsg('extension ID must not be empty or contain whitespace'),\n      );\n    }\n  }\n\n  // Example YAML:\n  // - entity.card.about\n  if (typeof arrayEntry === 'string') {\n    assertValidId(arrayEntry);\n    return {\n      id: arrayEntry,\n      disabled: false,\n    };\n  }\n\n  // All remaining cases are single-key objects\n  if (\n    typeof arrayEntry !== 'object' ||\n    arrayEntry === null ||\n    Array.isArray(arrayEntry)\n  ) {\n    throw new Error(errorMsg('must be a string or an object'));\n  }\n  const keys = Object.keys(arrayEntry);\n  if (keys.length !== 1) {\n    const joinedKeys = keys.length ? `'${keys.join(\"', '\")}'` : 'none';\n    throw new Error(errorMsg(`must have exactly one key, got ${joinedKeys}`));\n  }\n\n  const id = String(keys[0]);\n  const value = arrayEntry[id];\n  assertValidId(id);\n\n  // This example covers a potentially common mistake in the syntax\n  // Example YAML:\n  // - entity.card.about:\n  if (value === null) {\n    return {\n      id,\n      disabled: false,\n    };\n  }\n\n  // Example YAML:\n  // - catalog.page.cicd: false\n  if (typeof value === 'boolean') {\n    return {\n      id,\n      disabled: !value,\n    };\n  }\n\n  // The remaining case is the generic object. Example YAML:\n  //  - tech-radar.page:\n  //      at: core.router/routes\n  //      disabled: false\n  //      config:\n  //        path: /tech-radar\n  //        width: 1500\n  //        height: 800\n  if (typeof value !== 'object' || Array.isArray(value)) {\n    // We don't mention null here - we don't want people to explicitly enter\n    // - entity.card.about: null\n    throw new Error(errorMsg('value must be a boolean or object', id));\n  }\n\n  const attachTo = value.attachTo as { id: string; input: string } | undefined;\n  const disabled = value.disabled;\n  const config = value.config;\n\n  if (attachTo !== undefined) {\n    if (\n      attachTo === null ||\n      typeof attachTo !== 'object' ||\n      Array.isArray(attachTo)\n    ) {\n      throw new Error(errorMsg('must be an object', id, 'attachTo'));\n    }\n    if (typeof attachTo.id !== 'string' || attachTo.id === '') {\n      throw new Error(\n        errorMsg('must be a non-empty string', id, 'attachTo.id'),\n      );\n    }\n    if (typeof attachTo.input !== 'string' || attachTo.input === '') {\n      throw new Error(\n        errorMsg('must be a non-empty string', id, 'attachTo.input'),\n      );\n    }\n  }\n  if (disabled !== undefined && typeof disabled !== 'boolean') {\n    throw new Error(errorMsg('must be a boolean', id, 'disabled'));\n  }\n  if (\n    config !== undefined &&\n    (typeof config !== 'object' || config === null || Array.isArray(config))\n  ) {\n    throw new Error(errorMsg('must be an object', id, 'config'));\n  }\n\n  const unknownKeys = Object.keys(value).filter(\n    k => !knownExtensionParameters.includes(k),\n  );\n  if (unknownKeys.length > 0) {\n    throw new Error(\n      errorMsg(\n        `unknown parameter; expected one of '${knownExtensionParameters.join(\n          \"', '\",\n        )}'`,\n        id,\n        unknownKeys.join(', '),\n      ),\n    );\n  }\n\n  return {\n    id,\n    attachTo,\n    disabled,\n    config,\n  };\n}\n"],"names":["id"],"mappings":"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"}