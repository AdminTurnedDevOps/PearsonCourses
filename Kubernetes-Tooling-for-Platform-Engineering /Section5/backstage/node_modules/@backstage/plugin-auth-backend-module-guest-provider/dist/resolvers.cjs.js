'use strict';

var catalogModel = require('@backstage/catalog-model');
var errors = require('@backstage/errors');

const signInAsGuestUser = (config) => async (_, ctx) => {
  if (process.env.NODE_ENV !== "development" && config.getOptionalBoolean("dangerouslyAllowOutsideDevelopment") !== true) {
    throw new errors.NotImplementedError(
      "The guest provider is NOT recommended for use outside of a development environment. If you want to enable this, set `auth.providers.guest.dangerouslyAllowOutsideDevelopment: true` in your app config."
    );
  }
  const userRef = config.getOptionalString("userEntityRef") ?? catalogModel.stringifyEntityRef({
    kind: "user",
    namespace: "development",
    name: "guest"
  });
  const ownershipRefs = config.getOptionalStringArray(
    "ownershipEntityRefs"
  ) ?? [userRef];
  try {
    return await ctx.signInWithCatalogUser({ entityRef: userRef });
  } catch (err) {
    return ctx.issueToken({
      claims: {
        sub: userRef,
        ent: ownershipRefs
      }
    });
  }
};

exports.signInAsGuestUser = signInAsGuestUser;
//# sourceMappingURL=resolvers.cjs.js.map
