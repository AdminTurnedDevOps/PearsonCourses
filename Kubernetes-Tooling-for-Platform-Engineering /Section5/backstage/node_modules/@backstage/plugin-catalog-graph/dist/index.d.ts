/// <reference types="react" />
import { Entity, CompoundEntityRef } from '@backstage/catalog-model';
import * as _backstage_core_components from '@backstage/core-components';
import { DependencyGraphTypes } from '@backstage/core-components';
import * as React from 'react';
import React__default, { MouseEventHandler, MouseEvent } from 'react';
import { JsonObject } from '@backstage/types';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';

/**
 * A pair of two relations that describe the opposite of each other. The first
 * relation is considered as the primary relation.
 *
 * @public
 */
type RelationPairs = [string, string][];
/**
 * A list of pairs of entity relations, used to define which relations are
 * merged together and which the primary relation is.
 *
 * @public
 */
declare const ALL_RELATION_PAIRS: RelationPairs;

/**
 * Additional Data for entities.
 *
 * @public
 */
type EntityEdgeData = {
    /**
     * Up to two relations that are connecting an entity.
     */
    relations: string[];
    /**
     * Whether the entity is visible or not.
     */
    label: 'visible';
};
/**
 * Edge between two entities.
 *
 * @public
 */
type EntityEdge = DependencyGraphTypes.DependencyEdge<EntityEdgeData>;
/**
 * Additional data for Entity Node
 *
 * @public
 */
type EntityNodeData = {
    /**
     * The Entity
     */
    entity: Entity;
    /**
     * Whether the entity is focused, optional, defaults to false. Focused
     * entities are highlighted in the graph.
     */
    focused?: boolean;
    /**
     * Optional color of the entity, defaults to 'default'.
     */
    color?: 'primary' | 'secondary' | 'default';
    /**
     * Optional click handler.
     */
    onClick?: MouseEventHandler<unknown>;
    /**
     * Name of the entity.
     * @deprecated use {@link EntityNodeData#entity} instead
     */
    name: string;
    /**
     * Optional kind of the entity.
     * @deprecated use {@link EntityNodeData#entity} instead
     */
    kind?: string;
    /**
     * Optional title of the entity.
     * @deprecated use {@link EntityNodeData#entity} instead
     */
    title?: string;
    /**
     * Namespace of the entity.
     * @deprecated use {@link EntityNodeData#entity} instead
     * The Entity
     */
    namespace: string;
    /**
     * Optional spec of the entity.
     * @deprecated use {@link EntityNodeData#entity} instead
     */
    spec?: JsonObject;
};
/**
 * Node representing an entity.
 *
 * @public
 */
type EntityNode = DependencyGraphTypes.DependencyNode<EntityNodeData>;
/**
 * Render direction of the graph.
 *
 * @public
 */
declare enum Direction {
    /**
     * Top to bottom.
     */
    TOP_BOTTOM = "TB",
    /**
     * Bottom to top.
     */
    BOTTOM_TOP = "BT",
    /**
     * Left to right.
     */
    LEFT_RIGHT = "LR",
    /**
     * Right to left.
     */
    RIGHT_LEFT = "RL"
}

/** @public */
type EntityRelationsGraphClassKey = 'progress' | 'container' | 'graph';
/**
 * @public
 */
type EntityRelationsGraphProps = {
    rootEntityNames: CompoundEntityRef | CompoundEntityRef[];
    maxDepth?: number;
    unidirectional?: boolean;
    mergeRelations?: boolean;
    kinds?: string[];
    relations?: string[];
    entityFilter?: (entity: Entity) => boolean;
    direction?: Direction;
    onNodeClick?: (value: EntityNode, event: MouseEvent<unknown>) => void;
    relationPairs?: RelationPairs;
    className?: string;
    zoom?: 'enabled' | 'disabled' | 'enable-on-click';
    renderNode?: DependencyGraphTypes.RenderNodeFunction<EntityNode>;
    renderLabel?: DependencyGraphTypes.RenderLabelFunction<EntityEdge>;
    curve?: 'curveStepBefore' | 'curveMonotoneX';
    showArrowHeads?: boolean;
};
/**
 * Core building block for custom entity relations diagrams.
 *
 * @public
 */
declare const EntityRelationsGraph: (props: EntityRelationsGraphProps) => React__default.JSX.Element;

/** @public */
type CustomLabelClassKey = 'text' | 'secondary';

/** @public */
type CustomNodeClassKey = 'node' | 'text' | 'clickable';

/**
 * A card that displays the directly related entities to the current entity.
 *
 * @public
 */
declare const EntityCatalogGraphCard: (props: Partial<EntityRelationsGraphProps> & {
    variant?: _backstage_core_components.InfoCardVariants | undefined;
    height?: number | undefined;
    title?: string | undefined;
    action?: React.ReactNode;
}) => React.JSX.Element;
/**
 * A standalone page that can be added to your application providing a viewer
 * for your entities and their relations.
 *
 * @public
 */
declare const CatalogGraphPage: (props: {
    initialState?: {
        selectedRelations?: string[] | undefined;
        selectedKinds?: string[] | undefined;
        rootEntityRefs?: string[] | undefined;
        maxDepth?: number | undefined;
        unidirectional?: boolean | undefined;
        mergeRelations?: boolean | undefined;
        direction?: Direction | undefined;
        showFilters?: boolean | undefined;
        curve?: "curveStepBefore" | "curveMonotoneX" | undefined;
    } | undefined;
} & Partial<EntityRelationsGraphProps>) => React.JSX.Element;

/**
 * Catalog Graph Plugin instance.
 * @public
 */
declare const catalogGraphPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    catalogGraph: _backstage_core_plugin_api.RouteRef<undefined>;
}, {
    catalogEntity: _backstage_core_plugin_api.ExternalRouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }, true>;
}>;

/**
 * Route pointing to the standalone catalog graph page.
 *
 * @public
 */
declare const catalogGraphRouteRef: _backstage_core_plugin_api.RouteRef<undefined>;

export { ALL_RELATION_PAIRS, CatalogGraphPage, type CustomLabelClassKey, type CustomNodeClassKey, Direction, EntityCatalogGraphCard, type EntityEdge, type EntityEdgeData, type EntityNode, type EntityNodeData, EntityRelationsGraph, type EntityRelationsGraphClassKey, type EntityRelationsGraphProps, type RelationPairs, catalogGraphPlugin, catalogGraphRouteRef };
