import { stringifyEntityRef } from '@backstage/catalog-model';
import { useApi } from '@backstage/core-plugin-api';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import { useRef, useState, useCallback } from 'react';
import useAsyncFn from 'react-use/esm/useAsyncFn';

function useEntityStore() {
  const catalogClient = useApi(catalogApiRef);
  const state = useRef({
    requestedEntities: /* @__PURE__ */ new Set(),
    outstandingEntities: /* @__PURE__ */ new Map(),
    cachedEntities: /* @__PURE__ */ new Map()
  });
  const [entities, setEntities] = useState({});
  const updateEntities = useCallback(() => {
    const { cachedEntities, requestedEntities } = state.current;
    const filteredEntities = {};
    requestedEntities.forEach((entityRef) => {
      const entity = cachedEntities.get(entityRef);
      if (entity) {
        filteredEntities[entityRef] = entity;
      }
    });
    setEntities(filteredEntities);
  }, [state, setEntities]);
  const [asyncState, fetch] = useAsyncFn(async () => {
    const { requestedEntities, cachedEntities } = state.current;
    const entityRefs = Array.from(requestedEntities).filter(
      (entityRef) => !cachedEntities.has(entityRef)
    );
    if (entityRefs.length === 0) {
      updateEntities();
      return;
    }
    const { items } = await catalogClient.getEntitiesByRefs({ entityRefs });
    items.forEach((ent) => {
      if (ent) {
        const entityRef = stringifyEntityRef(ent);
        cachedEntities.set(entityRef, ent);
      }
    });
    updateEntities();
  }, [state, updateEntities]);
  const { loading, error } = asyncState;
  const requestEntities = useCallback(
    (entityRefs) => {
      const n = new Set(entityRefs);
      const { requestedEntities } = state.current;
      if (n.size !== requestedEntities.size || Array.from(n).some((e) => !requestedEntities.has(e))) {
        state.current.requestedEntities = n;
        fetch();
        updateEntities();
      }
    },
    [state, fetch, updateEntities]
  );
  return {
    entities,
    loading,
    error,
    requestEntities
  };
}

export { useEntityStore };
//# sourceMappingURL=useEntityStore.esm.js.map
