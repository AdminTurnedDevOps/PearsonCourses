import { useEffect, useMemo } from 'react';
import { useEntityStore } from './useEntityStore.esm.js';
import { pickBy } from 'lodash';

function useEntityRelationGraph({
  rootEntityRefs,
  filter: {
    maxDepth = Number.POSITIVE_INFINITY,
    relations,
    kinds,
    entityFilter
  } = {}
}) {
  const { entities, loading, error, requestEntities } = useEntityStore();
  useEffect(() => {
    const expectedEntities = /* @__PURE__ */ new Set([...rootEntityRefs]);
    const processedEntityRefs = /* @__PURE__ */ new Set();
    let nextDepthRefQueue = [...rootEntityRefs];
    let depth = 0;
    while (nextDepthRefQueue.length > 0 && (!isFinite(maxDepth) || depth < maxDepth)) {
      const entityRefQueue = nextDepthRefQueue;
      nextDepthRefQueue = [];
      while (entityRefQueue.length > 0) {
        const entityRef = entityRefQueue.shift();
        const entity = entities[entityRef];
        processedEntityRefs.add(entityRef);
        if (entity && entity.relations) {
          if (entityFilter && !entityFilter(entity)) {
            continue;
          }
          for (const rel of entity.relations) {
            if ((!relations || relations.includes(rel.type)) && (!kinds || kinds.some(
              (kind) => rel.targetRef.startsWith(
                `${kind.toLocaleLowerCase("en-US")}:`
              )
            ))) {
              if (!processedEntityRefs.has(rel.targetRef)) {
                nextDepthRefQueue.push(rel.targetRef);
                expectedEntities.add(rel.targetRef);
              }
            }
          }
        }
      }
      ++depth;
    }
    requestEntities([...expectedEntities]);
  }, [
    entities,
    rootEntityRefs,
    maxDepth,
    relations,
    kinds,
    entityFilter,
    requestEntities
  ]);
  const filteredEntities = useMemo(
    () => entityFilter ? pickBy(entities, (value, _key) => entityFilter(value)) : entities,
    [entities, entityFilter]
  );
  return {
    entities: filteredEntities,
    loading,
    error
  };
}

export { useEntityRelationGraph };
//# sourceMappingURL=useEntityRelationGraph.esm.js.map
