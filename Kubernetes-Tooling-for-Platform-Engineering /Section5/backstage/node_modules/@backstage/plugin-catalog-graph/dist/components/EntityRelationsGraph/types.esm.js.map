{"version":3,"file":"types.esm.js","sources":["../../../src/components/EntityRelationsGraph/types.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DependencyGraphTypes } from '@backstage/core-components';\nimport { MouseEventHandler } from 'react';\nimport { Entity } from '@backstage/catalog-model';\nimport { JsonObject } from '@backstage/types';\n\n/**\n * Additional Data for entities.\n *\n * @public\n */\nexport type EntityEdgeData = {\n  /**\n   * Up to two relations that are connecting an entity.\n   */\n  relations: string[];\n  /**\n   * Whether the entity is visible or not.\n   */\n  // Not used, but has to be non-empty to draw a label at all!\n  label: 'visible';\n};\n\n/**\n * Edge between two entities.\n *\n * @public\n */\nexport type EntityEdge = DependencyGraphTypes.DependencyEdge<EntityEdgeData>;\n\n/**\n * Additional data for Entity Node\n *\n * @public\n */\nexport type EntityNodeData = {\n  /**\n   * The Entity\n   */\n  entity: Entity;\n  /**\n   * Whether the entity is focused, optional, defaults to false. Focused\n   * entities are highlighted in the graph.\n   */\n  focused?: boolean;\n  /**\n   * Optional color of the entity, defaults to 'default'.\n   */\n  color?: 'primary' | 'secondary' | 'default';\n  /**\n   * Optional click handler.\n   */\n  onClick?: MouseEventHandler<unknown>;\n\n  /**\n   * Name of the entity.\n   * @deprecated use {@link EntityNodeData#entity} instead\n   */\n  name: string;\n  /**\n   * Optional kind of the entity.\n   * @deprecated use {@link EntityNodeData#entity} instead\n   */\n  kind?: string;\n  /**\n   * Optional title of the entity.\n   * @deprecated use {@link EntityNodeData#entity} instead\n   */\n  title?: string;\n  /**\n   * Namespace of the entity.\n   * @deprecated use {@link EntityNodeData#entity} instead\n   * The Entity\n   */\n  namespace: string;\n  /**\n   * Optional spec of the entity.\n   * @deprecated use {@link EntityNodeData#entity} instead\n   */\n  spec?: JsonObject;\n};\n\n/**\n * Node representing an entity.\n *\n * @public\n */\nexport type EntityNode = DependencyGraphTypes.DependencyNode<EntityNodeData>;\n\n/**\n * Render direction of the graph.\n *\n * @public\n */\nexport enum Direction {\n  /**\n   * Top to bottom.\n   */\n  TOP_BOTTOM = 'TB',\n  /**\n   * Bottom to top.\n   */\n  BOTTOM_TOP = 'BT',\n  /**\n   * Left to right.\n   */\n  LEFT_RIGHT = 'LR',\n  /**\n   * Right to left.\n   */\n  RIGHT_LEFT = 'RL',\n}\n"],"names":["Direction"],"mappings":"AA6GY,IAAA,SAAA,qBAAAA,UAAL,KAAA;AAIL,EAAAA,WAAA,YAAa,CAAA,GAAA,IAAA;AAIb,EAAAA,WAAA,YAAa,CAAA,GAAA,IAAA;AAIb,EAAAA,WAAA,YAAa,CAAA,GAAA,IAAA;AAIb,EAAAA,WAAA,YAAa,CAAA,GAAA,IAAA;AAhBH,EAAAA,OAAAA,UAAAA;AAAA,CAAA,EAAA,SAAA,IAAA,EAAA;;;;"}