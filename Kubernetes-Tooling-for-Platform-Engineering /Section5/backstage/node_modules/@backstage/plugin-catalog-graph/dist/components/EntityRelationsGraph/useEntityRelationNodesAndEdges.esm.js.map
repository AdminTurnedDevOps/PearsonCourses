{"version":3,"file":"useEntityRelationNodesAndEdges.esm.js","sources":["../../../src/components/EntityRelationsGraph/useEntityRelationNodesAndEdges.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { MouseEvent, useState } from 'react';\nimport useDebounce from 'react-use/esm/useDebounce';\nimport { RelationPairs, ALL_RELATION_PAIRS } from './relations';\nimport { EntityEdge, EntityNode } from './types';\nimport { useEntityRelationGraph } from './useEntityRelationGraph';\nimport { Entity, DEFAULT_NAMESPACE } from '@backstage/catalog-model';\n\n/**\n * Generate nodes and edges to render the entity graph.\n */\nexport function useEntityRelationNodesAndEdges({\n  rootEntityRefs,\n  maxDepth = Number.POSITIVE_INFINITY,\n  unidirectional = true,\n  mergeRelations = true,\n  kinds,\n  relations,\n  entityFilter,\n  onNodeClick,\n  relationPairs = ALL_RELATION_PAIRS,\n}: {\n  rootEntityRefs: string[];\n  maxDepth?: number;\n  unidirectional?: boolean;\n  mergeRelations?: boolean;\n  kinds?: string[];\n  relations?: string[];\n  entityFilter?: (entity: Entity) => boolean;\n  onNodeClick?: (value: EntityNode, event: MouseEvent<unknown>) => void;\n  relationPairs?: RelationPairs;\n}): {\n  loading: boolean;\n  nodes?: EntityNode[];\n  edges?: EntityEdge[];\n  error?: Error;\n} {\n  const [nodesAndEdges, setNodesAndEdges] = useState<{\n    nodes?: EntityNode[];\n    edges?: EntityEdge[];\n  }>({});\n  const { entities, loading, error } = useEntityRelationGraph({\n    rootEntityRefs,\n    filter: {\n      maxDepth,\n      kinds,\n      relations,\n      entityFilter,\n    },\n  });\n\n  useDebounce(\n    () => {\n      if (!entities || Object.keys(entities).length === 0) {\n        setNodesAndEdges({});\n        return;\n      }\n\n      const nodes = Object.entries(entities).map(([entityRef, entity]) => {\n        const focused = rootEntityRefs.includes(entityRef);\n        const node: EntityNode = {\n          id: entityRef,\n          entity,\n          focused,\n          color: focused ? 'secondary' : 'primary',\n          // @deprecated\n          kind: entity.kind,\n          name: entity.metadata.name,\n          namespace: entity.metadata.namespace || DEFAULT_NAMESPACE,\n          title: entity.metadata.title,\n          spec: entity.spec,\n        };\n\n        if (onNodeClick) {\n          node.onClick = event => onNodeClick(node, event);\n        }\n\n        return node;\n      });\n\n      const edges: EntityEdge[] = [];\n      const visitedNodes = new Set<string>();\n      const nodeQueue = [...rootEntityRefs];\n\n      while (nodeQueue.length > 0) {\n        const entityRef = nodeQueue.pop()!;\n        const entity = entities[entityRef];\n        visitedNodes.add(entityRef);\n\n        if (entity) {\n          entity?.relations?.forEach(rel => {\n            // Check if the related entity should be displayed, if not, ignore\n            // the relation too\n            if (!entities[rel.targetRef]) {\n              return;\n            }\n\n            if (relations && !relations.includes(rel.type)) {\n              return;\n            }\n\n            if (\n              kinds &&\n              !kinds.some(kind =>\n                rel.targetRef.startsWith(`${kind.toLocaleLowerCase('en-US')}:`),\n              )\n            ) {\n              return;\n            }\n\n            if (!unidirectional || !visitedNodes.has(rel.targetRef)) {\n              if (mergeRelations) {\n                const pair = relationPairs.find(\n                  ([l, r]) => l === rel.type || r === rel.type,\n                ) ?? [rel.type];\n                const [left] = pair;\n\n                edges.push({\n                  from: left === rel.type ? entityRef : rel.targetRef,\n                  to: left === rel.type ? rel.targetRef : entityRef,\n                  relations: pair,\n                  label: 'visible',\n                });\n              } else {\n                edges.push({\n                  from: entityRef,\n                  to: rel.targetRef,\n                  relations: [rel.type],\n                  label: 'visible',\n                });\n              }\n            }\n\n            if (!visitedNodes.has(rel.targetRef)) {\n              nodeQueue.push(rel.targetRef);\n              visitedNodes.add(rel.targetRef);\n            }\n\n            // if unidirectional add missing relations as entities are only visited once\n            if (unidirectional) {\n              const findIndex = edges.findIndex(\n                edge =>\n                  entityRef === edge.from &&\n                  rel.targetRef === edge.to &&\n                  !edge.relations.includes(rel.type),\n              );\n              if (findIndex >= 0) {\n                if (mergeRelations) {\n                  const pair = relationPairs.find(\n                    ([l, r]) => l === rel.type || r === rel.type,\n                  ) ?? [rel.type];\n                  edges[findIndex].relations = [\n                    ...edges[findIndex].relations,\n                    ...pair,\n                  ];\n                } else {\n                  edges[findIndex].relations = [\n                    ...edges[findIndex].relations,\n                    rel.type,\n                  ];\n                }\n              }\n            }\n          });\n        }\n      }\n\n      // Reduce edges as the dependency graph anyway ignores duplicated edges regarding from / to\n      // Additionally, this will improve rendering speed for the dependency graph\n      const finalEdges = edges.reduce((previousEdges, currentEdge) => {\n        const indexFound = previousEdges.findIndex(\n          previousEdge =>\n            previousEdge.from === currentEdge.from &&\n            previousEdge.to === currentEdge.to,\n        );\n        if (indexFound >= 0) {\n          previousEdges[indexFound] = {\n            ...previousEdges[indexFound],\n            relations: Array.from(\n              new Set([\n                ...previousEdges[indexFound].relations,\n                ...currentEdge.relations,\n              ]),\n            ),\n          };\n          return previousEdges;\n        }\n        return [...previousEdges, currentEdge];\n      }, [] as EntityEdge[]);\n\n      setNodesAndEdges({ nodes, edges: finalEdges });\n    },\n    100,\n    [\n      entities,\n      rootEntityRefs,\n      kinds,\n      relations,\n      unidirectional,\n      mergeRelations,\n      onNodeClick,\n      relationPairs,\n    ],\n  );\n\n  return {\n    loading,\n    error,\n    ...nodesAndEdges,\n  };\n}\n"],"names":[],"mappings":"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"}