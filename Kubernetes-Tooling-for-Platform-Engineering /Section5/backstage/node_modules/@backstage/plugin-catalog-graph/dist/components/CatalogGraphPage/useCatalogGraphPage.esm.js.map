{"version":3,"file":"useCatalogGraphPage.esm.js","sources":["../../../src/components/CatalogGraphPage/useCatalogGraphPage.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  CompoundEntityRef,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport qs from 'qs';\nimport {\n  Dispatch,\n  DispatchWithoutAction,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { Direction } from '../EntityRelationsGraph';\n\nexport type CatalogGraphPageValue = {\n  rootEntityNames: CompoundEntityRef[];\n  setRootEntityNames: (value: CompoundEntityRef[]) => void;\n  maxDepth: number;\n  setMaxDepth: Dispatch<React.SetStateAction<number>>;\n  selectedRelations: string[] | undefined;\n  setSelectedRelations: Dispatch<React.SetStateAction<string[] | undefined>>;\n  selectedKinds: string[] | undefined;\n  setSelectedKinds: Dispatch<React.SetStateAction<string[] | undefined>>;\n  unidirectional: boolean;\n  setUnidirectional: Dispatch<React.SetStateAction<boolean>>;\n  mergeRelations: boolean;\n  setMergeRelations: Dispatch<React.SetStateAction<boolean>>;\n  direction: Direction;\n  setDirection: Dispatch<React.SetStateAction<Direction>>;\n  curve: 'curveStepBefore' | 'curveMonotoneX';\n  setCurve: Dispatch<\n    React.SetStateAction<'curveStepBefore' | 'curveMonotoneX'>\n  >;\n  showFilters: boolean;\n  toggleShowFilters: DispatchWithoutAction;\n};\n\nexport function useCatalogGraphPage({\n  initialState = {},\n}: {\n  initialState?: {\n    selectedRelations?: string[] | undefined;\n    selectedKinds?: string[] | undefined;\n    rootEntityRefs?: string[];\n    maxDepth?: number;\n    unidirectional?: boolean;\n    mergeRelations?: boolean;\n    direction?: Direction;\n    showFilters?: boolean;\n    curve?: 'curveStepBefore' | 'curveMonotoneX';\n  };\n}): CatalogGraphPageValue {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const query = useMemo(\n    () =>\n      (qs.parse(location.search, { arrayLimit: 0, ignoreQueryPrefix: true }) ||\n        {}) as {\n        selectedRelations?: string[] | string;\n        selectedKinds?: string[] | string;\n        rootEntityRefs?: string[] | string;\n        maxDepth?: string[] | string;\n        unidirectional?: string[] | string;\n        mergeRelations?: string[] | string;\n        direction?: string[] | Direction;\n        showFilters?: string[] | string;\n        curve?: string[] | 'curveStepBefore' | 'curveMonotoneX';\n      },\n    [location.search],\n  );\n\n  const rootEntityNames = useMemo(\n    () =>\n      (Array.isArray(query.rootEntityRefs)\n        ? query.rootEntityRefs\n        : initialState?.rootEntityRefs ?? []\n      ).map(r => parseEntityRef(r)),\n    [initialState?.rootEntityRefs, query.rootEntityRefs],\n  );\n\n  const setRootEntityNames = useCallback(\n    (value: CompoundEntityRef[]) => {\n      const areSame =\n        rootEntityNames.length === value.length &&\n        rootEntityNames.every(\n          (r, i) => stringifyEntityRef(r) === stringifyEntityRef(value[i]),\n        );\n\n      if (areSame) {\n        return;\n      }\n\n      const newSearch = qs.stringify(\n        {\n          ...query,\n          rootEntityRefs: value.map(r => stringifyEntityRef(r)),\n        },\n        { arrayFormat: 'brackets', addQueryPrefix: true },\n      );\n\n      navigate(newSearch);\n    },\n    [rootEntityNames, navigate, query],\n  );\n\n  const [maxDepth, setMaxDepth] = useState<number>(() =>\n    typeof query.maxDepth === 'string'\n      ? parseMaxDepth(query.maxDepth)\n      : initialState?.maxDepth ?? Number.POSITIVE_INFINITY,\n  );\n\n  const [selectedRelations, setSelectedRelations] = useState<\n    string[] | undefined\n  >(() =>\n    Array.isArray(query.selectedRelations)\n      ? query.selectedRelations\n      : initialState?.selectedRelations,\n  );\n\n  const [selectedKinds, setSelectedKinds] = useState<string[] | undefined>(() =>\n    (Array.isArray(query.selectedKinds)\n      ? query.selectedKinds\n      : initialState?.selectedKinds\n    )?.map(k => k.toLocaleLowerCase('en-US')),\n  );\n\n  const [unidirectional, setUnidirectional] = useState<boolean>(() =>\n    typeof query.unidirectional === 'string'\n      ? query.unidirectional === 'true'\n      : initialState?.unidirectional ?? true,\n  );\n\n  const [mergeRelations, setMergeRelations] = useState<boolean>(() =>\n    typeof query.mergeRelations === 'string'\n      ? query.mergeRelations === 'true'\n      : initialState?.mergeRelations ?? true,\n  );\n\n  const [direction, setDirection] = useState<Direction>(() =>\n    typeof query.direction === 'string'\n      ? query.direction\n      : initialState?.direction ?? Direction.LEFT_RIGHT,\n  );\n\n  const [curve, setCurve] = useState<'curveStepBefore' | 'curveMonotoneX'>(() =>\n    typeof query.curve === 'string'\n      ? query.curve\n      : initialState?.curve ?? 'curveMonotoneX',\n  );\n\n  const [showFilters, setShowFilters] = useState<boolean>(() =>\n    typeof query.showFilters === 'string'\n      ? query.showFilters === 'true'\n      : initialState?.showFilters ?? true,\n  );\n\n  const toggleShowFilters = useCallback(\n    () => setShowFilters(s => !s),\n    [setShowFilters],\n  );\n\n  useEffect(() => {\n    const newParams = qs.stringify(\n      {\n        rootEntityRefs: rootEntityNames.map(stringifyEntityRef),\n        maxDepth: isFinite(maxDepth) ? maxDepth : '∞',\n        selectedKinds,\n        selectedRelations,\n        unidirectional,\n        mergeRelations,\n        direction,\n        showFilters,\n        curve,\n      },\n      { arrayFormat: 'brackets', addQueryPrefix: true },\n    );\n\n    navigate(newParams, { replace: true });\n  }, [\n    maxDepth,\n    curve,\n    selectedKinds,\n    selectedRelations,\n    unidirectional,\n    mergeRelations,\n    direction,\n    showFilters,\n    rootEntityNames,\n    navigate,\n  ]);\n\n  return {\n    rootEntityNames,\n    setRootEntityNames,\n    maxDepth,\n    setMaxDepth,\n    selectedRelations,\n    setSelectedRelations,\n    selectedKinds,\n    setSelectedKinds,\n    unidirectional,\n    setUnidirectional,\n    mergeRelations,\n    setMergeRelations,\n    direction,\n    setDirection,\n    curve,\n    setCurve,\n    showFilters,\n    toggleShowFilters,\n  };\n}\n\nfunction parseMaxDepth(value: string): number {\n  return value === '∞' ? Number.POSITIVE_INFINITY : Number(value);\n}\n"],"names":[],"mappings":"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"}