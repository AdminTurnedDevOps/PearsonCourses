import { stringifyEntityRef } from '@backstage/catalog-model';
import { DependencyGraph, DependencyGraphTypes } from '@backstage/core-components';
import { useApi, errorApiRef } from '@backstage/core-plugin-api';
import CircularProgress from '@material-ui/core/CircularProgress';
import { makeStyles, useTheme } from '@material-ui/core/styles';
import classNames from 'classnames';
import React, { useMemo, useEffect } from 'react';
import { DefaultRenderLabel } from './DefaultRenderLabel.esm.js';
import { DefaultRenderNode } from './DefaultRenderNode.esm.js';
import { ALL_RELATION_PAIRS } from './relations.esm.js';
import { Direction } from './types.esm.js';
import { useEntityRelationNodesAndEdges } from './useEntityRelationNodesAndEdges.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    progress: {
      position: "absolute",
      left: "50%",
      top: "50%",
      marginLeft: "-20px",
      marginTop: "-20px"
    },
    container: {
      position: "relative",
      width: "100%",
      display: "flex",
      flexDirection: "column"
    },
    graph: {
      width: "100%",
      flex: 1,
      // Right now there is no good way to style edges between nodes, we have to
      // fall back to these hacks:
      "& path[marker-end]": {
        transition: "filter 0.1s ease-in-out"
      },
      "& path[marker-end]:hover": {
        filter: `drop-shadow(2px 2px 4px ${theme.palette.primary.dark});`
      },
      "& g[data-testid=label]": {
        transition: "transform 0s"
      }
    }
  }),
  { name: "PluginCatalogGraphEntityRelationsGraph" }
);
const EntityRelationsGraph = (props) => {
  const {
    rootEntityNames,
    maxDepth = 2,
    unidirectional = true,
    mergeRelations = true,
    kinds,
    relations,
    entityFilter,
    direction = Direction.LEFT_RIGHT,
    onNodeClick,
    relationPairs = ALL_RELATION_PAIRS,
    className,
    zoom = "enabled",
    renderNode,
    renderLabel,
    curve,
    showArrowHeads
  } = props;
  const theme = useTheme();
  const classes = useStyles();
  const rootEntityRefs = useMemo(
    () => (Array.isArray(rootEntityNames) ? rootEntityNames : [rootEntityNames]).map((e) => stringifyEntityRef(e)),
    [rootEntityNames]
  );
  const errorApi = useApi(errorApiRef);
  const { loading, error, nodes, edges } = useEntityRelationNodesAndEdges({
    rootEntityRefs,
    maxDepth,
    unidirectional,
    mergeRelations,
    kinds,
    relations,
    entityFilter,
    onNodeClick,
    relationPairs
  });
  useEffect(() => {
    if (error) {
      errorApi.post(error);
    }
  }, [errorApi, error]);
  return /* @__PURE__ */ React.createElement("div", { className: classNames(classes.container, className) }, loading && /* @__PURE__ */ React.createElement(CircularProgress, { className: classes.progress }), nodes && edges && /* @__PURE__ */ React.createElement(
    DependencyGraph,
    {
      nodes,
      edges,
      renderNode: renderNode || DefaultRenderNode,
      renderLabel: renderLabel || DefaultRenderLabel,
      direction,
      className: classes.graph,
      paddingX: theme.spacing(4),
      paddingY: theme.spacing(4),
      labelPosition: DependencyGraphTypes.LabelPosition.RIGHT,
      labelOffset: theme.spacing(1),
      zoom,
      curve,
      showArrowHeads
    }
  ));
};

export { EntityRelationsGraph };
//# sourceMappingURL=EntityRelationsGraph.esm.js.map
