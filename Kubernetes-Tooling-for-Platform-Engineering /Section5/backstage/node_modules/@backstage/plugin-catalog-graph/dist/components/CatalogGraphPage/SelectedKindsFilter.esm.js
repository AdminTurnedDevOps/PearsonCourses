import { useApi, alertApiRef } from '@backstage/core-plugin-api';
import { catalogApiRef } from '@backstage/plugin-catalog-react';
import Box from '@material-ui/core/Box';
import Checkbox from '@material-ui/core/Checkbox';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import TextField from '@material-ui/core/TextField';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import CheckBoxIcon from '@material-ui/icons/CheckBox';
import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Autocomplete from '@material-ui/lab/Autocomplete';
import React, { useEffect, useMemo, useCallback } from 'react';
import useAsync from 'react-use/esm/useAsync';

const useStyles = makeStyles(
  {
    formControl: {
      maxWidth: 300
    }
  },
  { name: "PluginCatalogGraphSelectedKindsFilter" }
);
const SelectedKindsFilter = ({ value, onChange }) => {
  const classes = useStyles();
  const alertApi = useApi(alertApiRef);
  const catalogApi = useApi(catalogApiRef);
  const { error, value: kinds } = useAsync(async () => {
    return await catalogApi.getEntityFacets({ facets: ["kind"] }).then((response) => response.facets.kind?.map((f) => f.value).sort() || []);
  });
  useEffect(() => {
    if (error) {
      alertApi.post({
        message: `Failed to load entity kinds`,
        severity: "error"
      });
    }
  }, [error, alertApi]);
  const normalizedKinds = useMemo(
    () => kinds ? kinds.map((k) => k.toLocaleLowerCase("en-US")) : kinds,
    [kinds]
  );
  const handleChange = useCallback(
    (_, v) => {
      onChange(
        normalizedKinds && normalizedKinds.every((r) => v.includes(r)) ? void 0 : v
      );
    },
    [normalizedKinds, onChange]
  );
  const handleEmpty = useCallback(() => {
    onChange(value?.length ? value : void 0);
  }, [value, onChange]);
  if (!kinds?.length || !normalizedKinds?.length || error) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null);
  }
  return /* @__PURE__ */ React.createElement(Box, { pb: 1, pt: 1 }, /* @__PURE__ */ React.createElement(Typography, { variant: "button" }, "Kinds"), /* @__PURE__ */ React.createElement(
    Autocomplete,
    {
      className: classes.formControl,
      multiple: true,
      limitTags: 4,
      disableCloseOnSelect: true,
      "aria-label": "Kinds",
      options: normalizedKinds,
      value: value ?? normalizedKinds,
      getOptionLabel: (k) => kinds[normalizedKinds.indexOf(k)] ?? k,
      onChange: handleChange,
      onBlur: handleEmpty,
      renderOption: (option, { selected }) => /* @__PURE__ */ React.createElement(
        FormControlLabel,
        {
          control: /* @__PURE__ */ React.createElement(
            Checkbox,
            {
              icon: /* @__PURE__ */ React.createElement(CheckBoxOutlineBlankIcon, { fontSize: "small" }),
              checkedIcon: /* @__PURE__ */ React.createElement(CheckBoxIcon, { fontSize: "small" }),
              checked: selected
            }
          ),
          label: kinds[normalizedKinds.indexOf(option)] ?? option
        }
      ),
      size: "small",
      popupIcon: /* @__PURE__ */ React.createElement(ExpandMoreIcon, { "data-testid": "selected-kinds-expand" }),
      renderInput: (params) => /* @__PURE__ */ React.createElement(TextField, { ...params, variant: "outlined" })
    }
  ));
};

export { SelectedKindsFilter };
//# sourceMappingURL=SelectedKindsFilter.esm.js.map
