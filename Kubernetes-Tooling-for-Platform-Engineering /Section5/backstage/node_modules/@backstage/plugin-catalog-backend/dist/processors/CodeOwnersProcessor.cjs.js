'use strict';

var integration = require('@backstage/integration');
var read = require('./codeowners/read.cjs.js');
require('codeowners-utils');
require('git-url-parse');

const ALLOWED_KINDS = ["API", "Component", "Domain", "Resource", "System"];
const ALLOWED_LOCATION_TYPES = ["url"];
class CodeOwnersProcessor {
  integrations;
  logger;
  reader;
  static fromConfig(config, options) {
    const integrations = integration.ScmIntegrations.fromConfig(config);
    return new CodeOwnersProcessor({
      ...options,
      integrations
    });
  }
  constructor(options) {
    this.integrations = options.integrations;
    this.logger = options.logger;
    this.reader = options.reader;
  }
  getProcessorName() {
    return "CodeOwnersProcessor";
  }
  async preProcessEntity(entity, location) {
    if (!entity || !ALLOWED_KINDS.includes(entity.kind) || !ALLOWED_LOCATION_TYPES.includes(location.type) || entity.spec && entity.spec.owner) {
      return entity;
    }
    const scmIntegration = this.integrations.byUrl(location.target);
    if (!scmIntegration) {
      return entity;
    }
    const owner = await read.findCodeOwnerByTarget(
      this.reader,
      location.target,
      scmIntegration
    );
    if (!owner) {
      this.logger.debug(
        `CodeOwnerProcessor could not resolve owner for ${location.target}`
      );
      return entity;
    }
    return {
      ...entity,
      spec: { ...entity.spec, owner }
    };
  }
}

exports.CodeOwnersProcessor = CodeOwnersProcessor;
//# sourceMappingURL=CodeOwnersProcessor.cjs.js.map
