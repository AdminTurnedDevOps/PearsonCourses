{"version":3,"file":"CodeOwnersProcessor.cjs.js","sources":["../../src/processors/CodeOwnersProcessor.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { CatalogProcessor } from '@backstage/plugin-catalog-node';\nimport { findCodeOwnerByTarget } from './codeowners';\nimport { LoggerService, UrlReaderService } from '@backstage/backend-plugin-api';\n\nconst ALLOWED_KINDS = ['API', 'Component', 'Domain', 'Resource', 'System'];\nconst ALLOWED_LOCATION_TYPES = ['url'];\n\n/** @public */\nexport class CodeOwnersProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: LoggerService;\n  private readonly reader: UrlReaderService;\n\n  static fromConfig(\n    config: Config,\n    options: { logger: LoggerService; reader: UrlReaderService },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new CodeOwnersProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: LoggerService;\n    reader: UrlReaderService;\n  }) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.reader = options.reader;\n  }\n\n  getProcessorName(): string {\n    return 'CodeOwnersProcessor';\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n  ): Promise<Entity> {\n    // Only continue if the owner is not set\n    if (\n      !entity ||\n      !ALLOWED_KINDS.includes(entity.kind) ||\n      !ALLOWED_LOCATION_TYPES.includes(location.type) ||\n      (entity.spec && entity.spec.owner)\n    ) {\n      return entity;\n    }\n\n    const scmIntegration = this.integrations.byUrl(location.target);\n    if (!scmIntegration) {\n      return entity;\n    }\n\n    const owner = await findCodeOwnerByTarget(\n      this.reader,\n      location.target,\n      scmIntegration,\n    );\n\n    if (!owner) {\n      this.logger.debug(\n        `CodeOwnerProcessor could not resolve owner for ${location.target}`,\n      );\n      return entity;\n    }\n\n    return {\n      ...entity,\n      spec: { ...entity.spec, owner },\n    };\n  }\n}\n"],"names":["ScmIntegrations","findCodeOwnerByTarget"],"mappings":";;;;;;;AA2BA,MAAM,gBAAgB,CAAC,KAAA,EAAO,WAAa,EAAA,QAAA,EAAU,YAAY,QAAQ,CAAA;AACzE,MAAM,sBAAA,GAAyB,CAAC,KAAK,CAAA;AAG9B,MAAM,mBAAgD,CAAA;AAAA,EAC1C,YAAA;AAAA,EACA,MAAA;AAAA,EACA,MAAA;AAAA,EAEjB,OAAO,UACL,CAAA,MAAA,EACA,OACA,EAAA;AACA,IAAM,MAAA,YAAA,GAAeA,2BAAgB,CAAA,UAAA,CAAW,MAAM,CAAA;AAEtD,IAAA,OAAO,IAAI,mBAAoB,CAAA;AAAA,MAC7B,GAAG,OAAA;AAAA,MACH;AAAA,KACD,CAAA;AAAA;AACH,EAEA,YAAY,OAIT,EAAA;AACD,IAAA,IAAA,CAAK,eAAe,OAAQ,CAAA,YAAA;AAC5B,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA;AACtB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA;AAAA;AACxB,EAEA,gBAA2B,GAAA;AACzB,IAAO,OAAA,qBAAA;AAAA;AACT,EAEA,MAAM,gBACJ,CAAA,MAAA,EACA,QACiB,EAAA;AAEjB,IAAA,IACE,CAAC,MACD,IAAA,CAAC,cAAc,QAAS,CAAA,MAAA,CAAO,IAAI,CACnC,IAAA,CAAC,sBAAuB,CAAA,QAAA,CAAS,SAAS,IAAI,CAAA,IAC7C,OAAO,IAAQ,IAAA,MAAA,CAAO,KAAK,KAC5B,EAAA;AACA,MAAO,OAAA,MAAA;AAAA;AAGT,IAAA,MAAM,cAAiB,GAAA,IAAA,CAAK,YAAa,CAAA,KAAA,CAAM,SAAS,MAAM,CAAA;AAC9D,IAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,MAAO,OAAA,MAAA;AAAA;AAGT,IAAA,MAAM,QAAQ,MAAMC,0BAAA;AAAA,MAClB,IAAK,CAAA,MAAA;AAAA,MACL,QAAS,CAAA,MAAA;AAAA,MACT;AAAA,KACF;AAEA,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,IAAA,CAAK,MAAO,CAAA,KAAA;AAAA,QACV,CAAA,+CAAA,EAAkD,SAAS,MAAM,CAAA;AAAA,OACnE;AACA,MAAO,OAAA,MAAA;AAAA;AAGT,IAAO,OAAA;AAAA,MACL,GAAG,MAAA;AAAA,MACH,IAAM,EAAA,EAAE,GAAG,MAAA,CAAO,MAAM,KAAM;AAAA,KAChC;AAAA;AAEJ;;;;"}