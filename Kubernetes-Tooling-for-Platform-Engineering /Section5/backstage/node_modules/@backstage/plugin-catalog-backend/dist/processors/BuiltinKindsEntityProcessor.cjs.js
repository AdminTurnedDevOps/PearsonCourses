'use strict';

var catalogModel = require('@backstage/catalog-model');
var pluginCatalogNode = require('@backstage/plugin-catalog-node');

class BuiltinKindsEntityProcessor {
  validators = [
    catalogModel.apiEntityV1alpha1Validator,
    catalogModel.componentEntityV1alpha1Validator,
    catalogModel.resourceEntityV1alpha1Validator,
    catalogModel.groupEntityV1alpha1Validator,
    catalogModel.locationEntityV1alpha1Validator,
    catalogModel.userEntityV1alpha1Validator,
    catalogModel.systemEntityV1alpha1Validator,
    catalogModel.domainEntityV1alpha1Validator
  ];
  getProcessorName() {
    return "BuiltinKindsEntityProcessor";
  }
  async validateEntityKind(entity) {
    for (const validator of this.validators) {
      const results = await validator.check(entity);
      if (results) {
        return true;
      }
    }
    return false;
  }
  async postProcessEntity(entity, _location, emit) {
    const selfRef = catalogModel.getCompoundEntityRef(entity);
    function doEmit(targets, context, outgoingRelation, incomingRelation) {
      if (!targets) {
        return;
      }
      for (const target of [targets].flat()) {
        const targetRef = catalogModel.parseEntityRef(target, context);
        emit(
          pluginCatalogNode.processingResult.relation({
            source: selfRef,
            type: outgoingRelation,
            target: {
              kind: targetRef.kind,
              namespace: targetRef.namespace,
              name: targetRef.name
            }
          })
        );
        emit(
          pluginCatalogNode.processingResult.relation({
            source: {
              kind: targetRef.kind,
              namespace: targetRef.namespace,
              name: targetRef.name
            },
            type: incomingRelation,
            target: selfRef
          })
        );
      }
    }
    if (entity.kind === "Component") {
      const component = entity;
      doEmit(
        component.spec.owner,
        { defaultKind: "Group", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_OWNED_BY,
        catalogModel.RELATION_OWNER_OF
      );
      doEmit(
        component.spec.subcomponentOf,
        { defaultKind: "Component", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_PART_OF,
        catalogModel.RELATION_HAS_PART
      );
      doEmit(
        component.spec.providesApis,
        { defaultKind: "API", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_PROVIDES_API,
        catalogModel.RELATION_API_PROVIDED_BY
      );
      doEmit(
        component.spec.consumesApis,
        { defaultKind: "API", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_CONSUMES_API,
        catalogModel.RELATION_API_CONSUMED_BY
      );
      doEmit(
        component.spec.dependsOn,
        { defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_DEPENDS_ON,
        catalogModel.RELATION_DEPENDENCY_OF
      );
      doEmit(
        component.spec.dependencyOf,
        { defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_DEPENDENCY_OF,
        catalogModel.RELATION_DEPENDS_ON
      );
      doEmit(
        component.spec.system,
        { defaultKind: "System", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_PART_OF,
        catalogModel.RELATION_HAS_PART
      );
    }
    if (entity.kind === "API") {
      const api = entity;
      doEmit(
        api.spec.owner,
        { defaultKind: "Group", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_OWNED_BY,
        catalogModel.RELATION_OWNER_OF
      );
      doEmit(
        api.spec.system,
        { defaultKind: "System", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_PART_OF,
        catalogModel.RELATION_HAS_PART
      );
    }
    if (entity.kind === "Resource") {
      const resource = entity;
      doEmit(
        resource.spec.owner,
        { defaultKind: "Group", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_OWNED_BY,
        catalogModel.RELATION_OWNER_OF
      );
      doEmit(
        resource.spec.dependsOn,
        { defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_DEPENDS_ON,
        catalogModel.RELATION_DEPENDENCY_OF
      );
      doEmit(
        resource.spec.dependencyOf,
        { defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_DEPENDENCY_OF,
        catalogModel.RELATION_DEPENDS_ON
      );
      doEmit(
        resource.spec.system,
        { defaultKind: "System", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_PART_OF,
        catalogModel.RELATION_HAS_PART
      );
    }
    if (entity.kind === "User") {
      const user = entity;
      doEmit(
        user.spec.memberOf,
        { defaultKind: "Group", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_MEMBER_OF,
        catalogModel.RELATION_HAS_MEMBER
      );
    }
    if (entity.kind === "Group") {
      const group = entity;
      doEmit(
        group.spec.parent,
        { defaultKind: "Group", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_CHILD_OF,
        catalogModel.RELATION_PARENT_OF
      );
      doEmit(
        group.spec.children,
        { defaultKind: "Group", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_PARENT_OF,
        catalogModel.RELATION_CHILD_OF
      );
      doEmit(
        group.spec.members,
        { defaultKind: "User", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_HAS_MEMBER,
        catalogModel.RELATION_MEMBER_OF
      );
    }
    if (entity.kind === "System") {
      const system = entity;
      doEmit(
        system.spec.owner,
        { defaultKind: "Group", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_OWNED_BY,
        catalogModel.RELATION_OWNER_OF
      );
      doEmit(
        system.spec.domain,
        { defaultKind: "Domain", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_PART_OF,
        catalogModel.RELATION_HAS_PART
      );
    }
    if (entity.kind === "Domain") {
      const domain = entity;
      doEmit(
        domain.spec.owner,
        { defaultKind: "Group", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_OWNED_BY,
        catalogModel.RELATION_OWNER_OF
      );
      doEmit(
        domain.spec.subdomainOf,
        { defaultKind: "Domain", defaultNamespace: selfRef.namespace },
        catalogModel.RELATION_PART_OF,
        catalogModel.RELATION_HAS_PART
      );
    }
    return entity;
  }
}

exports.BuiltinKindsEntityProcessor = BuiltinKindsEntityProcessor;
//# sourceMappingURL=BuiltinKindsEntityProcessor.cjs.js.map
