'use strict';

var catalogModel = require('@backstage/catalog-model');

class Connection {
  constructor(config) {
    this.config = config;
  }
  validateEntityEnvelope = catalogModel.entityEnvelopeSchemaValidator();
  async applyMutation(mutation) {
    const db = this.config.providerDatabase;
    if (mutation.type === "full") {
      this.check(mutation.entities.map((e) => e.entity));
      await db.transaction(async (tx) => {
        await db.replaceUnprocessedEntities(tx, {
          sourceKey: this.config.id,
          type: "full",
          items: mutation.entities
        });
      });
    } else if (mutation.type === "delta") {
      this.check(mutation.added.map((e) => e.entity));
      this.check(
        mutation.removed.map((e) => "entity" in e ? e.entity : void 0).filter((e) => Boolean(e))
      );
      await db.transaction(async (tx) => {
        await db.replaceUnprocessedEntities(tx, {
          sourceKey: this.config.id,
          type: "delta",
          added: mutation.added,
          removed: mutation.removed.map(
            (r) => "entityRef" in r ? r : {
              entityRef: catalogModel.stringifyEntityRef(r.entity),
              locationKey: r.locationKey
            }
          )
        });
      });
    }
  }
  async refresh(options) {
    const db = this.config.providerDatabase;
    await db.transaction(async (tx) => {
      return db.refreshByRefreshKeys(tx, {
        keys: options.keys
      });
    });
  }
  check(entities) {
    for (const entity of entities) {
      try {
        this.validateEntityEnvelope(entity);
      } catch (e) {
        throw new TypeError(`Malformed entity envelope, ${e}`);
      }
    }
  }
}
async function connectEntityProviders(db, providers) {
  await Promise.all(
    providers.map(async (provider) => {
      const connection = new Connection({
        id: provider.getProviderName(),
        providerDatabase: db
      });
      return provider.connect(connection);
    })
  );
}

exports.connectEntityProviders = connectEntityProviders;
//# sourceMappingURL=connectEntityProviders.cjs.js.map
