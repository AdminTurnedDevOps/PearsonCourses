{"version":3,"file":"markForStitching.cjs.js","sources":["../../../../src/database/operations/stitcher/markForStitching.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport splitToChunks from 'lodash/chunk';\nimport { v4 as uuid } from 'uuid';\nimport { StitchingStrategy } from '../../../stitching/types';\nimport { DbFinalEntitiesRow, DbRefreshStateRow } from '../../tables';\n\n/**\n * Marks a number of entities for stitching some time in the near\n * future.\n *\n * @remarks\n */\nexport async function markForStitching(options: {\n  knex: Knex | Knex.Transaction;\n  strategy: StitchingStrategy;\n  entityRefs?: Iterable<string>;\n  entityIds?: Iterable<string>;\n}): Promise<void> {\n  // Splitting to chunks just to cover pathological cases that upset the db\n  const entityRefs = split(options.entityRefs);\n  const entityIds = split(options.entityIds);\n  const knex = options.knex;\n  const mode = options.strategy.mode;\n\n  if (mode === 'immediate') {\n    for (const chunk of entityRefs) {\n      await knex\n        .table<DbFinalEntitiesRow>('final_entities')\n        .update({\n          hash: 'force-stitching',\n        })\n        .whereIn(\n          'entity_id',\n          knex<DbRefreshStateRow>('refresh_state')\n            .select('entity_id')\n            .whereIn('entity_ref', chunk),\n        );\n      await knex\n        .table<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'force-stitching',\n          next_update_at: knex.fn.now(),\n        })\n        .whereIn('entity_ref', chunk);\n    }\n\n    for (const chunk of entityIds) {\n      await knex\n        .table<DbFinalEntitiesRow>('final_entities')\n        .update({\n          hash: 'force-stitching',\n        })\n        .whereIn('entity_id', chunk);\n      await knex\n        .table<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'force-stitching',\n          next_update_at: knex.fn.now(),\n        })\n        .whereIn('entity_id', chunk);\n    }\n  } else if (mode === 'deferred') {\n    // It's OK that this is shared across refresh state rows; it just needs to\n    // be uniquely generated for every new stitch request.\n    const ticket = uuid();\n\n    for (const chunk of entityRefs) {\n      await knex<DbRefreshStateRow>('refresh_state')\n        .update({\n          next_stitch_at: knex.fn.now(),\n          next_stitch_ticket: ticket,\n        })\n        .whereIn('entity_ref', chunk);\n    }\n\n    for (const chunk of entityIds) {\n      await knex<DbRefreshStateRow>('refresh_state')\n        .update({\n          next_stitch_at: knex.fn.now(),\n          next_stitch_ticket: ticket,\n        })\n        .whereIn('entity_id', chunk);\n    }\n  } else {\n    throw new Error(`Unknown stitching strategy mode ${mode}`);\n  }\n}\n\nfunction split(input: Iterable<string> | undefined): string[][] {\n  if (!input) {\n    return [];\n  }\n  return splitToChunks(Array.isArray(input) ? input : [...input], 200);\n}\n"],"names":["uuid","splitToChunks"],"mappings":";;;;;;;;;AA4BA,eAAsB,iBAAiB,OAKrB,EAAA;AAEhB,EAAM,MAAA,UAAA,GAAa,KAAM,CAAA,OAAA,CAAQ,UAAU,CAAA;AAC3C,EAAM,MAAA,SAAA,GAAY,KAAM,CAAA,OAAA,CAAQ,SAAS,CAAA;AACzC,EAAA,MAAM,OAAO,OAAQ,CAAA,IAAA;AACrB,EAAM,MAAA,IAAA,GAAO,QAAQ,QAAS,CAAA,IAAA;AAE9B,EAAA,IAAI,SAAS,WAAa,EAAA;AACxB,IAAA,KAAA,MAAW,SAAS,UAAY,EAAA;AAC9B,MAAA,MAAM,IACH,CAAA,KAAA,CAA0B,gBAAgB,CAAA,CAC1C,MAAO,CAAA;AAAA,QACN,IAAM,EAAA;AAAA,OACP,CACA,CAAA,OAAA;AAAA,QACC,WAAA;AAAA,QACA,IAAA,CAAwB,eAAe,CACpC,CAAA,MAAA,CAAO,WAAW,CAClB,CAAA,OAAA,CAAQ,cAAc,KAAK;AAAA,OAChC;AACF,MAAA,MAAM,IACH,CAAA,KAAA,CAAyB,eAAe,CAAA,CACxC,MAAO,CAAA;AAAA,QACN,WAAa,EAAA,iBAAA;AAAA,QACb,cAAA,EAAgB,IAAK,CAAA,EAAA,CAAG,GAAI;AAAA,OAC7B,CAAA,CACA,OAAQ,CAAA,YAAA,EAAc,KAAK,CAAA;AAAA;AAGhC,IAAA,KAAA,MAAW,SAAS,SAAW,EAAA;AAC7B,MAAA,MAAM,IACH,CAAA,KAAA,CAA0B,gBAAgB,CAAA,CAC1C,MAAO,CAAA;AAAA,QACN,IAAM,EAAA;AAAA,OACP,CAAA,CACA,OAAQ,CAAA,WAAA,EAAa,KAAK,CAAA;AAC7B,MAAA,MAAM,IACH,CAAA,KAAA,CAAyB,eAAe,CAAA,CACxC,MAAO,CAAA;AAAA,QACN,WAAa,EAAA,iBAAA;AAAA,QACb,cAAA,EAAgB,IAAK,CAAA,EAAA,CAAG,GAAI;AAAA,OAC7B,CAAA,CACA,OAAQ,CAAA,WAAA,EAAa,KAAK,CAAA;AAAA;AAC/B,GACF,MAAA,IAAW,SAAS,UAAY,EAAA;AAG9B,IAAA,MAAM,SAASA,OAAK,EAAA;AAEpB,IAAA,KAAA,MAAW,SAAS,UAAY,EAAA;AAC9B,MAAM,MAAA,IAAA,CAAwB,eAAe,CAAA,CAC1C,MAAO,CAAA;AAAA,QACN,cAAA,EAAgB,IAAK,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,QAC5B,kBAAoB,EAAA;AAAA,OACrB,CAAA,CACA,OAAQ,CAAA,YAAA,EAAc,KAAK,CAAA;AAAA;AAGhC,IAAA,KAAA,MAAW,SAAS,SAAW,EAAA;AAC7B,MAAM,MAAA,IAAA,CAAwB,eAAe,CAAA,CAC1C,MAAO,CAAA;AAAA,QACN,cAAA,EAAgB,IAAK,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,QAC5B,kBAAoB,EAAA;AAAA,OACrB,CAAA,CACA,OAAQ,CAAA,WAAA,EAAa,KAAK,CAAA;AAAA;AAC/B,GACK,MAAA;AACL,IAAA,MAAM,IAAI,KAAA,CAAM,CAAmC,gCAAA,EAAA,IAAI,CAAE,CAAA,CAAA;AAAA;AAE7D;AAEA,SAAS,MAAM,KAAiD,EAAA;AAC9D,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAA,OAAO,EAAC;AAAA;AAEV,EAAO,OAAAC,8BAAA,CAAc,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAA,GAAI,QAAQ,CAAC,GAAG,KAAK,CAAA,EAAG,GAAG,CAAA;AACrE;;;;"}