{"version":3,"file":"deleteOrphanedEntities.cjs.js","sources":["../../../../src/database/operations/util/deleteOrphanedEntities.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport uniq from 'lodash/uniq';\nimport { StitchingStrategy } from '../../../stitching/types';\nimport { DbRefreshStateRow } from '../../tables';\nimport { markForStitching } from '../stitcher/markForStitching';\n\n/**\n * Finds and deletes all orphaned entities, i.e. entities that do not have any\n * incoming references to them, and also eagerly deletes all of their children\n * that would otherwise become orphaned.\n */\nexport async function deleteOrphanedEntities(options: {\n  knex: Knex.Transaction | Knex;\n  strategy: StitchingStrategy;\n}): Promise<number> {\n  const { knex, strategy } = options;\n\n  let total = 0;\n\n  // Limit iterations for sanity\n  for (let i = 0; i < 100; ++i) {\n    const candidates = await knex\n      .with('orphans', ['entity_id', 'entity_ref'], orphans =>\n        orphans\n          .from('refresh_state')\n          .select('refresh_state.entity_id', 'refresh_state.entity_ref')\n          .leftOuterJoin(\n            'refresh_state_references',\n            'refresh_state_references.target_entity_ref',\n            'refresh_state.entity_ref',\n          )\n          .whereNull('refresh_state_references.target_entity_ref'),\n      )\n      .select({\n        entityId: 'orphans.entity_id',\n        relationSourceId: 'refresh_state.entity_id',\n      })\n      .from('orphans')\n      .leftOuterJoin(\n        'relations',\n        'relations.target_entity_ref',\n        'orphans.entity_ref',\n      )\n      .leftOuterJoin(\n        'refresh_state',\n        'refresh_state.entity_ref',\n        'relations.source_entity_ref',\n      );\n\n    if (!candidates.length) {\n      break;\n    }\n\n    const orphanIds: string[] = uniq(candidates.map(r => r.entityId));\n    const orphanRelationIds: string[] = uniq(\n      candidates.map(r => r.relationSourceId).filter(Boolean),\n    );\n\n    total += orphanIds.length;\n\n    // Delete the orphans themselves\n    await knex\n      .table<DbRefreshStateRow>('refresh_state')\n      .delete()\n      .whereIn('entity_id', orphanIds);\n\n    // Mark all of the things that the orphans had relations to for stitching\n    await markForStitching({\n      knex,\n      strategy,\n      entityIds: orphanRelationIds,\n    });\n  }\n\n  return total;\n}\n"],"names":["uniq","markForStitching"],"mappings":";;;;;;;;;AA2BA,eAAsB,uBAAuB,OAGzB,EAAA;AAClB,EAAM,MAAA,EAAE,IAAM,EAAA,QAAA,EAAa,GAAA,OAAA;AAE3B,EAAA,IAAI,KAAQ,GAAA,CAAA;AAGZ,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,EAAK,EAAE,CAAG,EAAA;AAC5B,IAAM,MAAA,UAAA,GAAa,MAAM,IACtB,CAAA,IAAA;AAAA,MAAK,SAAA;AAAA,MAAW,CAAC,aAAa,YAAY,CAAA;AAAA,MAAG,CAAA,OAAA,KAC5C,QACG,IAAK,CAAA,eAAe,EACpB,MAAO,CAAA,yBAAA,EAA2B,0BAA0B,CAC5D,CAAA,aAAA;AAAA,QACC,0BAAA;AAAA,QACA,4CAAA;AAAA,QACA;AAAA,OACF,CACC,UAAU,4CAA4C;AAAA,MAE1D,MAAO,CAAA;AAAA,MACN,QAAU,EAAA,mBAAA;AAAA,MACV,gBAAkB,EAAA;AAAA,KACnB,CAAA,CACA,IAAK,CAAA,SAAS,CACd,CAAA,aAAA;AAAA,MACC,WAAA;AAAA,MACA,6BAAA;AAAA,MACA;AAAA,KAED,CAAA,aAAA;AAAA,MACC,eAAA;AAAA,MACA,0BAAA;AAAA,MACA;AAAA,KACF;AAEF,IAAI,IAAA,CAAC,WAAW,MAAQ,EAAA;AACtB,MAAA;AAAA;AAGF,IAAA,MAAM,YAAsBA,qBAAK,CAAA,UAAA,CAAW,IAAI,CAAK,CAAA,KAAA,CAAA,CAAE,QAAQ,CAAC,CAAA;AAChE,IAAA,MAAM,iBAA8B,GAAAA,qBAAA;AAAA,MAClC,WAAW,GAAI,CAAA,CAAA,CAAA,KAAK,EAAE,gBAAgB,CAAA,CAAE,OAAO,OAAO;AAAA,KACxD;AAEA,IAAA,KAAA,IAAS,SAAU,CAAA,MAAA;AAGnB,IAAM,MAAA,IAAA,CACH,MAAyB,eAAe,CAAA,CACxC,QACA,CAAA,OAAA,CAAQ,aAAa,SAAS,CAAA;AAGjC,IAAA,MAAMC,iCAAiB,CAAA;AAAA,MACrB,IAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAW,EAAA;AAAA,KACZ,CAAA;AAAA;AAGH,EAAO,OAAA,KAAA;AACT;;;;"}