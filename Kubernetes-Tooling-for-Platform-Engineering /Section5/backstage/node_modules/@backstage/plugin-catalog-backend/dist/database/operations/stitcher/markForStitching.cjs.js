'use strict';

var splitToChunks = require('lodash/chunk');
var uuid = require('uuid');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var splitToChunks__default = /*#__PURE__*/_interopDefaultCompat(splitToChunks);

async function markForStitching(options) {
  const entityRefs = split(options.entityRefs);
  const entityIds = split(options.entityIds);
  const knex = options.knex;
  const mode = options.strategy.mode;
  if (mode === "immediate") {
    for (const chunk of entityRefs) {
      await knex.table("final_entities").update({
        hash: "force-stitching"
      }).whereIn(
        "entity_id",
        knex("refresh_state").select("entity_id").whereIn("entity_ref", chunk)
      );
      await knex.table("refresh_state").update({
        result_hash: "force-stitching",
        next_update_at: knex.fn.now()
      }).whereIn("entity_ref", chunk);
    }
    for (const chunk of entityIds) {
      await knex.table("final_entities").update({
        hash: "force-stitching"
      }).whereIn("entity_id", chunk);
      await knex.table("refresh_state").update({
        result_hash: "force-stitching",
        next_update_at: knex.fn.now()
      }).whereIn("entity_id", chunk);
    }
  } else if (mode === "deferred") {
    const ticket = uuid.v4();
    for (const chunk of entityRefs) {
      await knex("refresh_state").update({
        next_stitch_at: knex.fn.now(),
        next_stitch_ticket: ticket
      }).whereIn("entity_ref", chunk);
    }
    for (const chunk of entityIds) {
      await knex("refresh_state").update({
        next_stitch_at: knex.fn.now(),
        next_stitch_ticket: ticket
      }).whereIn("entity_id", chunk);
    }
  } else {
    throw new Error(`Unknown stitching strategy mode ${mode}`);
  }
}
function split(input) {
  if (!input) {
    return [];
  }
  return splitToChunks__default.default(Array.isArray(input) ? input : [...input], 200);
}

exports.markForStitching = markForStitching;
//# sourceMappingURL=markForStitching.cjs.js.map
