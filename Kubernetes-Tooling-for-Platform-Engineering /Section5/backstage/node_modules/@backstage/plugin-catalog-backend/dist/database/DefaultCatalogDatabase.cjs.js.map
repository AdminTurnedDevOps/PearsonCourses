{"version":3,"file":"DefaultCatalogDatabase.cjs.js","sources":["../../src/database/DefaultCatalogDatabase.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport {\n  CatalogDatabase,\n  ListAncestorsOptions,\n  ListAncestorsResult,\n  RefreshOptions,\n  Transaction,\n} from './types';\nimport { DbRefreshStateReferencesRow, DbRefreshStateRow } from './tables';\nimport { rethrowError } from './conversion';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst MAX_ANCESTOR_DEPTH = 32;\n\nexport class DefaultCatalogDatabase implements CatalogDatabase {\n  constructor(\n    private readonly options: {\n      database: Knex;\n      logger: LoggerService;\n    },\n  ) {}\n\n  async transaction<T>(fn: (tx: Transaction) => Promise<T>): Promise<T> {\n    try {\n      let result: T | undefined = undefined;\n\n      await this.options.database.transaction(\n        async tx => {\n          // We can't return here, as knex swallows the return type in case the transaction is rolled back:\n          // https://github.com/knex/knex/blob/e37aeaa31c8ef9c1b07d2e4d3ec6607e557d800d/lib/transaction.js#L136\n          result = await fn(tx);\n        },\n        {\n          // If we explicitly trigger a rollback, don't fail.\n          doNotRejectOnRollback: true,\n        },\n      );\n\n      return result!;\n    } catch (e) {\n      this.options.logger.debug(`Error during transaction, ${e}`);\n      throw rethrowError(e);\n    }\n  }\n\n  async listAncestors(\n    txOpaque: Transaction,\n    options: ListAncestorsOptions,\n  ): Promise<ListAncestorsResult> {\n    const tx = txOpaque as Knex.Transaction;\n    const { entityRef } = options;\n    const entityRefs = new Array<string>();\n\n    let currentRef = entityRef.toLocaleLowerCase('en-US');\n    for (let depth = 1; depth <= MAX_ANCESTOR_DEPTH; depth += 1) {\n      const rows = await tx<DbRefreshStateReferencesRow>(\n        'refresh_state_references',\n      )\n        .where({ target_entity_ref: currentRef })\n        .select();\n\n      if (rows.length === 0) {\n        if (depth === 1) {\n          throw new NotFoundError(`Entity ${currentRef} not found`);\n        }\n        throw new NotFoundError(\n          `Entity ${entityRef} has a broken parent reference chain at ${currentRef}`,\n        );\n      }\n\n      const parentRef = rows.find(r => r.source_entity_ref)?.source_entity_ref;\n      if (!parentRef) {\n        // We've reached the top of the tree which is the entityProvider.\n        // In this case we refresh the entity itself.\n        return { entityRefs };\n      }\n      entityRefs.push(parentRef);\n      currentRef = parentRef;\n    }\n    throw new Error(\n      `Unable receive ancestors for ${entityRef}, reached maximum depth of ${MAX_ANCESTOR_DEPTH}`,\n    );\n  }\n\n  async refresh(txOpaque: Transaction, options: RefreshOptions): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { entityRef } = options;\n\n    const updateResult = await tx<DbRefreshStateRow>('refresh_state')\n      .where({ entity_ref: entityRef.toLocaleLowerCase('en-US') })\n      .update({ next_update_at: tx.fn.now() });\n    if (updateResult === 0) {\n      throw new NotFoundError(`Failed to schedule ${entityRef} for refresh`);\n    }\n  }\n}\n"],"names":["rethrowError","NotFoundError"],"mappings":";;;;;AA6BA,MAAM,kBAAqB,GAAA,EAAA;AAEpB,MAAM,sBAAkD,CAAA;AAAA,EAC7D,YACmB,OAIjB,EAAA;AAJiB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AAAA;AAIhB,EAEH,MAAM,YAAe,EAAiD,EAAA;AACpE,IAAI,IAAA;AACF,MAAA,IAAI,MAAwB,GAAA,KAAA,CAAA;AAE5B,MAAM,MAAA,IAAA,CAAK,QAAQ,QAAS,CAAA,WAAA;AAAA,QAC1B,OAAM,EAAM,KAAA;AAGV,UAAS,MAAA,GAAA,MAAM,GAAG,EAAE,CAAA;AAAA,SACtB;AAAA,QACA;AAAA;AAAA,UAEE,qBAAuB,EAAA;AAAA;AACzB,OACF;AAEA,MAAO,OAAA,MAAA;AAAA,aACA,CAAG,EAAA;AACV,MAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,KAAM,CAAA,CAAA,0BAAA,EAA6B,CAAC,CAAE,CAAA,CAAA;AAC1D,MAAA,MAAMA,wBAAa,CAAC,CAAA;AAAA;AACtB;AACF,EAEA,MAAM,aACJ,CAAA,QAAA,EACA,OAC8B,EAAA;AAC9B,IAAA,MAAM,EAAK,GAAA,QAAA;AACX,IAAM,MAAA,EAAE,WAAc,GAAA,OAAA;AACtB,IAAM,MAAA,UAAA,GAAa,IAAI,KAAc,EAAA;AAErC,IAAI,IAAA,UAAA,GAAa,SAAU,CAAA,iBAAA,CAAkB,OAAO,CAAA;AACpD,IAAA,KAAA,IAAS,KAAQ,GAAA,CAAA,EAAG,KAAS,IAAA,kBAAA,EAAoB,SAAS,CAAG,EAAA;AAC3D,MAAA,MAAM,OAAO,MAAM,EAAA;AAAA,QACjB;AAAA,QAEC,KAAM,CAAA,EAAE,mBAAmB,UAAW,EAAC,EACvC,MAAO,EAAA;AAEV,MAAI,IAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AACrB,QAAA,IAAI,UAAU,CAAG,EAAA;AACf,UAAA,MAAM,IAAIC,oBAAA,CAAc,CAAU,OAAA,EAAA,UAAU,CAAY,UAAA,CAAA,CAAA;AAAA;AAE1D,QAAA,MAAM,IAAIA,oBAAA;AAAA,UACR,CAAA,OAAA,EAAU,SAAS,CAAA,wCAAA,EAA2C,UAAU,CAAA;AAAA,SAC1E;AAAA;AAGF,MAAA,MAAM,YAAY,IAAK,CAAA,IAAA,CAAK,CAAK,CAAA,KAAA,CAAA,CAAE,iBAAiB,CAAG,EAAA,iBAAA;AACvD,MAAA,IAAI,CAAC,SAAW,EAAA;AAGd,QAAA,OAAO,EAAE,UAAW,EAAA;AAAA;AAEtB,MAAA,UAAA,CAAW,KAAK,SAAS,CAAA;AACzB,MAAa,UAAA,GAAA,SAAA;AAAA;AAEf,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,CAAA,6BAAA,EAAgC,SAAS,CAAA,2BAAA,EAA8B,kBAAkB,CAAA;AAAA,KAC3F;AAAA;AACF,EAEA,MAAM,OAAQ,CAAA,QAAA,EAAuB,OAAwC,EAAA;AAC3E,IAAA,MAAM,EAAK,GAAA,QAAA;AACX,IAAM,MAAA,EAAE,WAAc,GAAA,OAAA;AAEtB,IAAM,MAAA,YAAA,GAAe,MAAM,EAAsB,CAAA,eAAe,EAC7D,KAAM,CAAA,EAAE,YAAY,SAAU,CAAA,iBAAA,CAAkB,OAAO,CAAE,EAAC,EAC1D,MAAO,CAAA,EAAE,gBAAgB,EAAG,CAAA,EAAA,CAAG,GAAI,EAAA,EAAG,CAAA;AACzC,IAAA,IAAI,iBAAiB,CAAG,EAAA;AACtB,MAAA,MAAM,IAAIA,oBAAA,CAAc,CAAsB,mBAAA,EAAA,SAAS,CAAc,YAAA,CAAA,CAAA;AAAA;AACvE;AAEJ;;;;"}