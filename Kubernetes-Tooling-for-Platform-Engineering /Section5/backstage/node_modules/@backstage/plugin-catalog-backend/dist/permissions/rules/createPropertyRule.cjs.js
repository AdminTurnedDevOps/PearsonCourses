'use strict';

var lodash = require('lodash');
var alpha = require('@backstage/plugin-catalog-common/alpha');
var util = require('./util.cjs.js');
var zod = require('zod');

const createPropertyRule = (propertyType) => util.createCatalogPermissionRule({
  name: `HAS_${propertyType.toUpperCase()}`,
  description: `Allow entities with the specified ${propertyType} subfield`,
  resourceType: alpha.RESOURCE_TYPE_CATALOG_ENTITY,
  paramsSchema: zod.z.object({
    key: zod.z.string().describe(`Property within the entities ${propertyType} to match on`),
    value: zod.z.string().optional().describe(`Value of the given property to match on`)
  }),
  apply: (resource, { key, value }) => {
    const foundValue = lodash.get(resource[propertyType], key);
    if (Array.isArray(foundValue)) {
      if (value !== void 0) {
        return foundValue.includes(value);
      }
      return foundValue.length > 0;
    }
    if (value !== void 0) {
      return value === foundValue;
    }
    return !!foundValue;
  },
  toQuery: ({ key, value }) => ({
    key: `${propertyType}.${key}`,
    ...value !== void 0 && { values: [value] }
  })
});

exports.createPropertyRule = createPropertyRule;
//# sourceMappingURL=createPropertyRule.cjs.js.map
