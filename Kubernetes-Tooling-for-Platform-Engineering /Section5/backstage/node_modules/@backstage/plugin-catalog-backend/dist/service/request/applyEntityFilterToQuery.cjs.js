'use strict';

function isEntitiesSearchFilter(filter) {
  return filter.hasOwnProperty("key");
}
function isOrEntityFilter(filter) {
  return filter.hasOwnProperty("anyOf");
}
function isNegationEntityFilter(filter) {
  return filter.hasOwnProperty("not");
}
function applyInStrategy(filter, targetQuery, onEntityIdField, knex, negate) {
  if (isNegationEntityFilter(filter)) {
    return applyInStrategy(
      filter.not,
      targetQuery,
      onEntityIdField,
      knex,
      !negate
    );
  }
  if (isEntitiesSearchFilter(filter)) {
    const key = filter.key.toLowerCase();
    const values = filter.values?.map((v) => v.toLowerCase());
    const matchQuery = knex("search").select("search.entity_id").where({ key }).andWhere(function keyFilter() {
      if (values?.length === 1) {
        this.where({ value: values.at(0) });
      } else if (values) {
        this.andWhere("value", "in", values);
      }
    });
    return targetQuery.andWhere(
      onEntityIdField,
      negate ? "not in" : "in",
      matchQuery
    );
  }
  return targetQuery[negate ? "andWhereNot" : "andWhere"](
    function filterFunction() {
      if (isOrEntityFilter(filter)) {
        for (const subFilter of filter.anyOf ?? []) {
          this.orWhere(
            (subQuery) => applyInStrategy(subFilter, subQuery, onEntityIdField, knex, false)
          );
        }
      } else {
        for (const subFilter of filter.allOf ?? []) {
          this.andWhere(
            (subQuery) => applyInStrategy(subFilter, subQuery, onEntityIdField, knex, false)
          );
        }
      }
    }
  );
}
function applyEntityFilterToQuery(options) {
  const { filter, targetQuery, onEntityIdField, knex } = options;
  return applyInStrategy(filter, targetQuery, onEntityIdField, knex, false);
}

exports.applyEntityFilterToQuery = applyEntityFilterToQuery;
//# sourceMappingURL=applyEntityFilterToQuery.cjs.js.map
