{"version":3,"file":"createEntityArrayJsonStream.cjs.js","sources":["../../../src/service/response/createEntityArrayJsonStream.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EntitiesResponseItems } from '../../catalog/types';\nimport { Response } from 'express';\nimport { writeResponseData } from './write';\n\nexport interface EntityArrayJsonStream {\n  send(entities: EntitiesResponseItems): Promise<boolean>;\n  complete(): void;\n  close(): void;\n}\n\n// Helps stream EntitiesResponseItems[] as a JSON response stream to avoid performance issues\nexport function createEntityArrayJsonStream(\n  res: Response,\n): EntityArrayJsonStream {\n  // Imitate the httpRouter behavior of pretty-printing in development\n  const prettyPrint = process.env.NODE_ENV === 'development';\n  let firstSend = true;\n  let completed = false;\n\n  return {\n    async send(response) {\n      if (firstSend) {\n        res.setHeader('Content-Type', 'application/json; charset=utf-8');\n        res.status(200);\n        res.flushHeaders();\n      }\n\n      if (response.type === 'raw') {\n        for (const item of response.entities) {\n          const prefix = firstSend ? '[' : ',';\n          firstSend = false;\n\n          if (await writeResponseData(res, prefix + item)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      let data: string;\n      if (prettyPrint) {\n        data = JSON.stringify(response.entities, null, 2);\n        data = firstSend ? data.slice(0, -2) : `,\\n${data.slice(2, -2)}`;\n      } else {\n        data = JSON.stringify(response.entities);\n        data = firstSend ? data.slice(0, -1) : `,${data.slice(1, -1)}`;\n      }\n\n      firstSend = false;\n      return writeResponseData(res, data);\n    },\n    complete() {\n      if (firstSend) {\n        res.json([]);\n      } else {\n        res.end(prettyPrint ? '\\n]' : ']', 'utf8');\n      }\n      completed = true;\n    },\n    close() {\n      if (!completed) {\n        res.end();\n      }\n    },\n  };\n}\n"],"names":["writeResponseData"],"mappings":";;;;AA2BO,SAAS,4BACd,GACuB,EAAA;AAEvB,EAAM,MAAA,WAAA,GAAc,OAAQ,CAAA,GAAA,CAAI,QAAa,KAAA,aAAA;AAC7C,EAAA,IAAI,SAAY,GAAA,IAAA;AAChB,EAAA,IAAI,SAAY,GAAA,KAAA;AAEhB,EAAO,OAAA;AAAA,IACL,MAAM,KAAK,QAAU,EAAA;AACnB,MAAA,IAAI,SAAW,EAAA;AACb,QAAI,GAAA,CAAA,SAAA,CAAU,gBAAgB,iCAAiC,CAAA;AAC/D,QAAA,GAAA,CAAI,OAAO,GAAG,CAAA;AACd,QAAA,GAAA,CAAI,YAAa,EAAA;AAAA;AAGnB,MAAI,IAAA,QAAA,CAAS,SAAS,KAAO,EAAA;AAC3B,QAAW,KAAA,MAAA,IAAA,IAAQ,SAAS,QAAU,EAAA;AACpC,UAAM,MAAA,MAAA,GAAS,YAAY,GAAM,GAAA,GAAA;AACjC,UAAY,SAAA,GAAA,KAAA;AAEZ,UAAA,IAAI,MAAMA,uBAAA,CAAkB,GAAK,EAAA,MAAA,GAAS,IAAI,CAAG,EAAA;AAC/C,YAAO,OAAA,IAAA;AAAA;AACT;AAEF,QAAO,OAAA,KAAA;AAAA;AAGT,MAAI,IAAA,IAAA;AACJ,MAAA,IAAI,WAAa,EAAA;AACf,QAAA,IAAA,GAAO,IAAK,CAAA,SAAA,CAAU,QAAS,CAAA,QAAA,EAAU,MAAM,CAAC,CAAA;AAChD,QAAA,IAAA,GAAO,SAAY,GAAA,IAAA,CAAK,KAAM,CAAA,CAAA,EAAG,EAAE,CAAI,GAAA,CAAA;AAAA,EAAM,IAAK,CAAA,KAAA,CAAM,CAAG,EAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,OACzD,MAAA;AACL,QAAO,IAAA,GAAA,IAAA,CAAK,SAAU,CAAA,QAAA,CAAS,QAAQ,CAAA;AACvC,QAAO,IAAA,GAAA,SAAA,GAAY,IAAK,CAAA,KAAA,CAAM,CAAG,EAAA,CAAA,CAAE,CAAI,GAAA,CAAA,CAAA,EAAI,IAAK,CAAA,KAAA,CAAM,CAAG,EAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA;AAG9D,MAAY,SAAA,GAAA,KAAA;AACZ,MAAO,OAAAA,uBAAA,CAAkB,KAAK,IAAI,CAAA;AAAA,KACpC;AAAA,IACA,QAAW,GAAA;AACT,MAAA,IAAI,SAAW,EAAA;AACb,QAAI,GAAA,CAAA,IAAA,CAAK,EAAE,CAAA;AAAA,OACN,MAAA;AACL,QAAA,GAAA,CAAI,GAAI,CAAA,WAAA,GAAc,KAAQ,GAAA,GAAA,EAAK,MAAM,CAAA;AAAA;AAE3C,MAAY,SAAA,GAAA,IAAA;AAAA,KACd;AAAA,IACA,KAAQ,GAAA;AACN,MAAA,IAAI,CAAC,SAAW,EAAA;AACd,QAAA,GAAA,CAAI,GAAI,EAAA;AAAA;AACV;AACF,GACF;AACF;;;;"}