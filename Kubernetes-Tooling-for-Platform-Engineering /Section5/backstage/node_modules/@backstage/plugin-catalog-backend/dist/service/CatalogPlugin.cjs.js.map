{"version":3,"file":"CatalogPlugin.cjs.js","sources":["../../src/service/CatalogPlugin.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { eventsServiceRef } from '@backstage/plugin-events-node';\nimport { Entity, Validators } from '@backstage/catalog-model';\nimport { CatalogBuilder, CatalogPermissionRuleInput } from './CatalogBuilder';\nimport {\n  catalogAnalysisExtensionPoint,\n  CatalogModelExtensionPoint,\n  catalogModelExtensionPoint,\n  CatalogPermissionExtensionPoint,\n  catalogPermissionExtensionPoint,\n  CatalogProcessingExtensionPoint,\n  catalogProcessingExtensionPoint,\n  CatalogLocationsExtensionPoint,\n  catalogLocationsExtensionPoint,\n} from '@backstage/plugin-catalog-node/alpha';\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  EntityProvider,\n  LocationAnalyzer,\n  PlaceholderResolver,\n  ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport { merge } from 'lodash';\nimport { Permission } from '@backstage/plugin-permission-common';\nimport { ForwardedError } from '@backstage/errors';\n\nclass CatalogLocationsExtensionPointImpl\n  implements CatalogLocationsExtensionPoint\n{\n  #locationTypes: string[] | undefined;\n\n  setAllowedLocationTypes(locationTypes: Array<string>) {\n    this.#locationTypes = locationTypes;\n  }\n\n  get allowedLocationTypes() {\n    return this.#locationTypes;\n  }\n}\n\nclass CatalogProcessingExtensionPointImpl\n  implements CatalogProcessingExtensionPoint\n{\n  #processors = new Array<CatalogProcessor>();\n  #entityProviders = new Array<EntityProvider>();\n  #placeholderResolvers: Record<string, PlaceholderResolver> = {};\n  #onProcessingErrorHandler?: (event: {\n    unprocessedEntity: Entity;\n    errors: Error[];\n  }) => Promise<void> | void;\n\n  addProcessor(\n    ...processors: Array<CatalogProcessor | Array<CatalogProcessor>>\n  ): void {\n    this.#processors.push(...processors.flat());\n  }\n\n  addEntityProvider(\n    ...providers: Array<EntityProvider | Array<EntityProvider>>\n  ): void {\n    this.#entityProviders.push(...providers.flat());\n  }\n\n  addPlaceholderResolver(key: string, resolver: PlaceholderResolver) {\n    if (key in this.#placeholderResolvers)\n      throw new Error(\n        `A placeholder resolver for '${key}' has already been set up, please check your config.`,\n      );\n    this.#placeholderResolvers[key] = resolver;\n  }\n\n  setOnProcessingErrorHandler(\n    handler: (event: {\n      unprocessedEntity: Entity;\n      errors: Error[];\n    }) => Promise<void> | void,\n  ) {\n    this.#onProcessingErrorHandler = handler;\n  }\n\n  get processors() {\n    return this.#processors;\n  }\n\n  get entityProviders() {\n    return this.#entityProviders;\n  }\n\n  get placeholderResolvers() {\n    return this.#placeholderResolvers;\n  }\n\n  get onProcessingErrorHandler() {\n    return this.#onProcessingErrorHandler;\n  }\n}\n\nclass CatalogPermissionExtensionPointImpl\n  implements CatalogPermissionExtensionPoint\n{\n  #permissions = new Array<Permission>();\n  #permissionRules = new Array<CatalogPermissionRuleInput>();\n\n  addPermissions(...permission: Array<Permission | Array<Permission>>): void {\n    this.#permissions.push(...permission.flat());\n  }\n\n  addPermissionRules(\n    ...rules: Array<\n      CatalogPermissionRuleInput | Array<CatalogPermissionRuleInput>\n    >\n  ): void {\n    this.#permissionRules.push(...rules.flat());\n  }\n\n  get permissions() {\n    return this.#permissions;\n  }\n\n  get permissionRules() {\n    return this.#permissionRules;\n  }\n}\n\nclass CatalogModelExtensionPointImpl implements CatalogModelExtensionPoint {\n  #fieldValidators: Partial<Validators> = {};\n\n  setFieldValidators(validators: Partial<Validators>): void {\n    merge(this.#fieldValidators, validators);\n  }\n\n  get fieldValidators() {\n    return this.#fieldValidators;\n  }\n\n  #entityDataParser?: CatalogProcessorParser;\n\n  setEntityDataParser(parser: CatalogProcessorParser): void {\n    if (this.#entityDataParser) {\n      throw new Error(\n        'Attempted to install second EntityDataParser. Only one can be set.',\n      );\n    }\n    this.#entityDataParser = parser;\n  }\n\n  get entityDataParser() {\n    return this.#entityDataParser;\n  }\n}\n\n/**\n * Catalog plugin\n * @public\n */\nexport const catalogPlugin = createBackendPlugin({\n  pluginId: 'catalog',\n  register(env) {\n    const processingExtensions = new CatalogProcessingExtensionPointImpl();\n    // plugins depending on this API will be initialized before this plugins init method is executed.\n    env.registerExtensionPoint(\n      catalogProcessingExtensionPoint,\n      processingExtensions,\n    );\n\n    let locationAnalyzerFactory:\n      | ((options: {\n          scmLocationAnalyzers: ScmLocationAnalyzer[];\n        }) => Promise<{ locationAnalyzer: LocationAnalyzer }>)\n      | undefined = undefined;\n    const scmLocationAnalyzers = new Array<ScmLocationAnalyzer>();\n    env.registerExtensionPoint(catalogAnalysisExtensionPoint, {\n      setLocationAnalyzer(analyzerOrFactory) {\n        if (locationAnalyzerFactory) {\n          throw new Error('LocationAnalyzer has already been set');\n        }\n        if (typeof analyzerOrFactory === 'function') {\n          locationAnalyzerFactory = analyzerOrFactory;\n        } else {\n          locationAnalyzerFactory = async () => ({\n            locationAnalyzer: analyzerOrFactory,\n          });\n        }\n      },\n      addScmLocationAnalyzer(analyzer: ScmLocationAnalyzer) {\n        scmLocationAnalyzers.push(analyzer);\n      },\n    });\n\n    const permissionExtensions = new CatalogPermissionExtensionPointImpl();\n    env.registerExtensionPoint(\n      catalogPermissionExtensionPoint,\n      permissionExtensions,\n    );\n\n    const modelExtensions = new CatalogModelExtensionPointImpl();\n    env.registerExtensionPoint(catalogModelExtensionPoint, modelExtensions);\n\n    const locationTypeExtensions = new CatalogLocationsExtensionPointImpl();\n    env.registerExtensionPoint(\n      catalogLocationsExtensionPoint,\n      locationTypeExtensions,\n    );\n\n    env.registerInit({\n      deps: {\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n        reader: coreServices.urlReader,\n        permissions: coreServices.permissions,\n        database: coreServices.database,\n        httpRouter: coreServices.httpRouter,\n        lifecycle: coreServices.rootLifecycle,\n        scheduler: coreServices.scheduler,\n        discovery: coreServices.discovery,\n        auth: coreServices.auth,\n        httpAuth: coreServices.httpAuth,\n        events: eventsServiceRef,\n      },\n      async init({\n        logger,\n        config,\n        reader,\n        database,\n        permissions,\n        httpRouter,\n        lifecycle,\n        scheduler,\n        discovery,\n        auth,\n        httpAuth,\n        events,\n      }) {\n        const builder = await CatalogBuilder.create({\n          config,\n          reader,\n          permissions,\n          database,\n          scheduler,\n          logger,\n          discovery,\n          auth,\n          httpAuth,\n        });\n\n        builder.setEventBroker(events);\n\n        if (processingExtensions.onProcessingErrorHandler) {\n          builder.subscribe({\n            onProcessingError: processingExtensions.onProcessingErrorHandler,\n          });\n        }\n        builder.addProcessor(...processingExtensions.processors);\n        builder.addEntityProvider(...processingExtensions.entityProviders);\n\n        if (modelExtensions.entityDataParser) {\n          builder.setEntityDataParser(modelExtensions.entityDataParser);\n        }\n\n        Object.entries(processingExtensions.placeholderResolvers).forEach(\n          ([key, resolver]) => builder.setPlaceholderResolver(key, resolver),\n        );\n        if (locationAnalyzerFactory) {\n          const { locationAnalyzer } = await locationAnalyzerFactory({\n            scmLocationAnalyzers,\n          }).catch(e => {\n            throw new ForwardedError('Failed to create LocationAnalyzer', e);\n          });\n          builder.setLocationAnalyzer(locationAnalyzer);\n        } else {\n          builder.addLocationAnalyzers(...scmLocationAnalyzers);\n        }\n        builder.addPermissions(...permissionExtensions.permissions);\n        builder.addPermissionRules(...permissionExtensions.permissionRules);\n        builder.setFieldFormatValidators(modelExtensions.fieldValidators);\n\n        if (locationTypeExtensions.allowedLocationTypes) {\n          builder.setAllowedLocationTypes(\n            locationTypeExtensions.allowedLocationTypes,\n          );\n        }\n\n        const { processingEngine, router } = await builder.build();\n\n        if (config.getOptional('catalog.processingInterval') ?? true) {\n          lifecycle.addStartupHook(async () => {\n            await processingEngine.start();\n          });\n          lifecycle.addShutdownHook(() => processingEngine.stop());\n        }\n\n        httpRouter.use(router);\n      },\n    });\n  },\n});\n"],"names":["merge","createBackendPlugin","catalogProcessingExtensionPoint","catalogAnalysisExtensionPoint","catalogPermissionExtensionPoint","catalogModelExtensionPoint","catalogLocationsExtensionPoint","coreServices","eventsServiceRef","CatalogBuilder","ForwardedError"],"mappings":"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"}