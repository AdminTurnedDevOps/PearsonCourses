'use strict';

var errors = require('@backstage/errors');
var alpha = require('@backstage/plugin-catalog-common/alpha');
var pluginPermissionCommon = require('@backstage/plugin-permission-common');

class AuthorizedLocationService {
  constructor(locationService, permissionApi) {
    this.locationService = locationService;
    this.permissionApi = permissionApi;
  }
  async createLocation(spec, dryRun, options) {
    const authorizationResponse = (await this.permissionApi.authorize(
      [{ permission: alpha.catalogLocationCreatePermission }],
      { credentials: options.credentials }
    ))[0];
    if (authorizationResponse.result === pluginPermissionCommon.AuthorizeResult.DENY) {
      throw new errors.NotAllowedError();
    }
    return this.locationService.createLocation(spec, dryRun, options);
  }
  async listLocations(options) {
    const authorizationResponse = (await this.permissionApi.authorize(
      [{ permission: alpha.catalogLocationReadPermission }],
      { credentials: options.credentials }
    ))[0];
    if (authorizationResponse.result === pluginPermissionCommon.AuthorizeResult.DENY) {
      return [];
    }
    return this.locationService.listLocations(options);
  }
  async getLocation(id, options) {
    const authorizationResponse = (await this.permissionApi.authorize(
      [{ permission: alpha.catalogLocationReadPermission }],
      { credentials: options.credentials }
    ))[0];
    if (authorizationResponse.result === pluginPermissionCommon.AuthorizeResult.DENY) {
      throw new errors.NotFoundError(`Found no location with ID ${id}`);
    }
    return this.locationService.getLocation(id, options);
  }
  async deleteLocation(id, options) {
    const authorizationResponse = (await this.permissionApi.authorize(
      [{ permission: alpha.catalogLocationDeletePermission }],
      { credentials: options.credentials }
    ))[0];
    if (authorizationResponse.result === pluginPermissionCommon.AuthorizeResult.DENY) {
      throw new errors.NotAllowedError();
    }
    return this.locationService.deleteLocation(id, options);
  }
  async getLocationByEntity(entityRef, options) {
    const authorizationResponse = (await this.permissionApi.authorize(
      [{ permission: alpha.catalogLocationReadPermission }],
      { credentials: options.credentials }
    ))[0];
    if (authorizationResponse.result === pluginPermissionCommon.AuthorizeResult.DENY) {
      throw new errors.NotFoundError();
    }
    return this.locationService.getLocationByEntity(entityRef, options);
  }
}

exports.AuthorizedLocationService = AuthorizedLocationService;
//# sourceMappingURL=AuthorizedLocationService.cjs.js.map
