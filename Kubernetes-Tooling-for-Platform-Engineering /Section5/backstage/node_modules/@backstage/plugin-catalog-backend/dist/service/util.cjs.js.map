{"version":3,"file":"util.cjs.js","sources":["../../src/service/util.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError, NotAllowedError } from '@backstage/errors';\nimport { Request } from 'express';\nimport lodash from 'lodash';\nimport { z } from 'zod';\nimport {\n  Cursor,\n  QueryEntitiesCursorRequest,\n  QueryEntitiesInitialRequest,\n  QueryEntitiesRequest,\n} from '../catalog/types';\nimport { EntityFilter } from '@backstage/plugin-catalog-node';\nimport {\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\n\nexport async function requireRequestBody(req: Request): Promise<unknown> {\n  const contentType = req.header('content-type');\n  if (!contentType) {\n    throw new InputError('Content-Type missing');\n  } else if (!contentType.match(/^application\\/json($|;)/)) {\n    throw new InputError('Illegal Content-Type');\n  }\n\n  const body = req.body;\n  if (!body) {\n    throw new InputError('Missing request body');\n  } else if (!lodash.isPlainObject(body)) {\n    throw new InputError('Expected body to be a JSON object');\n  } else if (Object.keys(body).length === 0) {\n    // Because of how express.json() translates the empty body to {}\n    throw new InputError('Empty request body');\n  }\n\n  return body;\n}\n\nexport const locationInput = z\n  .object({\n    type: z.string(),\n    target: z.string(),\n    presence: z.literal('required').or(z.literal('optional')).optional(),\n  })\n  .strict(); // no unknown keys;\n\nexport async function validateRequestBody<T>(\n  req: Request,\n  schema: z.Schema<T>,\n): Promise<T> {\n  const body = await requireRequestBody(req);\n  try {\n    return await schema.parse(body);\n  } catch (e) {\n    throw new InputError(`Malformed request: ${e}`);\n  }\n}\n\nexport function disallowReadonlyMode(readonly: boolean) {\n  if (readonly) {\n    throw new NotAllowedError('This operation not allowed in readonly mode');\n  }\n}\n\nexport function isQueryEntitiesInitialRequest(\n  input: QueryEntitiesRequest | undefined,\n): input is QueryEntitiesInitialRequest {\n  if (!input) {\n    return false;\n  }\n  return !isQueryEntitiesCursorRequest(input);\n}\n\nexport function isQueryEntitiesCursorRequest(\n  input: QueryEntitiesRequest | undefined,\n): input is QueryEntitiesCursorRequest {\n  if (!input) {\n    return false;\n  }\n  return !!(input as QueryEntitiesCursorRequest).cursor;\n}\n\nconst entityFilterParser: z.ZodSchema<EntityFilter> = z.lazy(() =>\n  z\n    .object({\n      key: z.string(),\n      values: z.array(z.string()).optional(),\n    })\n    .or(z.object({ not: entityFilterParser }))\n    .or(z.object({ anyOf: z.array(entityFilterParser) }))\n    .or(z.object({ allOf: z.array(entityFilterParser) })),\n);\n\nexport const cursorParser: z.ZodSchema<Cursor> = z.object({\n  orderFields: z.array(\n    z.object({ field: z.string(), order: z.enum(['asc', 'desc']) }),\n  ),\n  fullTextFilter: z\n    .object({\n      term: z.string(),\n      fields: z.array(z.string()).optional(),\n    })\n    .optional(),\n  orderFieldValues: z.array(z.string().or(z.null())),\n  filter: entityFilterParser.optional(),\n  isPrevious: z.boolean(),\n  query: z.string().optional(),\n  firstSortFieldValues: z.array(z.string().or(z.null())).optional(),\n  totalItems: z.number().optional(),\n});\n\nexport function encodeCursor(cursor: Cursor) {\n  const json = JSON.stringify(cursor);\n  return Buffer.from(json, 'utf8').toString('base64');\n}\n\nexport function decodeCursor(encodedCursor: string) {\n  try {\n    const data = Buffer.from(encodedCursor, 'base64').toString('utf8');\n    const result = cursorParser.safeParse(JSON.parse(data));\n\n    if (!result.success) {\n      throw new InputError(`Malformed cursor: ${result.error}`);\n    }\n    return result.data;\n  } catch (e) {\n    throw new InputError(`Malformed cursor: ${e}`);\n  }\n}\n\n// TODO(freben): This is added as a compatibility guarantee, until we can be\n// sure that all adopters have re-stitched their entities so that the new\n// targetRef field is present on them, and that they have stopped consuming\n// the now-removed old field\n// TODO(patriko): Remove this in catalog 2.0\nexport function expandLegacyCompoundRelationsInEntity(entity: Entity): Entity {\n  if (entity.relations) {\n    for (const relation of entity.relations as any) {\n      if (!relation.targetRef && relation.target) {\n        // This is the case where an old-form entity, not yet stitched with\n        // the updated code, was in the database\n        relation.targetRef = stringifyEntityRef(relation.target);\n      } else if (!relation.target && relation.targetRef) {\n        // This is the case where a new-form entity, stitched with the\n        // updated code, was in the database but we still want to produce\n        // the old data shape as well for compatibility reasons\n        relation.target = parseEntityRef(relation.targetRef);\n      }\n    }\n  }\n  return entity;\n}\n"],"names":["InputError","lodash","z","NotAllowedError","stringifyEntityRef","parseEntityRef"],"mappings":"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"}