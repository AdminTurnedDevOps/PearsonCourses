{"version":3,"file":"parseEntityTransformParams.cjs.js","sources":["../../../src/service/request/parseEntityTransformParams.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { InputError } from '@backstage/errors';\nimport lodash from 'lodash';\nimport { RecursivePartial } from '../../util/RecursivePartial';\nimport { parseStringsParam } from './common';\n\nfunction getPathArrayAndValue(input: Entity, field: string) {\n  return field.split('.').reduce(\n    ([pathArray, inputSubset], pathPart, index, fieldParts) => {\n      if (lodash.hasIn(inputSubset, pathPart)) {\n        return [pathArray.concat(pathPart), inputSubset[pathPart]];\n      } else if (fieldParts[index + 1] !== undefined) {\n        fieldParts[index + 1] = `${pathPart}.${fieldParts[index + 1]}`;\n        return [pathArray, inputSubset];\n      }\n\n      return [pathArray, undefined];\n    },\n    [[] as string[], input as any],\n  );\n}\n\nexport function parseEntityTransformParams(\n  params: Record<string, unknown>,\n  extra?: string[],\n): ((entity: Entity) => Entity) | undefined {\n  const queryFields = parseStringsParam(params.fields, 'fields');\n\n  const fields = Array.from(\n    new Set(\n      [...(extra ?? []), ...(queryFields?.map(s => s.split(',')) ?? [])]\n        .flat()\n        .map(s => s.trim())\n        .filter(Boolean),\n    ),\n  );\n\n  if (!fields.length) {\n    return undefined;\n  }\n\n  const arrayTypeField = fields.find(f => f.includes('['));\n  if (arrayTypeField) {\n    throw new InputError(\n      `Invalid field \"${arrayTypeField}\", array type fields are not supported`,\n    );\n  }\n\n  return input => {\n    const output: RecursivePartial<Entity> = {};\n\n    for (const field of fields) {\n      const [pathArray, value] = getPathArrayAndValue(input, field);\n\n      if (value !== undefined) {\n        lodash.set(output, pathArray, value);\n      }\n    }\n\n    return output as Entity;\n  };\n}\n"],"names":["lodash","parseStringsParam","InputError"],"mappings":";;;;;;;;;;AAsBA,SAAS,oBAAA,CAAqB,OAAe,KAAe,EAAA;AAC1D,EAAO,OAAA,KAAA,CAAM,KAAM,CAAA,GAAG,CAAE,CAAA,MAAA;AAAA,IACtB,CAAC,CAAC,SAAA,EAAW,WAAW,CAAG,EAAA,QAAA,EAAU,OAAO,UAAe,KAAA;AACzD,MAAA,IAAIA,uBAAO,CAAA,KAAA,CAAM,WAAa,EAAA,QAAQ,CAAG,EAAA;AACvC,QAAA,OAAO,CAAC,SAAU,CAAA,MAAA,CAAO,QAAQ,CAAG,EAAA,WAAA,CAAY,QAAQ,CAAC,CAAA;AAAA,OAChD,MAAA,IAAA,UAAA,CAAW,KAAQ,GAAA,CAAC,MAAM,KAAW,CAAA,EAAA;AAC9C,QAAW,UAAA,CAAA,KAAA,GAAQ,CAAC,CAAI,GAAA,CAAA,EAAG,QAAQ,CAAI,CAAA,EAAA,UAAA,CAAW,KAAQ,GAAA,CAAC,CAAC,CAAA,CAAA;AAC5D,QAAO,OAAA,CAAC,WAAW,WAAW,CAAA;AAAA;AAGhC,MAAO,OAAA,CAAC,WAAW,KAAS,CAAA,CAAA;AAAA,KAC9B;AAAA,IACA,CAAC,EAAC,EAAe,KAAY;AAAA,GAC/B;AACF;AAEgB,SAAA,0BAAA,CACd,QACA,KAC0C,EAAA;AAC1C,EAAA,MAAM,WAAc,GAAAC,wBAAA,CAAkB,MAAO,CAAA,MAAA,EAAQ,QAAQ,CAAA;AAE7D,EAAA,MAAM,SAAS,KAAM,CAAA,IAAA;AAAA,IACnB,IAAI,GAAA;AAAA,MACF,CAAC,GAAI,KAAA,IAAS,EAAC,EAAI,GAAI,WAAA,EAAa,GAAI,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,KAAA,CAAM,GAAG,CAAC,KAAK,EAAG,CAC9D,CAAA,IAAA,EACA,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,IAAK,EAAC,CACjB,CAAA,MAAA,CAAO,OAAO;AAAA;AACnB,GACF;AAEA,EAAI,IAAA,CAAC,OAAO,MAAQ,EAAA;AAClB,IAAO,OAAA,KAAA,CAAA;AAAA;AAGT,EAAA,MAAM,iBAAiB,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,QAAA,CAAS,GAAG,CAAC,CAAA;AACvD,EAAA,IAAI,cAAgB,EAAA;AAClB,IAAA,MAAM,IAAIC,iBAAA;AAAA,MACR,kBAAkB,cAAc,CAAA,sCAAA;AAAA,KAClC;AAAA;AAGF,EAAA,OAAO,CAAS,KAAA,KAAA;AACd,IAAA,MAAM,SAAmC,EAAC;AAE1C,IAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AAC1B,MAAA,MAAM,CAAC,SAAW,EAAA,KAAK,CAAI,GAAA,oBAAA,CAAqB,OAAO,KAAK,CAAA;AAE5D,MAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,QAAOF,uBAAA,CAAA,GAAA,CAAI,MAAQ,EAAA,SAAA,EAAW,KAAK,CAAA;AAAA;AACrC;AAGF,IAAO,OAAA,MAAA;AAAA,GACT;AACF;;;;"}