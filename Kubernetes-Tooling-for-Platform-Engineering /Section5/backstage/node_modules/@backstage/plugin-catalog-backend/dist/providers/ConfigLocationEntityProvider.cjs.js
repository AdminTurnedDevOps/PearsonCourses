'use strict';

var path = require('path');
var util = require('../processing/util.cjs.js');
var conversion = require('../util/conversion.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var path__default = /*#__PURE__*/_interopDefaultCompat(path);

class ConfigLocationEntityProvider {
  constructor(config) {
    this.config = config;
  }
  getProviderName() {
    return "ConfigLocationProvider";
  }
  async connect(connection) {
    const entities = this.getEntitiesFromConfig();
    await connection.applyMutation({
      type: "full",
      entities
    });
    if (this.config.subscribe) {
      let currentKey = JSON.stringify(entities);
      this.config.subscribe(() => {
        const newEntities = this.getEntitiesFromConfig();
        const newKey = JSON.stringify(newEntities);
        if (currentKey !== newKey) {
          currentKey = newKey;
          connection.applyMutation({
            type: "full",
            entities: newEntities
          });
        }
      });
    }
  }
  getEntitiesFromConfig() {
    const locationConfigs = this.config.getOptionalConfigArray("catalog.locations") ?? [];
    return locationConfigs.map((location) => {
      const type = location.getString("type");
      const target = location.getString("target");
      const entity = conversion.locationSpecToLocationEntity({
        location: {
          type,
          target: type === "file" ? path__default.default.resolve(target) : target
        }
      });
      const locationKey = util.getEntityLocationRef(entity);
      return { entity, locationKey };
    });
  }
}

exports.ConfigLocationEntityProvider = ConfigLocationEntityProvider;
//# sourceMappingURL=ConfigLocationEntityProvider.cjs.js.map
