import React, { useState, useCallback, useEffect } from 'react';
import { useLocalStorageValue } from '@react-hookz/web';
import { withStyles, Button } from '@material-ui/core';
import ChevronRightIcon from '@material-ui/icons/ChevronRight';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import { useShadowRootElements } from '@backstage/plugin-techdocs-react';

const NESTED_LIST_TOGGLE = ".md-nav__item--nested .md-toggle";
const EXPANDABLE_NAVIGATION_LOCAL_STORAGE = "@backstage/techdocs-addons/nav-expanded";
const StyledButton = withStyles({
  root: {
    position: "absolute",
    left: "13.7rem",
    // Sidebar inner width (15.1em) minus the different margins/paddings
    top: "19px",
    zIndex: 2,
    padding: 0,
    minWidth: 0
  }
})(Button);
const CollapsedIcon = withStyles({
  root: {
    height: "20px",
    width: "20px"
  }
})(ChevronRightIcon);
const ExpandedIcon = withStyles({
  root: {
    height: "20px",
    width: "20px"
  }
})(ExpandMoreIcon);
const ExpandableNavigationAddon = () => {
  const defaultValue = { expandAllNestedNavs: false };
  const { value: expanded, set: setExpanded } = useLocalStorageValue(
    EXPANDABLE_NAVIGATION_LOCAL_STORAGE,
    { defaultValue }
  );
  const [hasNavSubLevels, setHasNavSubLevels] = useState(false);
  const [...checkboxToggles] = useShadowRootElements([
    NESTED_LIST_TOGGLE
  ]);
  const shouldToggle = useCallback(
    (item) => {
      const isExpanded = item.checked;
      const shouldExpand = expanded?.expandAllNestedNavs;
      if (shouldExpand && !isExpanded) {
        return true;
      }
      if (!shouldExpand && isExpanded) {
        return true;
      }
      return false;
    },
    [expanded]
  );
  useEffect(() => {
    if (!checkboxToggles?.length) return;
    setHasNavSubLevels(true);
    checkboxToggles.forEach((item) => {
      if (shouldToggle(item)) item.click();
    });
  }, [expanded, shouldToggle, checkboxToggles]);
  const handleState = () => {
    setExpanded((prevState) => ({
      expandAllNestedNavs: !prevState?.expandAllNestedNavs
    }));
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, hasNavSubLevels ? /* @__PURE__ */ React.createElement(
    StyledButton,
    {
      size: "small",
      onClick: handleState,
      "aria-label": expanded?.expandAllNestedNavs ? "collapse-nav" : "expand-nav"
    },
    expanded?.expandAllNestedNavs ? /* @__PURE__ */ React.createElement(ExpandedIcon, null) : /* @__PURE__ */ React.createElement(CollapsedIcon, null)
  ) : null);
};

export { ExpandableNavigationAddon };
//# sourceMappingURL=ExpandableNavigation.esm.js.map
