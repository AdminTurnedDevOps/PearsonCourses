import React, { useState, useEffect } from 'react';
import { makeStyles, Portal, Paper } from '@material-ui/core';
import { useGitRepository, useGitTemplate } from './hooks.esm.js';
import { PAGE_MAIN_CONTENT_SELECTOR, PAGE_FEEDBACK_LINK_SELECTOR, ADDON_FEEDBACK_CONTAINER_SELECTOR, ADDON_FEEDBACK_CONTAINER_ID } from './constants.esm.js';
import { IssueLink } from './IssueLink.esm.js';
import { useShadowRootSelection, useShadowRootElements } from '@backstage/plugin-techdocs-react';

const useStyles = makeStyles((theme) => ({
  root: {
    transform: "translate(-100%, -100%)",
    position: "absolute",
    padding: theme.spacing(1),
    zIndex: theme.zIndex.tooltip,
    background: theme.palette.common.white
  }
}));
const ReportIssueAddon = ({
  debounceTime = 500,
  templateBuilder: buildTemplate
}) => {
  const classes = useStyles();
  const [style, setStyle] = useState();
  const repository = useGitRepository();
  const defaultTemplate = useGitTemplate(debounceTime);
  const selection = useShadowRootSelection(debounceTime);
  const [mainContent, feedbackLink] = useShadowRootElements([
    PAGE_MAIN_CONTENT_SELECTOR,
    PAGE_FEEDBACK_LINK_SELECTOR
  ]);
  let [feedbackContainer] = useShadowRootElements([
    ADDON_FEEDBACK_CONTAINER_SELECTOR
  ]);
  if (feedbackLink) {
    feedbackLink.style.display = "none";
  }
  useEffect(() => {
    if (
      // todo(backstage/techdocs-core) handle non-repo rendering
      !repository || !selection || !selection.containsNode(mainContent, true) || selection?.containsNode(feedbackContainer, true)
    ) {
      return;
    }
    const mainContentPosition = mainContent.getBoundingClientRect();
    const selectionPosition = selection.getRangeAt(0).getBoundingClientRect();
    const distanceFromTop = selectionPosition.top - mainContentPosition.top;
    const minDistanceFromTop = 50;
    let top = distanceFromTop < minDistanceFromTop ? 101 : distanceFromTop - 16;
    if (mainContentPosition.top < 0) {
      const absMainContentTop = Math.abs(mainContentPosition.top);
      if (distanceFromTop - absMainContentTop < minDistanceFromTop) {
        top += 89;
      }
    }
    setStyle({
      top: `${top}px`,
      left: `${selectionPosition.left + selectionPosition.width / 2}px`
    });
  }, [selection, mainContent, feedbackContainer]);
  if (!selection || !repository || !["github", "gitlab"].includes(repository.type))
    return null;
  if (!feedbackContainer) {
    feedbackContainer = document.createElement("div");
    feedbackContainer.setAttribute("id", ADDON_FEEDBACK_CONTAINER_ID);
    mainContent.prepend(feedbackContainer);
  }
  return /* @__PURE__ */ React.createElement(Portal, { container: feedbackContainer }, /* @__PURE__ */ React.createElement(
    Paper,
    {
      "data-testid": "report-issue-addon",
      className: classes.root,
      style
    },
    /* @__PURE__ */ React.createElement(
      IssueLink,
      {
        repository,
        template: buildTemplate ? buildTemplate({ selection }) : defaultTemplate
      }
    )
  ));
};

export { ReportIssueAddon };
//# sourceMappingURL=ReportIssue.esm.js.map
