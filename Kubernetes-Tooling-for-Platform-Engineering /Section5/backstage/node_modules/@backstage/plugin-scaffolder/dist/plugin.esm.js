import { scmIntegrationsApiRef } from '@backstage/integration-react';
import { scaffolderApiRef, createScaffolderFieldExtension } from '@backstage/plugin-scaffolder-react';
import { ScaffolderClient } from './api.esm.js';
import { EntityPicker } from './components/fields/EntityPicker/EntityPicker.esm.js';
import { entityNamePickerValidation } from './components/fields/EntityNamePicker/validation.esm.js';
import { EntityNamePicker } from './components/fields/EntityNamePicker/EntityNamePicker.esm.js';
import { OwnerPicker } from './components/fields/OwnerPicker/OwnerPicker.esm.js';
import { MultiEntityPicker, validateMultiEntityPickerValidation } from './components/fields/MultiEntityPicker/MultiEntityPicker.esm.js';
import { RepoUrlPickerSchema } from './components/fields/RepoUrlPicker/schema.esm.js';
import { repoPickerValidation } from './components/fields/RepoUrlPicker/validation.esm.js';
import { RepoUrlPicker } from './components/fields/RepoUrlPicker/RepoUrlPicker.esm.js';
import { createPlugin, createApiFactory, discoveryApiRef, fetchApiRef, identityApiRef, createRoutableExtension } from '@backstage/core-plugin-api';
import { OwnedEntityPicker } from './components/fields/OwnedEntityPicker/OwnedEntityPicker.esm.js';
import { EntityTagsPicker } from './components/fields/EntityTagsPicker/EntityTagsPicker.esm.js';
import { rootRouteRef, selectedTemplateRouteRef, scaffolderTaskRouteRef, actionsRouteRef, scaffolderListTaskRouteRef, editRouteRef, editorRouteRef, customFieldsRouteRef, templateFormRouteRef, registerComponentRouteRef, viewTechDocRouteRef } from './routes.esm.js';
import { MyGroupsPicker } from './components/fields/MyGroupsPicker/MyGroupsPicker.esm.js';
import { RepoBranchPicker } from './components/fields/RepoBranchPicker/RepoBranchPicker.esm.js';
import { RepoBranchPickerSchema } from './components/fields/RepoBranchPicker/schema.esm.js';
import { formDecoratorsApiRef } from './alpha/api/ref.esm.js';
import { DefaultScaffolderFormDecoratorsApi } from './alpha/api/FormDecoratorsApi.esm.js';
import { formFieldsApiRef } from '@backstage/plugin-scaffolder-react/alpha';
import { EntityPickerSchema } from './components/fields/EntityPicker/schema.esm.js';
import { EntityNamePickerSchema } from './components/fields/EntityNamePicker/schema.esm.js';
import { MultiEntityPickerSchema } from './components/fields/MultiEntityPicker/schema.esm.js';
import { OwnerPickerSchema } from './components/fields/OwnerPicker/schema.esm.js';
import { MyGroupsPickerSchema } from './components/fields/MyGroupsPicker/schema.esm.js';
import { OwnedEntityPickerSchema } from './components/fields/OwnedEntityPicker/schema.esm.js';
import { EntityTagsPickerSchema } from './components/fields/EntityTagsPicker/schema.esm.js';

const scaffolderPlugin = createPlugin({
  id: "scaffolder",
  apis: [
    createApiFactory({
      api: scaffolderApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        scmIntegrationsApi: scmIntegrationsApiRef,
        fetchApi: fetchApiRef,
        identityApi: identityApiRef
      },
      factory: ({ discoveryApi, scmIntegrationsApi, fetchApi, identityApi }) => new ScaffolderClient({
        discoveryApi,
        scmIntegrationsApi,
        fetchApi,
        identityApi
      })
    }),
    createApiFactory({
      api: formDecoratorsApiRef,
      deps: {},
      factory: () => DefaultScaffolderFormDecoratorsApi.create()
    }),
    createApiFactory({
      api: formFieldsApiRef,
      deps: {},
      factory: () => ({ getFormFields: async () => [] })
    })
  ],
  routes: {
    root: rootRouteRef,
    selectedTemplate: selectedTemplateRouteRef,
    ongoingTask: scaffolderTaskRouteRef,
    actions: actionsRouteRef,
    listTasks: scaffolderListTaskRouteRef,
    edit: editRouteRef,
    editor: editorRouteRef,
    customFields: customFieldsRouteRef,
    templateForm: templateFormRouteRef
  },
  externalRoutes: {
    registerComponent: registerComponentRouteRef,
    viewTechDoc: viewTechDocRouteRef
  }
});
const EntityPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension({
    component: EntityPicker,
    name: "EntityPicker",
    schema: EntityPickerSchema
  })
);
const EntityNamePickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension({
    component: EntityNamePicker,
    name: "EntityNamePicker",
    validation: entityNamePickerValidation,
    schema: EntityNamePickerSchema
  })
);
const MultiEntityPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension({
    component: MultiEntityPicker,
    name: "MultiEntityPicker",
    schema: MultiEntityPickerSchema,
    validation: validateMultiEntityPickerValidation
  })
);
const RepoUrlPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension({
    component: RepoUrlPicker,
    name: "RepoUrlPicker",
    validation: repoPickerValidation,
    schema: RepoUrlPickerSchema
  })
);
const OwnerPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension({
    component: OwnerPicker,
    name: "OwnerPicker",
    schema: OwnerPickerSchema
  })
);
const MyGroupsPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension({
    component: MyGroupsPicker,
    name: "MyGroupsPicker",
    schema: MyGroupsPickerSchema
  })
);
const ScaffolderPage = scaffolderPlugin.provide(
  createRoutableExtension({
    name: "ScaffolderPage",
    component: () => import('./components/Router/index.esm.js').then((m) => m.Router),
    mountPoint: rootRouteRef
  })
);
const OwnedEntityPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension({
    component: OwnedEntityPicker,
    name: "OwnedEntityPicker",
    schema: OwnedEntityPickerSchema
  })
);
const EntityTagsPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension({
    component: EntityTagsPicker,
    name: "EntityTagsPicker",
    schema: EntityTagsPickerSchema
  })
);
const RepoBranchPickerFieldExtension = scaffolderPlugin.provide(
  createScaffolderFieldExtension({
    component: RepoBranchPicker,
    name: "RepoBranchPicker",
    schema: RepoBranchPickerSchema
  })
);

export { EntityNamePickerFieldExtension, EntityPickerFieldExtension, EntityTagsPickerFieldExtension, MultiEntityPickerFieldExtension, MyGroupsPickerFieldExtension, OwnedEntityPickerFieldExtension, OwnerPickerFieldExtension, RepoBranchPickerFieldExtension, RepoUrlPickerFieldExtension, ScaffolderPage, scaffolderPlugin };
//# sourceMappingURL=plugin.esm.js.map
