import { useApi, errorApiRef, useApiHolder } from '@backstage/core-plugin-api';
import { formDecoratorsApiRef } from '../api/ref.esm.js';
import useAsync from 'react-use/esm/useAsync';
import { useMemo } from 'react';
import { OpaqueFormDecorator } from '../../packages/scaffolder-internal/src/wiring/InternalFormDecorator.esm.js';
import '../../packages/scaffolder-internal/src/wiring/InternalFormField.esm.js';

const useFormDecorators = ({
  manifest
}) => {
  const formDecoratorsApi = useApi(formDecoratorsApiRef);
  const errorApi = useApi(errorApiRef);
  const { value: decorators } = useAsync(
    () => formDecoratorsApi.getFormDecorators(),
    []
  );
  const apiHolder = useApiHolder();
  const boundDecorators = useMemo(() => {
    const decoratorsMap = /* @__PURE__ */ new Map();
    for (const decorator of decorators ?? []) {
      try {
        const { decorator: decoratorFn, deps } = OpaqueFormDecorator.toInternal(decorator);
        const resolvedDeps = Object.entries(deps ?? {}).map(([key, value]) => {
          const api = apiHolder.get(value);
          if (!api) {
            throw new Error(
              `Failed to resolve apiRef ${value.id} for form decorator ${decorator.id} it will be disabled`
            );
          }
          return [key, api];
        });
        decoratorsMap.set(decorator.id, {
          decorator: (ctx) => decoratorFn(ctx, Object.fromEntries(resolvedDeps))
        });
      } catch (ex) {
        errorApi.post(ex);
        return void 0;
      }
    }
    return decoratorsMap;
  }, [apiHolder, decorators, errorApi]);
  return {
    run: async (opts) => {
      let formState = { ...opts.formState };
      let secrets = {};
      if (manifest?.EXPERIMENTAL_formDecorators) {
        await Promise.all(
          manifest.EXPERIMENTAL_formDecorators.map(async (decorator) => {
            const formDecorator = boundDecorators?.get(decorator.id);
            if (!formDecorator) {
              errorApi.post(
                new Error(`Failed to find form decorator ${decorator.id}`)
              );
              return;
            }
            await formDecorator.decorator({
              setSecrets: (handler) => {
                secrets = { ...handler(secrets) };
              },
              setFormState: (handler) => {
                formState = { ...handler(formState) };
              },
              formState,
              input: decorator.input ?? {}
            });
          })
        );
      }
      return { formState, secrets };
    }
  };
};

export { useFormDecorators };
//# sourceMappingURL=useFormDecorators.esm.js.map
