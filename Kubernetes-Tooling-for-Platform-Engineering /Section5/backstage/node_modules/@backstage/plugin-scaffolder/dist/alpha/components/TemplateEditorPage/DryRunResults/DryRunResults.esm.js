import Accordion from '@material-ui/core/Accordion';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import Divider from '@material-ui/core/Divider';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import ExpandLessIcon from '@material-ui/icons/ExpandLess';
import { usePrevious } from '@react-hookz/web';
import React, { useState, useEffect } from 'react';
import { useDryRun } from '../DryRunContext.esm.js';
import { DryRunResultsList } from './DryRunResultsList.esm.js';
import { DryRunResultsView } from './DryRunResultsView.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../../translation.esm.js';

const useStyles = makeStyles((theme) => ({
  header: {
    height: 48,
    minHeight: 0,
    "&.Mui-expanded": {
      height: 48,
      minHeight: 0
    }
  },
  content: {
    display: "grid",
    background: theme.palette.background.default,
    gridTemplateColumns: "180px auto 1fr",
    gridTemplateRows: "1fr",
    padding: 0,
    height: 400
  }
}));
function DryRunResults() {
  const classes = useStyles();
  const dryRun = useDryRun();
  const [expanded, setExpanded] = useState(false);
  const [hidden, setHidden] = useState(true);
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const resultsLength = dryRun.results.length;
  const prevResultsLength = usePrevious(resultsLength);
  useEffect(() => {
    if (prevResultsLength === 0 && resultsLength === 1) {
      setHidden(false);
      setExpanded(true);
    } else if (prevResultsLength === 1 && resultsLength === 0) {
      setExpanded(false);
    }
  }, [prevResultsLength, resultsLength]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    Accordion,
    {
      variant: "outlined",
      expanded,
      hidden: resultsLength === 0 && hidden,
      onChange: (_, exp) => setExpanded(exp),
      onTransitionEnd: () => resultsLength === 0 && setHidden(true)
    },
    /* @__PURE__ */ React.createElement(
      AccordionSummary,
      {
        className: classes.header,
        expandIcon: /* @__PURE__ */ React.createElement(ExpandLessIcon, null)
      },
      /* @__PURE__ */ React.createElement(Typography, null, t("templateEditorPage.dryRunResults.title"))
    ),
    /* @__PURE__ */ React.createElement(Divider, { orientation: "horizontal" }),
    /* @__PURE__ */ React.createElement(AccordionDetails, { className: classes.content }, /* @__PURE__ */ React.createElement(DryRunResultsList, null), /* @__PURE__ */ React.createElement(Divider, { orientation: "horizontal" }), /* @__PURE__ */ React.createElement(DryRunResultsView, null))
  ));
}

export { DryRunResults };
//# sourceMappingURL=DryRunResults.esm.js.map
