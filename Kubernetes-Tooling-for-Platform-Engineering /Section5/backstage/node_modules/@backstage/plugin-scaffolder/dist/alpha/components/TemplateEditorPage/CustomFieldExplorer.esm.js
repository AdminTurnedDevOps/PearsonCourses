import { StreamLanguage } from '@codemirror/language';
import { yaml as yaml$1 } from '@codemirror/legacy-modes/mode/yaml';
import Button from '@material-ui/core/Button';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import CardHeader from '@material-ui/core/CardHeader';
import { makeStyles } from '@material-ui/core/styles';
import CodeMirror from '@uiw/react-codemirror';
import React, { useState, useMemo, useCallback } from 'react';
import yaml from 'yaml';
import { Form } from '@backstage/plugin-scaffolder-react/alpha';
import { TemplateEditorForm } from './TemplateEditorForm.esm.js';
import validator from '@rjsf/validator-ajv8';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';
import InputAdornment from '@material-ui/core/InputAdornment';
import TextField from '@material-ui/core/TextField';
import SearchIcon from '@material-ui/icons/Search';
import Autocomplete from '@material-ui/lab/Autocomplete';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      gridArea: "pageContent",
      display: "grid",
      gridGap: theme.spacing(2),
      gridTemplateAreas: `
      "controls"
      "fieldForm"
      "preview"
    `,
      [theme.breakpoints.up("md")]: {
        gridTemplateAreas: `
      "controls controls"
      "fieldForm preview"
    `,
        gridTemplateRows: "auto 1fr",
        gridTemplateColumns: "1fr 1fr"
      }
    },
    controls: {
      gridArea: "controls",
      display: "flex",
      flexFlow: "row nowrap",
      alignItems: "center"
    },
    fieldForm: {
      gridArea: "fieldForm"
    },
    preview: {
      gridArea: "preview",
      display: "grid",
      gridGap: theme.spacing(2),
      alignContent: "start"
    }
  }),
  { name: "ScaffolderCustomFieldExplorer" }
);
const CustomFieldExplorer = ({
  customFieldExtensions = []
}) => {
  const classes = useStyles();
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const fieldOptions = customFieldExtensions.filter((field) => !!field.schema);
  const [selectedField, setSelectedField] = useState(fieldOptions?.[0]);
  const [fieldFormState, setFieldFormState] = useState({});
  const [refreshKey, setRefreshKey] = useState(Date.now());
  const sampleFieldTemplate = useMemo(() => {
    if (!selectedField) {
      return "";
    }
    return yaml.stringify({
      parameters: [
        {
          title: `${selectedField.name} Example`,
          properties: {
            [selectedField.name]: {
              type: selectedField.schema?.returnValue?.type,
              "ui:field": selectedField.name,
              "ui:options": fieldFormState
            }
          }
        }
      ]
    });
  }, [fieldFormState, selectedField]);
  const fieldComponents = useMemo(() => {
    return Object.fromEntries(
      customFieldExtensions.map(({ name, component }) => [name, component])
    );
  }, [customFieldExtensions]);
  const handleSelectionChange = useCallback(
    (selection) => {
      setSelectedField(selection);
      setFieldFormState({});
    },
    [setFieldFormState, setSelectedField]
  );
  const handleFieldConfigChange = useCallback(
    (state) => {
      setFieldFormState(state);
      setRefreshKey(Date.now());
    },
    [setFieldFormState, setRefreshKey]
  );
  return /* @__PURE__ */ React.createElement("main", { className: classes.root }, /* @__PURE__ */ React.createElement("div", { className: classes.controls }, /* @__PURE__ */ React.createElement(
    Autocomplete,
    {
      id: "custom-fields-autocomplete",
      value: selectedField,
      options: fieldOptions,
      getOptionLabel: (option) => option.name,
      renderInput: (params) => /* @__PURE__ */ React.createElement(
        TextField,
        {
          ...params,
          "aria-label": t(
            "templateEditorPage.customFieldExplorer.selectFieldLabel"
          ),
          placeholder: t(
            "templateEditorPage.customFieldExplorer.selectFieldLabel"
          ),
          variant: "outlined",
          InputProps: {
            ...params.InputProps,
            startAdornment: /* @__PURE__ */ React.createElement(InputAdornment, { position: "start" }, /* @__PURE__ */ React.createElement(SearchIcon, null))
          }
        }
      ),
      onChange: (_event, option) => {
        if (option) {
          handleSelectionChange(option);
        }
      },
      disableClearable: true,
      fullWidth: true
    }
  )), /* @__PURE__ */ React.createElement("div", { className: classes.fieldForm }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(
    CardHeader,
    {
      title: t("templateEditorPage.customFieldExplorer.fieldForm.title")
    }
  ), /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(
    Form,
    {
      showErrorList: false,
      fields: { ...fieldComponents },
      noHtml5Validate: true,
      formData: fieldFormState,
      formContext: { fieldFormState },
      onSubmit: (e) => handleFieldConfigChange(e.formData),
      validator,
      schema: selectedField?.schema?.uiOptions || {},
      experimental_defaultFormStateBehavior: {
        allOf: "populateDefaults"
      }
    },
    /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "contained",
        color: "primary",
        type: "submit",
        disabled: !selectedField?.schema?.uiOptions
      },
      t(
        "templateEditorPage.customFieldExplorer.fieldForm.applyButtonTitle"
      )
    )
  )))), /* @__PURE__ */ React.createElement("div", { className: classes.preview }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(
    CardHeader,
    {
      title: t("templateEditorPage.customFieldExplorer.preview.title")
    }
  ), /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement(
    CodeMirror,
    {
      readOnly: true,
      theme: "dark",
      height: "100%",
      extensions: [StreamLanguage.define(yaml$1)],
      value: sampleFieldTemplate
    }
  ))), /* @__PURE__ */ React.createElement(
    TemplateEditorForm,
    {
      key: refreshKey,
      content: sampleFieldTemplate,
      contentIsSpec: true,
      fieldExtensions: customFieldExtensions,
      setErrorText: () => null
    }
  )));
};

export { CustomFieldExplorer };
//# sourceMappingURL=CustomFieldExplorer.esm.js.map
