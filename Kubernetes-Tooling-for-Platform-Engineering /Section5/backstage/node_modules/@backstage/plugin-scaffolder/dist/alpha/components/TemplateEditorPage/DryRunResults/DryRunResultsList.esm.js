import IconButton from '@material-ui/core/IconButton';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import ListItemText from '@material-ui/core/ListItemText';
import { makeStyles } from '@material-ui/core/styles';
import Cancel from '@material-ui/icons/Cancel';
import CheckIcon from '@material-ui/icons/Check';
import DeleteIcon from '@material-ui/icons/Delete';
import DownloadIcon from '@material-ui/icons/GetApp';
import React from 'react';
import { useDryRun } from '../DryRunContext.esm.js';
import { downloadBlob } from '../../../../lib/download/helpers.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../../translation.esm.js';

const useStyles = makeStyles((theme) => ({
  root: {
    overflowY: "auto",
    background: theme.palette.background.default
  },
  iconSuccess: {
    minWidth: 0,
    marginRight: theme.spacing(1),
    color: theme.palette.status.ok
  },
  iconFailure: {
    minWidth: 0,
    marginRight: theme.spacing(1),
    color: theme.palette.status.error
  }
}));
function DryRunResultsList() {
  const classes = useStyles();
  const dryRun = useDryRun();
  const { t } = useTranslationRef(scaffolderTranslationRef);
  return /* @__PURE__ */ React.createElement(List, { className: classes.root, dense: true }, dryRun.results.map((result) => {
    const failed = result.log.some((l) => l.body.status === "failed");
    let isLoading = false;
    async function downloadResult() {
      isLoading = true;
      await downloadDirectoryContents(
        result.directoryContents,
        `dry-run-result-${result.id}.zip`
      );
      isLoading = false;
    }
    return /* @__PURE__ */ React.createElement(
      ListItem,
      {
        button: true,
        key: result.id,
        selected: dryRun.selectedResult?.id === result.id,
        onClick: () => dryRun.selectResult(result.id)
      },
      /* @__PURE__ */ React.createElement(
        ListItemIcon,
        {
          className: failed ? classes.iconFailure : classes.iconSuccess
        },
        failed ? /* @__PURE__ */ React.createElement(Cancel, null) : /* @__PURE__ */ React.createElement(CheckIcon, null)
      ),
      /* @__PURE__ */ React.createElement(
        ListItemText,
        {
          primary: t("templateEditorPage.dryRunResultsList.title", {
            resultId: `${result.id}`
          })
        }
      ),
      /* @__PURE__ */ React.createElement(ListItemSecondaryAction, null, /* @__PURE__ */ React.createElement(
        IconButton,
        {
          edge: "end",
          "aria-label": "download",
          title: t(
            "templateEditorPage.dryRunResultsList.downloadButtonTitle"
          ),
          disabled: isLoading,
          onClick: () => downloadResult()
        },
        /* @__PURE__ */ React.createElement(DownloadIcon, null)
      ), /* @__PURE__ */ React.createElement(
        IconButton,
        {
          edge: "end",
          "aria-label": "delete",
          title: t(
            "templateEditorPage.dryRunResultsList.deleteButtonTitle"
          ),
          onClick: () => dryRun.deleteResult(result.id)
        },
        /* @__PURE__ */ React.createElement(DeleteIcon, null)
      ))
    );
  }));
}
async function downloadDirectoryContents(directoryContents, name) {
  const { default: JSZip } = await import('jszip');
  const zip = new JSZip();
  for (const d of directoryContents) {
    const converted = atob(d.base64Content);
    await zip.file(d.path, converted);
  }
  const blob = await zip.generateAsync({ type: "blob" });
  downloadBlob(blob, name);
}

export { DryRunResultsList };
//# sourceMappingURL=DryRunResultsList.esm.js.map
