import yaml from 'yaml';
import React, { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import useAsync from 'react-use/esm/useAsync';
import { makeStyles } from '@material-ui/core/styles';
import { useApi, alertApiRef, useRouteRef } from '@backstage/core-plugin-api';
import { catalogApiRef, humanizeEntityRef } from '@backstage/plugin-catalog-react';
import { editRouteRef } from '../../../routes.esm.js';
import { TemplateEditorLayout, TemplateEditorLayoutToolbar, TemplateEditorLayoutFiles, TemplateEditorLayoutPreview } from './TemplateEditorLayout.esm.js';
import { TemplateEditorToolbar } from './TemplateEditorToolbar.esm.js';
import { TemplateEditorToolbarFileMenu } from './TemplateEditorToolbarFileMenu.esm.js';
import { TemplateEditorToolbarTemplatesMenu } from './TemplateEditorToolbarTemplatesMenu.esm.js';
import { TemplateEditorForm } from './TemplateEditorForm.esm.js';
import { TemplateEditorTextArea } from './TemplateEditorTextArea.esm.js';

const EXAMPLE_TEMPLATE_PARAMS_YAML = `# Edit the template parameters below to see how they will render in the scaffolder form UI
parameters:
  - title: Fill in some steps
    required:
      - name
    properties:
      name:
        title: Name
        type: string
        description: Unique name of the component
      owner:
        title: Owner
        type: string
        description: Owner of the component
        ui:field: OwnerPicker
        ui:options:
          catalogFilter:
            kind: Group
  - title: Choose a location
    required:
      - repoUrl
    properties:
      repoUrl:
        title: Repository Location
        type: string
        ui:field: RepoUrlPicker
        ui:options:
          allowedHosts:
            - github.com
steps:
  - id: fetch-base
    name: Fetch Base
    action: fetch:template
    input:
      url: ./template
      values:
        name: \${{parameters.name}}
`;
const useStyles = makeStyles(
  (theme) => ({
    root: {
      height: "100%",
      gridArea: "pageContent",
      display: "grid",
      gridTemplateAreas: `
      "toolbar"
      "textArea"
      "preview"
    `,
      [theme.breakpoints.up("md")]: {
        gridTemplateAreas: `
      "toolbar toolbar"
      "textArea preview"
    `,
        gridTemplateRows: "auto 1fr",
        gridTemplateColumns: "1fr 1fr"
      }
    },
    files: {
      gridArea: "textArea"
    }
  }),
  { name: "ScaffolderTemplateFormPreviewer" }
);
const TemplateFormPreviewer = ({
  defaultPreviewTemplate = EXAMPLE_TEMPLATE_PARAMS_YAML,
  customFieldExtensions = [],
  layouts = [],
  formProps
}) => {
  const classes = useStyles();
  const alertApi = useApi(alertApiRef);
  const catalogApi = useApi(catalogApiRef);
  const navigate = useNavigate();
  const editLink = useRouteRef(editRouteRef);
  const [errorText, setErrorText] = useState();
  const [selectedTemplate, setSelectedTemplate] = useState();
  const [templateOptions, setTemplateOptions] = useState([]);
  const [templateYaml, setTemplateYaml] = useState(defaultPreviewTemplate);
  const handleCloseDirectory = useCallback(() => {
    navigate(editLink());
  }, [navigate, editLink]);
  useAsync(
    () => catalogApi.getEntities({
      filter: { kind: "template" },
      fields: [
        "kind",
        "metadata.namespace",
        "metadata.name",
        "metadata.title",
        "spec.parameters",
        "spec.steps",
        "spec.output"
      ]
    }).then(
      ({ items }) => setTemplateOptions(
        items.map((template) => ({
          label: template.metadata.title ?? humanizeEntityRef(template, { defaultKind: "template" }),
          value: template
        }))
      )
    ).catch(
      (e) => alertApi.post({
        message: `Error loading exisiting templates: ${e.message}`,
        severity: "error"
      })
    ),
    [catalogApi]
  );
  const handleSelectChange = useCallback(
    // TODO(Rugvip): Afaik this should be Entity, but didn't want to make runtime changes while fixing types
    (selected) => {
      setSelectedTemplate(selected);
      setTemplateYaml(yaml.stringify(selected.value.spec));
    },
    [setSelectedTemplate, setTemplateYaml]
  );
  return /* @__PURE__ */ React.createElement(TemplateEditorLayout, { classes: { root: classes.root } }, /* @__PURE__ */ React.createElement(TemplateEditorLayoutToolbar, null, /* @__PURE__ */ React.createElement(TemplateEditorToolbar, { fieldExtensions: customFieldExtensions }, /* @__PURE__ */ React.createElement(
    TemplateEditorToolbarFileMenu,
    {
      onCloseDirectory: handleCloseDirectory
    }
  ), /* @__PURE__ */ React.createElement(
    TemplateEditorToolbarTemplatesMenu,
    {
      options: templateOptions,
      selectedOption: selectedTemplate,
      onSelectOption: handleSelectChange
    }
  ))), /* @__PURE__ */ React.createElement(TemplateEditorLayoutFiles, { classes: { root: classes.files } }, /* @__PURE__ */ React.createElement(
    TemplateEditorTextArea,
    {
      content: templateYaml,
      onUpdate: setTemplateYaml,
      errorText
    }
  )), /* @__PURE__ */ React.createElement(TemplateEditorLayoutPreview, null, /* @__PURE__ */ React.createElement(
    TemplateEditorForm,
    {
      content: templateYaml,
      contentIsSpec: true,
      fieldExtensions: customFieldExtensions,
      setErrorText,
      layouts,
      formProps
    }
  )));
};

export { TemplateFormPreviewer };
//# sourceMappingURL=TemplateFormPreviewer.esm.js.map
