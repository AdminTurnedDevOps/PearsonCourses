{"version":3,"file":"useFormDecorators.esm.js","sources":["../../../src/alpha/hooks/useFormDecorators.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { errorApiRef, useApi, useApiHolder } from '@backstage/core-plugin-api';\nimport { formDecoratorsApiRef } from '../api/ref';\nimport useAsync from 'react-use/esm/useAsync';\nimport { useMemo } from 'react';\nimport { ScaffolderFormDecoratorContext } from '@backstage/plugin-scaffolder-react/alpha';\nimport { OpaqueFormDecorator } from '@internal/scaffolder';\nimport { TemplateParameterSchema } from '@backstage/plugin-scaffolder-react';\nimport { JsonValue } from '@backstage/types';\n\n/** @internal */\ntype BoundFieldDecorator = {\n  decorator: (ctx: ScaffolderFormDecoratorContext) => Promise<void>;\n};\n\nexport const useFormDecorators = ({\n  manifest,\n}: {\n  manifest?: TemplateParameterSchema;\n}) => {\n  const formDecoratorsApi = useApi(formDecoratorsApiRef);\n  const errorApi = useApi(errorApiRef);\n  const { value: decorators } = useAsync(\n    () => formDecoratorsApi.getFormDecorators(),\n    [],\n  );\n  const apiHolder = useApiHolder();\n\n  const boundDecorators = useMemo(() => {\n    const decoratorsMap = new Map<string, BoundFieldDecorator>();\n\n    for (const decorator of decorators ?? []) {\n      try {\n        const { decorator: decoratorFn, deps } =\n          OpaqueFormDecorator.toInternal(decorator);\n\n        const resolvedDeps = Object.entries(deps ?? {}).map(([key, value]) => {\n          const api = apiHolder.get(value);\n          if (!api) {\n            throw new Error(\n              `Failed to resolve apiRef ${value.id} for form decorator ${decorator.id} it will be disabled`,\n            );\n          }\n          return [key, api];\n        });\n\n        decoratorsMap.set(decorator.id, {\n          decorator: ctx => decoratorFn(ctx, Object.fromEntries(resolvedDeps)),\n        });\n      } catch (ex) {\n        errorApi.post(ex);\n        return undefined;\n      }\n    }\n    return decoratorsMap;\n  }, [apiHolder, decorators, errorApi]);\n\n  return {\n    run: async (opts: {\n      formState: Record<string, JsonValue>;\n      secrets: Record<string, string>;\n    }) => {\n      let formState: Record<string, JsonValue> = { ...opts.formState };\n      let secrets: Record<string, string> = {};\n\n      if (manifest?.EXPERIMENTAL_formDecorators) {\n        // for each of the form decorators, go and call the decorator with the context\n        await Promise.all(\n          manifest.EXPERIMENTAL_formDecorators.map(async decorator => {\n            const formDecorator = boundDecorators?.get(decorator.id);\n            if (!formDecorator) {\n              errorApi.post(\n                new Error(`Failed to find form decorator ${decorator.id}`),\n              );\n              return;\n            }\n\n            await formDecorator.decorator({\n              setSecrets: (\n                handler: (\n                  oldState: Record<string, string>,\n                ) => Record<string, string>,\n              ) => {\n                secrets = { ...handler(secrets) };\n              },\n              setFormState: (\n                handler: (\n                  oldState: Record<string, JsonValue>,\n                ) => Record<string, JsonValue>,\n              ) => {\n                formState = { ...handler(formState) };\n              },\n              formState,\n              input: decorator.input ?? {},\n            });\n          }),\n        );\n      }\n\n      return { formState, secrets };\n    },\n  };\n};\n"],"names":[],"mappings":"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"}