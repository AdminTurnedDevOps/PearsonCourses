import Grid from '@material-ui/core/Grid';
import Divider from '@material-ui/core/Divider';
import IconButton from '@material-ui/core/IconButton';
import Tooltip from '@material-ui/core/Tooltip';
import { makeStyles } from '@material-ui/core/styles';
import CloseIcon from '@material-ui/icons/Close';
import RefreshIcon from '@material-ui/icons/Refresh';
import SaveIcon from '@material-ui/icons/Save';
import React from 'react';
import { useDirectoryEditor } from './DirectoryEditorContext.esm.js';
import { FileBrowser } from '../../../components/FileBrowser/FileBrowser.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    grid: {
      "& svg": {
        margin: theme.spacing(1)
      }
    },
    closeButton: {
      marginLeft: "auto"
    }
  }),
  { name: "ScaffolderTemplateEditorBrowser" }
);
function TemplateEditorBrowser(props) {
  const classes = useStyles();
  const directoryEditor = useDirectoryEditor();
  const changedFiles = directoryEditor?.files.filter((file) => file.dirty);
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const handleClose = () => {
    if (!props.onClose) {
      return;
    }
    if (changedFiles?.length) {
      const accepted = window.confirm(
        t("templateEditorPage.templateEditorBrowser.closeConfirmMessage")
      );
      if (!accepted) {
        return;
      }
    }
    props.onClose();
  };
  if (!directoryEditor) {
    return null;
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Grid, { className: classes.grid, container: true, spacing: 0, alignItems: "center" }, /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      title: t("templateEditorPage.templateEditorBrowser.saveIconTooltip")
    },
    /* @__PURE__ */ React.createElement(
      IconButton,
      {
        size: "small",
        disabled: directoryEditor.files.every((file) => !file.dirty),
        onClick: () => directoryEditor.save()
      },
      /* @__PURE__ */ React.createElement(SaveIcon, null)
    )
  ), /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      title: t(
        "templateEditorPage.templateEditorBrowser.reloadIconTooltip"
      )
    },
    /* @__PURE__ */ React.createElement(IconButton, { size: "small", onClick: () => directoryEditor.reload() }, /* @__PURE__ */ React.createElement(RefreshIcon, null))
  ), /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      title: t("templateEditorPage.templateEditorBrowser.closeIconTooltip")
    },
    /* @__PURE__ */ React.createElement(
      IconButton,
      {
        size: "small",
        className: classes.closeButton,
        onClick: handleClose
      },
      /* @__PURE__ */ React.createElement(CloseIcon, null)
    )
  )), /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(
    FileBrowser,
    {
      selected: directoryEditor.selectedFile?.path ?? "",
      onSelect: directoryEditor.setSelectedFile,
      filePaths: directoryEditor.files.map((file) => file.path) ?? []
    }
  ));
}

export { TemplateEditorBrowser };
//# sourceMappingURL=TemplateEditorBrowser.esm.js.map
