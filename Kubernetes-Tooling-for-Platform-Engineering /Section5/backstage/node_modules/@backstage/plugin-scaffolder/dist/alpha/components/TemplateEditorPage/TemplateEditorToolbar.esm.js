import React, { useState } from 'react';
import { makeStyles } from '@material-ui/core/styles';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Tooltip from '@material-ui/core/Tooltip';
import ButtonGroup from '@material-ui/core/ButtonGroup';
import Button from '@material-ui/core/Button';
import Drawer from '@material-ui/core/Drawer';
import Dialog from '@material-ui/core/Dialog';
import DialogTitle from '@material-ui/core/DialogTitle';
import DialogContent from '@material-ui/core/DialogContent';
import DialogContentText from '@material-ui/core/DialogContentText';
import DialogActions from '@material-ui/core/DialogActions';
import ExtensionIcon from '@material-ui/icons/Extension';
import DescriptionIcon from '@material-ui/icons/Description';
import { useTranslationRef } from '@backstage/frontend-plugin-api';
import { ActionPageContent } from '../../../components/ActionsPage/ActionsPage.esm.js';
import { scaffolderTranslationRef } from '../../../translation.esm.js';
import { CustomFieldPlaygroud } from './CustomFieldPlaygroud.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    paper: {
      width: "90%",
      padding: theme.spacing(2),
      backgroundColor: theme.palette.background.default,
      [theme.breakpoints.up("sm")]: {
        width: "70%"
      },
      [theme.breakpoints.up("md")]: {
        width: "50%"
      }
    },
    appbar: {
      zIndex: 1
    },
    toolbar: {
      display: "grid",
      gridTemplateColumns: "auto 1fr",
      gridGap: theme.spacing(1),
      padding: theme.spacing(0, 1),
      backgroundColor: theme.palette.background.paper
    },
    toolbarCustomActions: {
      display: "grid",
      alignItems: "center",
      gridAutoFlow: "Column",
      gridGap: theme.spacing(1)
    },
    toolbarDefaultActions: {
      justifySelf: "end"
    }
  }),
  { name: "ScaffolderTemplateEditorToolbar" }
);
function TemplateEditorToolbar(props) {
  const { children, fieldExtensions } = props;
  const classes = useStyles();
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const [showFieldsDrawer, setShowFieldsDrawer] = useState(false);
  const [showActionsDrawer, setShowActionsDrawer] = useState(false);
  const [showPublishModal, setShowPublishModal] = useState(false);
  return /* @__PURE__ */ React.createElement(AppBar, { className: classes.appbar, position: "relative" }, /* @__PURE__ */ React.createElement(Toolbar, { className: classes.toolbar }, /* @__PURE__ */ React.createElement("div", { className: classes.toolbarCustomActions }, children), /* @__PURE__ */ React.createElement(ButtonGroup, { className: classes.toolbarDefaultActions, variant: "text" }, /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      title: t("templateEditorToolbar.customFieldExplorerTooltip")
    },
    /* @__PURE__ */ React.createElement(Button, { onClick: () => setShowFieldsDrawer(true) }, /* @__PURE__ */ React.createElement(ExtensionIcon, null))
  ), /* @__PURE__ */ React.createElement(
    Tooltip,
    {
      title: t(
        "templateEditorToolbar.installedActionsDocumentationTooltip"
      )
    },
    /* @__PURE__ */ React.createElement(Button, { onClick: () => setShowActionsDrawer(true) }, /* @__PURE__ */ React.createElement(DescriptionIcon, null))
  ), /* @__PURE__ */ React.createElement(Button, { onClick: () => setShowPublishModal(true) }, t("templateEditorToolbar.addToCatalogButton"))), /* @__PURE__ */ React.createElement(
    Drawer,
    {
      classes: { paper: classes.paper },
      anchor: "right",
      open: showFieldsDrawer,
      onClose: () => setShowFieldsDrawer(false)
    },
    /* @__PURE__ */ React.createElement(CustomFieldPlaygroud, { fieldExtensions })
  ), /* @__PURE__ */ React.createElement(
    Drawer,
    {
      classes: { paper: classes.paper },
      anchor: "right",
      open: showActionsDrawer,
      onClose: () => setShowActionsDrawer(false)
    },
    /* @__PURE__ */ React.createElement(ActionPageContent, null)
  ), /* @__PURE__ */ React.createElement(
    Dialog,
    {
      onClose: () => setShowPublishModal(false),
      open: showPublishModal,
      "aria-labelledby": "publish-dialog-title",
      "aria-describedby": "publish-dialog-description"
    },
    /* @__PURE__ */ React.createElement(DialogTitle, { id: "publish-dialog-title" }, t("templateEditorToolbar.addToCatalogDialogTitle")),
    /* @__PURE__ */ React.createElement(DialogContent, { dividers: true }, /* @__PURE__ */ React.createElement(DialogContentText, { id: "publish-dialog-slide-description" }, t(
      "templateEditorToolbar.addToCatalogDialogContent.stepsIntroduction"
    ), /* @__PURE__ */ React.createElement("ul", null, t(
      "templateEditorToolbar.addToCatalogDialogContent.stepsListItems"
    ).split("\n").map((step, index) => /* @__PURE__ */ React.createElement("li", { key: index }, step))))),
    /* @__PURE__ */ React.createElement(DialogActions, null, /* @__PURE__ */ React.createElement(
      Button,
      {
        color: "primary",
        href: t(
          "templateEditorToolbar.addToCatalogDialogActions.documentationUrl"
        ),
        target: "_blank"
      },
      t(
        "templateEditorToolbar.addToCatalogDialogActions.documentationButton"
      )
    ))
  )));
}

export { TemplateEditorToolbar };
//# sourceMappingURL=TemplateEditorToolbar.esm.js.map
