{"version":3,"file":"schema.esm.js","sources":["../../../../src/components/fields/MultiEntityPicker/schema.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { z } from 'zod';\nimport { makeFieldSchemaFromZod } from '../utils';\n\nexport const entityQueryFilterExpressionSchema = z.record(\n  z\n    .string()\n    .or(z.object({ exists: z.boolean().optional() }))\n    .or(z.array(z.string())),\n);\n\nexport const MultiEntityPickerFieldSchema = makeFieldSchemaFromZod(\n  z.array(z.string()),\n  z.object({\n    defaultKind: z\n      .string()\n      .optional()\n      .describe(\n        'The default entity kind. Options of this kind will not be prefixed.',\n      ),\n    allowArbitraryValues: z\n      .boolean()\n      .optional()\n      .describe('Whether to allow arbitrary user input. Defaults to true'),\n    defaultNamespace: z\n      .union([z.string(), z.literal(false)])\n      .optional()\n      .describe(\n        'The default namespace. Options with this namespace will not be prefixed.',\n      ),\n    catalogFilter: z\n      .array(entityQueryFilterExpressionSchema)\n      .or(entityQueryFilterExpressionSchema)\n      .optional()\n      .describe('List of key-value filter expression for entities'),\n  }),\n);\n\n/**\n * The input props that can be specified under `ui:options` for the\n * `EntityPicker` field extension.\n */\nexport type MultiEntityPickerUiOptions =\n  typeof MultiEntityPickerFieldSchema.uiOptionsType;\n\nexport type MultiEntityPickerProps = typeof MultiEntityPickerFieldSchema.type;\n\nexport const MultiEntityPickerSchema = MultiEntityPickerFieldSchema.schema;\n\nexport type MultiEntityPickerFilterQuery = z.TypeOf<\n  typeof entityQueryFilterExpressionSchema\n>;\n\nexport type MultiEntityPickerFilterQueryValue =\n  MultiEntityPickerFilterQuery[keyof MultiEntityPickerFilterQuery];\n"],"names":[],"mappings":";;;AAkBO,MAAM,oCAAoC,CAAE,CAAA,MAAA;AAAA,EACjD,CAAA,CACG,QACA,CAAA,EAAA,CAAG,EAAE,MAAO,CAAA,EAAE,MAAQ,EAAA,CAAA,CAAE,OAAQ,EAAA,CAAE,UAAW,EAAC,CAAC,CAC/C,CAAA,EAAA,CAAG,EAAE,KAAM,CAAA,CAAA,CAAE,MAAO,EAAC,CAAC;AAC3B;AAEO,MAAM,4BAA+B,GAAA,sBAAA;AAAA,EAC1C,CAAE,CAAA,KAAA,CAAM,CAAE,CAAA,MAAA,EAAQ,CAAA;AAAA,EAClB,EAAE,MAAO,CAAA;AAAA,IACP,WAAa,EAAA,CAAA,CACV,MAAO,EAAA,CACP,UACA,CAAA,QAAA;AAAA,MACC;AAAA,KACF;AAAA,IACF,sBAAsB,CACnB,CAAA,OAAA,GACA,QAAS,EAAA,CACT,SAAS,yDAAyD,CAAA;AAAA,IACrE,gBAAkB,EAAA,CAAA,CACf,KAAM,CAAA,CAAC,EAAE,MAAO,EAAA,EAAG,CAAE,CAAA,OAAA,CAAQ,KAAK,CAAC,CAAC,CAAA,CACpC,UACA,CAAA,QAAA;AAAA,MACC;AAAA,KACF;AAAA,IACF,aAAA,EAAe,CACZ,CAAA,KAAA,CAAM,iCAAiC,CAAA,CACvC,EAAG,CAAA,iCAAiC,CACpC,CAAA,QAAA,EACA,CAAA,QAAA,CAAS,kDAAkD;AAAA,GAC/D;AACH;AAWO,MAAM,0BAA0B,4BAA6B,CAAA;;;;"}