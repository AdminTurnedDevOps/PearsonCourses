import { z } from 'zod';
import { makeFieldSchemaFromZod } from '../utils.esm.js';
import { entityQueryFilterExpressionSchema } from '../EntityPicker/schema.esm.js';

const OwnedEntityPickerFieldSchema = makeFieldSchemaFromZod(
  z.string(),
  z.object({
    allowedKinds: z.array(z.string()).optional().describe(
      "DEPRECATED: Use `catalogFilter` instead. List of kinds of entities to derive options from"
    ),
    defaultKind: z.string().optional().describe(
      "The default entity kind. Options of this kind will not be prefixed."
    ),
    allowArbitraryValues: z.boolean().optional().describe("Whether to allow arbitrary user input. Defaults to true"),
    defaultNamespace: z.union([z.string(), z.literal(false)]).optional().describe(
      "The default namespace. Options with this namespace will not be prefixed."
    ),
    catalogFilter: z.array(entityQueryFilterExpressionSchema).or(entityQueryFilterExpressionSchema).optional().describe("List of key-value filter expression for entities")
  })
);
const OwnedEntityPickerSchema = OwnedEntityPickerFieldSchema.schema;

export { OwnedEntityPickerFieldSchema, OwnedEntityPickerSchema };
//# sourceMappingURL=schema.esm.js.map
