import { Select } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import TextField from '@material-ui/core/TextField';
import Autocomplete from '@material-ui/lab/Autocomplete';
import React, { useEffect, useState, useCallback } from 'react';
import useDebounce from 'react-use/esm/useDebounce';
import { scaffolderTranslationRef } from '../../../translation.esm.js';

const BitbucketRepoPicker = (props) => {
  const {
    allowedOwners = [],
    allowedProjects = [],
    onChange,
    rawErrors,
    state,
    accessToken
  } = props;
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const { host, workspace, project } = state;
  const ownerItems = allowedOwners ? allowedOwners?.map((i) => ({ label: i, value: i })) : [];
  const projectItems = allowedProjects ? allowedProjects?.map((i) => ({ label: i, value: i })) : [];
  useEffect(() => {
    if (host === "bitbucket.org" && allowedOwners.length) {
      onChange({ workspace: allowedOwners[0] });
    }
  }, [allowedOwners, host, onChange]);
  const scaffolderApi = useApi(scaffolderApiRef);
  const [availableWorkspaces, setAvailableWorkspaces] = useState([]);
  const [availableProjects, setAvailableProjects] = useState([]);
  const updateAvailableWorkspaces = useCallback(() => {
    if (!scaffolderApi.autocomplete || !accessToken || host !== "bitbucket.org") {
      setAvailableWorkspaces([]);
      return;
    }
    scaffolderApi.autocomplete({
      token: accessToken,
      resource: "workspaces",
      provider: "bitbucket-cloud"
    }).then(({ results }) => {
      setAvailableWorkspaces(results.map((r) => r.id));
    }).catch(() => {
      setAvailableWorkspaces([]);
    });
  }, [scaffolderApi, accessToken, host]);
  useDebounce(updateAvailableWorkspaces, 500, [updateAvailableWorkspaces]);
  const updateAvailableProjects = useCallback(() => {
    if (!scaffolderApi.autocomplete || !accessToken || host !== "bitbucket.org" || !workspace) {
      setAvailableProjects([]);
      return;
    }
    scaffolderApi.autocomplete({
      token: accessToken,
      resource: "projects",
      context: { workspace },
      provider: "bitbucket-cloud"
    }).then(({ results }) => {
      setAvailableProjects(results.map((r) => r.id));
    }).catch(() => {
      setAvailableProjects([]);
    });
  }, [scaffolderApi, accessToken, host, workspace]);
  useDebounce(updateAvailableProjects, 500, [updateAvailableProjects]);
  const updateAvailableRepositories = useCallback(() => {
    if (!scaffolderApi.autocomplete || !accessToken || host !== "bitbucket.org" || !workspace || !project) {
      onChange({ availableRepos: [] });
      return;
    }
    scaffolderApi.autocomplete({
      token: accessToken,
      resource: "repositories",
      context: { workspace, project },
      provider: "bitbucket-cloud"
    }).then(({ results }) => {
      onChange({
        availableRepos: results.map((r) => {
          return { name: r.id };
        })
      });
    }).catch(() => {
      onChange({ availableRepos: [] });
    });
  }, [scaffolderApi, accessToken, host, workspace, project, onChange]);
  useDebounce(updateAvailableRepositories, 500, [updateAvailableRepositories]);
  return /* @__PURE__ */ React.createElement(React.Fragment, null, host === "bitbucket.org" && /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: rawErrors?.length > 0 && !workspace
    },
    allowedOwners?.length ? /* @__PURE__ */ React.createElement(
      Select,
      {
        native: true,
        label: t("fields.bitbucketRepoPicker.workspaces.title"),
        onChange: (s) => onChange({ workspace: String(Array.isArray(s) ? s[0] : s) }),
        disabled: allowedOwners.length === 1,
        selected: workspace,
        items: ownerItems
      }
    ) : /* @__PURE__ */ React.createElement(
      Autocomplete,
      {
        value: workspace,
        onChange: (_, newValue) => {
          onChange({ workspace: newValue || "" });
        },
        options: availableWorkspaces,
        renderInput: (params) => /* @__PURE__ */ React.createElement(
          TextField,
          {
            ...params,
            label: t("fields.bitbucketRepoPicker.workspaces.inputTitle"),
            required: true
          }
        ),
        freeSolo: true,
        autoSelect: true
      }
    ),
    /* @__PURE__ */ React.createElement(FormHelperText, null, t("fields.bitbucketRepoPicker.workspaces.description"))
  ), /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: rawErrors?.length > 0 && !project
    },
    allowedProjects?.length ? /* @__PURE__ */ React.createElement(
      Select,
      {
        native: true,
        label: t("fields.bitbucketRepoPicker.project.title"),
        onChange: (s) => onChange({ project: String(Array.isArray(s) ? s[0] : s) }),
        disabled: allowedProjects.length === 1,
        selected: project,
        items: projectItems
      }
    ) : /* @__PURE__ */ React.createElement(
      Autocomplete,
      {
        value: project,
        onChange: (_, newValue) => {
          onChange({ project: newValue || "" });
        },
        options: availableProjects,
        renderInput: (params) => /* @__PURE__ */ React.createElement(
          TextField,
          {
            ...params,
            label: t("fields.bitbucketRepoPicker.project.inputTitle"),
            required: true
          }
        ),
        freeSolo: true,
        autoSelect: true
      }
    ),
    /* @__PURE__ */ React.createElement(FormHelperText, null, t("fields.bitbucketRepoPicker.project.description"))
  ));
};

export { BitbucketRepoPicker };
//# sourceMappingURL=BitbucketRepoPicker.esm.js.map
