import { Page, Header, Content, Progress, ErrorPanel, EmptyState, Table, Link } from '@backstage/core-components';
import { useRouteRef, useApi } from '@backstage/core-plugin-api';
import { CatalogFilterLayout } from '@backstage/plugin-catalog-react';
import useAsync from 'react-use/esm/useAsync';
import React, { useState } from 'react';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import { OwnerListPicker } from './OwnerListPicker.esm.js';
import { CreatedAtColumn } from './columns/CreatedAtColumn.esm.js';
import { OwnerEntityColumn } from './columns/OwnerEntityColumn.esm.js';
import { TaskStatusColumn } from './columns/TaskStatusColumn.esm.js';
import { TemplateTitleColumn } from './columns/TemplateTitleColumn.esm.js';
import { editRouteRef, actionsRouteRef, rootRouteRef } from '../../routes.esm.js';
import { ScaffolderPageContextMenu } from '@backstage/plugin-scaffolder-react/alpha';
import { useNavigate } from 'react-router-dom';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../translation.esm.js';

const ListTaskPageContent = (props) => {
  const { initiallySelectedFilter = "owned" } = props;
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const [limit, setLimit] = useState(5);
  const [page, setPage] = useState(0);
  const scaffolderApi = useApi(scaffolderApiRef);
  const rootLink = useRouteRef(rootRouteRef);
  const [ownerFilter, setOwnerFilter] = useState(initiallySelectedFilter);
  const { value, loading, error } = useAsync(() => {
    if (scaffolderApi.listTasks) {
      return scaffolderApi.listTasks?.({
        filterByOwnership: ownerFilter,
        limit,
        offset: page * limit
      });
    }
    console.warn(
      "listTasks is not implemented in the scaffolderApi, please make sure to implement this method."
    );
    return Promise.resolve({ tasks: [], totalTasks: 0 });
  }, [scaffolderApi, ownerFilter, limit, page]);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(ErrorPanel, { error }), /* @__PURE__ */ React.createElement(
      EmptyState,
      {
        missing: "info",
        title: t("listTaskPage.content.emptyState.title"),
        description: t("listTaskPage.content.emptyState.description")
      }
    ));
  }
  return /* @__PURE__ */ React.createElement(CatalogFilterLayout, null, /* @__PURE__ */ React.createElement(CatalogFilterLayout.Filters, null, /* @__PURE__ */ React.createElement(
    OwnerListPicker,
    {
      filter: ownerFilter,
      onSelectOwner: (id) => setOwnerFilter(id)
    }
  )), /* @__PURE__ */ React.createElement(CatalogFilterLayout.Content, null, /* @__PURE__ */ React.createElement(
    Table,
    {
      onRowsPerPageChange: (pageSize) => {
        setPage(0);
        setLimit(pageSize);
      },
      onPageChange: (newPage) => setPage(newPage),
      options: { pageSize: limit, emptyRowsWhenPaging: false },
      data: value?.tasks ?? [],
      page,
      totalCount: value?.totalTasks ?? 0,
      title: t("listTaskPage.content.tableTitle"),
      columns: [
        {
          title: t("listTaskPage.content.tableCell.taskID"),
          field: "id",
          render: (row) => /* @__PURE__ */ React.createElement(Link, { to: `${rootLink()}/tasks/${row.id}` }, row.id)
        },
        {
          title: t("listTaskPage.content.tableCell.template"),
          field: "spec.templateInfo.entity.metadata.title",
          render: (row) => /* @__PURE__ */ React.createElement(
            TemplateTitleColumn,
            {
              entityRef: row.spec.templateInfo?.entityRef
            }
          )
        },
        {
          title: t("listTaskPage.content.tableCell.created"),
          field: "createdAt",
          render: (row) => /* @__PURE__ */ React.createElement(CreatedAtColumn, { createdAt: row.createdAt })
        },
        {
          title: t("listTaskPage.content.tableCell.owner"),
          field: "createdBy",
          render: (row) => /* @__PURE__ */ React.createElement(OwnerEntityColumn, { entityRef: row.spec?.user?.ref })
        },
        {
          title: t("listTaskPage.content.tableCell.status"),
          field: "status",
          render: (row) => /* @__PURE__ */ React.createElement(TaskStatusColumn, { status: row.status })
        }
      ]
    }
  )));
};
const ListTasksPage = (props) => {
  const navigate = useNavigate();
  const editorLink = useRouteRef(editRouteRef);
  const actionsLink = useRouteRef(actionsRouteRef);
  const createLink = useRouteRef(rootRouteRef);
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const scaffolderPageContextMenuProps = {
    onEditorClicked: props?.contextMenu?.editor !== false ? () => navigate(editorLink()) : void 0,
    onActionsClicked: props?.contextMenu?.actions !== false ? () => navigate(actionsLink()) : void 0,
    onTasksClicked: void 0,
    onCreateClicked: props?.contextMenu?.create !== false ? () => navigate(createLink()) : void 0
  };
  return /* @__PURE__ */ React.createElement(Page, { themeId: "home" }, /* @__PURE__ */ React.createElement(
    Header,
    {
      pageTitleOverride: t("listTaskPage.pageTitle"),
      title: t("listTaskPage.title"),
      subtitle: t("listTaskPage.subtitle")
    },
    /* @__PURE__ */ React.createElement(ScaffolderPageContextMenu, { ...scaffolderPageContextMenuProps })
  ), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(ListTaskPageContent, { ...props })));
};

export { ListTasksPage };
//# sourceMappingURL=ListTasksPage.esm.js.map
