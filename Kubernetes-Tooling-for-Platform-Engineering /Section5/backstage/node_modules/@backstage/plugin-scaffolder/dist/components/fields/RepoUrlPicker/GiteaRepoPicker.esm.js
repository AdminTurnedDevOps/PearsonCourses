import React from 'react';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import TextField from '@material-ui/core/TextField';
import { Select } from '@backstage/core-components';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';

const GiteaRepoPicker = (props) => {
  const { allowedOwners = [], state, onChange, rawErrors } = props;
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const ownerItems = allowedOwners ? allowedOwners.map((i) => ({ label: i, value: i })) : [{ label: "Loading...", value: "loading" }];
  const { owner } = state;
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: rawErrors?.length > 0 && !owner
    },
    allowedOwners?.length ? /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      Select,
      {
        native: true,
        label: t("fields.giteaRepoPicker.owner.title"),
        onChange: (selected) => onChange({
          owner: String(
            Array.isArray(selected) ? selected[0] : selected
          )
        }),
        disabled: allowedOwners.length === 1,
        selected: owner,
        items: ownerItems
      }
    ), /* @__PURE__ */ React.createElement(FormHelperText, null, t("fields.giteaRepoPicker.owner.description"))) : /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
      TextField,
      {
        id: "ownerInput",
        label: t("fields.giteaRepoPicker.owner.inputTitle"),
        onChange: (e) => onChange({ owner: e.target.value }),
        helperText: t("fields.giteaRepoPicker.owner.description"),
        value: owner
      }
    ))
  ));
};

export { GiteaRepoPicker };
//# sourceMappingURL=GiteaRepoPicker.esm.js.map
