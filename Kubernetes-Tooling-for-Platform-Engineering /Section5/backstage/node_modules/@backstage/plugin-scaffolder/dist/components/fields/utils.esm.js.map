{"version":3,"file":"utils.esm.js","sources":["../../../src/components/fields/utils.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { JSONSchema7 } from 'json-schema';\nimport { z } from 'zod';\nimport zodToJsonSchema from 'zod-to-json-schema';\nimport { FieldSchema as FieldSchemaType } from '@backstage/plugin-scaffolder-react';\n\n/**\n * @public\n * @deprecated - import from {@link @backstage/plugin-scaffolder-react#FieldSchema} instead\n */\nexport interface FieldSchema<T, P> extends FieldSchemaType<T, P> {}\n\n/**\n * @public\n * @deprecated use `makeFieldSchema` instead\n * Utility function to convert zod return and UI options schemas to a\n * CustomFieldExtensionSchema with FieldExtensionComponentProps type inference\n */\n\nexport function makeFieldSchemaFromZod<\n  TReturnSchema extends z.ZodType,\n  TUiOptionsSchema extends z.ZodType = z.ZodType<any, any, {}>,\n>(\n  returnSchema: TReturnSchema,\n  uiOptionsSchema?: TUiOptionsSchema,\n): FieldSchema<\n  TReturnSchema extends z.ZodType<any, any, infer IReturn> ? IReturn : never,\n  TUiOptionsSchema extends z.ZodType<any, any, infer IUiOptions>\n    ? IUiOptions\n    : never\n> {\n  return {\n    schema: {\n      returnValue: zodToJsonSchema(returnSchema) as JSONSchema7,\n      uiOptions: uiOptionsSchema\n        ? (zodToJsonSchema(uiOptionsSchema) as JSONSchema7)\n        : undefined,\n    },\n    type: null as any,\n    uiOptionsType: null as any,\n    TProps: undefined as any,\n  };\n}\n"],"names":[],"mappings":";;AAiCgB,SAAA,sBAAA,CAId,cACA,eAMA,EAAA;AACA,EAAO,OAAA;AAAA,IACL,MAAQ,EAAA;AAAA,MACN,WAAA,EAAa,gBAAgB,YAAY,CAAA;AAAA,MACzC,SAAW,EAAA,eAAA,GACN,eAAgB,CAAA,eAAe,CAChC,GAAA,KAAA;AAAA,KACN;AAAA,IACA,IAAM,EAAA,IAAA;AAAA,IACN,aAAe,EAAA,IAAA;AAAA,IACf,MAAQ,EAAA,KAAA;AAAA,GACV;AACF;;;;"}