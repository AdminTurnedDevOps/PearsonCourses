import { z } from 'zod';
import { makeFieldSchemaFromZod } from '../utils.esm.js';
import { entityQueryFilterExpressionSchema } from '../EntityPicker/schema.esm.js';

const OwnerPickerFieldSchema = makeFieldSchemaFromZod(
  z.string(),
  z.object({
    /**
     * @deprecated Use `catalogFilter` instead.
     */
    allowedKinds: z.array(z.string()).default(["Group", "User"]).optional().describe(
      "DEPRECATED: Use `catalogFilter` instead. List of kinds of entities to derive options from. Defaults to Group and User"
    ),
    allowArbitraryValues: z.boolean().optional().describe("Whether to allow arbitrary user input. Defaults to true"),
    defaultNamespace: z.union([z.string(), z.literal(false)]).optional().describe(
      "The default namespace. Options with this namespace will not be prefixed."
    ),
    catalogFilter: z.array(entityQueryFilterExpressionSchema).or(entityQueryFilterExpressionSchema).optional().describe("List of key-value filter expression for entities")
  })
);
const OwnerPickerSchema = OwnerPickerFieldSchema.schema;

export { OwnerPickerFieldSchema, OwnerPickerSchema };
//# sourceMappingURL=schema.esm.js.map
