{"version":3,"file":"FileBrowser.esm.js","sources":["../../../src/components/FileBrowser/FileBrowser.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useMemo } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    whiteSpace: 'nowrap',\n    overflowY: 'auto',\n    padding: theme.spacing(1),\n  },\n}));\n\nexport type FileEntry =\n  | {\n      type: 'file';\n      name: string;\n      path: string;\n    }\n  | {\n      type: 'directory';\n      name: string;\n      path: string;\n      children: FileEntry[];\n    };\n\nexport function parseFileEntires(paths: string[]): FileEntry[] {\n  const root: FileEntry = {\n    type: 'directory',\n    name: '',\n    path: '',\n    children: [],\n  };\n\n  for (const path of paths.slice().sort()) {\n    const parts = path.split('/');\n\n    let current = root;\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i];\n      if (part === '') {\n        throw new Error(`Invalid path part: ''`);\n      }\n\n      const entryPath = parts.slice(0, i + 1).join('/');\n\n      const existing = current.children.find(child => child.name === part);\n      if (existing?.type === 'file') {\n        throw new Error(`Duplicate filename at '${entryPath}'`);\n      } else if (existing) {\n        current = existing;\n      } else {\n        if (i < parts.length - 1) {\n          const newEntry: FileEntry = {\n            type: 'directory',\n            name: part,\n            path: entryPath,\n            children: [],\n          };\n          const firstFileIndex = current.children.findIndex(\n            child => child.type === 'file',\n          );\n          current.children.splice(firstFileIndex, 0, newEntry);\n          current = newEntry;\n        } else {\n          current.children.push({\n            type: 'file',\n            name: part,\n            path: entryPath,\n          });\n        }\n      }\n    }\n  }\n\n  return root.children;\n}\n\nfunction FileTreeItem({ entry }: { entry: FileEntry }) {\n  if (entry.type === 'file') {\n    return <TreeItem nodeId={entry.path} label={entry.name} />;\n  }\n\n  return (\n    <TreeItem nodeId={entry.path} label={entry.name}>\n      {entry.children.map(child => (\n        <FileTreeItem key={child.path} entry={child} />\n      ))}\n    </TreeItem>\n  );\n}\n\ninterface FileBrowserProps {\n  /** A list of all filepaths to show, directories are separated with a `/` */\n  filePaths: string[];\n  /** The currently selected file */\n  selected?: string;\n  /** Callback for when a file is selected */\n  onSelect?(filePath: string): void;\n}\n\n/** A simple file browser that allows you to select individual files */\nexport function FileBrowser(props: FileBrowserProps) {\n  const classes = useStyles();\n\n  const fileTree = useMemo(\n    () => parseFileEntires(props.filePaths),\n    [props.filePaths],\n  );\n\n  return (\n    <TreeView\n      selected={props.selected}\n      className={classes.root}\n      defaultCollapseIcon={<ExpandMoreIcon />}\n      defaultExpandIcon={<ChevronRightIcon />}\n      onNodeSelect={(_e: unknown, nodeId: string) => {\n        if (props.onSelect && props.filePaths.includes(nodeId)) {\n          props.onSelect(nodeId);\n        }\n      }}\n    >\n      {fileTree.map(entry => (\n        <FileTreeItem key={entry.path} entry={entry} />\n      ))}\n    </TreeView>\n  );\n}\n"],"names":[],"mappings":"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"}