import React, { useEffect } from 'react';
import { Progress, Select } from '@backstage/core-components';
import FormControl from '@material-ui/core/FormControl';
import FormHelperText from '@material-ui/core/FormHelperText';
import { useApi } from '@backstage/core-plugin-api';
import { scaffolderApiRef } from '@backstage/plugin-scaffolder-react';
import useAsync from 'react-use/esm/useAsync';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { scaffolderTranslationRef } from '../../../translation.esm.js';

const RepoUrlPickerHost = (props) => {
  const { host, hosts, onChange, rawErrors } = props;
  const { t } = useTranslationRef(scaffolderTranslationRef);
  const scaffolderApi = useApi(scaffolderApiRef);
  const { value: { integrations } = { integrations: [] }, loading } = useAsync(
    async () => {
      return await scaffolderApi.getIntegrationsList({
        allowedHosts: hosts ?? []
      });
    }
  );
  useEffect(() => {
    if (!host) {
      if (hosts?.length) {
        onChange(hosts[0]);
      } else if (integrations?.length) {
        onChange(integrations[0].host);
      }
    }
  }, [hosts, host, onChange, integrations]);
  const hostsOptions = integrations ? integrations.filter((i) => hosts?.length ? hosts?.includes(i.host) : true).map((i) => ({ label: i.title, value: i.host })) : [{ label: "Loading...", value: "loading" }];
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    FormControl,
    {
      margin: "normal",
      required: true,
      error: rawErrors?.length > 0 && !host
    },
    /* @__PURE__ */ React.createElement(
      Select,
      {
        native: true,
        disabled: hosts?.length === 1,
        label: t("fields.repoUrlPicker.host.title"),
        onChange: (s) => onChange(String(Array.isArray(s) ? s[0] : s)),
        selected: host,
        items: hostsOptions,
        "data-testid": "host-select"
      }
    ),
    /* @__PURE__ */ React.createElement(FormHelperText, null, t("fields.repoUrlPicker.host.description"))
  ));
};

export { RepoUrlPickerHost };
//# sourceMappingURL=RepoUrlPickerHost.esm.js.map
