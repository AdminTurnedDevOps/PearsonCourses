import React, { ReactNode } from 'react';

/**
 * @public
 * A component that redirects to the page an user was trying to access before sign-in.
 */
declare function CookieAuthRedirect(): React.JSX.Element | null;

/**
 * @public
 * Props for the {@link CookieAuthRefreshProvider} component.
 */
type CookieAuthRefreshProviderProps = {
    pluginId: string;
    children: ReactNode;
};
/**
 * @public
 * A provider that will refresh the cookie when it is about to expire.
 */
declare function CookieAuthRefreshProvider(props: CookieAuthRefreshProviderProps): JSX.Element;

/**
 * @public
 * A hook that will refresh the cookie when it is about to expire.
 * @param options - Options for configuring the refresh cookie endpoint
 */
declare function useCookieAuthRefresh(options: {
    pluginId: string;
}): {
    status: 'loading';
} | {
    status: 'error';
    error: Error;
    retry: () => void;
} | {
    status: 'success';
    data: {
        expiresAt: string;
    };
};

export { CookieAuthRedirect, CookieAuthRefreshProvider, type CookieAuthRefreshProviderProps, useCookieAuthRefresh };
