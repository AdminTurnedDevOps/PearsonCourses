{"version":3,"file":"extensions.cjs.js","sources":["../src/extensions.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createExtensionPoint } from '@backstage/backend-plugin-api';\nimport { Entity, Validators } from '@backstage/catalog-model';\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  EntitiesSearchFilter,\n  EntityProvider,\n  PlaceholderResolver,\n  LocationAnalyzer,\n  ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport {\n  Permission,\n  PermissionRuleParams,\n} from '@backstage/plugin-permission-common';\nimport { PermissionRule } from '@backstage/plugin-permission-node';\n\n/**\n * @alpha\n */\nexport interface CatalogLocationsExtensionPoint {\n  /**\n   * Allows setting custom location types, such as showcased in: https://backstage.io/docs/features/software-catalog/external-integrations/#creating-a-catalog-data-reader-processor\n   * @param locationTypes - List of location types to allow, default is \"url\" and \"file\"\n   */\n  setAllowedLocationTypes(locationTypes: Array<string>): void;\n}\n\n/**\n * @alpha\n */\nexport const catalogLocationsExtensionPoint =\n  createExtensionPoint<CatalogLocationsExtensionPoint>({\n    id: 'catalog.locations',\n  });\n\n/**\n * @alpha\n */\nexport interface CatalogProcessingExtensionPoint {\n  addProcessor(\n    ...processors: Array<CatalogProcessor | Array<CatalogProcessor>>\n  ): void;\n  addEntityProvider(\n    ...providers: Array<EntityProvider | Array<EntityProvider>>\n  ): void;\n  addPlaceholderResolver(key: string, resolver: PlaceholderResolver): void;\n  setOnProcessingErrorHandler(\n    handler: (event: {\n      unprocessedEntity: Entity;\n      errors: Error[];\n    }) => Promise<void> | void,\n  ): void;\n}\n\n/** @alpha */\nexport interface CatalogModelExtensionPoint {\n  /**\n   * Sets the validator function to use for one or more special fields of an\n   * entity. This is useful if the default rules for formatting of fields are\n   * not sufficient.\n   *\n   * @param validators - The (subset of) validators to set\n   */\n  setFieldValidators(validators: Partial<Validators>): void;\n\n  /**\n   * Sets the entity data parser which is used to read raw data from locations\n   * @param parser - Parser which will used to extract entities from raw data\n   */\n  setEntityDataParser(parser: CatalogProcessorParser): void;\n}\n\n/**\n * @alpha\n */\nexport const catalogProcessingExtensionPoint =\n  createExtensionPoint<CatalogProcessingExtensionPoint>({\n    id: 'catalog.processing',\n  });\n\n/**\n * @alpha\n */\nexport interface CatalogAnalysisExtensionPoint {\n  /**\n   * Replaces the entire location analyzer with a new one.\n   *\n   * @remarks\n   *\n   * By providing a factory function you can access all the SCM analyzers that\n   * have been added through `addScmLocationAnalyzer`. If you provide a\n   * `LocationAnalyzer` directly, the SCM analyzers will be ignored.\n   */\n  setLocationAnalyzer(\n    analyzerOrFactory:\n      | LocationAnalyzer\n      | ((options: {\n          scmLocationAnalyzers: ScmLocationAnalyzer[];\n        }) => Promise<{ locationAnalyzer: LocationAnalyzer }>),\n  ): void;\n\n  /**\n   * Adds an analyzer for a specific SCM type to the default location analyzer.\n   */\n  addScmLocationAnalyzer(analyzer: ScmLocationAnalyzer): void;\n}\n\n/**\n * @alpha\n */\nexport const catalogAnalysisExtensionPoint =\n  createExtensionPoint<CatalogAnalysisExtensionPoint>({\n    id: 'catalog.analysis',\n  });\n\n/** @alpha */\nexport const catalogModelExtensionPoint =\n  createExtensionPoint<CatalogModelExtensionPoint>({\n    id: 'catalog.model',\n  });\n\n/**\n * @alpha\n */\nexport type CatalogPermissionRuleInput<\n  TParams extends PermissionRuleParams = PermissionRuleParams,\n> = PermissionRule<Entity, EntitiesSearchFilter, 'catalog-entity', TParams>;\n\n/**\n * @alpha\n */\nexport interface CatalogPermissionExtensionPoint {\n  addPermissions(...permissions: Array<Permission | Array<Permission>>): void;\n  addPermissionRules(\n    ...rules: Array<\n      CatalogPermissionRuleInput | Array<CatalogPermissionRuleInput>\n    >\n  ): void;\n}\n\n/**\n * @alpha\n */\nexport const catalogPermissionExtensionPoint =\n  createExtensionPoint<CatalogPermissionExtensionPoint>({\n    id: 'catalog.permission',\n  });\n"],"names":["createExtensionPoint"],"mappings":";;;;AA+CO,MAAM,iCACXA,qCAAqD,CAAA;AAAA,EACnD,EAAI,EAAA;AACN,CAAC;AA0CI,MAAM,kCACXA,qCAAsD,CAAA;AAAA,EACpD,EAAI,EAAA;AACN,CAAC;AAgCI,MAAM,gCACXA,qCAAoD,CAAA;AAAA,EAClD,EAAI,EAAA;AACN,CAAC;AAGI,MAAM,6BACXA,qCAAiD,CAAA;AAAA,EAC/C,EAAI,EAAA;AACN,CAAC;AAwBI,MAAM,kCACXA,qCAAsD,CAAA;AAAA,EACpD,EAAI,EAAA;AACN,CAAC;;;;;;;;"}