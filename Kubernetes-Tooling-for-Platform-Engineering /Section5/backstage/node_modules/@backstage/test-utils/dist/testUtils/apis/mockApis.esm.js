import { ConfigReader } from '@backstage/config';
import { createApiFactory, analyticsApiRef, configApiRef, discoveryApiRef, identityApiRef, storageApiRef } from '@backstage/core-plugin-api';
import { translationApiRef } from '@backstage/core-plugin-api/alpha';
import { AuthorizeResult } from '@backstage/plugin-permission-common';
import { permissionApiRef } from '@backstage/plugin-permission-react';
import { MockPermissionApi } from './PermissionApi/MockPermissionApi.esm.js';
import { MockStorageApi } from './StorageApi/MockStorageApi.esm.js';
import { MockTranslationApi } from './TranslationApi/MockTranslationApi.esm.js';

function simpleFactory(ref, factory) {
  return (...args) => createApiFactory({
    api: ref,
    deps: {},
    factory: () => factory(...args)
  });
}
function simpleMock(ref, mockFactory) {
  return (partialImpl) => {
    const mock = mockFactory();
    if (partialImpl) {
      for (const [key, impl] of Object.entries(partialImpl)) {
        if (typeof impl === "function") {
          mock[key].mockImplementation(impl);
        } else {
          mock[key] = impl;
        }
      }
    }
    return Object.assign(mock, {
      factory: createApiFactory({
        api: ref,
        deps: {},
        factory: () => mock
      })
    });
  };
}
var mockApis;
((mockApis2) => {
  const analyticsMockSkeleton = () => ({
    captureEvent: jest.fn()
  });
  function analytics() {
    return analyticsMockSkeleton();
  }
  mockApis2.analytics = analytics;
  ((analytics2) => {
    analytics2.factory = simpleFactory(analyticsApiRef, analytics2);
    analytics2.mock = simpleMock(analyticsApiRef, analyticsMockSkeleton);
  })(analytics = mockApis2.analytics || (mockApis2.analytics = {}));
  function config(options) {
    return new ConfigReader(options?.data, "mock-config");
  }
  mockApis2.config = config;
  ((config2) => {
    config2.factory = simpleFactory(configApiRef, config2);
    config2.mock = simpleMock(configApiRef, () => ({
      has: jest.fn(),
      keys: jest.fn(),
      get: jest.fn(),
      getOptional: jest.fn(),
      getConfig: jest.fn(),
      getOptionalConfig: jest.fn(),
      getConfigArray: jest.fn(),
      getOptionalConfigArray: jest.fn(),
      getNumber: jest.fn(),
      getOptionalNumber: jest.fn(),
      getBoolean: jest.fn(),
      getOptionalBoolean: jest.fn(),
      getString: jest.fn(),
      getOptionalString: jest.fn(),
      getStringArray: jest.fn(),
      getOptionalStringArray: jest.fn()
    }));
  })(config = mockApis2.config || (mockApis2.config = {}));
  function discovery(options) {
    const baseUrl = options?.baseUrl ?? "http://example.com";
    return {
      async getBaseUrl(pluginId) {
        return `${baseUrl}/api/${pluginId}`;
      }
    };
  }
  mockApis2.discovery = discovery;
  ((discovery2) => {
    discovery2.factory = simpleFactory(discoveryApiRef, discovery2);
    discovery2.mock = simpleMock(discoveryApiRef, () => ({
      getBaseUrl: jest.fn()
    }));
  })(discovery = mockApis2.discovery || (mockApis2.discovery = {}));
  function identity(options) {
    const {
      userEntityRef = "user:default/test",
      ownershipEntityRefs = ["user:default/test"],
      token,
      email,
      displayName,
      picture
    } = options ?? {};
    return {
      async getBackstageIdentity() {
        return { type: "user", ownershipEntityRefs, userEntityRef };
      },
      async getCredentials() {
        return { token };
      },
      async getProfileInfo() {
        return { email, displayName, picture };
      },
      async signOut() {
      }
    };
  }
  mockApis2.identity = identity;
  ((identity2) => {
    identity2.factory = simpleFactory(identityApiRef, identity2);
    identity2.mock = simpleMock(
      identityApiRef,
      () => ({
        getBackstageIdentity: jest.fn(),
        getCredentials: jest.fn(),
        getProfileInfo: jest.fn(),
        signOut: jest.fn()
      })
    );
  })(identity = mockApis2.identity || (mockApis2.identity = {}));
  function permission(options) {
    const authorizeInput = options?.authorize;
    let authorize;
    if (authorizeInput === void 0) {
      authorize = () => AuthorizeResult.ALLOW;
    } else if (typeof authorizeInput === "function") {
      authorize = authorizeInput;
    } else {
      authorize = () => authorizeInput;
    }
    return new MockPermissionApi(authorize);
  }
  mockApis2.permission = permission;
  ((permission2) => {
    permission2.factory = simpleFactory(permissionApiRef, permission2);
    permission2.mock = simpleMock(permissionApiRef, () => ({
      authorize: jest.fn()
    }));
  })(permission = mockApis2.permission || (mockApis2.permission = {}));
  function storage(options) {
    return MockStorageApi.create(options?.data);
  }
  mockApis2.storage = storage;
  ((storage2) => {
    storage2.factory = simpleFactory(storageApiRef, storage2);
    storage2.mock = simpleMock(storageApiRef, () => ({
      forBucket: jest.fn(),
      set: jest.fn(),
      remove: jest.fn(),
      observe$: jest.fn(),
      snapshot: jest.fn()
    }));
  })(storage = mockApis2.storage || (mockApis2.storage = {}));
  function translation() {
    return MockTranslationApi.create();
  }
  mockApis2.translation = translation;
  ((translation2) => {
    translation2.factory = simpleFactory(translationApiRef, translation2);
    translation2.mock = simpleMock(translationApiRef, () => ({
      getTranslation: jest.fn(),
      translation$: jest.fn()
    }));
  })(translation = mockApis2.translation || (mockApis2.translation = {}));
})(mockApis || (mockApis = {}));

export { mockApis };
//# sourceMappingURL=mockApis.esm.js.map
