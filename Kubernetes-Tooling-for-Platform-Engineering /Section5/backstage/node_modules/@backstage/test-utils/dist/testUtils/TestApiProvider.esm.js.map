{"version":3,"file":"TestApiProvider.esm.js","sources":["../../src/testUtils/TestApiProvider.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactNode } from 'react';\nimport { ApiProvider } from '@backstage/core-app-api';\nimport { ApiRef, ApiHolder } from '@backstage/core-plugin-api';\n\n/** @ignore */\ntype TestApiProviderPropsApiPair<TApi> = TApi extends infer TImpl\n  ? readonly [ApiRef<TApi>, Partial<TImpl>]\n  : never;\n\n/** @ignore */\ntype TestApiProviderPropsApiPairs<TApiPairs> = {\n  [TIndex in keyof TApiPairs]: TestApiProviderPropsApiPair<TApiPairs[TIndex]>;\n};\n\n/**\n * Properties for the {@link TestApiProvider} component.\n *\n * @public\n */\nexport type TestApiProviderProps<TApiPairs extends any[]> = {\n  apis: readonly [...TestApiProviderPropsApiPairs<TApiPairs>];\n  children: ReactNode;\n};\n\n/**\n * The `TestApiRegistry` is an {@link @backstage/core-plugin-api#ApiHolder} implementation\n * that is particularly well suited for development and test environments such as\n * unit tests, storybooks, and isolated plugin development setups.\n *\n * @public\n */\nexport class TestApiRegistry implements ApiHolder {\n  /**\n   * Creates a new {@link TestApiRegistry} with a list of API implementation pairs.\n   *\n   * Similar to the {@link TestApiProvider}, there is no need to provide a full\n   * implementation of each API, it's enough to implement the methods that are tested.\n   *\n   * @example\n   * ```ts\n   * const apis = TestApiRegistry.from(\n   *   [configApiRef, new ConfigReader({})],\n   *   [identityApiRef, { getUserId: () => 'tester' }],\n   * );\n   * ```\n   *\n   * @public\n   * @param apis - A list of pairs mapping an ApiRef to its respective implementation.\n   */\n  static from<TApiPairs extends any[]>(\n    ...apis: readonly [...TestApiProviderPropsApiPairs<TApiPairs>]\n  ) {\n    return new TestApiRegistry(\n      new Map(apis.map(([api, impl]) => [api.id, impl])),\n    );\n  }\n\n  private constructor(private readonly apis: Map<string, unknown>) {}\n\n  /**\n   * Returns an implementation of the API.\n   *\n   * @public\n   */\n  get<T>(api: ApiRef<T>): T | undefined {\n    return this.apis.get(api.id) as T | undefined;\n  }\n}\n\n/**\n * The `TestApiProvider` is a Utility API context provider that is particularly\n * well suited for development and test environments such as unit tests, storybooks,\n * and isolated plugin development setups.\n *\n * It lets you provide any number of API implementations, without necessarily\n * having to fully implement each of the APIs.\n *\n * @remarks\n * todo: remove this remark tag and ship in the api-reference. There's some odd formatting going on when this is made into a markdown doc, that there's no line break between\n * the emitted <p> for To the following </p> so what happens is that when parsing in docusaurus, it thinks that the code block is mdx rather than a code\n * snippet. Just omitting this from the report for now until we can work out how to fix later.\n * A migration from `ApiRegistry` and `ApiProvider` might look like this, from:\n *\n * ```tsx\n * renderInTestApp(\n *   <ApiProvider\n *     apis={ApiRegistry.from([\n *       [identityApiRef, mockIdentityApi as unknown as IdentityApi]\n *     ])}\n *   >\n *    ...\n *   </ApiProvider>\n * )\n * ```\n *\n * To the following:\n *\n * ```tsx\n * renderInTestApp(\n *   <TestApiProvider apis={[[identityApiRef, mockIdentityApi]]}>\n *     ...\n *   </TestApiProvider>\n * )\n * ```\n *\n * Note that the cast to `IdentityApi` is no longer needed as long as the mock API\n * implements a subset of the `IdentityApi`.\n *\n * @public\n */\nexport const TestApiProvider = <T extends any[]>(\n  props: TestApiProviderProps<T>,\n) => {\n  return (\n    <ApiProvider\n      apis={TestApiRegistry.from(...props.apis)}\n      children={props.children}\n    />\n  );\n};\n"],"names":[],"mappings":";;;AA+CO,MAAM,eAAqC,CAAA;AAAA,EA0BxC,YAA6B,IAA4B,EAAA;AAA5B,IAAA,IAAA,CAAA,IAAA,GAAA,IAAA;AAAA;AAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EARlE,OAAO,QACF,IACH,EAAA;AACA,IAAA,OAAO,IAAI,eAAA;AAAA,MACT,IAAI,GAAA,CAAI,IAAK,CAAA,GAAA,CAAI,CAAC,CAAC,GAAA,EAAK,IAAI,CAAA,KAAM,CAAC,GAAA,CAAI,EAAI,EAAA,IAAI,CAAC,CAAC;AAAA,KACnD;AAAA;AACF;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAO,GAA+B,EAAA;AACpC,IAAA,OAAO,IAAK,CAAA,IAAA,CAAK,GAAI,CAAA,GAAA,CAAI,EAAE,CAAA;AAAA;AAE/B;AA2Ca,MAAA,eAAA,GAAkB,CAC7B,KACG,KAAA;AACH,EACE,uBAAA,KAAA,CAAA,aAAA;AAAA,IAAC,WAAA;AAAA,IAAA;AAAA,MACC,IAAM,EAAA,eAAA,CAAgB,IAAK,CAAA,GAAG,MAAM,IAAI,CAAA;AAAA,MACxC,UAAU,KAAM,CAAA;AAAA;AAAA,GAClB;AAEJ;;;;"}