{"version":3,"file":"logCollector.esm.js","sources":["../../src/testUtils/logCollector.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\n\n/**\n * Severity levels of {@link CollectedLogs}\n * @public\n */\nexport type LogFuncs = 'log' | 'warn' | 'error';\n/**\n * AsyncLogCollector type used in {@link (withLogCollector:1)} callback function.\n * @public\n */\nexport type AsyncLogCollector = () => Promise<void>;\n/**\n * SyncLogCollector type used in {@link (withLogCollector:2)} callback function.\n * @public\n */\nexport type SyncLogCollector = () => void;\n/**\n * Union type used in {@link (withLogCollector:3)} callback function.\n * @public\n */\nexport type LogCollector = AsyncLogCollector | SyncLogCollector;\n/**\n * Map of severity level and corresponding log lines.\n * @public\n */\nexport type CollectedLogs<T extends LogFuncs> = { [key in T]: string[] };\n\nconst allCategories = ['log', 'warn', 'error'];\n\n/**\n * Asynchronous log collector with that collects all categories\n * @public\n */\nexport function withLogCollector(\n  callback: AsyncLogCollector,\n): Promise<CollectedLogs<LogFuncs>>;\n\n/**\n * Synchronous log collector with that collects all categories\n * @public\n */\nexport function withLogCollector(\n  callback: SyncLogCollector,\n): CollectedLogs<LogFuncs>;\n\n/**\n * Asynchronous log collector with that only collects selected categories\n * @public\n */\nexport function withLogCollector<T extends LogFuncs>(\n  logsToCollect: T[],\n  callback: AsyncLogCollector,\n): Promise<CollectedLogs<T>>;\n\n/**\n * Synchronous log collector with that only collects selected categories\n * @public\n */\nexport function withLogCollector<T extends LogFuncs>(\n  logsToCollect: T[],\n  callback: SyncLogCollector,\n): CollectedLogs<T>;\n\n/**\n * Log collector that collect logs either from a sync or async collector.\n * @public\n */\nexport function withLogCollector(\n  logsToCollect: LogFuncs[] | LogCollector,\n  callback?: LogCollector,\n): CollectedLogs<LogFuncs> | Promise<CollectedLogs<LogFuncs>> {\n  const oneArg = !callback;\n  const actualCallback = (oneArg ? logsToCollect : callback) as LogCollector;\n  const categories = (oneArg ? allCategories : logsToCollect) as LogFuncs[];\n\n  const logs = {\n    log: new Array<string>(),\n    warn: new Array<string>(),\n    error: new Array<string>(),\n  };\n\n  const origLog = console.log;\n  const origWarn = console.warn;\n  const origError = console.error;\n\n  if (categories.includes('log')) {\n    console.log = (message: string) => {\n      logs.log.push(message);\n    };\n  }\n  if (categories.includes('warn')) {\n    console.warn = (message: string) => {\n      logs.warn.push(message);\n    };\n  }\n  if (categories.includes('error')) {\n    console.error = (message: string) => {\n      logs.error.push(message);\n    };\n  }\n\n  const restore = () => {\n    console.log = origLog;\n    console.warn = origWarn;\n    console.error = origError;\n  };\n\n  try {\n    const ret = actualCallback();\n\n    if (!ret || !ret.then) {\n      restore();\n      return logs;\n    }\n\n    return ret.then(\n      () => {\n        restore();\n        return logs;\n      },\n      error => {\n        restore();\n        throw error;\n      },\n    );\n  } catch (error) {\n    restore();\n    throw error;\n  }\n}\n"],"names":[],"mappings":"AA4CA,MAAM,aAAgB,GAAA,CAAC,KAAO,EAAA,MAAA,EAAQ,OAAO,CAAA;AAwC7B,SAAA,gBAAA,CACd,eACA,QAC4D,EAAA;AAC5D,EAAA,MAAM,SAAS,CAAC,QAAA;AAChB,EAAM,MAAA,cAAA,GAAkB,SAAS,aAAgB,GAAA,QAAA;AACjD,EAAM,MAAA,UAAA,GAAc,SAAS,aAAgB,GAAA,aAAA;AAE7C,EAAA,MAAM,IAAO,GAAA;AAAA,IACX,GAAA,EAAK,IAAI,KAAc,EAAA;AAAA,IACvB,IAAA,EAAM,IAAI,KAAc,EAAA;AAAA,IACxB,KAAA,EAAO,IAAI,KAAc;AAAA,GAC3B;AAEA,EAAA,MAAM,UAAU,OAAQ,CAAA,GAAA;AACxB,EAAA,MAAM,WAAW,OAAQ,CAAA,IAAA;AACzB,EAAA,MAAM,YAAY,OAAQ,CAAA,KAAA;AAE1B,EAAI,IAAA,UAAA,CAAW,QAAS,CAAA,KAAK,CAAG,EAAA;AAC9B,IAAQ,OAAA,CAAA,GAAA,GAAM,CAAC,OAAoB,KAAA;AACjC,MAAK,IAAA,CAAA,GAAA,CAAI,KAAK,OAAO,CAAA;AAAA,KACvB;AAAA;AAEF,EAAI,IAAA,UAAA,CAAW,QAAS,CAAA,MAAM,CAAG,EAAA;AAC/B,IAAQ,OAAA,CAAA,IAAA,GAAO,CAAC,OAAoB,KAAA;AAClC,MAAK,IAAA,CAAA,IAAA,CAAK,KAAK,OAAO,CAAA;AAAA,KACxB;AAAA;AAEF,EAAI,IAAA,UAAA,CAAW,QAAS,CAAA,OAAO,CAAG,EAAA;AAChC,IAAQ,OAAA,CAAA,KAAA,GAAQ,CAAC,OAAoB,KAAA;AACnC,MAAK,IAAA,CAAA,KAAA,CAAM,KAAK,OAAO,CAAA;AAAA,KACzB;AAAA;AAGF,EAAA,MAAM,UAAU,MAAM;AACpB,IAAA,OAAA,CAAQ,GAAM,GAAA,OAAA;AACd,IAAA,OAAA,CAAQ,IAAO,GAAA,QAAA;AACf,IAAA,OAAA,CAAQ,KAAQ,GAAA,SAAA;AAAA,GAClB;AAEA,EAAI,IAAA;AACF,IAAA,MAAM,MAAM,cAAe,EAAA;AAE3B,IAAA,IAAI,CAAC,GAAA,IAAO,CAAC,GAAA,CAAI,IAAM,EAAA;AACrB,MAAQ,OAAA,EAAA;AACR,MAAO,OAAA,IAAA;AAAA;AAGT,IAAA,OAAO,GAAI,CAAA,IAAA;AAAA,MACT,MAAM;AACJ,QAAQ,OAAA,EAAA;AACR,QAAO,OAAA,IAAA;AAAA,OACT;AAAA,MACA,CAAS,KAAA,KAAA;AACP,QAAQ,OAAA,EAAA;AACR,QAAM,MAAA,KAAA;AAAA;AACR,KACF;AAAA,WACO,KAAO,EAAA;AACd,IAAQ,OAAA,EAAA;AACR,IAAM,MAAA,KAAA;AAAA;AAEV;;;;"}