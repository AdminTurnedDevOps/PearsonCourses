{"version":3,"file":"MockErrorApi.esm.js","sources":["../../../../src/testUtils/apis/ErrorApi/MockErrorApi.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ErrorApi,\n  ErrorApiError,\n  ErrorApiErrorContext,\n} from '@backstage/core-plugin-api';\nimport { Observable } from '@backstage/types';\n\n/**\n * Constructor arguments for {@link MockErrorApi}\n * @public\n */\nexport type MockErrorApiOptions = {\n  // Need to be true if getErrors is used in testing.\n  collect?: boolean;\n};\n\n/**\n * ErrorWithContext contains error and ErrorApiErrorContext\n * @public\n */\nexport type ErrorWithContext = {\n  error: ErrorApiError;\n  context?: ErrorApiErrorContext;\n};\n\ntype Waiter = {\n  pattern: RegExp;\n  resolve: (err: ErrorWithContext) => void;\n};\n\nconst nullObservable = {\n  subscribe: () => ({ unsubscribe: () => {}, closed: true }),\n\n  [Symbol.observable]() {\n    return this;\n  },\n};\n\n/**\n * Mock implementation of the {@link core-plugin-api#ErrorApi} to be used in tests.\n * Includes withForError and getErrors methods for error testing.\n * @public\n */\nexport class MockErrorApi implements ErrorApi {\n  private readonly errors = new Array<ErrorWithContext>();\n  private readonly waiters = new Set<Waiter>();\n\n  constructor(private readonly options: MockErrorApiOptions = {}) {}\n\n  post(error: ErrorApiError, context?: ErrorApiErrorContext) {\n    if (this.options.collect) {\n      this.errors.push({ error, context });\n\n      for (const waiter of this.waiters) {\n        if (waiter.pattern.test(error.message)) {\n          this.waiters.delete(waiter);\n          waiter.resolve({ error, context });\n        }\n      }\n\n      return;\n    }\n\n    throw new Error(`MockErrorApi received unexpected error, ${error}`);\n  }\n\n  error$(): Observable<{\n    error: ErrorApiError;\n    context?: ErrorApiErrorContext;\n  }> {\n    return nullObservable;\n  }\n\n  getErrors(): ErrorWithContext[] {\n    return this.errors;\n  }\n\n  waitForError(\n    pattern: RegExp,\n    timeoutMs: number = 2000,\n  ): Promise<ErrorWithContext> {\n    return new Promise<ErrorWithContext>((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error('Timed out waiting for error'));\n      }, timeoutMs);\n\n      this.waiters.add({ resolve, pattern });\n    });\n  }\n}\n"],"names":[],"mappings":"AA8CA,MAAM,cAAiB,GAAA;AAAA,EACrB,SAAW,EAAA,OAAO,EAAE,WAAA,EAAa,MAAM;AAAA,GAAC,EAAG,QAAQ,IAAK,EAAA,CAAA;AAAA,EAExD,CAAC,MAAO,CAAA,UAAU,CAAI,GAAA;AACpB,IAAO,OAAA,IAAA;AAAA;AAEX,CAAA;AAOO,MAAM,YAAiC,CAAA;AAAA,EAI5C,WAAA,CAA6B,OAA+B,GAAA,EAAI,EAAA;AAAnC,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AAAA;AAAoC,EAHhD,MAAA,GAAS,IAAI,KAAwB,EAAA;AAAA,EACrC,OAAA,uBAAc,GAAY,EAAA;AAAA,EAI3C,IAAA,CAAK,OAAsB,OAAgC,EAAA;AACzD,IAAI,IAAA,IAAA,CAAK,QAAQ,OAAS,EAAA;AACxB,MAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,EAAE,KAAA,EAAO,SAAS,CAAA;AAEnC,MAAW,KAAA,MAAA,MAAA,IAAU,KAAK,OAAS,EAAA;AACjC,QAAA,IAAI,MAAO,CAAA,OAAA,CAAQ,IAAK,CAAA,KAAA,CAAM,OAAO,CAAG,EAAA;AACtC,UAAK,IAAA,CAAA,OAAA,CAAQ,OAAO,MAAM,CAAA;AAC1B,UAAA,MAAA,CAAO,OAAQ,CAAA,EAAE,KAAO,EAAA,OAAA,EAAS,CAAA;AAAA;AACnC;AAGF,MAAA;AAAA;AAGF,IAAA,MAAM,IAAI,KAAA,CAAM,CAA2C,wCAAA,EAAA,KAAK,CAAE,CAAA,CAAA;AAAA;AACpE,EAEA,MAGG,GAAA;AACD,IAAO,OAAA,cAAA;AAAA;AACT,EAEA,SAAgC,GAAA;AAC9B,IAAA,OAAO,IAAK,CAAA,MAAA;AAAA;AACd,EAEA,YAAA,CACE,OACA,EAAA,SAAA,GAAoB,GACO,EAAA;AAC3B,IAAA,OAAO,IAAI,OAAA,CAA0B,CAAC,OAAA,EAAS,MAAW,KAAA;AACxD,MAAA,UAAA,CAAW,MAAM;AACf,QAAO,MAAA,CAAA,IAAI,KAAM,CAAA,6BAA6B,CAAC,CAAA;AAAA,SAC9C,SAAS,CAAA;AAEZ,MAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,EAAE,OAAA,EAAS,SAAS,CAAA;AAAA,KACtC,CAAA;AAAA;AAEL;;;;"}