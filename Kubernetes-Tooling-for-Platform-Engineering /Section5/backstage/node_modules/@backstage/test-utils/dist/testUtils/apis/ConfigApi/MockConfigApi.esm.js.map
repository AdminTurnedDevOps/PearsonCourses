{"version":3,"file":"MockConfigApi.esm.js","sources":["../../../../src/testUtils/apis/ConfigApi/MockConfigApi.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config, ConfigReader } from '@backstage/config';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { ConfigApi } from '@backstage/core-plugin-api';\n\n/**\n * MockConfigApi is a thin wrapper around {@link @backstage/config#ConfigReader}\n * that can be used to mock configuration using a plain object.\n *\n * @public\n * @deprecated Use {@link mockApis.(config:namespace)} instead\n * @example\n * ```tsx\n * const mockConfig = new MockConfigApi({\n *   app: { baseUrl: 'https://example.com' },\n * });\n *\n * const rendered = await renderInTestApp(\n *   <TestApiProvider apis={[[configApiRef, mockConfig]]}>\n *     <MyTestedComponent />\n *   </TestApiProvider>,\n * );\n * ```\n */\nexport class MockConfigApi implements ConfigApi {\n  private readonly config: ConfigReader;\n\n  // NOTE: not extending in order to avoid inheriting the static `.fromConfigs`\n  constructor(data: JsonObject) {\n    this.config = new ConfigReader(data);\n  }\n\n  /** {@inheritdoc @backstage/config#Config.has} */\n  has(key: string): boolean {\n    return this.config.has(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.keys} */\n  keys(): string[] {\n    return this.config.keys();\n  }\n  /** {@inheritdoc @backstage/config#Config.get} */\n  get<T = JsonValue>(key?: string): T {\n    return this.config.get(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getOptional} */\n  getOptional<T = JsonValue>(key?: string): T | undefined {\n    return this.config.getOptional(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getConfig} */\n  getConfig(key: string): Config {\n    return this.config.getConfig(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getOptionalConfig} */\n  getOptionalConfig(key: string): Config | undefined {\n    return this.config.getOptionalConfig(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getConfigArray} */\n  getConfigArray(key: string): Config[] {\n    return this.config.getConfigArray(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getOptionalConfigArray} */\n  getOptionalConfigArray(key: string): Config[] | undefined {\n    return this.config.getOptionalConfigArray(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getNumber} */\n  getNumber(key: string): number {\n    return this.config.getNumber(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getOptionalNumber} */\n  getOptionalNumber(key: string): number | undefined {\n    return this.config.getOptionalNumber(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getBoolean} */\n  getBoolean(key: string): boolean {\n    return this.config.getBoolean(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getOptionalBoolean} */\n  getOptionalBoolean(key: string): boolean | undefined {\n    return this.config.getOptionalBoolean(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getString} */\n  getString(key: string): string {\n    return this.config.getString(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getOptionalString} */\n  getOptionalString(key: string): string | undefined {\n    return this.config.getOptionalString(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getStringArray} */\n  getStringArray(key: string): string[] {\n    return this.config.getStringArray(key);\n  }\n  /** {@inheritdoc @backstage/config#Config.getOptionalStringArray} */\n  getOptionalStringArray(key: string): string[] | undefined {\n    return this.config.getOptionalStringArray(key);\n  }\n}\n"],"names":[],"mappings":";;AAuCO,MAAM,aAAmC,CAAA;AAAA,EAC7B,MAAA;AAAA;AAAA,EAGjB,YAAY,IAAkB,EAAA;AAC5B,IAAK,IAAA,CAAA,MAAA,GAAS,IAAI,YAAA,CAAa,IAAI,CAAA;AAAA;AACrC;AAAA,EAGA,IAAI,GAAsB,EAAA;AACxB,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,GAAA,CAAI,GAAG,CAAA;AAAA;AAC5B;AAAA,EAEA,IAAiB,GAAA;AACf,IAAO,OAAA,IAAA,CAAK,OAAO,IAAK,EAAA;AAAA;AAC1B;AAAA,EAEA,IAAmB,GAAiB,EAAA;AAClC,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,GAAA,CAAI,GAAG,CAAA;AAAA;AAC5B;AAAA,EAEA,YAA2B,GAA6B,EAAA;AACtD,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA;AACpC;AAAA,EAEA,UAAU,GAAqB,EAAA;AAC7B,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,SAAA,CAAU,GAAG,CAAA;AAAA;AAClC;AAAA,EAEA,kBAAkB,GAAiC,EAAA;AACjD,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,iBAAA,CAAkB,GAAG,CAAA;AAAA;AAC1C;AAAA,EAEA,eAAe,GAAuB,EAAA;AACpC,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,cAAA,CAAe,GAAG,CAAA;AAAA;AACvC;AAAA,EAEA,uBAAuB,GAAmC,EAAA;AACxD,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,sBAAA,CAAuB,GAAG,CAAA;AAAA;AAC/C;AAAA,EAEA,UAAU,GAAqB,EAAA;AAC7B,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,SAAA,CAAU,GAAG,CAAA;AAAA;AAClC;AAAA,EAEA,kBAAkB,GAAiC,EAAA;AACjD,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,iBAAA,CAAkB,GAAG,CAAA;AAAA;AAC1C;AAAA,EAEA,WAAW,GAAsB,EAAA;AAC/B,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,UAAA,CAAW,GAAG,CAAA;AAAA;AACnC;AAAA,EAEA,mBAAmB,GAAkC,EAAA;AACnD,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,kBAAA,CAAmB,GAAG,CAAA;AAAA;AAC3C;AAAA,EAEA,UAAU,GAAqB,EAAA;AAC7B,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,SAAA,CAAU,GAAG,CAAA;AAAA;AAClC;AAAA,EAEA,kBAAkB,GAAiC,EAAA;AACjD,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,iBAAA,CAAkB,GAAG,CAAA;AAAA;AAC1C;AAAA,EAEA,eAAe,GAAuB,EAAA;AACpC,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,cAAA,CAAe,GAAG,CAAA;AAAA;AACvC;AAAA,EAEA,uBAAuB,GAAmC,EAAA;AACxD,IAAO,OAAA,IAAA,CAAK,MAAO,CAAA,sBAAA,CAAuB,GAAG,CAAA;AAAA;AAEjD;;;;"}