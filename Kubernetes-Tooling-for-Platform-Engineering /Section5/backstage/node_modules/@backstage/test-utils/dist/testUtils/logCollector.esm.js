const allCategories = ["log", "warn", "error"];
function withLogCollector(logsToCollect, callback) {
  const oneArg = !callback;
  const actualCallback = oneArg ? logsToCollect : callback;
  const categories = oneArg ? allCategories : logsToCollect;
  const logs = {
    log: new Array(),
    warn: new Array(),
    error: new Array()
  };
  const origLog = console.log;
  const origWarn = console.warn;
  const origError = console.error;
  if (categories.includes("log")) {
    console.log = (message) => {
      logs.log.push(message);
    };
  }
  if (categories.includes("warn")) {
    console.warn = (message) => {
      logs.warn.push(message);
    };
  }
  if (categories.includes("error")) {
    console.error = (message) => {
      logs.error.push(message);
    };
  }
  const restore = () => {
    console.log = origLog;
    console.warn = origWarn;
    console.error = origError;
  };
  try {
    const ret = actualCallback();
    if (!ret || !ret.then) {
      restore();
      return logs;
    }
    return ret.then(
      () => {
        restore();
        return logs;
      },
      (error) => {
        restore();
        throw error;
      }
    );
  } catch (error) {
    restore();
    throw error;
  }
}

export { withLogCollector };
//# sourceMappingURL=logCollector.esm.js.map
