'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');
var strategy = require('./strategy.cjs.js');

const microsoftAuthenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  scopes: {
    required: ["email", "openid", "offline_access", "user.read"],
    transform({ requested, granted, required, additional }) {
      const hasResourceScope = Array.from(requested).some((s) => s.includes("/"));
      if (hasResourceScope) {
        return [...requested, "offline_access"];
      }
      return [...requested, ...granted, ...required, ...additional];
    }
  },
  initialize({ callbackUrl, config }) {
    const clientId = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    const tenantId = config.getString("tenantId");
    const domainHint = config.getOptionalString("domainHint");
    const skipUserProfile = config.getOptionalBoolean("skipUserProfile") ?? false;
    const strategy$1 = new strategy.ExtendedMicrosoftStrategy(
      {
        clientID: clientId,
        clientSecret,
        callbackURL: callbackUrl,
        tenant: tenantId
      },
      (accessToken, refreshToken, params, fullProfile, done) => {
        done(void 0, { fullProfile, params, accessToken }, { refreshToken });
      }
    );
    strategy$1.setSkipUserProfile(skipUserProfile);
    const helper = pluginAuthNode.PassportOAuthAuthenticatorHelper.from(strategy$1);
    return {
      helper,
      domainHint
    };
  },
  async start(input, ctx) {
    const options = {
      accessType: "offline"
    };
    if (ctx.domainHint !== void 0) {
      options.domain_hint = ctx.domainHint;
    }
    return ctx.helper.start(input, options);
  },
  async authenticate(input, ctx) {
    return ctx.helper.authenticate(input);
  },
  async refresh(input, ctx) {
    return ctx.helper.refresh(input);
  }
});

exports.microsoftAuthenticator = microsoftAuthenticator;
//# sourceMappingURL=authenticator.cjs.js.map
