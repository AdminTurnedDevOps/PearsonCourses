'use strict';

var pluginAuthNode = require('@backstage/plugin-auth-node');

exports.microsoftSignInResolvers = void 0;
((microsoftSignInResolvers2) => {
  microsoftSignInResolvers2.emailMatchingUserEntityAnnotation = pluginAuthNode.createSignInResolverFactory({
    create() {
      return async (info, ctx) => {
        const { profile } = info;
        if (!profile.email) {
          throw new Error("Microsoft profile contained no email");
        }
        return ctx.signInWithCatalogUser({
          annotations: {
            "microsoft.com/email": profile.email
          }
        });
      };
    }
  });
  microsoftSignInResolvers2.userIdMatchingUserEntityAnnotation = pluginAuthNode.createSignInResolverFactory(
    {
      create() {
        return async (info, ctx) => {
          const { result } = info;
          const id = result.fullProfile.id;
          if (!id) {
            throw new Error("Microsoft profile contained no id");
          }
          return ctx.signInWithCatalogUser({
            annotations: {
              "graph.microsoft.com/user-id": id
            }
          });
        };
      }
    }
  );
})(exports.microsoftSignInResolvers || (exports.microsoftSignInResolvers = {}));
//# sourceMappingURL=resolvers.cjs.js.map
