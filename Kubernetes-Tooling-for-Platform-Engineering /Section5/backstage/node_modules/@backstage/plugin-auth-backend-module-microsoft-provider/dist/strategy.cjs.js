'use strict';

var jose = require('jose');
var passportMicrosoft = require('passport-microsoft');

class ExtendedMicrosoftStrategy extends passportMicrosoft.Strategy {
  shouldSkipUserProfile = false;
  setSkipUserProfile(shouldSkipUserProfile) {
    this.shouldSkipUserProfile = shouldSkipUserProfile;
  }
  userProfile(accessToken, done) {
    if (this.skipUserProfile(accessToken)) {
      done(null, void 0);
      return;
    }
    super.userProfile(
      accessToken,
      (err, profile) => {
        if (!profile || profile.photos) {
          done(err, profile);
          return;
        }
        this.getProfilePhotos(accessToken).then((photos) => {
          profile.photos = photos;
          done(err, profile);
        });
      }
    );
  }
  hasGraphReadScope(accessToken) {
    const { aud, scp } = jose.decodeJwt(accessToken);
    return aud === "00000003-0000-0000-c000-000000000000" && !!scp && scp.split(" ").map((s) => s.toLocaleLowerCase("en-US")).some(
      (s) => [
        "https://graph.microsoft.com/user.read",
        "https://graph.microsoft.com/user.read.all",
        "user.read",
        "user.read.all"
      ].includes(s)
    );
  }
  skipUserProfile(accessToken) {
    try {
      return this.shouldSkipUserProfile || !this.hasGraphReadScope(accessToken);
    } catch {
      return false;
    }
  }
  async getProfilePhotos(accessToken) {
    return this.getCurrentUserPhoto(accessToken, "96x96").then(
      (photo) => photo ? [{ value: photo }] : void 0
    );
  }
  async getCurrentUserPhoto(accessToken, size) {
    try {
      const res = await fetch(
        `https://graph.microsoft.com/v1.0/me/photos/${size}/$value`,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`
          }
        }
      );
      const data = await res.arrayBuffer();
      return `data:image/jpeg;base64,${Buffer.from(data).toString("base64")}`;
    } catch (error) {
      return void 0;
    }
  }
}

exports.ExtendedMicrosoftStrategy = ExtendedMicrosoftStrategy;
//# sourceMappingURL=strategy.cjs.js.map
