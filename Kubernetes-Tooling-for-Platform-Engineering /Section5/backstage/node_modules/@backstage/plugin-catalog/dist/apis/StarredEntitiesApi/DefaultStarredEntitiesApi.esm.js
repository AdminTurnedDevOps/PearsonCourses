import ObservableImpl from 'zen-observable';
import { performMigrationToTheNewBucket } from './migration.esm.js';

class DefaultStarredEntitiesApi {
  settingsStore;
  starredEntities;
  constructor(opts) {
    performMigrationToTheNewBucket(opts).then();
    this.settingsStore = opts.storageApi.forBucket("starredEntities");
    this.starredEntities = new Set(
      this.settingsStore.snapshot("entityRefs").value ?? []
    );
    this.settingsStore.observe$("entityRefs").subscribe({
      next: (next) => {
        this.starredEntities = new Set(next.value ?? []);
        this.notifyChanges();
      }
    });
  }
  async toggleStarred(entityRef) {
    if (this.starredEntities.has(entityRef)) {
      this.starredEntities.delete(entityRef);
    } else {
      this.starredEntities.add(entityRef);
    }
    await this.settingsStore.set(
      "entityRefs",
      Array.from(this.starredEntities)
    );
  }
  starredEntitie$() {
    return this.observable;
  }
  subscribers = /* @__PURE__ */ new Set();
  observable = new ObservableImpl((subscriber) => {
    subscriber.next(new Set(this.starredEntities));
    this.subscribers.add(subscriber);
    return () => {
      this.subscribers.delete(subscriber);
    };
  });
  notifyChanges() {
    for (const subscription of this.subscribers) {
      subscription.next(new Set(this.starredEntities));
    }
  }
}

export { DefaultStarredEntitiesApi };
//# sourceMappingURL=DefaultStarredEntitiesApi.esm.js.map
