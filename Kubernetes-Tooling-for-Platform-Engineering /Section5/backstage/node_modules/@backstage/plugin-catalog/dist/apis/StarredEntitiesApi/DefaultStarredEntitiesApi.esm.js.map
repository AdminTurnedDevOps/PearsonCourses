{"version":3,"file":"DefaultStarredEntitiesApi.esm.js","sources":["../../../src/apis/StarredEntitiesApi/DefaultStarredEntitiesApi.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageApi } from '@backstage/core-plugin-api';\nimport { StarredEntitiesApi } from '@backstage/plugin-catalog-react';\nimport { Observable } from '@backstage/types';\nimport ObservableImpl from 'zen-observable';\nimport { performMigrationToTheNewBucket } from './migration';\n\n/**\n * Default implementation of the StarredEntitiesApi that is backed by the StorageApi.\n *\n * @public\n */\nexport class DefaultStarredEntitiesApi implements StarredEntitiesApi {\n  private readonly settingsStore: StorageApi;\n  private starredEntities: Set<string>;\n\n  constructor(opts: { storageApi: StorageApi }) {\n    // no need to await. The updated content will be caught by the observe$\n    performMigrationToTheNewBucket(opts).then();\n\n    this.settingsStore = opts.storageApi.forBucket('starredEntities');\n\n    this.starredEntities = new Set(\n      this.settingsStore.snapshot<string[]>('entityRefs').value ?? [],\n    );\n\n    this.settingsStore.observe$<string[]>('entityRefs').subscribe({\n      next: next => {\n        this.starredEntities = new Set(next.value ?? []);\n        this.notifyChanges();\n      },\n    });\n  }\n\n  async toggleStarred(entityRef: string): Promise<void> {\n    if (this.starredEntities.has(entityRef)) {\n      this.starredEntities.delete(entityRef);\n    } else {\n      this.starredEntities.add(entityRef);\n    }\n\n    await this.settingsStore.set(\n      'entityRefs',\n      Array.from(this.starredEntities),\n    );\n  }\n\n  starredEntitie$(): Observable<Set<string>> {\n    return this.observable;\n  }\n\n  private readonly subscribers = new Set<\n    ZenObservable.SubscriptionObserver<Set<string>>\n  >();\n\n  private readonly observable = new ObservableImpl<Set<string>>(subscriber => {\n    // forward the latest value\n    subscriber.next(new Set(this.starredEntities));\n\n    this.subscribers.add(subscriber);\n    return () => {\n      this.subscribers.delete(subscriber);\n    };\n  });\n\n  private notifyChanges() {\n    for (const subscription of this.subscribers) {\n      subscription.next(new Set(this.starredEntities));\n    }\n  }\n}\n"],"names":[],"mappings":";;;AA2BO,MAAM,yBAAwD,CAAA;AAAA,EAClD,aAAA;AAAA,EACT,eAAA;AAAA,EAER,YAAY,IAAkC,EAAA;AAE5C,IAA+B,8BAAA,CAAA,IAAI,EAAE,IAAK,EAAA;AAE1C,IAAA,IAAA,CAAK,aAAgB,GAAA,IAAA,CAAK,UAAW,CAAA,SAAA,CAAU,iBAAiB,CAAA;AAEhE,IAAA,IAAA,CAAK,kBAAkB,IAAI,GAAA;AAAA,MACzB,KAAK,aAAc,CAAA,QAAA,CAAmB,YAAY,CAAA,CAAE,SAAS;AAAC,KAChE;AAEA,IAAA,IAAA,CAAK,aAAc,CAAA,QAAA,CAAmB,YAAY,CAAA,CAAE,SAAU,CAAA;AAAA,MAC5D,MAAM,CAAQ,IAAA,KAAA;AACZ,QAAA,IAAA,CAAK,kBAAkB,IAAI,GAAA,CAAI,IAAK,CAAA,KAAA,IAAS,EAAE,CAAA;AAC/C,QAAA,IAAA,CAAK,aAAc,EAAA;AAAA;AACrB,KACD,CAAA;AAAA;AACH,EAEA,MAAM,cAAc,SAAkC,EAAA;AACpD,IAAA,IAAI,IAAK,CAAA,eAAA,CAAgB,GAAI,CAAA,SAAS,CAAG,EAAA;AACvC,MAAK,IAAA,CAAA,eAAA,CAAgB,OAAO,SAAS,CAAA;AAAA,KAChC,MAAA;AACL,MAAK,IAAA,CAAA,eAAA,CAAgB,IAAI,SAAS,CAAA;AAAA;AAGpC,IAAA,MAAM,KAAK,aAAc,CAAA,GAAA;AAAA,MACvB,YAAA;AAAA,MACA,KAAA,CAAM,IAAK,CAAA,IAAA,CAAK,eAAe;AAAA,KACjC;AAAA;AACF,EAEA,eAA2C,GAAA;AACzC,IAAA,OAAO,IAAK,CAAA,UAAA;AAAA;AACd,EAEiB,WAAA,uBAAkB,GAEjC,EAAA;AAAA,EAEe,UAAA,GAAa,IAAI,cAAA,CAA4B,CAAc,UAAA,KAAA;AAE1E,IAAA,UAAA,CAAW,IAAK,CAAA,IAAI,GAAI,CAAA,IAAA,CAAK,eAAe,CAAC,CAAA;AAE7C,IAAK,IAAA,CAAA,WAAA,CAAY,IAAI,UAAU,CAAA;AAC/B,IAAA,OAAO,MAAM;AACX,MAAK,IAAA,CAAA,WAAA,CAAY,OAAO,UAAU,CAAA;AAAA,KACpC;AAAA,GACD,CAAA;AAAA,EAEO,aAAgB,GAAA;AACtB,IAAW,KAAA,MAAA,YAAA,IAAgB,KAAK,WAAa,EAAA;AAC3C,MAAA,YAAA,CAAa,IAAK,CAAA,IAAI,GAAI,CAAA,IAAA,CAAK,eAAe,CAAC,CAAA;AAAA;AACjD;AAEJ;;;;"}