{"version":3,"file":"migration.esm.js","sources":["../../../src/apis/StarredEntitiesApi/migration.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { StorageApi } from '@backstage/core-plugin-api';\nimport { isArray, isString } from 'lodash';\n\n/**\n * Migrate the starred entities from the old format (entity:<kind>:<namespace>:<name>) from the\n * old storage location (/settings/starredEntities) to entity references in the new location\n * (/starredEntities/entityRefs).\n *\n * This will only be executed once since the old location is cleared.\n *\n * @param storageApi - the StorageApi to migrate\n */\nexport async function performMigrationToTheNewBucket({\n  storageApi,\n}: {\n  storageApi: StorageApi;\n}) {\n  const source = storageApi.forBucket('settings');\n  const target = storageApi.forBucket('starredEntities');\n\n  const oldStarredEntities = source.snapshot('starredEntities').value;\n\n  if (!isArray(oldStarredEntities)) {\n    // nothing to do\n    return;\n  }\n  const targetEntities = new Set(\n    target.snapshot<string[]>('entityRefs').value ?? [],\n  );\n\n  oldStarredEntities\n    .filter(isString)\n    // extract the old format 'entity:<kind>:<namespace>:<name>'\n    .map(old => old.split(':'))\n    // check if the format is valid\n    .filter(split => split.length === 4 && split[0] === 'entity')\n    // convert to entity references\n    .map(([_, kind, namespace, name]) =>\n      stringifyEntityRef({ kind, namespace, name }),\n    )\n    .forEach(e => targetEntities.add(e));\n\n  await target.set('entityRefs', Array.from(targetEntities));\n\n  await source.remove('starredEntities');\n}\n"],"names":[],"mappings":";;;AA6BA,eAAsB,8BAA+B,CAAA;AAAA,EACnD;AACF,CAEG,EAAA;AACD,EAAM,MAAA,MAAA,GAAS,UAAW,CAAA,SAAA,CAAU,UAAU,CAAA;AAC9C,EAAM,MAAA,MAAA,GAAS,UAAW,CAAA,SAAA,CAAU,iBAAiB,CAAA;AAErD,EAAA,MAAM,kBAAqB,GAAA,MAAA,CAAO,QAAS,CAAA,iBAAiB,CAAE,CAAA,KAAA;AAE9D,EAAI,IAAA,CAAC,OAAQ,CAAA,kBAAkB,CAAG,EAAA;AAEhC,IAAA;AAAA;AAEF,EAAA,MAAM,iBAAiB,IAAI,GAAA;AAAA,IACzB,MAAO,CAAA,QAAA,CAAmB,YAAY,CAAA,CAAE,SAAS;AAAC,GACpD;AAEA,EAAA,kBAAA,CACG,OAAO,QAAQ,CAAA,CAEf,IAAI,CAAO,GAAA,KAAA,GAAA,CAAI,MAAM,GAAG,CAAC,EAEzB,MAAO,CAAA,CAAA,KAAA,KAAS,MAAM,MAAW,KAAA,CAAA,IAAK,MAAM,CAAC,CAAA,KAAM,QAAQ,CAE3D,CAAA,GAAA;AAAA,IAAI,CAAC,CAAC,CAAG,EAAA,IAAA,EAAM,SAAW,EAAA,IAAI,CAC7B,KAAA,kBAAA,CAAmB,EAAE,IAAA,EAAM,SAAW,EAAA,IAAA,EAAM;AAAA,IAE7C,OAAQ,CAAA,CAAA,CAAA,KAAK,cAAe,CAAA,GAAA,CAAI,CAAC,CAAC,CAAA;AAErC,EAAA,MAAM,OAAO,GAAI,CAAA,YAAA,EAAc,KAAM,CAAA,IAAA,CAAK,cAAc,CAAC,CAAA;AAEzD,EAAM,MAAA,MAAA,CAAO,OAAO,iBAAiB,CAAA;AACvC;;;;"}