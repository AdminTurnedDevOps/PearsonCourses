{"version":3,"file":"conditions.esm.js","sources":["../../../src/components/EntitySwitch/conditions.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\n\n/** @public */\nexport interface EntityPredicates {\n  kind?: string | string[];\n  type?: string | string[];\n}\n\nfunction strCmp(a: unknown, b: string | undefined): boolean {\n  return Boolean(\n    a &&\n      typeof a === 'string' &&\n      a?.toLocaleLowerCase('en-US') === b?.toLocaleLowerCase('en-US'),\n  );\n}\n\nfunction strCmpAll(value: unknown, cmpValues: string | string[]) {\n  return typeof cmpValues === 'string'\n    ? strCmp(value, cmpValues)\n    : cmpValues.length === 0 || cmpValues.some(cmpVal => strCmp(value, cmpVal));\n}\n\n/**\n * For use in EntitySwitch.Case. Matches if the entity is of a given kind.\n * @public\n */\nexport function isKind(kinds: string | string[]) {\n  return isEntityWith({ kind: kinds });\n}\n\n/**\n * For use in EntitySwitch.Case. Matches if the entity is a Component of a given spec.type.\n * @public\n */\nexport function isComponentType(types: string | string[]) {\n  return isEntityWith({ kind: 'component', type: types });\n}\n\n/**\n * For use in EntitySwitch.Case. Matches if the entity is a Resource of a given spec.type.\n * @public\n */\nexport function isResourceType(types: string | string[]) {\n  return isEntityWith({ kind: 'resource', type: types });\n}\n\n/**\n * For use in EntitySwitch.Case. Matches if the entity is an API of a given spec.type.\n * @public\n */\nexport function isApiType(types: string | string[]) {\n  return isEntityWith({ kind: 'api', type: types });\n}\n\n/**\n * For use in EntitySwitch.Case. Matches if the entity is the specified kind and type (if present).\n * @public\n */\nexport function isEntityWith(predicate: EntityPredicates) {\n  return (entity: Entity) => {\n    if (predicate.kind && !strCmpAll(entity.kind, predicate.kind)) {\n      return false;\n    }\n\n    if (predicate.type && !strCmpAll(entity.spec?.type, predicate.type)) {\n      return false;\n    }\n\n    // there's no type check, return true\n    return true;\n  };\n}\n\n/**\n * For use in EntitySwitch.Case. Matches if the entity is in a given namespace.\n * @public\n */\nexport function isNamespace(namespaces: string | string[]) {\n  return (entity: Entity) => strCmpAll(entity.metadata?.namespace, namespaces);\n}\n"],"names":[],"mappings":"AAwBA,SAAS,MAAA,CAAO,GAAY,CAAgC,EAAA;AAC1D,EAAO,OAAA,OAAA;AAAA,IACL,CAAA,IACE,OAAO,CAAA,KAAM,QACb,IAAA,CAAA,EAAG,kBAAkB,OAAO,CAAA,KAAM,CAAG,EAAA,iBAAA,CAAkB,OAAO;AAAA,GAClE;AACF;AAEA,SAAS,SAAA,CAAU,OAAgB,SAA8B,EAAA;AAC/D,EAAA,OAAO,OAAO,SAAc,KAAA,QAAA,GACxB,MAAO,CAAA,KAAA,EAAO,SAAS,CACvB,GAAA,SAAA,CAAU,MAAW,KAAA,CAAA,IAAK,UAAU,IAAK,CAAA,CAAA,MAAA,KAAU,MAAO,CAAA,KAAA,EAAO,MAAM,CAAC,CAAA;AAC9E;AAMO,SAAS,OAAO,KAA0B,EAAA;AAC/C,EAAA,OAAO,YAAa,CAAA,EAAE,IAAM,EAAA,KAAA,EAAO,CAAA;AACrC;AAMO,SAAS,gBAAgB,KAA0B,EAAA;AACxD,EAAA,OAAO,aAAa,EAAE,IAAA,EAAM,WAAa,EAAA,IAAA,EAAM,OAAO,CAAA;AACxD;AAMO,SAAS,eAAe,KAA0B,EAAA;AACvD,EAAA,OAAO,aAAa,EAAE,IAAA,EAAM,UAAY,EAAA,IAAA,EAAM,OAAO,CAAA;AACvD;AAMO,SAAS,UAAU,KAA0B,EAAA;AAClD,EAAA,OAAO,aAAa,EAAE,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,OAAO,CAAA;AAClD;AAMO,SAAS,aAAa,SAA6B,EAAA;AACxD,EAAA,OAAO,CAAC,MAAmB,KAAA;AACzB,IAAI,IAAA,SAAA,CAAU,QAAQ,CAAC,SAAA,CAAU,OAAO,IAAM,EAAA,SAAA,CAAU,IAAI,CAAG,EAAA;AAC7D,MAAO,OAAA,KAAA;AAAA;AAGT,IAAI,IAAA,SAAA,CAAU,QAAQ,CAAC,SAAA,CAAU,OAAO,IAAM,EAAA,IAAA,EAAM,SAAU,CAAA,IAAI,CAAG,EAAA;AACnE,MAAO,OAAA,KAAA;AAAA;AAIT,IAAO,OAAA,IAAA;AAAA,GACT;AACF;AAMO,SAAS,YAAY,UAA+B,EAAA;AACzD,EAAA,OAAO,CAAC,MAAmB,KAAA,SAAA,CAAU,MAAO,CAAA,QAAA,EAAU,WAAW,UAAU,CAAA;AAC7E;;;;"}