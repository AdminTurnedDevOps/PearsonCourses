import { columnFactories } from './columns.esm.js';

const defaultCatalogTableColumnsFunc = ({
  filters,
  entities
}) => {
  const showTypeColumn = filters.type === void 0;
  return [
    columnFactories.createTitleColumn({ hidden: true }),
    columnFactories.createNameColumn({ defaultKind: filters.kind?.value }),
    ...createEntitySpecificColumns()
  ];
  function createEntitySpecificColumns() {
    const descriptionTagColumns = [
      columnFactories.createMetadataDescriptionColumn(),
      columnFactories.createTagsColumn()
    ];
    const baseColumns = [
      columnFactories.createSystemColumn(),
      columnFactories.createOwnerColumn(),
      columnFactories.createSpecTypeColumn({ hidden: !showTypeColumn }),
      columnFactories.createSpecLifecycleColumn()
    ];
    switch (filters.kind?.value) {
      case "user":
        return [...descriptionTagColumns];
      case "domain":
      case "system":
        return [columnFactories.createOwnerColumn(), ...descriptionTagColumns];
      case "group":
      case "template":
        return [
          columnFactories.createSpecTypeColumn({ hidden: !showTypeColumn }),
          ...descriptionTagColumns
        ];
      case "location":
        return [
          columnFactories.createSpecTypeColumn({ hidden: !showTypeColumn }),
          columnFactories.createSpecTargetsColumn()
        ];
      default:
        return entities.every((entity) => entity.metadata.namespace === "default") ? [...baseColumns, ...descriptionTagColumns] : [
          ...baseColumns,
          columnFactories.createNamespaceColumn(),
          ...descriptionTagColumns
        ];
    }
  }
};

export { defaultCatalogTableColumnsFunc };
//# sourceMappingURL=defaultCatalogTableColumnsFunc.esm.js.map
