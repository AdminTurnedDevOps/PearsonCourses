import { RELATION_PART_OF, RELATION_OWNED_BY, getEntitySourceLocation } from '@backstage/catalog-model';
import { getEntityRelations, EntityRefLinks } from '@backstage/plugin-catalog-react';
import Chip from '@material-ui/core/Chip';
import Grid from '@material-ui/core/Grid';
import { makeStyles } from '@material-ui/core/styles';
import { MarkdownContent } from '@backstage/core-components';
import React from 'react';
import { AboutField } from './AboutField.esm.js';
import { LinksGridList } from '../EntityLinksCard/LinksGridList.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { catalogTranslationRef } from '../../alpha/translation.esm.js';

const useStyles = makeStyles({
  description: {
    wordBreak: "break-word"
  }
});
function getLocationTargetHref(target, type, entitySourceLocation) {
  if (type === "url" || target.includes("://")) {
    return target;
  }
  const srcLocationUrl = entitySourceLocation.type === "file" ? `file://${entitySourceLocation.target}` : entitySourceLocation.target;
  if (type === "file" || entitySourceLocation.type === "file") {
    return new URL(target, srcLocationUrl).href;
  }
  return srcLocationUrl;
}
function AboutContent(props) {
  const { entity } = props;
  const classes = useStyles();
  const { t } = useTranslationRef(catalogTranslationRef);
  const isSystem = entity.kind.toLocaleLowerCase("en-US") === "system";
  const isResource = entity.kind.toLocaleLowerCase("en-US") === "resource";
  const isComponent = entity.kind.toLocaleLowerCase("en-US") === "component";
  const isAPI = entity.kind.toLocaleLowerCase("en-US") === "api";
  const isTemplate = entity.kind.toLocaleLowerCase("en-US") === "template";
  const isLocation = entity.kind.toLocaleLowerCase("en-US") === "location";
  const isGroup = entity.kind.toLocaleLowerCase("en-US") === "group";
  const partOfSystemRelations = getEntityRelations(entity, RELATION_PART_OF, {
    kind: "system"
  });
  const partOfComponentRelations = getEntityRelations(
    entity,
    RELATION_PART_OF,
    {
      kind: "component"
    }
  );
  const partOfDomainRelations = getEntityRelations(entity, RELATION_PART_OF, {
    kind: "domain"
  });
  const ownedByRelations = getEntityRelations(entity, RELATION_OWNED_BY);
  let entitySourceLocation;
  try {
    entitySourceLocation = getEntitySourceLocation(entity);
  } catch (e) {
    entitySourceLocation = void 0;
  }
  return /* @__PURE__ */ React.createElement(Grid, { container: true }, /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: t("aboutCard.descriptionField.label"),
      gridSizes: { xs: 12 }
    },
    /* @__PURE__ */ React.createElement(
      MarkdownContent,
      {
        className: classes.description,
        content: entity?.metadata?.description || t("aboutCard.descriptionField.value")
      }
    )
  ), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: t("aboutCard.ownerField.label"),
      value: t("aboutCard.ownerField.value"),
      className: classes.description,
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    ownedByRelations.length > 0 && /* @__PURE__ */ React.createElement(EntityRefLinks, { entityRefs: ownedByRelations, defaultKind: "group" })
  ), (isSystem || partOfDomainRelations.length > 0) && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: t("aboutCard.domainField.label"),
      value: t("aboutCard.domainField.value"),
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    partOfDomainRelations.length > 0 && /* @__PURE__ */ React.createElement(
      EntityRefLinks,
      {
        entityRefs: partOfDomainRelations,
        defaultKind: "domain"
      }
    )
  ), (isAPI || isComponent || isResource || partOfSystemRelations.length > 0) && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: t("aboutCard.systemField.label"),
      value: t("aboutCard.systemField.value"),
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    partOfSystemRelations.length > 0 && /* @__PURE__ */ React.createElement(
      EntityRefLinks,
      {
        entityRefs: partOfSystemRelations,
        defaultKind: "system"
      }
    )
  ), isComponent && partOfComponentRelations.length > 0 && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: t("aboutCard.parentComponentField.label"),
      value: t("aboutCard.parentComponentField.value"),
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    /* @__PURE__ */ React.createElement(
      EntityRefLinks,
      {
        entityRefs: partOfComponentRelations,
        defaultKind: "component"
      }
    )
  ), (isAPI || isComponent || isResource || isTemplate || isGroup || isLocation || typeof entity?.spec?.type === "string") && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: t("aboutCard.typeField.label"),
      value: entity?.spec?.type,
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    }
  ), (isAPI || isComponent || typeof entity?.spec?.lifecycle === "string") && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: t("aboutCard.lifecycleField.label"),
      value: entity?.spec?.lifecycle,
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    }
  ), /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: t("aboutCard.tagsField.label"),
      value: t("aboutCard.tagsField.value"),
      gridSizes: { xs: 12, sm: 6, lg: 4 }
    },
    (entity?.metadata?.tags || []).map((tag) => /* @__PURE__ */ React.createElement(Chip, { key: tag, size: "small", label: tag }))
  ), isLocation && (entity?.spec?.targets || entity?.spec?.target) && /* @__PURE__ */ React.createElement(
    AboutField,
    {
      label: t("aboutCard.targetsField.label"),
      gridSizes: { xs: 12 }
    },
    /* @__PURE__ */ React.createElement(
      LinksGridList,
      {
        cols: 1,
        items: (entity.spec.targets || [entity.spec.target]).map((target) => target).map((target) => ({
          text: target,
          href: getLocationTargetHref(
            target,
            entity?.spec?.type || "unknown",
            entitySourceLocation
          )
        }))
      }
    )
  ));
}

export { AboutContent };
//# sourceMappingURL=AboutContent.esm.js.map
