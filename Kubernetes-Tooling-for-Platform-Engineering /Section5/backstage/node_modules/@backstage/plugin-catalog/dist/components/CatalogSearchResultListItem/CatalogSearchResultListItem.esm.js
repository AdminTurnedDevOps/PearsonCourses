import React from 'react';
import Box from '@material-ui/core/Box';
import Chip from '@material-ui/core/Chip';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import { Link } from '@backstage/core-components';
import { HighlightedSearchResultText } from '@backstage/plugin-search-react';
import { catalogTranslationRef } from '../../alpha/translation.esm.js';
import { useTranslationRef } from '@backstage/frontend-plugin-api';

const useStyles = makeStyles(
  {
    item: {
      display: "flex"
    },
    flexContainer: {
      flexWrap: "wrap"
    },
    itemText: {
      width: "100%",
      wordBreak: "break-all",
      marginBottom: "1rem"
    }
  },
  { name: "CatalogSearchResultListItem" }
);
function CatalogSearchResultListItem(props) {
  const result = props.result;
  const highlight = props.highlight;
  const classes = useStyles();
  const { t } = useTranslationRef(catalogTranslationRef);
  if (!result) return null;
  return /* @__PURE__ */ React.createElement("div", { className: classes.item }, props.icon && /* @__PURE__ */ React.createElement(ListItemIcon, null, typeof props.icon === "function" ? props.icon(result) : props.icon), /* @__PURE__ */ React.createElement("div", { className: classes.flexContainer }, /* @__PURE__ */ React.createElement(
    ListItemText,
    {
      className: classes.itemText,
      primaryTypographyProps: { variant: "h6" },
      primary: /* @__PURE__ */ React.createElement(Link, { noTrack: true, to: result.location }, highlight?.fields.title ? /* @__PURE__ */ React.createElement(
        HighlightedSearchResultText,
        {
          text: highlight.fields.title,
          preTag: highlight.preTag,
          postTag: highlight.postTag
        }
      ) : result.title),
      secondary: /* @__PURE__ */ React.createElement(
        Typography,
        {
          component: "span",
          style: {
            display: "-webkit-box",
            WebkitBoxOrient: "vertical",
            WebkitLineClamp: props.lineClamp,
            overflow: "hidden"
          },
          color: "textSecondary",
          variant: "body2"
        },
        highlight?.fields.text ? /* @__PURE__ */ React.createElement(
          HighlightedSearchResultText,
          {
            text: highlight.fields.text,
            preTag: highlight.preTag,
            postTag: highlight.postTag
          }
        ) : result.text
      )
    }
  ), /* @__PURE__ */ React.createElement(Box, null, result.kind && /* @__PURE__ */ React.createElement(Chip, { label: `Kind: ${result.kind}`, size: "small" }), result.type && /* @__PURE__ */ React.createElement(Chip, { label: `Type: ${result.type}`, size: "small" }), result.lifecycle && /* @__PURE__ */ React.createElement(
    Chip,
    {
      label: `${t("searchResultItem.lifecycle")}: ${result.lifecycle}`,
      size: "small"
    }
  ), result.owner && /* @__PURE__ */ React.createElement(
    Chip,
    {
      label: `${t("searchResultItem.Owner")}: ${result.owner}`,
      size: "small"
    }
  ))));
}

export { CatalogSearchResultListItem };
//# sourceMappingURL=CatalogSearchResultListItem.esm.js.map
