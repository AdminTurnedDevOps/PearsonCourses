function strCmp(a, b) {
  return Boolean(
    a && typeof a === "string" && a?.toLocaleLowerCase("en-US") === b?.toLocaleLowerCase("en-US")
  );
}
function strCmpAll(value, cmpValues) {
  return typeof cmpValues === "string" ? strCmp(value, cmpValues) : cmpValues.length === 0 || cmpValues.some((cmpVal) => strCmp(value, cmpVal));
}
function isKind(kinds) {
  return isEntityWith({ kind: kinds });
}
function isComponentType(types) {
  return isEntityWith({ kind: "component", type: types });
}
function isResourceType(types) {
  return isEntityWith({ kind: "resource", type: types });
}
function isApiType(types) {
  return isEntityWith({ kind: "api", type: types });
}
function isEntityWith(predicate) {
  return (entity) => {
    if (predicate.kind && !strCmpAll(entity.kind, predicate.kind)) {
      return false;
    }
    if (predicate.type && !strCmpAll(entity.spec?.type, predicate.type)) {
      return false;
    }
    return true;
  };
}
function isNamespace(namespaces) {
  return (entity) => strCmpAll(entity.metadata?.namespace, namespaces);
}

export { isApiType, isComponentType, isEntityWith, isKind, isNamespace, isResourceType };
//# sourceMappingURL=conditions.esm.js.map
