import Typography from '@material-ui/core/Typography';
import { useEntity, useRelatedEntities, EntityTable } from '@backstage/plugin-catalog-react';
import React from 'react';
import { InfoCard, Progress, ResponseErrorPanel, Link } from '@backstage/core-components';
import { componentEntityColumns, componentEntityHelpLink, asComponentEntities, resourceEntityColumns, resourceEntityHelpLink, asResourceEntities, systemEntityColumns, systemEntityHelpLink, asSystemEntities, domainEntityColumns, domainEntityHelpLink, asDomainEntities } from './presets.esm.js';
import { catalogTranslationRef } from '../../alpha/translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const RelatedEntitiesCard = (props) => {
  const {
    variant = "gridItem",
    title,
    columns,
    entityKind,
    relationType,
    emptyMessage,
    emptyHelpLink,
    asRenderableEntities,
    tableOptions = {}
  } = props;
  const { t } = useTranslationRef(catalogTranslationRef);
  const { entity } = useEntity();
  const { entities, loading, error } = useRelatedEntities(entity, {
    type: relationType,
    kind: entityKind
  });
  if (loading) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title }, /* @__PURE__ */ React.createElement(Progress, null));
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(InfoCard, { variant, title }, /* @__PURE__ */ React.createElement(ResponseErrorPanel, { error }));
  }
  return /* @__PURE__ */ React.createElement(
    EntityTable,
    {
      title,
      variant,
      emptyContent: /* @__PURE__ */ React.createElement("div", { style: { textAlign: "center" } }, /* @__PURE__ */ React.createElement(Typography, { variant: "body1" }, emptyMessage), /* @__PURE__ */ React.createElement(Typography, { variant: "body2" }, /* @__PURE__ */ React.createElement(Link, { to: emptyHelpLink, externalLinkIcon: true }, t("relatedEntitiesCard.emptyHelpLinkTitle")))),
      columns,
      entities: asRenderableEntities(entities || []),
      tableOptions
    }
  );
};
RelatedEntitiesCard.componentEntityColumns = componentEntityColumns;
RelatedEntitiesCard.componentEntityHelpLink = componentEntityHelpLink;
RelatedEntitiesCard.asComponentEntities = asComponentEntities;
RelatedEntitiesCard.resourceEntityColumns = resourceEntityColumns;
RelatedEntitiesCard.resourceEntityHelpLink = resourceEntityHelpLink;
RelatedEntitiesCard.asResourceEntities = asResourceEntities;
RelatedEntitiesCard.systemEntityColumns = systemEntityColumns;
RelatedEntitiesCard.systemEntityHelpLink = systemEntityHelpLink;
RelatedEntitiesCard.asSystemEntities = asSystemEntities;
RelatedEntitiesCard.domainEntityColums = domainEntityColumns;
RelatedEntitiesCard.domainEntityHelpLink = domainEntityHelpLink;
RelatedEntitiesCard.asDomainEntities = asDomainEntities;

export { RelatedEntitiesCard };
//# sourceMappingURL=RelatedEntitiesCard.esm.js.map
