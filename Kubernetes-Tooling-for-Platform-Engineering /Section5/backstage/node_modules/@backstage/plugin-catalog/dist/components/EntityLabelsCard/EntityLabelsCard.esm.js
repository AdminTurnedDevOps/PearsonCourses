import { useEntity } from '@backstage/plugin-catalog-react';
import React from 'react';
import { InfoCard, Table } from '@backstage/core-components';
import { EntityLabelsEmptyState } from './EntityLabelsEmptyState.esm.js';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import { catalogTranslationRef } from '../../alpha/translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const useStyles = makeStyles((_) => ({
  key: {
    fontWeight: "bold"
  }
}));
const EntityLabelsCard = (props) => {
  const { variant, title } = props;
  const { entity } = useEntity();
  const classes = useStyles();
  const { t } = useTranslationRef(catalogTranslationRef);
  const columns = [
    {
      render: (row) => {
        return /* @__PURE__ */ React.createElement(Typography, { className: classes.key, variant: "body2" }, row.key);
      }
    },
    {
      field: "value"
    }
  ];
  const labels = entity?.metadata?.labels;
  return /* @__PURE__ */ React.createElement(InfoCard, { title: title || t("entityLabelsCard.title"), variant }, !labels || Object.keys(labels).length === 0 ? /* @__PURE__ */ React.createElement(EntityLabelsEmptyState, null) : /* @__PURE__ */ React.createElement(
    Table,
    {
      columns,
      data: Object.keys(labels).map((labelKey) => ({
        key: labelKey,
        value: labels[labelKey]
      })),
      options: {
        search: false,
        showTitle: true,
        loadingType: "linear",
        header: false,
        padding: "dense",
        pageSize: 5,
        toolbar: false,
        paging: Object.keys(labels).length > 5
      }
    }
  ));
};

export { EntityLabelsCard };
//# sourceMappingURL=EntityLabelsCard.esm.js.map
