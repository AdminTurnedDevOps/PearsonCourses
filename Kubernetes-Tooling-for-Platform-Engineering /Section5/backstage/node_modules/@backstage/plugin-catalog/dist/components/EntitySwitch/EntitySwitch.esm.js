import { useAsyncEntity } from '@backstage/plugin-catalog-react';
import React from 'react';
import { attachComponentData, useApiHolder, useElementFilter } from '@backstage/core-plugin-api';
import useAsync from 'react-use/esm/useAsync';

const ENTITY_SWITCH_KEY = "core.backstage.entitySwitch";
const EntitySwitchCaseComponent = (_props) => null;
attachComponentData(EntitySwitchCaseComponent, ENTITY_SWITCH_KEY, true);
const EntitySwitch = (props) => {
  const { entity, loading } = useAsyncEntity();
  const apis = useApiHolder();
  const results = useElementFilter(
    props.children,
    (collection) => collection.selectByComponentData({
      key: ENTITY_SWITCH_KEY,
      withStrictError: "Child of EntitySwitch is not an EntitySwitch.Case"
    }).getElements().flatMap((element) => {
      if (loading && !entity) {
        return [];
      }
      const { if: condition, children: elementsChildren } = element.props;
      if (!entity) {
        return [
          {
            if: condition === void 0,
            children: elementsChildren
          }
        ];
      }
      return [
        {
          if: condition?.(entity, { apis }),
          children: elementsChildren
        }
      ];
    }),
    [apis, entity, loading]
  );
  const hasAsyncCases = results.some(
    (r) => typeof r.if === "object" && "then" in r.if
  );
  if (hasAsyncCases) {
    return /* @__PURE__ */ React.createElement(
      AsyncEntitySwitch,
      {
        results,
        renderMultipleMatches: props.renderMultipleMatches
      }
    );
  }
  if (props.renderMultipleMatches === "all") {
    const children = results.filter((r) => r.if).map((r) => r.children);
    if (children.length === 0) {
      return getDefaultChildren(results);
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
  }
  return results.find((r) => r.if)?.children ?? getDefaultChildren(results);
};
function AsyncEntitySwitch({
  results,
  renderMultipleMatches
}) {
  const { loading, value } = useAsync(async () => {
    const promises = results.map(
      async ({ if: condition, children: output }) => {
        try {
          if (await condition) {
            return output;
          }
        } catch {
        }
        return null;
      }
    );
    if (renderMultipleMatches === "all") {
      const children = (await Promise.all(promises)).filter(Boolean);
      if (children.length === 0) {
        return getDefaultChildren(results);
      }
      return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
    }
    return (await Promise.all(promises)).find(Boolean) ?? getDefaultChildren(results);
  }, [results]);
  if (loading || !value) {
    return null;
  }
  return value;
}
function getDefaultChildren(results) {
  return results.filter((r) => r.if === void 0)[0]?.children ?? null;
}
EntitySwitch.Case = EntitySwitchCaseComponent;

export { EntitySwitch };
//# sourceMappingURL=EntitySwitch.esm.js.map
