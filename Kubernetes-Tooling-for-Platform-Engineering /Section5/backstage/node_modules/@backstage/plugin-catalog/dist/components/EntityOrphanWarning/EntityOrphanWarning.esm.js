import { useEntity } from '@backstage/plugin-catalog-react';
import Alert from '@material-ui/lab/Alert';
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { DeleteEntityDialog } from './DeleteEntityDialog.esm.js';
import { useRouteRef } from '@backstage/core-plugin-api';
import { rootRouteRef } from '../../routes.esm.js';
import { catalogTranslationRef } from '../../alpha/translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

function isOrphan(entity) {
  return entity?.metadata?.annotations?.["backstage.io/orphan"] === "true";
}
function EntityOrphanWarning() {
  const navigate = useNavigate();
  const catalogLink = useRouteRef(rootRouteRef);
  const [confirmationDialogOpen, setConfirmationDialogOpen] = useState(false);
  const { entity } = useEntity();
  const { t } = useTranslationRef(catalogTranslationRef);
  const cleanUpAfterRemoval = async () => {
    setConfirmationDialogOpen(false);
    navigate(catalogLink());
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Alert, { severity: "warning", onClick: () => setConfirmationDialogOpen(true) }, t("deleteEntity.description")), /* @__PURE__ */ React.createElement(
    DeleteEntityDialog,
    {
      open: confirmationDialogOpen,
      entity,
      onConfirm: cleanUpAfterRemoval,
      onClose: () => setConfirmationDialogOpen(false)
    }
  ));
}

export { EntityOrphanWarning, isOrphan };
//# sourceMappingURL=EntityOrphanWarning.esm.js.map
