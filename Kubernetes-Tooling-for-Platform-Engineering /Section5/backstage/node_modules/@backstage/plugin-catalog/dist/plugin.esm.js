import { CatalogClient } from '@backstage/catalog-client';
import { catalogApiRef, starredEntitiesApiRef, entityPresentationApiRef, entityRouteRef } from '@backstage/plugin-catalog-react';
import { rootRouteRef, createComponentRouteRef, viewTechDocRouteRef, createFromTemplateRouteRef, unregisterRedirectRouteRef } from './routes.esm.js';
import { createPlugin, createApiFactory, discoveryApiRef, fetchApiRef, storageApiRef, createRoutableExtension, createComponentExtension } from '@backstage/core-plugin-api';
import { createSearchResultListItemExtension } from '@backstage/plugin-search-react';
import { DefaultEntityPresentationApi } from './apis/EntityPresentationApi/DefaultEntityPresentationApi.esm.js';
import { DefaultStarredEntitiesApi } from './apis/StarredEntitiesApi/DefaultStarredEntitiesApi.esm.js';

const catalogPlugin = createPlugin({
  id: "catalog",
  apis: [
    createApiFactory({
      api: catalogApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        fetchApi: fetchApiRef
      },
      factory: ({ discoveryApi, fetchApi }) => new CatalogClient({ discoveryApi, fetchApi })
    }),
    createApiFactory({
      api: starredEntitiesApiRef,
      deps: { storageApi: storageApiRef },
      factory: ({ storageApi }) => new DefaultStarredEntitiesApi({ storageApi })
    }),
    createApiFactory({
      api: entityPresentationApiRef,
      deps: { catalogApi: catalogApiRef },
      factory: ({ catalogApi }) => DefaultEntityPresentationApi.create({ catalogApi })
    })
  ],
  routes: {
    catalogIndex: rootRouteRef,
    catalogEntity: entityRouteRef
  },
  externalRoutes: {
    createComponent: createComponentRouteRef,
    viewTechDoc: viewTechDocRouteRef,
    createFromTemplate: createFromTemplateRouteRef,
    unregisterRedirect: unregisterRedirectRouteRef
  }
});
const CatalogIndexPage = catalogPlugin.provide(
  createRoutableExtension({
    name: "CatalogIndexPage",
    component: () => import('./components/CatalogPage/index.esm.js').then((m) => m.CatalogPage),
    mountPoint: rootRouteRef
  })
);
const CatalogEntityPage = catalogPlugin.provide(
  createRoutableExtension({
    name: "CatalogEntityPage",
    component: () => import('./components/CatalogEntityPage/index.esm.js').then((m) => m.CatalogEntityPage),
    mountPoint: entityRouteRef
  })
);
const EntityAboutCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityAboutCard",
    component: {
      lazy: () => import('./components/AboutCard/index.esm.js').then((m) => m.AboutCard)
    }
  })
);
const EntityLinksCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityLinksCard",
    component: {
      lazy: () => import('./components/EntityLinksCard/index.esm.js').then((m) => m.EntityLinksCard)
    }
  })
);
const EntityLabelsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityLabelsCard",
    component: {
      lazy: () => import('./components/EntityLabelsCard/index.esm.js').then((m) => m.EntityLabelsCard)
    }
  })
);
const EntityHasSystemsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityHasSystemsCard",
    component: {
      lazy: () => import('./components/HasSystemsCard/index.esm.js').then((m) => m.HasSystemsCard)
    }
  })
);
const EntityHasComponentsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityHasComponentsCard",
    component: {
      lazy: () => import('./components/HasComponentsCard/index.esm.js').then((m) => m.HasComponentsCard)
    }
  })
);
const EntityHasSubcomponentsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityHasSubcomponentsCard",
    component: {
      lazy: () => import('./components/HasSubcomponentsCard/index.esm.js').then(
        (m) => m.HasSubcomponentsCard
      )
    }
  })
);
const EntityHasSubdomainsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityHasSubdomainsCard",
    component: {
      lazy: () => import('./components/HasSubdomainsCard/index.esm.js').then((m) => m.HasSubdomainsCard)
    }
  })
);
const EntityHasResourcesCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityHasResourcesCard",
    component: {
      lazy: () => import('./components/HasResourcesCard/index.esm.js').then((m) => m.HasResourcesCard)
    }
  })
);
const EntityDependsOnComponentsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityDependsOnComponentsCard",
    component: {
      lazy: () => import('./components/DependsOnComponentsCard/index.esm.js').then(
        (m) => m.DependsOnComponentsCard
      )
    }
  })
);
const EntityDependencyOfComponentsCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityDependencyOfComponentsCard",
    component: {
      lazy: () => import('./components/DependencyOfComponentsCard/index.esm.js').then(
        (m) => m.DependencyOfComponentsCard
      )
    }
  })
);
const EntityDependsOnResourcesCard = catalogPlugin.provide(
  createComponentExtension({
    name: "EntityDependsOnResourcesCard",
    component: {
      lazy: () => import('./components/DependsOnResourcesCard/index.esm.js').then(
        (m) => m.DependsOnResourcesCard
      )
    }
  })
);
const RelatedEntitiesCard = catalogPlugin.provide(
  createComponentExtension({
    name: "RelatedEntitiesCard",
    component: {
      lazy: () => import('./components/RelatedEntitiesCard/index.esm.js').then(
        (m) => m.RelatedEntitiesCard
      )
    }
  })
);
const CatalogSearchResultListItem = catalogPlugin.provide(
  createSearchResultListItemExtension({
    name: "CatalogSearchResultListItem",
    component: () => import('./components/CatalogSearchResultListItem/index.esm.js').then(
      (m) => m.CatalogSearchResultListItem
    ),
    predicate: (result) => result.type === "software-catalog"
  })
);

export { CatalogEntityPage, CatalogIndexPage, CatalogSearchResultListItem, EntityAboutCard, EntityDependencyOfComponentsCard, EntityDependsOnComponentsCard, EntityDependsOnResourcesCard, EntityHasComponentsCard, EntityHasResourcesCard, EntityHasSubcomponentsCard, EntityHasSubdomainsCard, EntityHasSystemsCard, EntityLabelsCard, EntityLinksCard, RelatedEntitiesCard, catalogPlugin };
//# sourceMappingURL=plugin.esm.js.map
