{"version":3,"file":"pages.esm.js","sources":["../../src/alpha/pages.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport {\n  compatWrapper,\n  convertLegacyRouteRef,\n} from '@backstage/core-compat-api';\nimport {\n  coreExtensionData,\n  createExtensionInput,\n  PageBlueprint,\n} from '@backstage/frontend-plugin-api';\nimport {\n  AsyncEntityProvider,\n  entityRouteRef,\n} from '@backstage/plugin-catalog-react';\nimport { EntityContentBlueprint } from '@backstage/plugin-catalog-react/alpha';\nimport { rootRouteRef } from '../routes';\nimport { useEntityFromUrl } from '../components/CatalogEntityPage/useEntityFromUrl';\nimport { buildFilterFn } from './filter/FilterWrapper';\n\nexport const catalogPage = PageBlueprint.makeWithOverrides({\n  inputs: {\n    filters: createExtensionInput([coreExtensionData.reactElement]),\n  },\n  factory(originalFactory, { inputs }) {\n    return originalFactory({\n      defaultPath: '/catalog',\n      routeRef: convertLegacyRouteRef(rootRouteRef),\n      loader: async () => {\n        const { BaseCatalogPage } = await import('../components/CatalogPage');\n        const filters = inputs.filters.map(filter =>\n          filter.get(coreExtensionData.reactElement),\n        );\n        return compatWrapper(<BaseCatalogPage filters={<>{filters}</>} />);\n      },\n    });\n  },\n});\n\nexport const catalogEntityPage = PageBlueprint.makeWithOverrides({\n  name: 'entity',\n  inputs: {\n    contents: createExtensionInput([\n      coreExtensionData.reactElement,\n      coreExtensionData.routePath,\n      coreExtensionData.routeRef.optional(),\n      EntityContentBlueprint.dataRefs.title,\n      EntityContentBlueprint.dataRefs.filterFunction.optional(),\n      EntityContentBlueprint.dataRefs.filterExpression.optional(),\n    ]),\n  },\n  factory(originalFactory, { inputs }) {\n    return originalFactory({\n      defaultPath: '/catalog/:namespace/:kind/:name',\n      routeRef: convertLegacyRouteRef(entityRouteRef),\n      loader: async () => {\n        const { EntityLayout } = await import('../components/EntityLayout');\n        const Component = () => {\n          return (\n            <AsyncEntityProvider {...useEntityFromUrl()}>\n              <EntityLayout>\n                {inputs.contents.map(output => {\n                  return (\n                    <EntityLayout.Route\n                      key={output.get(coreExtensionData.routePath)}\n                      path={output.get(coreExtensionData.routePath)}\n                      title={output.get(EntityContentBlueprint.dataRefs.title)}\n                      if={buildFilterFn(\n                        output.get(\n                          EntityContentBlueprint.dataRefs.filterFunction,\n                        ),\n                        output.get(\n                          EntityContentBlueprint.dataRefs.filterExpression,\n                        ),\n                      )}\n                    >\n                      {output.get(coreExtensionData.reactElement)}\n                    </EntityLayout.Route>\n                  );\n                })}\n              </EntityLayout>\n            </AsyncEntityProvider>\n          );\n        };\n        return compatWrapper(<Component />);\n      },\n    });\n  },\n});\n\nexport default [catalogPage, catalogEntityPage];\n"],"names":[],"mappings":"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"}