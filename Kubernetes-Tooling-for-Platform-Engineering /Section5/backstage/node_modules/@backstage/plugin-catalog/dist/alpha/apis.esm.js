import { createApiFactory, discoveryApiRef, fetchApiRef, storageApiRef } from '@backstage/core-plugin-api';
import { CatalogClient } from '@backstage/catalog-client';
import { ApiBlueprint } from '@backstage/frontend-plugin-api';
import { catalogApiRef, starredEntitiesApiRef, entityPresentationApiRef } from '@backstage/plugin-catalog-react';
import { DefaultEntityPresentationApi } from '../apis/EntityPresentationApi/DefaultEntityPresentationApi.esm.js';
import { DefaultStarredEntitiesApi } from '../apis/StarredEntitiesApi/DefaultStarredEntitiesApi.esm.js';

const catalogApi = ApiBlueprint.make({
  params: {
    factory: createApiFactory({
      api: catalogApiRef,
      deps: {
        discoveryApi: discoveryApiRef,
        fetchApi: fetchApiRef
      },
      factory: ({ discoveryApi, fetchApi }) => new CatalogClient({ discoveryApi, fetchApi })
    })
  }
});
const catalogStarredEntitiesApi = ApiBlueprint.make({
  name: "starred-entities",
  params: {
    factory: createApiFactory({
      api: starredEntitiesApiRef,
      deps: { storageApi: storageApiRef },
      factory: ({ storageApi }) => new DefaultStarredEntitiesApi({ storageApi })
    })
  }
});
const entityPresentationApi = ApiBlueprint.make({
  name: "entity-presentation",
  params: {
    factory: createApiFactory({
      api: entityPresentationApiRef,
      deps: { catalogApiImp: catalogApiRef },
      factory: ({ catalogApiImp }) => DefaultEntityPresentationApi.create({ catalogApi: catalogApiImp })
    })
  }
});
var apis = [catalogApi, catalogStarredEntitiesApi, entityPresentationApi];

export { catalogApi, catalogStarredEntitiesApi, apis as default, entityPresentationApi };
//# sourceMappingURL=apis.esm.js.map
