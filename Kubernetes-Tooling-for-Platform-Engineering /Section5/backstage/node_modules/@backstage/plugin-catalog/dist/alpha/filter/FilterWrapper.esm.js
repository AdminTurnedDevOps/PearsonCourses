import Grid from '@material-ui/core/Grid';
import React, { useMemo } from 'react';
import { parseFilterExpression } from './parseFilterExpression.esm.js';

const seenParseErrorExpressionStrings = /* @__PURE__ */ new Set();
const seenDuplicateExpressionStrings = /* @__PURE__ */ new Set();
function buildFilterFn(filterFunction, filterExpression) {
  if (filterFunction && filterExpression && !seenDuplicateExpressionStrings.has(filterExpression)) {
    console.warn(
      `Duplicate entity filter methods found, both '${filterExpression}' as well as a callback function, which is not permitted - using the callback`
    );
    seenDuplicateExpressionStrings.add(filterExpression);
  }
  const filter = filterFunction || filterExpression;
  if (!filter) {
    return () => true;
  } else if (typeof filter === "function") {
    return (subject) => filter(subject);
  }
  const result = parseFilterExpression(filter);
  if (result.expressionParseErrors.length && !seenParseErrorExpressionStrings.has(filter)) {
    console.warn(
      `Error(s) in entity filter expression '${filter}'`,
      result.expressionParseErrors
    );
    seenParseErrorExpressionStrings.add(filter);
  }
  return result.filterFn;
}
function FilterWrapper(props) {
  const { entity, element, filterFunction, filterExpression } = props;
  const filterFn = useMemo(
    () => buildFilterFn(filterFunction, filterExpression),
    [filterFunction, filterExpression]
  );
  return filterFn(entity) ? /* @__PURE__ */ React.createElement(Grid, { item: true, md: 6, xs: 12 }, element) : null;
}

export { FilterWrapper, buildFilterFn };
//# sourceMappingURL=FilterWrapper.esm.js.map
