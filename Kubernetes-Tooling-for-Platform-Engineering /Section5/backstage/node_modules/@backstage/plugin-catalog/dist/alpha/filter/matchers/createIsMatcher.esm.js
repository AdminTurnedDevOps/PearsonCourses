import { InputError } from '@backstage/errors';

const allowedMatchers = {
  orphan: (entity) => Boolean(entity.metadata.annotations?.["backstage.io/orphan"])
};
function createIsMatcher(parameters, onParseError) {
  const matchers = parameters.flatMap((parameter) => {
    const matcher = allowedMatchers[parameter.toLocaleLowerCase("en-US")];
    if (!matcher) {
      const known = Object.keys(allowedMatchers).map((m) => `'${m}'`);
      onParseError(
        new InputError(
          `'${parameter}' is not a valid parameter for 'is' filter expressions, expected one of ${known}`
        )
      );
      return [];
    }
    return [matcher];
  });
  return (entity) => matchers.length ? matchers.some((matcher) => matcher(entity)) : true;
}

export { createIsMatcher };
//# sourceMappingURL=createIsMatcher.esm.js.map
