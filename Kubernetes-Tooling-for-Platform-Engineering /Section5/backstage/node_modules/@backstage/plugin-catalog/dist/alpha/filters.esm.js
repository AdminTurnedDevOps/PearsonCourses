import React from 'react';
import { CatalogFilterBlueprint } from './blueprints/CatalogFilterBlueprint.esm.js';

const catalogTagCatalogFilter = CatalogFilterBlueprint.make({
  name: "tag",
  params: {
    loader: async () => {
      const { EntityTagPicker } = await import('@backstage/plugin-catalog-react');
      return /* @__PURE__ */ React.createElement(EntityTagPicker, null);
    }
  }
});
const catalogKindCatalogFilter = CatalogFilterBlueprint.makeWithOverrides({
  name: "kind",
  config: {
    schema: {
      initialFilter: (z) => z.string().default("component")
    }
  },
  factory(originalFactory, { config }) {
    return originalFactory({
      loader: async () => {
        const { EntityKindPicker } = await import('@backstage/plugin-catalog-react');
        return /* @__PURE__ */ React.createElement(EntityKindPicker, { initialFilter: config.initialFilter });
      }
    });
  }
});
const catalogTypeCatalogFilter = CatalogFilterBlueprint.make({
  name: "type",
  params: {
    loader: async () => {
      const { EntityTypePicker } = await import('@backstage/plugin-catalog-react');
      return /* @__PURE__ */ React.createElement(EntityTypePicker, null);
    }
  }
});
const catalogModeCatalogFilter = CatalogFilterBlueprint.makeWithOverrides({
  name: "mode",
  config: {
    schema: {
      mode: (z) => z.enum(["owners-only", "all"]).optional()
    }
  },
  factory(originalFactory, { config }) {
    return originalFactory({
      loader: async () => {
        const { EntityOwnerPicker } = await import('@backstage/plugin-catalog-react');
        return /* @__PURE__ */ React.createElement(EntityOwnerPicker, { mode: config.mode });
      }
    });
  }
});
const catalogNamespaceCatalogFilter = CatalogFilterBlueprint.make({
  name: "namespace",
  params: {
    loader: async () => {
      const { EntityNamespacePicker } = await import('@backstage/plugin-catalog-react');
      return /* @__PURE__ */ React.createElement(EntityNamespacePicker, null);
    }
  }
});
const catalogLifecycleCatalogFilter = CatalogFilterBlueprint.make({
  name: "lifecycle",
  params: {
    loader: async () => {
      const { EntityLifecyclePicker } = await import('@backstage/plugin-catalog-react');
      return /* @__PURE__ */ React.createElement(EntityLifecyclePicker, null);
    }
  }
});
const catalogProcessingStatusCatalogFilter = CatalogFilterBlueprint.make({
  name: "processing-status",
  params: {
    loader: async () => {
      const { EntityProcessingStatusPicker } = await import('@backstage/plugin-catalog-react');
      return /* @__PURE__ */ React.createElement(EntityProcessingStatusPicker, null);
    }
  }
});
const catalogListCatalogFilter = CatalogFilterBlueprint.makeWithOverrides({
  name: "list",
  config: {
    schema: {
      initialFilter: (z) => z.enum(["owned", "starred", "all"]).default("owned")
    }
  },
  factory(originalFactory, { config }) {
    return originalFactory({
      loader: async () => {
        const { UserListPicker } = await import('@backstage/plugin-catalog-react');
        return /* @__PURE__ */ React.createElement(UserListPicker, { initialFilter: config.initialFilter });
      }
    });
  }
});
var filters = [
  catalogTagCatalogFilter,
  catalogKindCatalogFilter,
  catalogTypeCatalogFilter,
  catalogModeCatalogFilter,
  catalogNamespaceCatalogFilter,
  catalogLifecycleCatalogFilter,
  catalogProcessingStatusCatalogFilter,
  catalogListCatalogFilter
];

export { filters as default };
//# sourceMappingURL=filters.esm.js.map
