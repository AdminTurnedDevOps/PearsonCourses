import React from 'react';
import { convertLegacyRouteRef, compatWrapper } from '@backstage/core-compat-api';
import { PageBlueprint, createExtensionInput, coreExtensionData } from '@backstage/frontend-plugin-api';
import { entityRouteRef, AsyncEntityProvider } from '@backstage/plugin-catalog-react';
import { EntityContentBlueprint } from '@backstage/plugin-catalog-react/alpha';
import { rootRouteRef } from '../routes.esm.js';
import { useEntityFromUrl } from '../components/CatalogEntityPage/useEntityFromUrl.esm.js';
import { buildFilterFn } from './filter/FilterWrapper.esm.js';

const catalogPage = PageBlueprint.makeWithOverrides({
  inputs: {
    filters: createExtensionInput([coreExtensionData.reactElement])
  },
  factory(originalFactory, { inputs }) {
    return originalFactory({
      defaultPath: "/catalog",
      routeRef: convertLegacyRouteRef(rootRouteRef),
      loader: async () => {
        const { BaseCatalogPage } = await import('../components/CatalogPage/index.esm.js');
        const filters = inputs.filters.map(
          (filter) => filter.get(coreExtensionData.reactElement)
        );
        return compatWrapper(/* @__PURE__ */ React.createElement(BaseCatalogPage, { filters: /* @__PURE__ */ React.createElement(React.Fragment, null, filters) }));
      }
    });
  }
});
const catalogEntityPage = PageBlueprint.makeWithOverrides({
  name: "entity",
  inputs: {
    contents: createExtensionInput([
      coreExtensionData.reactElement,
      coreExtensionData.routePath,
      coreExtensionData.routeRef.optional(),
      EntityContentBlueprint.dataRefs.title,
      EntityContentBlueprint.dataRefs.filterFunction.optional(),
      EntityContentBlueprint.dataRefs.filterExpression.optional()
    ])
  },
  factory(originalFactory, { inputs }) {
    return originalFactory({
      defaultPath: "/catalog/:namespace/:kind/:name",
      routeRef: convertLegacyRouteRef(entityRouteRef),
      loader: async () => {
        const { EntityLayout } = await import('../components/EntityLayout/index.esm.js');
        const Component = () => {
          return /* @__PURE__ */ React.createElement(AsyncEntityProvider, { ...useEntityFromUrl() }, /* @__PURE__ */ React.createElement(EntityLayout, null, inputs.contents.map((output) => {
            return /* @__PURE__ */ React.createElement(
              EntityLayout.Route,
              {
                key: output.get(coreExtensionData.routePath),
                path: output.get(coreExtensionData.routePath),
                title: output.get(EntityContentBlueprint.dataRefs.title),
                if: buildFilterFn(
                  output.get(
                    EntityContentBlueprint.dataRefs.filterFunction
                  ),
                  output.get(
                    EntityContentBlueprint.dataRefs.filterExpression
                  )
                )
              },
              output.get(coreExtensionData.reactElement)
            );
          })));
        };
        return compatWrapper(/* @__PURE__ */ React.createElement(Component, null));
      }
    });
  }
});
var pages = [catalogPage, catalogEntityPage];

export { catalogEntityPage, catalogPage, pages as default };
//# sourceMappingURL=pages.esm.js.map
