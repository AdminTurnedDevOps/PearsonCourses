import { InputError } from '@backstage/errors';

const allowedMatchers = {
  labels: (entity) => {
    return Object.keys(entity.metadata.labels ?? {}).length > 0;
  },
  links: (entity) => {
    return (entity.metadata.links ?? []).length > 0;
  }
};
function createHasMatcher(parameters, onParseError) {
  const matchers = parameters.flatMap((parameter) => {
    const matcher = allowedMatchers[parameter.toLocaleLowerCase("en-US")];
    if (!matcher) {
      const known = Object.keys(allowedMatchers).map((m) => `'${m}'`);
      onParseError(
        new InputError(
          `'${parameter}' is not a valid parameter for 'has' filter expressions, expected one of ${known}`
        )
      );
      return [];
    }
    return [matcher];
  });
  return (entity) => matchers.length ? matchers.some((matcher) => matcher(entity)) : true;
}

export { createHasMatcher };
//# sourceMappingURL=createHasMatcher.esm.js.map
