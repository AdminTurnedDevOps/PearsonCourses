import { useCallback } from 'react';
import useInterval from 'react-use/esm/useInterval';
import { useApi } from '@backstage/core-plugin-api';
import { generateAuth } from './auth.esm.js';
import useAsyncRetry from 'react-use/esm/useAsyncRetry';
import { kubernetesAuthProvidersApiRef } from '../kubernetes-auth-provider/types.esm.js';
import { kubernetesApiRef } from '../api/types.esm.js';

const useKubernetesObjects = (entity, intervalMs = 1e4) => {
  const kubernetesApi = useApi(kubernetesApiRef);
  const kubernetesAuthProvidersApi = useApi(kubernetesAuthProvidersApiRef);
  const getObjects = useCallback(async () => {
    const auth = await generateAuth(
      entity,
      kubernetesApi,
      kubernetesAuthProvidersApi
    );
    return await kubernetesApi.getObjectsByEntity({
      auth,
      entity
    });
  }, [kubernetesApi, entity, kubernetesAuthProvidersApi]);
  const { value, loading, error, retry } = useAsyncRetry(
    () => getObjects(),
    [getObjects]
  );
  useInterval(() => retry(), intervalMs);
  return {
    kubernetesObjects: value,
    loading,
    error: error?.message
  };
};

export { useKubernetesObjects };
//# sourceMappingURL=useKubernetesObjects.esm.js.map
