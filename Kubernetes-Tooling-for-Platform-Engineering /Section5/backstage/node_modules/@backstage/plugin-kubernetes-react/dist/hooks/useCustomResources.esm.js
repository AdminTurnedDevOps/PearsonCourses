import { useCallback } from 'react';
import useInterval from 'react-use/esm/useInterval';
import { useApi } from '@backstage/core-plugin-api';
import { generateAuth } from './auth.esm.js';
import useAsyncRetry from 'react-use/esm/useAsyncRetry';
import { kubernetesAuthProvidersApiRef } from '../kubernetes-auth-provider/types.esm.js';
import { kubernetesApiRef } from '../api/types.esm.js';

const useCustomResources = (entity, customResourceMatchers, intervalMs = 1e4) => {
  const kubernetesApi = useApi(kubernetesApiRef);
  const kubernetesAuthProvidersApi = useApi(kubernetesAuthProvidersApiRef);
  const matchersString = JSON.stringify(customResourceMatchers);
  const getCustomObjects = useCallback(
    async () => {
      const auth = await generateAuth(
        entity,
        kubernetesApi,
        kubernetesAuthProvidersApi
      );
      return await kubernetesApi.getCustomObjectsByEntity({
        auth,
        customResources: customResourceMatchers,
        entity
      });
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [kubernetesApi, entity, kubernetesAuthProvidersApi, matchersString]
  );
  const { value, loading, error, retry } = useAsyncRetry(
    () => getCustomObjects(),
    [getCustomObjects]
  );
  useInterval(() => retry(), intervalMs);
  return {
    kubernetesObjects: value,
    loading,
    error: error?.message
  };
};

export { useCustomResources };
//# sourceMappingURL=useCustomResources.esm.js.map
