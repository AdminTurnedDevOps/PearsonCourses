import React__default from 'react';
import Grid from '@material-ui/core/Grid';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import Typography from '@material-ui/core/Typography';
import { StatusError, StatusOK, StatusWarning } from '@backstage/core-components';
import { DateTime } from 'luxon';

const PodCondition = ({ condition }) => {
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, condition.status === "False" && /* @__PURE__ */ React__default.createElement(StatusError, null, condition.type, " - (", condition.reason, " ", condition.lastTransitionTime && DateTime.fromISO(condition.lastTransitionTime).toRelative({
    locale: "en"
  }), ") - ", condition.message, " "), condition.status === "True" && /* @__PURE__ */ React__default.createElement(StatusOK, null, condition.type, " - (", condition.lastTransitionTime && DateTime.fromISO(condition.lastTransitionTime).toRelative({
    locale: "en"
  }), ")"), condition.status === "Unknown" && /* @__PURE__ */ React__default.createElement(StatusWarning, null, condition.type, " - (", condition.lastTransitionTime && DateTime.fromISO(condition.lastTransitionTime).toRelative({
    locale: "en"
  }), ") ", condition.message));
};
const PendingPodContent = ({ pod }) => {
  const startupConditions = [
    pod.status?.conditions?.find((c) => c.type === "PodScheduled"),
    pod.status?.conditions?.find((c) => c.type === "Initialized"),
    pod.status?.conditions?.find((c) => c.type === "ContainersReady"),
    pod.status?.conditions?.find((c) => c.type === "Ready")
  ].filter((c) => !!c);
  return /* @__PURE__ */ React__default.createElement(Grid, { container: true, spacing: 2 }, /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "h5" }, "Pod is Pending. Conditions:"), /* @__PURE__ */ React__default.createElement(List, null, startupConditions.map((c) => /* @__PURE__ */ React__default.createElement(ListItem, { key: c.type }, /* @__PURE__ */ React__default.createElement(PodCondition, { condition: c }))))));
};

export { PendingPodContent };
//# sourceMappingURL=PendingPodContent.esm.js.map
