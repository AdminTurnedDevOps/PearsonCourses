{"version":3,"file":"PodDrawer.esm.js","sources":["../../../../src/components/Pods/PodDrawer/PodDrawer.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\n\nimport { ItemCardGrid } from '@backstage/core-components';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nimport { Pod } from 'kubernetes-models/v1';\n\nimport { ContainerCard } from './ContainerCard';\n\nimport { PodAndErrors } from '../types';\nimport { KubernetesDrawer } from '../../KubernetesDrawer';\nimport { PodDeleteButton } from '../PodDelete/PodDeleteButton';\nimport { PendingPodContent } from './PendingPodContent';\nimport { ErrorList } from '../ErrorList';\nimport { usePodMetrics } from '../../../hooks/usePodMetrics';\nimport { ResourceUtilization } from '../../ResourceUtilization';\nimport { bytesToMiB, formatMillicores } from '../../../utils/resources';\nimport { useIsPodDeleteEnabled } from '../../../hooks';\n\nconst useDrawerContentStyles = makeStyles((_theme: Theme) =>\n  createStyles({\n    header: {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n    },\n    content: {\n      height: '80%',\n    },\n    icon: {\n      fontSize: 20,\n    },\n    podoklist: {\n      width: '100%',\n      maxWidth: 360,\n      maxHeight: 360,\n    },\n  }),\n);\n\nfunction getContainerSpecByName(pod: Pod, containerName: string) {\n  return pod.spec?.containers.find(c => c.name === containerName);\n}\n\n/**\n * Props for PodDrawer\n *\n * @public\n */\nexport interface PodDrawerProps {\n  open?: boolean;\n  podAndErrors: PodAndErrors;\n}\n\n/**\n * A Drawer for Kubernetes Pods\n *\n * @public\n */\nexport const PodDrawer = ({ podAndErrors, open }: PodDrawerProps) => {\n  const classes = useDrawerContentStyles();\n  const podMetrics = usePodMetrics(podAndErrors.cluster.name, podAndErrors.pod);\n  const isPodDeleteEnabled = useIsPodDeleteEnabled();\n\n  return (\n    <KubernetesDrawer\n      open={open}\n      drawerContentsHeader={\n        <Typography variant=\"subtitle1\">\n          Pod{' '}\n          {podAndErrors.pod.status?.podIP &&\n            `(${podAndErrors.pod.status?.podIP})`}\n        </Typography>\n      }\n      kubernetesObject={podAndErrors.pod}\n      label={\n        <Typography variant=\"subtitle1\">\n          {podAndErrors.pod.metadata?.name ?? 'unknown'}\n        </Typography>\n      }\n    >\n      <div className={classes.content}>\n        {isPodDeleteEnabled && (\n          <PodDeleteButton\n            podScope={{\n              podName: podAndErrors.pod.metadata?.name ?? 'unknown',\n              podNamespace: podAndErrors.pod.metadata?.namespace ?? 'default',\n              cluster: podAndErrors.cluster,\n            }}\n          />\n        )}\n        {podMetrics && (\n          <Grid container item xs={12}>\n            <Grid item xs={12}>\n              <Typography variant=\"h5\">Resource utilization</Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <ResourceUtilization\n                title=\"CPU requests\"\n                usage={podMetrics.cpu.currentUsage}\n                total={podMetrics.cpu.requestTotal}\n                totalFormatted={formatMillicores(podMetrics.cpu.requestTotal)}\n              />\n              <ResourceUtilization\n                title=\"CPU limits\"\n                usage={podMetrics.cpu.currentUsage}\n                total={podMetrics.cpu.limitTotal}\n                totalFormatted={formatMillicores(podMetrics.cpu.limitTotal)}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <ResourceUtilization\n                title=\"Memory requests\"\n                usage={podMetrics.memory.currentUsage}\n                total={podMetrics.memory.requestTotal}\n                totalFormatted={bytesToMiB(podMetrics.memory.requestTotal)}\n              />\n              <ResourceUtilization\n                title=\"Memory limits\"\n                usage={podMetrics.memory.currentUsage}\n                total={podMetrics.memory.limitTotal}\n                totalFormatted={bytesToMiB(podMetrics.memory.limitTotal)}\n              />\n            </Grid>\n          </Grid>\n        )}\n        {podAndErrors.pod.status?.phase === 'Pending' && (\n          <PendingPodContent pod={podAndErrors.pod} />\n        )}\n        {podAndErrors.pod.status?.containerStatuses?.length && (\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <Typography variant=\"h5\">Containers</Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <ItemCardGrid>\n                {podAndErrors.pod.status?.containerStatuses?.map(\n                  (containerStatus, i) => {\n                    const containerSpec = getContainerSpecByName(\n                      podAndErrors.pod,\n                      containerStatus.name,\n                    );\n                    const containerMetrics = (\n                      podMetrics?.containers ?? []\n                    ).find(c => c.container === containerStatus.name);\n                    return (\n                      <ContainerCard\n                        key={`container-card-${podAndErrors.pod.metadata?.name}-${i}`}\n                        containerMetrics={containerMetrics}\n                        podScope={{\n                          podName: podAndErrors.pod.metadata?.name ?? 'unknown',\n                          podNamespace:\n                            podAndErrors.pod.metadata?.namespace ?? 'unknown',\n                          cluster: podAndErrors.cluster,\n                        }}\n                        containerSpec={containerSpec}\n                        containerStatus={containerStatus}\n                      />\n                    );\n                  },\n                )}\n              </ItemCardGrid>\n            </Grid>\n            {podAndErrors.errors.length > 0 && (\n              <Grid item xs={12}>\n                <Typography variant=\"h5\">Errors</Typography>\n              </Grid>\n            )}\n            {podAndErrors.errors.length > 0 && (\n              <Grid item xs={12}>\n                <ErrorList podAndErrors={[podAndErrors]} />\n              </Grid>\n            )}\n          </Grid>\n        )}\n      </div>\n    </KubernetesDrawer>\n  );\n};\n"],"names":["React"],"mappings":"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"}