import 'xterm/css/xterm.css';
import { useApi, discoveryApiRef } from '@backstage/core-plugin-api';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import React__default, { useState, useEffect, useMemo } from 'react';
import { Terminal } from 'xterm';
import { FitAddon } from 'xterm-addon-fit';
import { PodExecTerminalAttachAddon } from './PodExecTerminalAttachAddon.esm.js';

const hasSocketProtocol = (url) => /wss?:\/\//.test(url.toString());
const useStyles = makeStyles(
  (theme) => createStyles({
    podExecTerminal: {
      width: "100%",
      height: "100%",
      "& .xterm-screen": { padding: theme.spacing(1) }
    }
  })
);
const PodExecTerminal = (props) => {
  const classes = useStyles();
  const { containerName, podNamespace, podName } = props;
  const [baseUrl, setBaseUrl] = useState(window.location.host);
  const terminalRef = React__default.useRef(null);
  const discoveryApi = useApi(discoveryApiRef);
  const namespace = podNamespace ?? "default";
  useEffect(() => {
    discoveryApi.getBaseUrl("kubernetes").then((url) => url ?? window.location.host).then((url) => url.replace(/^http(s?):\/\//, "ws$1://")).then((url) => setBaseUrl(url));
  }, [discoveryApi]);
  const urlParams = useMemo(() => {
    const params = new URLSearchParams({
      container: containerName,
      stdin: "true",
      stdout: "true",
      stderr: "true",
      tty: "true",
      command: "/bin/sh"
    });
    return params;
  }, [containerName]);
  const socketUrl = useMemo(() => {
    if (!hasSocketProtocol(baseUrl)) {
      return "";
    }
    return new URL(
      `${baseUrl}/proxy/api/v1/namespaces/${namespace}/pods/${podName}/exec?${urlParams}`
    );
  }, [baseUrl, namespace, podName, urlParams]);
  useEffect(() => {
    if (!hasSocketProtocol(socketUrl)) {
      return () => {
      };
    }
    const terminal = new Terminal();
    const fitAddon = new FitAddon();
    terminal.loadAddon(fitAddon);
    if (terminalRef.current) {
      terminal.open(terminalRef.current);
      fitAddon.fit();
    }
    terminal.writeln("Starting terminal, please wait...");
    const socket = new WebSocket(socketUrl, ["channel.k8s.io"]);
    socket.onopen = () => {
      terminal.clear();
      const attachAddon = new PodExecTerminalAttachAddon(socket, {
        bidirectional: true
      });
      terminal.loadAddon(attachAddon);
    };
    socket.onclose = () => {
      terminal.writeln("Socket connection closed");
    };
    return () => {
      terminal?.clear();
      socket?.close();
    };
  }, [baseUrl, socketUrl]);
  return /* @__PURE__ */ React__default.createElement(
    "div",
    {
      "data-testid": "terminal",
      ref: terminalRef,
      className: classes.podExecTerminal
    }
  );
};

export { PodExecTerminal };
//# sourceMappingURL=PodExecTerminal.esm.js.map
