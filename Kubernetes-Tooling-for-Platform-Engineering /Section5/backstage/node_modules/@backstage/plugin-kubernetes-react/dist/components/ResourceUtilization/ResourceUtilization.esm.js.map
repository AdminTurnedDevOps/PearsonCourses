{"version":3,"file":"ResourceUtilization.esm.js","sources":["../../../src/components/ResourceUtilization/ResourceUtilization.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport React from 'react';\nimport { GaugePropsGetColor, LinearGauge } from '@backstage/core-components';\nimport { currentToDeclaredResourceToPerc } from '../../utils/resources';\n\n/**\n * Context for Pod Metrics\n *\n * @public\n */\nexport interface ResourceUtilizationProps {\n  compressed?: boolean;\n  title: string;\n  usage: number | string;\n  total: number | string;\n  totalFormatted: string;\n}\n\nconst getProgressColor: GaugePropsGetColor = ({\n  palette,\n  value,\n  inverse,\n  max,\n}) => {\n  if (isNaN(value)) {\n    return palette.status.pending;\n  }\n  const actualMax = max ? max : 100;\n  const actualValue = inverse ? actualMax - value : value;\n\n  if (actualValue >= actualMax) {\n    return palette.status.error;\n  } else if (actualValue > 90 || actualValue < 40) {\n    return palette.status.warning;\n  }\n\n  return palette.status.ok;\n};\n\n/**\n * Context for Pod Metrics\n *\n * @public\n */\nexport const ResourceUtilization = ({\n  compressed = false,\n  title,\n  usage,\n  total,\n  totalFormatted,\n}: ResourceUtilizationProps) => {\n  const utilization = currentToDeclaredResourceToPerc(usage, total);\n  return (\n    <Grid container spacing={0}>\n      <Grid item xs={12}>\n        <Typography\n          variant={compressed ? 'caption' : 'subtitle2'}\n        >{`${title}: ${totalFormatted}`}</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <LinearGauge\n          getColor={getProgressColor}\n          width={compressed ? 'thin' : 'thick'}\n          value={utilization / 100}\n        />\n        {!compressed && (\n          <Typography variant=\"caption\">usage: {`${utilization}%`}</Typography>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n"],"names":["React"],"mappings":";;;;;;AAmCA,MAAM,mBAAuC,CAAC;AAAA,EAC5C,OAAA;AAAA,EACA,KAAA;AAAA,EACA,OAAA;AAAA,EACA;AACF,CAAM,KAAA;AACJ,EAAI,IAAA,KAAA,CAAM,KAAK,CAAG,EAAA;AAChB,IAAA,OAAO,QAAQ,MAAO,CAAA,OAAA;AAAA;AAExB,EAAM,MAAA,SAAA,GAAY,MAAM,GAAM,GAAA,GAAA;AAC9B,EAAM,MAAA,WAAA,GAAc,OAAU,GAAA,SAAA,GAAY,KAAQ,GAAA,KAAA;AAElD,EAAA,IAAI,eAAe,SAAW,EAAA;AAC5B,IAAA,OAAO,QAAQ,MAAO,CAAA,KAAA;AAAA,GACb,MAAA,IAAA,WAAA,GAAc,EAAM,IAAA,WAAA,GAAc,EAAI,EAAA;AAC/C,IAAA,OAAO,QAAQ,MAAO,CAAA,OAAA;AAAA;AAGxB,EAAA,OAAO,QAAQ,MAAO,CAAA,EAAA;AACxB,CAAA;AAOO,MAAM,sBAAsB,CAAC;AAAA,EAClC,UAAa,GAAA,KAAA;AAAA,EACb,KAAA;AAAA,EACA,KAAA;AAAA,EACA,KAAA;AAAA,EACA;AACF,CAAgC,KAAA;AAC9B,EAAM,MAAA,WAAA,GAAc,+BAAgC,CAAA,KAAA,EAAO,KAAK,CAAA;AAChE,EACE,uBAAAA,cAAA,CAAA,aAAA,CAAC,IAAK,EAAA,EAAA,SAAA,EAAS,IAAC,EAAA,OAAA,EAAS,CACvB,EAAA,kBAAAA,cAAA,CAAA,aAAA,CAAC,IAAK,EAAA,EAAA,IAAA,EAAI,IAAC,EAAA,EAAA,EAAI,EACb,EAAA,kBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,UAAA;AAAA,IAAA;AAAA,MACC,OAAA,EAAS,aAAa,SAAY,GAAA;AAAA,KAAA;AAAA,IAClC,CAAA,EAAG,KAAK,CAAA,EAAA,EAAK,cAAc,CAAA;AAAA,GAC/B,CACA,kBAAAA,cAAA,CAAA,aAAA,CAAC,QAAK,IAAI,EAAA,IAAA,EAAC,IAAI,EACb,EAAA,kBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,WAAA;AAAA,IAAA;AAAA,MACC,QAAU,EAAA,gBAAA;AAAA,MACV,KAAA,EAAO,aAAa,MAAS,GAAA,OAAA;AAAA,MAC7B,OAAO,WAAc,GAAA;AAAA;AAAA,GAEtB,EAAA,CAAC,UACA,oBAAAA,cAAA,CAAA,aAAA,CAAC,UAAW,EAAA,EAAA,OAAA,EAAQ,SAAU,EAAA,EAAA,SAAA,EAAQ,CAAG,EAAA,WAAW,CAAI,CAAA,CAAA,CAE5D,CACF,CAAA;AAEJ;;;;"}