import React__default, { useState } from 'react';
import Button from '@material-ui/core/Button';
import Grid from '@material-ui/core/Grid';
import Dialog from '@material-ui/core/Dialog';
import DialogActions from '@material-ui/core/DialogActions';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import IconButton from '@material-ui/core/IconButton';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import CloseIcon from '@material-ui/icons/Close';
import HelpIcon from '@material-ui/icons/Help';
import OpenInNewIcon from '@material-ui/icons/OpenInNew';
import { PodLogs } from '../PodLogs/PodLogs.esm.js';
import '@material-ui/icons/Subject';
import '../../KubernetesDialog/KubernetesDialog.esm.js';
import 'react-use/esm/useAsync';
import '@backstage/core-plugin-api';
import '../../../api/types.esm.js';
import { Events } from '../Events/Events.esm.js';
import { LinkButton } from '@backstage/core-components';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';

const useStyles = makeStyles(
  (theme) => createStyles({
    closeButton: {
      position: "absolute",
      right: theme.spacing(1),
      top: theme.spacing(1),
      color: theme.palette.grey[500]
    }
  })
);
const FixDialog = ({
  open,
  pod,
  error,
  clusterName
}) => {
  const [isOpen, setOpen] = useState(!!open);
  const classes = useStyles();
  const openDialog = () => {
    setOpen(true);
  };
  const closeDialog = () => {
    setOpen(false);
  };
  const pf = error.proposedFix;
  const dialogContent = () => {
    return /* @__PURE__ */ React__default.createElement(Grid, { container: true }, /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "h6" }, "Detected error:"), /* @__PURE__ */ React__default.createElement(Typography, null, error.message)), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "h6" }, "Cause explanation:"), /* @__PURE__ */ React__default.createElement(Typography, null, error.proposedFix?.rootCauseExplanation ?? "unknown")), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "h6" }, "Fix:"), /* @__PURE__ */ React__default.createElement(List, null, (error.proposedFix?.actions ?? []).map((fix, i) => {
      return /* @__PURE__ */ React__default.createElement(ListItem, { key: `${pod.metadata?.name ?? "unknown"}-pf-${i}` }, fix);
    }))), pf && pf.type === "logs" && /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "h6" }, "Crash logs:")), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 9 }, /* @__PURE__ */ React__default.createElement(
      PodLogs,
      {
        previous: true,
        containerScope: {
          podName: pod.metadata?.name ?? "unknown",
          podNamespace: pod.metadata?.namespace ?? "unknown",
          cluster: { name: clusterName },
          containerName: pf.container
        }
      }
    ))), pf && pf.type === "events" && /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "h6" }, "Events:")), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 9 }, /* @__PURE__ */ React__default.createElement(
      Events,
      {
        warningEventsOnly: true,
        involvedObjectName: pod.metadata?.name ?? "",
        namespace: pod.metadata?.namespace ?? "",
        clusterName
      }
    ))));
  };
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(
    Button,
    {
      variant: "outlined",
      "aria-label": "fix issue",
      component: "label",
      onClick: openDialog,
      startIcon: /* @__PURE__ */ React__default.createElement(HelpIcon, null)
    },
    "Help"
  ), /* @__PURE__ */ React__default.createElement(Dialog, { maxWidth: "xl", fullWidth: true, open: isOpen, onClose: closeDialog }, /* @__PURE__ */ React__default.createElement(DialogTitle, { id: "dialog-title" }, pod.metadata?.name, " - ", error.type, /* @__PURE__ */ React__default.createElement(
    IconButton,
    {
      "aria-label": "close",
      className: classes.closeButton,
      onClick: closeDialog
    },
    /* @__PURE__ */ React__default.createElement(CloseIcon, null)
  )), /* @__PURE__ */ React__default.createElement(DialogContent, null, dialogContent()), /* @__PURE__ */ React__default.createElement(DialogActions, null, pf && pf.type === "docs" && /* @__PURE__ */ React__default.createElement(
    LinkButton,
    {
      to: pf.docsLink,
      variant: "outlined",
      startIcon: /* @__PURE__ */ React__default.createElement(OpenInNewIcon, null),
      target: "_blank",
      rel: "noopener"
    },
    "Open docs"
  ))));
};

export { FixDialog };
//# sourceMappingURL=FixDialog.esm.js.map
