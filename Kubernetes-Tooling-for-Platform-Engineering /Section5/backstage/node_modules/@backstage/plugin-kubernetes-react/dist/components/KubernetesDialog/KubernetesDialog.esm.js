import Button from '@material-ui/core/Button';
import Dialog from '@material-ui/core/Dialog';
import DialogContent from '@material-ui/core/DialogContent';
import DialogTitle from '@material-ui/core/DialogTitle';
import IconButton from '@material-ui/core/IconButton';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import CloseIcon from '@material-ui/icons/Close';
import React__default, { useState } from 'react';

const useStyles = makeStyles(
  (theme) => createStyles({
    dialogPaper: { minHeight: "calc(100% - 64px)" },
    dialogContent: { flexBasis: 0 },
    closeButton: {
      position: "absolute",
      right: theme.spacing(1),
      top: theme.spacing(1),
      color: theme.palette.grey[500]
    }
  })
);
const KubernetesDialog = ({
  buttonAriaLabel,
  buttonIcon,
  buttonText,
  children,
  disabled,
  title
}) => {
  const classes = useStyles();
  const [open, setOpen] = useState(false);
  const openDialog = () => {
    setOpen(true);
  };
  const closeDialog = () => {
    setOpen(false);
  };
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(
    Dialog,
    {
      maxWidth: "xl",
      fullWidth: true,
      open,
      onClose: closeDialog,
      PaperProps: { className: classes.dialogPaper }
    },
    /* @__PURE__ */ React__default.createElement(DialogTitle, { id: "dialog-title" }, title, /* @__PURE__ */ React__default.createElement(
      IconButton,
      {
        "aria-label": "close",
        className: classes.closeButton,
        onClick: closeDialog
      },
      /* @__PURE__ */ React__default.createElement(CloseIcon, null)
    )),
    /* @__PURE__ */ React__default.createElement(DialogContent, { className: classes.dialogContent }, children)
  ), /* @__PURE__ */ React__default.createElement(
    Button,
    {
      variant: "outlined",
      "aria-label": buttonAriaLabel,
      component: "label",
      disabled,
      onClick: openDialog,
      startIcon: buttonIcon
    },
    buttonText
  ));
};

export { KubernetesDialog };
//# sourceMappingURL=KubernetesDialog.esm.js.map
