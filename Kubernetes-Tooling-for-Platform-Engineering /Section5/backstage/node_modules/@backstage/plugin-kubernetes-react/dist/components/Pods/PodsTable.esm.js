import React__default, { useContext } from 'react';
import { PodDrawer } from './PodDrawer/PodDrawer.esm.js';
import { Table } from '@backstage/core-components';
import '@material-ui/core/Card';
import '@material-ui/core/CardActions';
import '@material-ui/core/CardContent';
import '@material-ui/core/CardHeader';
import '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import 'luxon';
import '@backstage/core-plugin-api';
import 'react-use/esm/useAsync';
import '../../api/types.esm.js';
import 'react-use/esm/useInterval';
import 'react-use/esm/useAsyncRetry';
import '../../kubernetes-auth-provider/types.esm.js';
import '../../hooks/PodNamesWithErrors.esm.js';
import '../../hooks/PodNamesWithMetrics.esm.js';
import '../../hooks/GroupedResponses.esm.js';
import { ClusterContext } from '../../hooks/Cluster.esm.js';
import { usePodMetrics } from '../../hooks/usePodMetrics.esm.js';
import { useMatchingErrors } from '../../hooks/useMatchingErrors.esm.js';
import '@material-ui/icons/OpenInBrowser';
import '../KubernetesDialog/KubernetesDialog.esm.js';
import '../PodExecTerminal/PodExecTerminal.esm.js';
import '@material-ui/core/Paper';
import '@material-ui/lab/Skeleton';
import '@material-ui/icons/Subject';
import '@material-ui/core/List';
import '@material-ui/core/ListItem';
import { containersReady, totalRestarts, containerStatuses, podStatusToCpuUtil, podStatusToMemoryUtil } from '../../utils/pod.esm.js';

const READY_COLUMNS = "READY";
const RESOURCE_COLUMNS = "RESOURCE";
const READY = [
  {
    title: "containers ready",
    align: "center",
    render: containersReady,
    width: "auto"
  },
  {
    title: "total restarts",
    align: "center",
    render: totalRestarts,
    type: "numeric",
    width: "auto"
  }
];
const PodDrawerTrigger = ({ pod }) => {
  const errors = useMatchingErrors({
    kind: "Pod",
    apiVersion: "v1",
    metadata: pod.metadata
  });
  return /* @__PURE__ */ React__default.createElement(
    PodDrawer,
    {
      podAndErrors: {
        pod,
        cluster: useContext(ClusterContext),
        errors
      }
    }
  );
};
const Cpu = ({ clusterName, pod }) => {
  const metrics = usePodMetrics(clusterName, pod);
  if (!metrics) {
    return /* @__PURE__ */ React__default.createElement(Typography, null, "unknown");
  }
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, podStatusToCpuUtil(metrics));
};
const Memory = ({ clusterName, pod }) => {
  const metrics = usePodMetrics(clusterName, pod);
  if (!metrics) {
    return /* @__PURE__ */ React__default.createElement(Typography, null, "unknown");
  }
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, podStatusToMemoryUtil(metrics));
};
const PodsTable = ({ pods, extraColumns = [] }) => {
  const cluster = useContext(ClusterContext);
  const defaultColumns = [
    {
      title: "ID",
      field: "metadata.uid",
      hidden: true
    },
    {
      title: "name",
      highlight: true,
      render: (pod) => {
        return /* @__PURE__ */ React__default.createElement(PodDrawerTrigger, { pod });
      }
    },
    {
      title: "phase",
      render: (pod) => pod.status?.phase ?? "unknown",
      width: "auto"
    },
    {
      title: "status",
      render: containerStatuses
    }
  ];
  const columns = [...defaultColumns];
  if (extraColumns.includes(READY_COLUMNS)) {
    columns.push(...READY);
  }
  if (extraColumns.includes(RESOURCE_COLUMNS)) {
    const resourceColumns = [
      {
        title: "CPU usage %",
        render: (pod) => {
          return /* @__PURE__ */ React__default.createElement(Cpu, { clusterName: cluster.name, pod });
        },
        width: "auto"
      },
      {
        title: "Memory usage %",
        render: (pod) => {
          return /* @__PURE__ */ React__default.createElement(Memory, { clusterName: cluster.name, pod });
        },
        width: "auto"
      }
    ];
    columns.push(...resourceColumns);
  }
  const tableStyle = {
    minWidth: "0",
    width: "100%"
  };
  return /* @__PURE__ */ React__default.createElement("div", { style: tableStyle }, /* @__PURE__ */ React__default.createElement(
    Table,
    {
      options: { paging: true, search: false, emptyRowsWhenPaging: false },
      data: pods.map((pod) => ({
        ...pod,
        id: pod?.metadata?.uid
      })),
      columns
    }
  ));
};

export { PodsTable, READY_COLUMNS, RESOURCE_COLUMNS };
//# sourceMappingURL=PodsTable.esm.js.map
