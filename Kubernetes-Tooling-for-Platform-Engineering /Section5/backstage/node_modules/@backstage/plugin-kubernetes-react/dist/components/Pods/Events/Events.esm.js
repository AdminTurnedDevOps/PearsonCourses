import React__default from 'react';
import Avatar from '@material-ui/core/Avatar';
import Container from '@material-ui/core/Container';
import Grid from '@material-ui/core/Grid';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemAvatar from '@material-ui/core/ListItemAvatar';
import ListItemText from '@material-ui/core/ListItemText';
import Tooltip from '@material-ui/core/Tooltip';
import Typography from '@material-ui/core/Typography';
import InfoIcon from '@material-ui/icons/Info';
import WarningIcon from '@material-ui/icons/Warning';
import { DateTime } from 'luxon';
import { useEvents } from './useEvents.esm.js';
import Skeleton from '@material-ui/lab/Skeleton';
import { DismissableBanner } from '@backstage/core-components';

const getAvatarByType = (type) => {
  return /* @__PURE__ */ React__default.createElement(ListItemAvatar, null, /* @__PURE__ */ React__default.createElement(Avatar, null, type === "Warning" ? /* @__PURE__ */ React__default.createElement(WarningIcon, null) : /* @__PURE__ */ React__default.createElement(InfoIcon, null)));
};
const EventsContent = ({
  events,
  warningEventsOnly
}) => {
  if (events.length === 0) {
    return /* @__PURE__ */ React__default.createElement(Typography, null, "No events found");
  }
  return /* @__PURE__ */ React__default.createElement(Container, null, /* @__PURE__ */ React__default.createElement(Grid, null, /* @__PURE__ */ React__default.createElement(List, null, events.filter((event) => {
    if (warningEventsOnly) {
      return event.type === "Warning";
    }
    return true;
  }).map((event, index) => {
    const timeAgo = event.metadata.creationTimestamp ? DateTime.fromISO(event.metadata.creationTimestamp).toRelative(
      {
        locale: "en"
      }
    ) : "unknown";
    return /* @__PURE__ */ React__default.createElement(ListItem, { key: `${event.metadata.name}-${index}` }, /* @__PURE__ */ React__default.createElement(Tooltip, { title: `${event.type ?? ""} event` }, getAvatarByType(event.type)), /* @__PURE__ */ React__default.createElement(
      ListItemText,
      {
        primary: `First event ${timeAgo} (count: ${event.count})`,
        secondary: `${event.reason}: ${event.message}`
      }
    ));
  }))));
};
const Events = ({
  involvedObjectName,
  namespace,
  clusterName,
  warningEventsOnly
}) => {
  const { value, error, loading } = useEvents({
    involvedObjectName,
    namespace,
    clusterName
  });
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, error && /* @__PURE__ */ React__default.createElement(
    DismissableBanner,
    {
      ...{
        message: error.message,
        variant: "error",
        fixed: false
      },
      id: "events"
    }
  ), loading && /* @__PURE__ */ React__default.createElement(Skeleton, { variant: "rect", width: "100%", height: "100%" }), !loading && value !== void 0 && /* @__PURE__ */ React__default.createElement(EventsContent, { warningEventsOnly, events: value }));
};

export { Events, EventsContent };
//# sourceMappingURL=Events.esm.js.map
