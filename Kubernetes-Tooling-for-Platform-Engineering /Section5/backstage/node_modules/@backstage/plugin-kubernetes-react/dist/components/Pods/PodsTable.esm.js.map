{"version":3,"file":"PodsTable.esm.js","sources":["../../../src/components/Pods/PodsTable.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useContext } from 'react';\nimport { PodDrawer } from './PodDrawer';\nimport {\n  containersReady,\n  containerStatuses,\n  podStatusToCpuUtil,\n  podStatusToMemoryUtil,\n  totalRestarts,\n} from '../../utils/pod';\nimport { Table, TableColumn } from '@backstage/core-components';\nimport { ClusterContext } from '../../hooks/Cluster';\nimport { useMatchingErrors } from '../../hooks/useMatchingErrors';\nimport { Pod } from 'kubernetes-models/v1/Pod';\nimport { V1Pod } from '@kubernetes/client-node';\nimport { usePodMetrics } from '../../hooks/usePodMetrics';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n *\n *\n * @public\n */\nexport const READY_COLUMNS: PodColumns = 'READY';\n\n/**\n *\n *\n * @public\n */\nexport const RESOURCE_COLUMNS: PodColumns = 'RESOURCE';\n\n/**\n *\n *\n * @public\n */\nexport type PodColumns = 'READY' | 'RESOURCE';\n\n/**\n *\n *\n * @public\n */\nexport type PodsTablesProps = {\n  pods: Pod | V1Pod[];\n  extraColumns?: PodColumns[];\n  children?: React.ReactNode;\n};\n\nconst READY: TableColumn<Pod>[] = [\n  {\n    title: 'containers ready',\n    align: 'center',\n    render: containersReady,\n    width: 'auto',\n  },\n  {\n    title: 'total restarts',\n    align: 'center',\n    render: totalRestarts,\n    type: 'numeric',\n    width: 'auto',\n  },\n];\n\nconst PodDrawerTrigger = ({ pod }: { pod: Pod }) => {\n  const errors = useMatchingErrors({\n    kind: 'Pod',\n    apiVersion: 'v1',\n    metadata: pod.metadata,\n  });\n  return (\n    <PodDrawer\n      podAndErrors={{\n        pod: pod as any,\n        cluster: useContext(ClusterContext),\n        errors: errors,\n      }}\n    />\n  );\n};\n\nconst Cpu = ({ clusterName, pod }: { clusterName: string; pod: Pod }) => {\n  const metrics = usePodMetrics(clusterName, pod);\n\n  if (!metrics) {\n    return <Typography>unknown</Typography>;\n  }\n\n  return <>{podStatusToCpuUtil(metrics)}</>;\n};\n\nconst Memory = ({ clusterName, pod }: { clusterName: string; pod: Pod }) => {\n  const metrics = usePodMetrics(clusterName, pod);\n\n  if (!metrics) {\n    return <Typography>unknown</Typography>;\n  }\n\n  return <>{podStatusToMemoryUtil(metrics)}</>;\n};\n\n/**\n *\n *\n * @public\n */\nexport const PodsTable = ({ pods, extraColumns = [] }: PodsTablesProps) => {\n  const cluster = useContext(ClusterContext);\n  const defaultColumns: TableColumn<Pod>[] = [\n    {\n      title: 'ID',\n      field: 'metadata.uid',\n      hidden: true,\n    },\n    {\n      title: 'name',\n      highlight: true,\n      render: (pod: Pod) => {\n        return <PodDrawerTrigger pod={pod} />;\n      },\n    },\n    {\n      title: 'phase',\n      render: (pod: Pod) => pod.status?.phase ?? 'unknown',\n      width: 'auto',\n    },\n    {\n      title: 'status',\n      render: containerStatuses,\n    },\n  ];\n  const columns: TableColumn<Pod>[] = [...defaultColumns];\n\n  if (extraColumns.includes(READY_COLUMNS)) {\n    columns.push(...READY);\n  }\n  if (extraColumns.includes(RESOURCE_COLUMNS)) {\n    const resourceColumns: TableColumn<Pod>[] = [\n      {\n        title: 'CPU usage %',\n        render: (pod: Pod) => {\n          return <Cpu clusterName={cluster.name} pod={pod} />;\n        },\n        width: 'auto',\n      },\n      {\n        title: 'Memory usage %',\n        render: (pod: Pod) => {\n          return <Memory clusterName={cluster.name} pod={pod} />;\n        },\n        width: 'auto',\n      },\n    ];\n    columns.push(...resourceColumns);\n  }\n\n  const tableStyle = {\n    minWidth: '0',\n    width: '100%',\n  };\n\n  return (\n    <div style={tableStyle}>\n      <Table\n        options={{ paging: true, search: false, emptyRowsWhenPaging: false }}\n        // It was observed that in some instances the pod drawer closes when new data (like CPU usage) is available and the table reloads.\n        // Mapping the metadata UID to the tables ID fixes this problem.\n        data={\n          (pods as Pod[]).map((pod: Pod) => ({\n            ...pod,\n            id: pod?.metadata?.uid,\n          })) as any as Pod[]\n        }\n        columns={columns}\n      />\n    </div>\n  );\n};\n"],"names":["React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCO,MAAM,aAA4B,GAAA;AAOlC,MAAM,gBAA+B,GAAA;AAoB5C,MAAM,KAA4B,GAAA;AAAA,EAChC;AAAA,IACE,KAAO,EAAA,kBAAA;AAAA,IACP,KAAO,EAAA,QAAA;AAAA,IACP,MAAQ,EAAA,eAAA;AAAA,IACR,KAAO,EAAA;AAAA,GACT;AAAA,EACA;AAAA,IACE,KAAO,EAAA,gBAAA;AAAA,IACP,KAAO,EAAA,QAAA;AAAA,IACP,MAAQ,EAAA,aAAA;AAAA,IACR,IAAM,EAAA,SAAA;AAAA,IACN,KAAO,EAAA;AAAA;AAEX,CAAA;AAEA,MAAM,gBAAmB,GAAA,CAAC,EAAE,GAAA,EAAwB,KAAA;AAClD,EAAA,MAAM,SAAS,iBAAkB,CAAA;AAAA,IAC/B,IAAM,EAAA,KAAA;AAAA,IACN,UAAY,EAAA,IAAA;AAAA,IACZ,UAAU,GAAI,CAAA;AAAA,GACf,CAAA;AACD,EACE,uBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,SAAA;AAAA,IAAA;AAAA,MACC,YAAc,EAAA;AAAA,QACZ,GAAA;AAAA,QACA,OAAA,EAAS,WAAW,cAAc,CAAA;AAAA,QAClC;AAAA;AACF;AAAA,GACF;AAEJ,CAAA;AAEA,MAAM,GAAM,GAAA,CAAC,EAAE,WAAA,EAAa,KAA6C,KAAA;AACvE,EAAM,MAAA,OAAA,GAAU,aAAc,CAAA,WAAA,EAAa,GAAG,CAAA;AAE9C,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAO,uBAAAA,cAAA,CAAA,aAAA,CAAC,kBAAW,SAAO,CAAA;AAAA;AAG5B,EAAO,uBAAAA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,EAAG,kBAAmB,CAAA,OAAO,CAAE,CAAA;AACxC,CAAA;AAEA,MAAM,MAAS,GAAA,CAAC,EAAE,WAAA,EAAa,KAA6C,KAAA;AAC1E,EAAM,MAAA,OAAA,GAAU,aAAc,CAAA,WAAA,EAAa,GAAG,CAAA;AAE9C,EAAA,IAAI,CAAC,OAAS,EAAA;AACZ,IAAO,uBAAAA,cAAA,CAAA,aAAA,CAAC,kBAAW,SAAO,CAAA;AAAA;AAG5B,EAAO,uBAAAA,cAAA,CAAA,aAAA,CAAAA,cAAA,CAAA,QAAA,EAAA,IAAA,EAAG,qBAAsB,CAAA,OAAO,CAAE,CAAA;AAC3C,CAAA;AAOO,MAAM,YAAY,CAAC,EAAE,MAAM,YAAe,GAAA,IAA0B,KAAA;AACzE,EAAM,MAAA,OAAA,GAAU,WAAW,cAAc,CAAA;AACzC,EAAA,MAAM,cAAqC,GAAA;AAAA,IACzC;AAAA,MACE,KAAO,EAAA,IAAA;AAAA,MACP,KAAO,EAAA,cAAA;AAAA,MACP,MAAQ,EAAA;AAAA,KACV;AAAA,IACA;AAAA,MACE,KAAO,EAAA,MAAA;AAAA,MACP,SAAW,EAAA,IAAA;AAAA,MACX,MAAA,EAAQ,CAAC,GAAa,KAAA;AACpB,QAAO,uBAAAA,cAAA,CAAA,aAAA,CAAC,oBAAiB,GAAU,EAAA,CAAA;AAAA;AACrC,KACF;AAAA,IACA;AAAA,MACE,KAAO,EAAA,OAAA;AAAA,MACP,MAAQ,EAAA,CAAC,GAAa,KAAA,GAAA,CAAI,QAAQ,KAAS,IAAA,SAAA;AAAA,MAC3C,KAAO,EAAA;AAAA,KACT;AAAA,IACA;AAAA,MACE,KAAO,EAAA,QAAA;AAAA,MACP,MAAQ,EAAA;AAAA;AACV,GACF;AACA,EAAM,MAAA,OAAA,GAA8B,CAAC,GAAG,cAAc,CAAA;AAEtD,EAAI,IAAA,YAAA,CAAa,QAAS,CAAA,aAAa,CAAG,EAAA;AACxC,IAAQ,OAAA,CAAA,IAAA,CAAK,GAAG,KAAK,CAAA;AAAA;AAEvB,EAAI,IAAA,YAAA,CAAa,QAAS,CAAA,gBAAgB,CAAG,EAAA;AAC3C,IAAA,MAAM,eAAsC,GAAA;AAAA,MAC1C;AAAA,QACE,KAAO,EAAA,aAAA;AAAA,QACP,MAAA,EAAQ,CAAC,GAAa,KAAA;AACpB,UAAA,uBAAQA,cAAA,CAAA,aAAA,CAAA,GAAA,EAAA,EAAI,WAAa,EAAA,OAAA,CAAQ,MAAM,GAAU,EAAA,CAAA;AAAA,SACnD;AAAA,QACA,KAAO,EAAA;AAAA,OACT;AAAA,MACA;AAAA,QACE,KAAO,EAAA,gBAAA;AAAA,QACP,MAAA,EAAQ,CAAC,GAAa,KAAA;AACpB,UAAA,uBAAQA,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA,EAAO,WAAa,EAAA,OAAA,CAAQ,MAAM,GAAU,EAAA,CAAA;AAAA,SACtD;AAAA,QACA,KAAO,EAAA;AAAA;AACT,KACF;AACA,IAAQ,OAAA,CAAA,IAAA,CAAK,GAAG,eAAe,CAAA;AAAA;AAGjC,EAAA,MAAM,UAAa,GAAA;AAAA,IACjB,QAAU,EAAA,GAAA;AAAA,IACV,KAAO,EAAA;AAAA,GACT;AAEA,EACE,uBAAAA,cAAA,CAAA,aAAA,CAAC,KAAI,EAAA,EAAA,KAAA,EAAO,UACV,EAAA,kBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,KAAA;AAAA,IAAA;AAAA,MACC,SAAS,EAAE,MAAA,EAAQ,MAAM,MAAQ,EAAA,KAAA,EAAO,qBAAqB,KAAM,EAAA;AAAA,MAGnE,IACG,EAAA,IAAA,CAAe,GAAI,CAAA,CAAC,GAAc,MAAA;AAAA,QACjC,GAAG,GAAA;AAAA,QACH,EAAA,EAAI,KAAK,QAAU,EAAA;AAAA,OACnB,CAAA,CAAA;AAAA,MAEJ;AAAA;AAAA,GAEJ,CAAA;AAEJ;;;;"}