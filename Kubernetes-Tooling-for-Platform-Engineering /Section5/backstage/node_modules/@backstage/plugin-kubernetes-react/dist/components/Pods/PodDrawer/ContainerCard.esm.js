import { StructuredMetadataTable } from '@backstage/core-components';
import Card from '@material-ui/core/Card';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import CardHeader from '@material-ui/core/CardHeader';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import { DateTime } from 'luxon';
import React__default from 'react';
import '@backstage/core-plugin-api';
import { useIsPodExecTerminalEnabled } from '../../../hooks/useIsPodExecTerminalEnabled.esm.js';
import 'react-use/esm/useAsync';
import '../../../api/types.esm.js';
import 'react-use/esm/useInterval';
import 'react-use/esm/useAsyncRetry';
import '../../../kubernetes-auth-provider/types.esm.js';
import '../../../hooks/PodNamesWithErrors.esm.js';
import '../../../hooks/PodNamesWithMetrics.esm.js';
import '../../../hooks/GroupedResponses.esm.js';
import '../../../hooks/Cluster.esm.js';
import '../../../hooks/usePodMetrics.esm.js';
import '../../../hooks/useMatchingErrors.esm.js';
import { formatMillicores, bytesToMiB } from '../../../utils/resources.esm.js';
import { PodExecTerminalDialog } from '../../PodExecTerminal/PodExecTerminalDialog.esm.js';
import { ResourceUtilization } from '../../ResourceUtilization/ResourceUtilization.esm.js';
import '@material-ui/core/Paper';
import '@material-ui/lab/Skeleton';
import { PodLogsDialog } from '../PodLogs/PodLogsDialog.esm.js';

const getContainerHealthChecks = (containerSpec, containerStatus) => {
  const healthCheck = {
    "not waiting to start": containerStatus.state?.waiting === void 0,
    "no restarts": containerStatus.restartCount === 0
  };
  if (containerStatus.state?.terminated?.reason === "Completed") {
    return healthCheck;
  }
  Object.assign(
    healthCheck,
    { started: !!containerStatus.started },
    { ready: containerStatus.ready },
    { "readiness probe set": containerSpec?.readinessProbe !== void 0 }
  );
  if (containerSpec && containerSpec?.livenessProbe !== void 0) {
    Object.assign(healthCheck, {
      "liveness probe set": containerSpec.livenessProbe
    });
  }
  return healthCheck;
};
const getCurrentState = (containerStatus) => {
  return containerStatus.state?.waiting?.reason || containerStatus.state?.terminated?.reason || (containerStatus.state?.running !== void 0 ? "Running" : "Unknown");
};
const getStartedAtTime = (containerStatus) => {
  return containerStatus.state?.running?.startedAt || containerStatus.state?.terminated?.startedAt;
};
const ContainerDatetime = ({ prefix, dateTime }) => {
  return /* @__PURE__ */ React__default.createElement(Typography, { variant: "subtitle2" }, prefix, ":", " ", DateTime.fromISO(dateTime).toRelative({
    locale: "en"
  }));
};
const ContainerCard = ({
  podScope,
  containerSpec,
  containerStatus,
  containerMetrics
}) => {
  const isPodExecTerminalEnabled = useIsPodExecTerminalEnabled();
  if (containerSpec === void 0) {
    return /* @__PURE__ */ React__default.createElement(Typography, null, "error reading pod from cluster");
  }
  const containerStartedTime = getStartedAtTime(containerStatus);
  const containerFinishedTime = containerStatus.state?.terminated?.finishedAt;
  return /* @__PURE__ */ React__default.createElement(Card, null, /* @__PURE__ */ React__default.createElement(
    CardHeader,
    {
      title: containerStatus.name,
      subheader: containerStatus.image
    }
  ), /* @__PURE__ */ React__default.createElement(CardContent, null, /* @__PURE__ */ React__default.createElement(Grid, { container: true }, /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, containerStartedTime && /* @__PURE__ */ React__default.createElement(
    ContainerDatetime,
    {
      prefix: "Started",
      dateTime: containerStartedTime
    }
  ), containerFinishedTime && /* @__PURE__ */ React__default.createElement(
    ContainerDatetime,
    {
      prefix: "Completed",
      dateTime: containerFinishedTime
    }
  ), containerStartedTime && containerFinishedTime && /* @__PURE__ */ React__default.createElement(Typography, { variant: "subtitle2" }, "Execution time:", " ", DateTime.fromISO(containerFinishedTime).diff(DateTime.fromISO(containerStartedTime), [
    "hours",
    "minutes",
    "seconds"
  ]).toHuman())), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "subtitle2" }, "Status: ", getCurrentState(containerStatus))), containerStatus.restartCount > 0 && /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "subtitle2" }, "Restarts: ", containerStatus.restartCount)), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "subtitle2" }, "Container health")), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(
    StructuredMetadataTable,
    {
      metadata: getContainerHealthChecks(
        containerSpec,
        containerStatus
      )
    }
  )), containerMetrics && /* @__PURE__ */ React__default.createElement(Grid, { container: true, item: true, xs: 12, spacing: 0 }, /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "subtitle1" }, "Resource utilization")), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12, style: { minHeight: "5rem" } }, /* @__PURE__ */ React__default.createElement(
    ResourceUtilization,
    {
      compressed: true,
      title: "CPU requests",
      usage: containerMetrics.cpuUsage.currentUsage,
      total: containerMetrics.cpuUsage.requestTotal,
      totalFormatted: formatMillicores(
        containerMetrics.cpuUsage.requestTotal
      )
    }
  ), /* @__PURE__ */ React__default.createElement(
    ResourceUtilization,
    {
      compressed: true,
      title: "CPU limits",
      usage: containerMetrics.cpuUsage.currentUsage,
      total: containerMetrics.cpuUsage.limitTotal,
      totalFormatted: formatMillicores(
        containerMetrics.cpuUsage.limitTotal
      )
    }
  ), /* @__PURE__ */ React__default.createElement(
    ResourceUtilization,
    {
      compressed: true,
      title: "Memory requests",
      usage: containerMetrics.memoryUsage.currentUsage,
      total: containerMetrics.memoryUsage.requestTotal,
      totalFormatted: bytesToMiB(
        containerMetrics.memoryUsage.requestTotal
      )
    }
  ), /* @__PURE__ */ React__default.createElement(
    ResourceUtilization,
    {
      compressed: true,
      title: "Memory limits",
      usage: containerMetrics.memoryUsage.currentUsage,
      total: containerMetrics.memoryUsage.limitTotal,
      totalFormatted: bytesToMiB(
        containerMetrics.memoryUsage.limitTotal
      )
    }
  ))))), /* @__PURE__ */ React__default.createElement(CardActions, null, /* @__PURE__ */ React__default.createElement(
    PodLogsDialog,
    {
      containerScope: {
        containerName: containerStatus.name,
        ...podScope
      }
    }
  ), isPodExecTerminalEnabled && /* @__PURE__ */ React__default.createElement(
    PodExecTerminalDialog,
    {
      cluster: podScope.cluster,
      containerName: containerStatus.name,
      podName: podScope.podName,
      podNamespace: podScope.podNamespace
    }
  )));
};

export { ContainerCard };
//# sourceMappingURL=ContainerCard.esm.js.map
