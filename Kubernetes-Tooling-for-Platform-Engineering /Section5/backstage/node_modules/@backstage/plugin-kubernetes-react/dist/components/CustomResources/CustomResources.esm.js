import React__default, { useContext } from 'react';
import lodash from 'lodash';
import { RolloutAccordions } from './ArgoRollouts/Rollout.esm.js';
import { DefaultCustomResourceAccordions } from './DefaultCustomResource.esm.js';
import '@backstage/core-plugin-api';
import 'react-use/esm/useAsync';
import '../../api/types.esm.js';
import 'react-use/esm/useInterval';
import 'react-use/esm/useAsyncRetry';
import '../../kubernetes-auth-provider/types.esm.js';
import '../../hooks/PodNamesWithErrors.esm.js';
import '../../hooks/PodNamesWithMetrics.esm.js';
import { GroupedResponsesContext } from '../../hooks/GroupedResponses.esm.js';
import '../../hooks/Cluster.esm.js';
import '../../hooks/usePodMetrics.esm.js';
import '../../hooks/useMatchingErrors.esm.js';

const kindToResource = (customResources) => {
  return lodash.groupBy(customResources, (value) => {
    return value.kind;
  });
};
const CustomResources = ({}) => {
  const groupedResponses = useContext(GroupedResponsesContext);
  const kindToResourceMap = kindToResource(groupedResponses.customResources);
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, Object.entries(kindToResourceMap).map(([kind, resources], i) => {
    switch (kind) {
      case "Rollout":
        return /* @__PURE__ */ React__default.createElement(RolloutAccordions, { key: i, rollouts: resources });
      default:
        return /* @__PURE__ */ React__default.createElement(
          DefaultCustomResourceAccordions,
          {
            key: i,
            customResources: resources,
            customResourceName: kind
          }
        );
    }
  }));
};

export { CustomResources };
//# sourceMappingURL=CustomResources.esm.js.map
