import React__default from 'react';
import { ItemCardGrid } from '@backstage/core-components';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import { makeStyles, createStyles } from '@material-ui/core/styles';
import { ContainerCard } from './ContainerCard.esm.js';
import '../../KubernetesDrawer/KubernetesStructuredMetadataTableDrawer.esm.js';
import { KubernetesDrawer } from '../../KubernetesDrawer/KubernetesDrawer.esm.js';
import '@material-ui/core/FormControlLabel';
import '@material-ui/core/Switch';
import 'js-yaml';
import { PodDeleteButton } from '../PodDelete/PodDeleteButton.esm.js';
import { PendingPodContent } from './PendingPodContent.esm.js';
import { ErrorList } from '../ErrorList/ErrorList.esm.js';
import { usePodMetrics } from '../../../hooks/usePodMetrics.esm.js';
import { ResourceUtilization } from '../../ResourceUtilization/ResourceUtilization.esm.js';
import { formatMillicores, bytesToMiB } from '../../../utils/resources.esm.js';
import { useIsPodDeleteEnabled } from '../../../hooks/useIsPodDeleteEnabled.esm.js';
import '@backstage/core-plugin-api';
import 'react-use/esm/useAsync';
import '../../../api/types.esm.js';
import 'react-use/esm/useInterval';
import 'react-use/esm/useAsyncRetry';
import '../../../kubernetes-auth-provider/types.esm.js';
import '../../../hooks/PodNamesWithErrors.esm.js';
import '../../../hooks/PodNamesWithMetrics.esm.js';
import '../../../hooks/GroupedResponses.esm.js';
import '../../../hooks/Cluster.esm.js';
import '../../../hooks/useMatchingErrors.esm.js';

const useDrawerContentStyles = makeStyles(
  (_theme) => createStyles({
    header: {
      display: "flex",
      flexDirection: "row",
      justifyContent: "space-between"
    },
    content: {
      height: "80%"
    },
    icon: {
      fontSize: 20
    },
    podoklist: {
      width: "100%",
      maxWidth: 360,
      maxHeight: 360
    }
  })
);
function getContainerSpecByName(pod, containerName) {
  return pod.spec?.containers.find((c) => c.name === containerName);
}
const PodDrawer = ({ podAndErrors, open }) => {
  const classes = useDrawerContentStyles();
  const podMetrics = usePodMetrics(podAndErrors.cluster.name, podAndErrors.pod);
  const isPodDeleteEnabled = useIsPodDeleteEnabled();
  return /* @__PURE__ */ React__default.createElement(
    KubernetesDrawer,
    {
      open,
      drawerContentsHeader: /* @__PURE__ */ React__default.createElement(Typography, { variant: "subtitle1" }, "Pod", " ", podAndErrors.pod.status?.podIP && `(${podAndErrors.pod.status?.podIP})`),
      kubernetesObject: podAndErrors.pod,
      label: /* @__PURE__ */ React__default.createElement(Typography, { variant: "subtitle1" }, podAndErrors.pod.metadata?.name ?? "unknown")
    },
    /* @__PURE__ */ React__default.createElement("div", { className: classes.content }, isPodDeleteEnabled && /* @__PURE__ */ React__default.createElement(
      PodDeleteButton,
      {
        podScope: {
          podName: podAndErrors.pod.metadata?.name ?? "unknown",
          podNamespace: podAndErrors.pod.metadata?.namespace ?? "default",
          cluster: podAndErrors.cluster
        }
      }
    ), podMetrics && /* @__PURE__ */ React__default.createElement(Grid, { container: true, item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "h5" }, "Resource utilization")), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 6 }, /* @__PURE__ */ React__default.createElement(
      ResourceUtilization,
      {
        title: "CPU requests",
        usage: podMetrics.cpu.currentUsage,
        total: podMetrics.cpu.requestTotal,
        totalFormatted: formatMillicores(podMetrics.cpu.requestTotal)
      }
    ), /* @__PURE__ */ React__default.createElement(
      ResourceUtilization,
      {
        title: "CPU limits",
        usage: podMetrics.cpu.currentUsage,
        total: podMetrics.cpu.limitTotal,
        totalFormatted: formatMillicores(podMetrics.cpu.limitTotal)
      }
    )), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 6 }, /* @__PURE__ */ React__default.createElement(
      ResourceUtilization,
      {
        title: "Memory requests",
        usage: podMetrics.memory.currentUsage,
        total: podMetrics.memory.requestTotal,
        totalFormatted: bytesToMiB(podMetrics.memory.requestTotal)
      }
    ), /* @__PURE__ */ React__default.createElement(
      ResourceUtilization,
      {
        title: "Memory limits",
        usage: podMetrics.memory.currentUsage,
        total: podMetrics.memory.limitTotal,
        totalFormatted: bytesToMiB(podMetrics.memory.limitTotal)
      }
    ))), podAndErrors.pod.status?.phase === "Pending" && /* @__PURE__ */ React__default.createElement(PendingPodContent, { pod: podAndErrors.pod }), podAndErrors.pod.status?.containerStatuses?.length && /* @__PURE__ */ React__default.createElement(Grid, { container: true, spacing: 2 }, /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "h5" }, "Containers")), /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(ItemCardGrid, null, podAndErrors.pod.status?.containerStatuses?.map(
      (containerStatus, i) => {
        const containerSpec = getContainerSpecByName(
          podAndErrors.pod,
          containerStatus.name
        );
        const containerMetrics = (podMetrics?.containers ?? []).find((c) => c.container === containerStatus.name);
        return /* @__PURE__ */ React__default.createElement(
          ContainerCard,
          {
            key: `container-card-${podAndErrors.pod.metadata?.name}-${i}`,
            containerMetrics,
            podScope: {
              podName: podAndErrors.pod.metadata?.name ?? "unknown",
              podNamespace: podAndErrors.pod.metadata?.namespace ?? "unknown",
              cluster: podAndErrors.cluster
            },
            containerSpec,
            containerStatus
          }
        );
      }
    ))), podAndErrors.errors.length > 0 && /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "h5" }, "Errors")), podAndErrors.errors.length > 0 && /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(ErrorList, { podAndErrors: [podAndErrors] }))))
  );
};

export { PodDrawer };
//# sourceMappingURL=PodDrawer.esm.js.map
