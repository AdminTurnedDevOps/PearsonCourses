import OpenInBrowserIcon from '@material-ui/icons/OpenInBrowser';
import React__default from 'react';
import { KubernetesDialog } from '../KubernetesDialog/KubernetesDialog.esm.js';
import '@backstage/core-plugin-api';
import { useIsPodExecTerminalSupported } from '../../hooks/useIsPodExecTerminalSupported.esm.js';
import 'react-use/esm/useInterval';
import 'react-use/esm/useAsyncRetry';
import '../../kubernetes-auth-provider/types.esm.js';
import '../../api/types.esm.js';
import '../../hooks/PodNamesWithErrors.esm.js';
import '../../hooks/PodNamesWithMetrics.esm.js';
import '../../hooks/GroupedResponses.esm.js';
import '../../hooks/Cluster.esm.js';
import '../../hooks/usePodMetrics.esm.js';
import '../../hooks/useMatchingErrors.esm.js';
import { PodExecTerminal } from './PodExecTerminal.esm.js';

const PodExecTerminalDialog = (props) => {
  const { cluster, containerName, podName } = props;
  const isPodExecTerminalSupported = useIsPodExecTerminalSupported();
  return !isPodExecTerminalSupported.loading && isPodExecTerminalSupported.value && /* @__PURE__ */ React__default.createElement(
    KubernetesDialog,
    {
      buttonAriaLabel: "open terminal",
      buttonIcon: /* @__PURE__ */ React__default.createElement(OpenInBrowserIcon, null),
      buttonText: "Terminal",
      disabled: isPodExecTerminalSupported.loading || !isPodExecTerminalSupported.value,
      title: `${podName} - ${containerName} terminal shell on cluster ${cluster.title || cluster.name}`
    },
    /* @__PURE__ */ React__default.createElement(PodExecTerminal, { ...props })
  );
};

export { PodExecTerminalDialog };
//# sourceMappingURL=PodExecTerminalDialog.esm.js.map
