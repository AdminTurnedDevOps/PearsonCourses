const kindMappings = {
  deployment: "deployments",
  ingress: "ingresses",
  service: "services",
  horizontalpodautoscaler: "horizontalpodautoscalers",
  persistentvolume: "persistentvolumes"
};
class OpenshiftClusterLinksFormatter {
  async formatClusterLink(options) {
    if (!options.dashboardUrl) {
      throw new Error("OpenShift dashboard requires a dashboardUrl option");
    }
    const basePath = new URL(options.dashboardUrl.href);
    const name = encodeURIComponent(options.object.metadata?.name ?? "");
    const namespace = encodeURIComponent(
      options.object.metadata?.namespace ?? ""
    );
    const validKind = kindMappings[options.kind.toLocaleLowerCase("en-US")];
    if (!basePath.pathname.endsWith("/")) {
      basePath.pathname += "/";
    }
    let path = "";
    if (namespace) {
      if (name && validKind) {
        path = `k8s/ns/${namespace}/${validKind}/${name}`;
      } else {
        path = `k8s/cluster/projects/${namespace}`;
      }
    } else if (validKind) {
      path = `k8s/cluster/${validKind}`;
      if (name) {
        path += `/${name}`;
      }
    }
    return new URL(path, basePath);
  }
}

export { OpenshiftClusterLinksFormatter };
//# sourceMappingURL=OpenshiftClusterLinksFormatter.esm.js.map
