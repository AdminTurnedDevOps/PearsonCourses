{"version":3,"file":"GkeClusterLinksFormatter.esm.js","sources":["../../../src/api/formatters/GkeClusterLinksFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  ClusterLinksFormatter,\n  ClusterLinksFormatterOptions,\n} from '../../types';\nimport { ProfileInfoApi } from '@backstage/core-plugin-api';\n\nconst kindMappings: Record<string, string> = {\n  deployment: 'deployment',\n  pod: 'pod',\n  ingress: 'ingress',\n  service: 'service',\n  horizontalpodautoscaler: 'deployment',\n};\n\n/** @public */\nexport class GkeClusterLinksFormatter implements ClusterLinksFormatter {\n  constructor(private readonly googleAuthApi: ProfileInfoApi | undefined) {}\n  async formatClusterLink(options: ClusterLinksFormatterOptions): Promise<URL> {\n    if (!options.dashboardParameters) {\n      throw new Error('GKE dashboard requires a dashboardParameters option');\n    }\n    const args = options.dashboardParameters;\n    if (typeof args.projectId !== 'string') {\n      throw new Error(\n        'GKE dashboard requires a \"projectId\" of type string in the dashboardParameters option',\n      );\n    }\n    if (typeof args.region !== 'string') {\n      throw new Error(\n        'GKE dashboard requires a \"region\" of type string in the dashboardParameters option',\n      );\n    }\n    if (typeof args.clusterName !== 'string') {\n      throw new Error(\n        'GKE dashboard requires a \"clusterName\" of type string in the dashboardParameters option',\n      );\n    }\n    const basePath = new URL('https://console.cloud.google.com/');\n    const region = encodeURIComponent(args.region);\n    const clusterName = encodeURIComponent(args.clusterName);\n    const name = encodeURIComponent(options.object.metadata?.name ?? '');\n    const namespace = encodeURIComponent(\n      options.object.metadata?.namespace ?? '',\n    );\n    const validKind = kindMappings[options.kind.toLocaleLowerCase('en-US')];\n    let path: string;\n    if (namespace && name && validKind) {\n      const kindsWithDetails = ['ingress', 'pod'];\n      const landingPage = kindsWithDetails.includes(validKind)\n        ? 'details'\n        : 'overview';\n      path = `kubernetes/${validKind}/${region}/${clusterName}/${namespace}/${name}/${landingPage}`;\n    } else {\n      path = `kubernetes/clusters/details/${region}/${clusterName}/details`;\n    }\n    const result = new URL(path, basePath);\n    result.searchParams.set('project', args.projectId);\n    if (this.googleAuthApi) {\n      const profile = await this.googleAuthApi.getProfile({ optional: true });\n      if (profile?.email) {\n        result.searchParams.set('authuser', profile.email);\n      }\n    }\n    return result;\n  }\n}\n"],"names":[],"mappings":"AAqBA,MAAM,YAAuC,GAAA;AAAA,EAC3C,UAAY,EAAA,YAAA;AAAA,EACZ,GAAK,EAAA,KAAA;AAAA,EACL,OAAS,EAAA,SAAA;AAAA,EACT,OAAS,EAAA,SAAA;AAAA,EACT,uBAAyB,EAAA;AAC3B,CAAA;AAGO,MAAM,wBAA0D,CAAA;AAAA,EACrE,YAA6B,aAA2C,EAAA;AAA3C,IAAA,IAAA,CAAA,aAAA,GAAA,aAAA;AAAA;AAA4C,EACzE,MAAM,kBAAkB,OAAqD,EAAA;AAC3E,IAAI,IAAA,CAAC,QAAQ,mBAAqB,EAAA;AAChC,MAAM,MAAA,IAAI,MAAM,qDAAqD,CAAA;AAAA;AAEvE,IAAA,MAAM,OAAO,OAAQ,CAAA,mBAAA;AACrB,IAAI,IAAA,OAAO,IAAK,CAAA,SAAA,KAAc,QAAU,EAAA;AACtC,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA;AAEF,IAAI,IAAA,OAAO,IAAK,CAAA,MAAA,KAAW,QAAU,EAAA;AACnC,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA;AAEF,IAAI,IAAA,OAAO,IAAK,CAAA,WAAA,KAAgB,QAAU,EAAA;AACxC,MAAA,MAAM,IAAI,KAAA;AAAA,QACR;AAAA,OACF;AAAA;AAEF,IAAM,MAAA,QAAA,GAAW,IAAI,GAAA,CAAI,mCAAmC,CAAA;AAC5D,IAAM,MAAA,MAAA,GAAS,kBAAmB,CAAA,IAAA,CAAK,MAAM,CAAA;AAC7C,IAAM,MAAA,WAAA,GAAc,kBAAmB,CAAA,IAAA,CAAK,WAAW,CAAA;AACvD,IAAA,MAAM,OAAO,kBAAmB,CAAA,OAAA,CAAQ,MAAO,CAAA,QAAA,EAAU,QAAQ,EAAE,CAAA;AACnE,IAAA,MAAM,SAAY,GAAA,kBAAA;AAAA,MAChB,OAAA,CAAQ,MAAO,CAAA,QAAA,EAAU,SAAa,IAAA;AAAA,KACxC;AACA,IAAA,MAAM,YAAY,YAAa,CAAA,OAAA,CAAQ,IAAK,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAA;AACtE,IAAI,IAAA,IAAA;AACJ,IAAI,IAAA,SAAA,IAAa,QAAQ,SAAW,EAAA;AAClC,MAAM,MAAA,gBAAA,GAAmB,CAAC,SAAA,EAAW,KAAK,CAAA;AAC1C,MAAA,MAAM,WAAc,GAAA,gBAAA,CAAiB,QAAS,CAAA,SAAS,IACnD,SACA,GAAA,UAAA;AACJ,MAAO,IAAA,GAAA,CAAA,WAAA,EAAc,SAAS,CAAA,CAAA,EAAI,MAAM,CAAA,CAAA,EAAI,WAAW,CAAA,CAAA,EAAI,SAAS,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA,EAAI,WAAW,CAAA,CAAA;AAAA,KACtF,MAAA;AACL,MAAO,IAAA,GAAA,CAAA,4BAAA,EAA+B,MAAM,CAAA,CAAA,EAAI,WAAW,CAAA,QAAA,CAAA;AAAA;AAE7D,IAAA,MAAM,MAAS,GAAA,IAAI,GAAI,CAAA,IAAA,EAAM,QAAQ,CAAA;AACrC,IAAA,MAAA,CAAO,YAAa,CAAA,GAAA,CAAI,SAAW,EAAA,IAAA,CAAK,SAAS,CAAA;AACjD,IAAA,IAAI,KAAK,aAAe,EAAA;AACtB,MAAM,MAAA,OAAA,GAAU,MAAM,IAAK,CAAA,aAAA,CAAc,WAAW,EAAE,QAAA,EAAU,MAAM,CAAA;AACtE,MAAA,IAAI,SAAS,KAAO,EAAA;AAClB,QAAA,MAAA,CAAO,YAAa,CAAA,GAAA,CAAI,UAAY,EAAA,OAAA,CAAQ,KAAK,CAAA;AAAA;AACnD;AAEF,IAAO,OAAA,MAAA;AAAA;AAEX;;;;"}