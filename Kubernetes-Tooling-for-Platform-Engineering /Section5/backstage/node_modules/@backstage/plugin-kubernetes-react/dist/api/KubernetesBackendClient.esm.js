import { stringifyEntityRef } from '@backstage/catalog-model';
import { NotFoundError } from '@backstage/errors';

class KubernetesBackendClient {
  discoveryApi;
  fetchApi;
  kubernetesAuthProvidersApi;
  constructor(options) {
    this.discoveryApi = options.discoveryApi;
    this.fetchApi = options.fetchApi;
    this.kubernetesAuthProvidersApi = options.kubernetesAuthProvidersApi;
  }
  async handleResponse(response) {
    if (!response.ok) {
      const payload = await response.text();
      let message;
      switch (response.status) {
        case 404:
          message = "Could not find the Kubernetes Backend (HTTP 404). Make sure the plugin has been fully installed.";
          break;
        default:
          message = `Request failed with ${response.status} ${response.statusText}, ${payload}`;
      }
      throw new Error(message);
    }
    return await response.json();
  }
  async postRequired(path, requestBody) {
    const url = `${await this.discoveryApi.getBaseUrl("kubernetes")}${path}`;
    const response = await this.fetchApi.fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(requestBody)
    });
    return this.handleResponse(response);
  }
  async getCluster(clusterName) {
    const cluster = await this.getClusters().then(
      (clusters) => clusters.find((c) => c.name === clusterName)
    );
    if (!cluster) {
      throw new NotFoundError(`Cluster ${clusterName} not found`);
    }
    return cluster;
  }
  async getCredentials(authProvider, oidcTokenProvider) {
    return await this.kubernetesAuthProvidersApi.getCredentials(
      authProvider === "oidc" ? `${authProvider}.${oidcTokenProvider}` : authProvider
    );
  }
  async getObjectsByEntity(requestBody) {
    return await this.postRequired(
      `/services/${requestBody.entity.metadata.name}`,
      requestBody
    );
  }
  async getWorkloadsByEntity(request) {
    return await this.postRequired("/resources/workloads/query", {
      auth: request.auth,
      entityRef: stringifyEntityRef(request.entity)
    });
  }
  async getCustomObjectsByEntity(request) {
    return await this.postRequired(`/resources/custom/query`, {
      entityRef: stringifyEntityRef(request.entity),
      auth: request.auth,
      customResources: request.customResources
    });
  }
  async getClusters() {
    const url = `${await this.discoveryApi.getBaseUrl("kubernetes")}/clusters`;
    const response = await this.fetchApi.fetch(url);
    return (await this.handleResponse(response)).items;
  }
  async proxy(options) {
    const { authProvider, oidcTokenProvider } = await this.getCluster(
      options.clusterName
    );
    const kubernetesCredentials = await this.getCredentials(
      authProvider,
      oidcTokenProvider
    );
    const url = `${await this.discoveryApi.getBaseUrl("kubernetes")}/proxy${options.path}`;
    const headers = KubernetesBackendClient.getKubernetesHeaders(
      options,
      kubernetesCredentials?.token,
      authProvider,
      oidcTokenProvider
    );
    return await this.fetchApi.fetch(url, { ...options.init, headers });
  }
  static getKubernetesHeaders(options, k8sToken, authProvider, oidcTokenProvider) {
    const kubernetesAuthHeader = KubernetesBackendClient.getKubernetesAuthHeaderByAuthProvider(
      authProvider,
      oidcTokenProvider
    );
    return {
      ...options.init?.headers,
      [`Backstage-Kubernetes-Cluster`]: options.clusterName,
      ...k8sToken && {
        [kubernetesAuthHeader]: k8sToken
      }
    };
  }
  static getKubernetesAuthHeaderByAuthProvider(authProvider, oidcTokenProvider) {
    let header = "Backstage-Kubernetes-Authorization";
    header = header.concat("-", authProvider);
    if (oidcTokenProvider) header = header.concat("-", oidcTokenProvider);
    return header;
  }
}

export { KubernetesBackendClient };
//# sourceMappingURL=KubernetesBackendClient.esm.js.map
