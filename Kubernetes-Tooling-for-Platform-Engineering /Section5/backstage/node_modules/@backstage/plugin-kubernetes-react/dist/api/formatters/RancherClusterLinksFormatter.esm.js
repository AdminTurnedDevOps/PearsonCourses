const kindMappings = {
  deployment: "apps.deployment",
  ingress: "networking.k8s.io.ingress",
  service: "service",
  horizontalpodautoscaler: "autoscaling.horizontalpodautoscaler"
};
class RancherClusterLinksFormatter {
  async formatClusterLink(options) {
    if (!options.dashboardUrl) {
      throw new Error("Rancher dashboard requires a dashboardUrl option");
    }
    const basePath = new URL(options.dashboardUrl.href);
    const name = encodeURIComponent(options.object.metadata?.name ?? "");
    const namespace = encodeURIComponent(
      options.object.metadata?.namespace ?? ""
    );
    const validKind = kindMappings[options.kind.toLocaleLowerCase("en-US")];
    if (!basePath.pathname.endsWith("/")) {
      basePath.pathname += "/";
    }
    let path = "";
    if (validKind && name && namespace) {
      path = `explorer/${validKind}/${namespace}/${name}`;
    } else if (namespace) {
      path = "explorer/workload";
    }
    return new URL(path, basePath);
  }
}

export { RancherClusterLinksFormatter };
//# sourceMappingURL=RancherClusterLinksFormatter.esm.js.map
