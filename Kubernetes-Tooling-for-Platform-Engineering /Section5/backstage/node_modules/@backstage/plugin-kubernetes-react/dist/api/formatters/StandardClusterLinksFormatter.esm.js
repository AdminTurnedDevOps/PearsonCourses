const kindMappings = {
  deployment: "deployment",
  pod: "pod",
  ingress: "ingress",
  service: "service",
  horizontalpodautoscaler: "deployment",
  statefulset: "statefulset"
};
class StandardClusterLinksFormatter {
  async formatClusterLink(options) {
    if (!options.dashboardUrl) {
      throw new Error("standard dashboard requires a dashboardUrl option");
    }
    const result = new URL(options.dashboardUrl.href);
    const name = encodeURIComponent(options.object.metadata?.name ?? "");
    const namespace = encodeURIComponent(
      options.object.metadata?.namespace ?? ""
    );
    const validKind = kindMappings[options.kind.toLocaleLowerCase("en-US")];
    if (!result.pathname.endsWith("/")) {
      result.pathname += "/";
    }
    if (validKind && name && namespace) {
      result.hash = `/${validKind}/${namespace}/${name}`;
    } else if (namespace) {
      result.hash = "/workloads";
    }
    if (namespace) {
      result.hash += `?namespace=${namespace}`;
    }
    return result;
  }
}

export { StandardClusterLinksFormatter };
//# sourceMappingURL=StandardClusterLinksFormatter.esm.js.map
