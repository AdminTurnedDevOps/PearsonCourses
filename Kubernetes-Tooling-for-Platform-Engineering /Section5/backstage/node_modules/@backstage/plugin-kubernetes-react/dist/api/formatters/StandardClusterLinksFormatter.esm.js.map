{"version":3,"file":"StandardClusterLinksFormatter.esm.js","sources":["../../../src/api/formatters/StandardClusterLinksFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  ClusterLinksFormatter,\n  ClusterLinksFormatterOptions,\n} from '../../types';\n\nconst kindMappings: Record<string, string> = {\n  deployment: 'deployment',\n  pod: 'pod',\n  ingress: 'ingress',\n  service: 'service',\n  horizontalpodautoscaler: 'deployment',\n  statefulset: 'statefulset',\n};\n\n/** @public */\nexport class StandardClusterLinksFormatter implements ClusterLinksFormatter {\n  async formatClusterLink(options: ClusterLinksFormatterOptions): Promise<URL> {\n    if (!options.dashboardUrl) {\n      throw new Error('standard dashboard requires a dashboardUrl option');\n    }\n    const result = new URL(options.dashboardUrl.href);\n    const name = encodeURIComponent(options.object.metadata?.name ?? '');\n    const namespace = encodeURIComponent(\n      options.object.metadata?.namespace ?? '',\n    );\n    const validKind = kindMappings[options.kind.toLocaleLowerCase('en-US')];\n    if (!result.pathname.endsWith('/')) {\n      result.pathname += '/';\n    }\n    if (validKind && name && namespace) {\n      result.hash = `/${validKind}/${namespace}/${name}`;\n    } else if (namespace) {\n      result.hash = '/workloads';\n    }\n    if (namespace) {\n      // Note that Angular SPA requires a hash and the query parameter should be part of it\n      result.hash += `?namespace=${namespace}`;\n    }\n    return result;\n  }\n}\n"],"names":[],"mappings":"AAoBA,MAAM,YAAuC,GAAA;AAAA,EAC3C,UAAY,EAAA,YAAA;AAAA,EACZ,GAAK,EAAA,KAAA;AAAA,EACL,OAAS,EAAA,SAAA;AAAA,EACT,OAAS,EAAA,SAAA;AAAA,EACT,uBAAyB,EAAA,YAAA;AAAA,EACzB,WAAa,EAAA;AACf,CAAA;AAGO,MAAM,6BAA+D,CAAA;AAAA,EAC1E,MAAM,kBAAkB,OAAqD,EAAA;AAC3E,IAAI,IAAA,CAAC,QAAQ,YAAc,EAAA;AACzB,MAAM,MAAA,IAAI,MAAM,mDAAmD,CAAA;AAAA;AAErE,IAAA,MAAM,MAAS,GAAA,IAAI,GAAI,CAAA,OAAA,CAAQ,aAAa,IAAI,CAAA;AAChD,IAAA,MAAM,OAAO,kBAAmB,CAAA,OAAA,CAAQ,MAAO,CAAA,QAAA,EAAU,QAAQ,EAAE,CAAA;AACnE,IAAA,MAAM,SAAY,GAAA,kBAAA;AAAA,MAChB,OAAA,CAAQ,MAAO,CAAA,QAAA,EAAU,SAAa,IAAA;AAAA,KACxC;AACA,IAAA,MAAM,YAAY,YAAa,CAAA,OAAA,CAAQ,IAAK,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAA;AACtE,IAAA,IAAI,CAAC,MAAA,CAAO,QAAS,CAAA,QAAA,CAAS,GAAG,CAAG,EAAA;AAClC,MAAA,MAAA,CAAO,QAAY,IAAA,GAAA;AAAA;AAErB,IAAI,IAAA,SAAA,IAAa,QAAQ,SAAW,EAAA;AAClC,MAAA,MAAA,CAAO,OAAO,CAAI,CAAA,EAAA,SAAS,CAAI,CAAA,EAAA,SAAS,IAAI,IAAI,CAAA,CAAA;AAAA,eACvC,SAAW,EAAA;AACpB,MAAA,MAAA,CAAO,IAAO,GAAA,YAAA;AAAA;AAEhB,IAAA,IAAI,SAAW,EAAA;AAEb,MAAO,MAAA,CAAA,IAAA,IAAQ,cAAc,SAAS,CAAA,CAAA;AAAA;AAExC,IAAO,OAAA,MAAA;AAAA;AAEX;;;;"}