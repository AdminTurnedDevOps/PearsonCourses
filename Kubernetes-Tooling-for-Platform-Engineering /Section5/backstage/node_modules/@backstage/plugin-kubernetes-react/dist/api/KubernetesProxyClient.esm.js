class KubernetesProxyClient {
  kubernetesApi;
  constructor(options) {
    this.kubernetesApi = options.kubernetesApi;
  }
  async handleText(response) {
    if (!response.ok) {
      const payload = await response.text();
      let message;
      switch (response.status) {
        default:
          message = `Proxy request failed with ${response.status} ${response.statusText}, ${payload}`;
      }
      throw new Error(message);
    }
    return await response.text();
  }
  async handleJson(response) {
    if (!response.ok) {
      const payload = await response.text();
      let message = `Request failed with ${response.status} ${response.statusText}, ${payload}`;
      switch (response.status) {
        case 404:
          message = `Proxy request failed with ${response.status} ${response.statusText}, ${payload}`;
          break;
        default:
          message = `Request failed with ${response.status} ${response.statusText}, ${payload}`;
      }
      throw new Error(message);
    }
    return await response.json();
  }
  async getEventsByInvolvedObjectName({
    clusterName,
    involvedObjectName,
    namespace
  }) {
    return await this.kubernetesApi.proxy({
      clusterName,
      path: `/api/v1/namespaces/${namespace}/events?fieldSelector=involvedObject.name=${involvedObjectName}`,
      init: {
        method: "GET"
      }
    }).then((response) => this.handleJson(response)).then((eventList) => eventList.items);
  }
  async getPodLogs({
    podName,
    namespace,
    clusterName,
    containerName,
    previous
  }) {
    const params = new URLSearchParams({
      container: containerName
    });
    if (previous) {
      params.append("previous", "");
    }
    return await this.kubernetesApi.proxy({
      clusterName,
      path: `/api/v1/namespaces/${namespace}/pods/${podName}/log?${params.toString()}`,
      init: {
        method: "GET"
      }
    }).then((response) => this.handleText(response)).then((text) => ({ text }));
  }
  async deletePod({
    podName,
    namespace,
    clusterName
  }) {
    return await this.kubernetesApi.proxy({
      clusterName,
      path: `/api/v1/namespaces/${namespace}/pods/${podName}`,
      init: {
        method: "DELETE"
      }
    }).then((response) => this.handleText(response)).then((text) => ({ text }));
  }
}

export { KubernetesProxyClient };
//# sourceMappingURL=KubernetesProxyClient.esm.js.map
