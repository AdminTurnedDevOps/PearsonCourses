{"version":3,"file":"AksClusterLinksFormatter.esm.js","sources":["../../../src/api/formatters/AksClusterLinksFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  ClusterLinksFormatter,\n  ClusterLinksFormatterOptions,\n} from '../../types';\n\nconst basePath =\n  'https://portal.azure.com/#blade/Microsoft_Azure_ContainerService/AksK8ResourceMenuBlade/overview-Deployment/aksClusterId';\n\nconst requiredParams = ['subscriptionId', 'resourceGroup', 'clusterName'];\n\n/** @public */\nexport class AksClusterLinksFormatter implements ClusterLinksFormatter {\n  async formatClusterLink(options: ClusterLinksFormatterOptions) {\n    if (!options.dashboardParameters) {\n      throw new Error('AKS dashboard requires a dashboardParameters option');\n    }\n    const args = options.dashboardParameters;\n    for (const param of requiredParams) {\n      if (typeof args[param] !== 'string') {\n        throw new Error(\n          `AKS dashboard requires a \"${param}\" of type string in the dashboardParameters option`,\n        );\n      }\n    }\n\n    const path = `/subscriptions/${args.subscriptionId}/resourceGroups/${args.resourceGroup}/providers/Microsoft.ContainerService/managedClusters/${args.clusterName}`;\n\n    const { name, namespace, uid } = options.object.metadata;\n    const { selector } = options.object.spec;\n    const params = {\n      kind: options.kind,\n      metadata: { name, namespace, uid },\n      spec: {\n        selector,\n      },\n    };\n\n    return new URL(\n      `${basePath}/${encodeURIComponent(path)}/resource/${encodeURIComponent(\n        JSON.stringify(params),\n      )}`,\n    );\n  }\n}\n"],"names":[],"mappings":"AAoBA,MAAM,QACJ,GAAA,0HAAA;AAEF,MAAM,cAAiB,GAAA,CAAC,gBAAkB,EAAA,eAAA,EAAiB,aAAa,CAAA;AAGjE,MAAM,wBAA0D,CAAA;AAAA,EACrE,MAAM,kBAAkB,OAAuC,EAAA;AAC7D,IAAI,IAAA,CAAC,QAAQ,mBAAqB,EAAA;AAChC,MAAM,MAAA,IAAI,MAAM,qDAAqD,CAAA;AAAA;AAEvE,IAAA,MAAM,OAAO,OAAQ,CAAA,mBAAA;AACrB,IAAA,KAAA,MAAW,SAAS,cAAgB,EAAA;AAClC,MAAA,IAAI,OAAO,IAAA,CAAK,KAAK,CAAA,KAAM,QAAU,EAAA;AACnC,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,6BAA6B,KAAK,CAAA,kDAAA;AAAA,SACpC;AAAA;AACF;AAGF,IAAM,MAAA,IAAA,GAAO,kBAAkB,IAAK,CAAA,cAAc,mBAAmB,IAAK,CAAA,aAAa,CAAyD,sDAAA,EAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAEhK,IAAA,MAAM,EAAE,IAAM,EAAA,SAAA,EAAW,GAAI,EAAA,GAAI,QAAQ,MAAO,CAAA,QAAA;AAChD,IAAA,MAAM,EAAE,QAAA,EAAa,GAAA,OAAA,CAAQ,MAAO,CAAA,IAAA;AACpC,IAAA,MAAM,MAAS,GAAA;AAAA,MACb,MAAM,OAAQ,CAAA,IAAA;AAAA,MACd,QAAU,EAAA,EAAE,IAAM,EAAA,SAAA,EAAW,GAAI,EAAA;AAAA,MACjC,IAAM,EAAA;AAAA,QACJ;AAAA;AACF,KACF;AAEA,IAAA,OAAO,IAAI,GAAA;AAAA,MACT,GAAG,QAAQ,CAAA,CAAA,EAAI,kBAAmB,CAAA,IAAI,CAAC,CAAa,UAAA,EAAA,kBAAA;AAAA,QAClD,IAAA,CAAK,UAAU,MAAM;AAAA,OACtB,CAAA;AAAA,KACH;AAAA;AAEJ;;;;"}