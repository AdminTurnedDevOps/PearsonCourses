{"version":3,"file":"KubernetesAuthProviders.esm.js","sources":["../../src/kubernetes-auth-provider/KubernetesAuthProviders.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { KubernetesRequestBody } from '@backstage/plugin-kubernetes-common';\nimport { KubernetesAuthProvider, KubernetesAuthProvidersApi } from './types';\nimport { GoogleKubernetesAuthProvider } from './GoogleKubernetesAuthProvider';\nimport { ServerSideKubernetesAuthProvider } from './ServerSideAuthProvider';\nimport { OAuthApi, OpenIdConnectApi } from '@backstage/core-plugin-api';\nimport { OidcKubernetesAuthProvider } from './OidcKubernetesAuthProvider';\nimport { AksKubernetesAuthProvider } from './AksKubernetesAuthProvider';\n\n/** @public */\nexport class KubernetesAuthProviders implements KubernetesAuthProvidersApi {\n  private readonly kubernetesAuthProviderMap: Map<\n    string,\n    KubernetesAuthProvider\n  >;\n\n  constructor(options: {\n    microsoftAuthApi: OAuthApi;\n    googleAuthApi: OAuthApi;\n    oidcProviders?: { [key: string]: OpenIdConnectApi };\n  }) {\n    this.kubernetesAuthProviderMap = new Map<string, KubernetesAuthProvider>();\n    this.kubernetesAuthProviderMap.set(\n      'google',\n      new GoogleKubernetesAuthProvider(options.googleAuthApi),\n    );\n    this.kubernetesAuthProviderMap.set(\n      'serviceAccount',\n      new ServerSideKubernetesAuthProvider(),\n    );\n    this.kubernetesAuthProviderMap.set(\n      'googleServiceAccount',\n      new ServerSideKubernetesAuthProvider(),\n    );\n    this.kubernetesAuthProviderMap.set(\n      'aws',\n      new ServerSideKubernetesAuthProvider(),\n    );\n    this.kubernetesAuthProviderMap.set(\n      'azure',\n      new ServerSideKubernetesAuthProvider(),\n    );\n    this.kubernetesAuthProviderMap.set(\n      'localKubectlProxy',\n      new ServerSideKubernetesAuthProvider(),\n    );\n    this.kubernetesAuthProviderMap.set(\n      'aks',\n      new AksKubernetesAuthProvider(options.microsoftAuthApi),\n    );\n\n    if (options.oidcProviders) {\n      Object.keys(options.oidcProviders).forEach(provider => {\n        this.kubernetesAuthProviderMap.set(\n          `oidc.${provider}`,\n          new OidcKubernetesAuthProvider(\n            provider,\n            options.oidcProviders![provider],\n          ),\n        );\n      });\n    }\n  }\n\n  async decorateRequestBodyForAuth(\n    authProvider: string,\n    requestBody: KubernetesRequestBody,\n  ): Promise<KubernetesRequestBody> {\n    const kubernetesAuthProvider: KubernetesAuthProvider | undefined =\n      this.kubernetesAuthProviderMap.get(authProvider);\n    if (kubernetesAuthProvider) {\n      return await kubernetesAuthProvider.decorateRequestBodyForAuth(\n        requestBody,\n      );\n    }\n\n    if (authProvider.startsWith('oidc.')) {\n      throw new Error(\n        `KubernetesAuthProviders has no oidcProvider configured for ${authProvider}`,\n      );\n    }\n    throw new Error(\n      `authProvider \"${authProvider}\" has no KubernetesAuthProvider defined for it`,\n    );\n  }\n\n  async getCredentials(authProvider: string): Promise<{ token?: string }> {\n    const kubernetesAuthProvider: KubernetesAuthProvider | undefined =\n      this.kubernetesAuthProviderMap.get(authProvider);\n\n    if (kubernetesAuthProvider) {\n      return await kubernetesAuthProvider.getCredentials();\n    }\n\n    if (authProvider.startsWith('oidc.')) {\n      throw new Error(\n        `KubernetesAuthProviders has no oidcProvider configured for ${authProvider}`,\n      );\n    }\n    throw new Error(\n      `authProvider \"${authProvider}\" has no KubernetesAuthProvider defined for it`,\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;AAyBO,MAAM,uBAA8D,CAAA;AAAA,EACxD,yBAAA;AAAA,EAKjB,YAAY,OAIT,EAAA;AACD,IAAK,IAAA,CAAA,yBAAA,uBAAgC,GAAoC,EAAA;AACzE,IAAA,IAAA,CAAK,yBAA0B,CAAA,GAAA;AAAA,MAC7B,QAAA;AAAA,MACA,IAAI,4BAA6B,CAAA,OAAA,CAAQ,aAAa;AAAA,KACxD;AACA,IAAA,IAAA,CAAK,yBAA0B,CAAA,GAAA;AAAA,MAC7B,gBAAA;AAAA,MACA,IAAI,gCAAiC;AAAA,KACvC;AACA,IAAA,IAAA,CAAK,yBAA0B,CAAA,GAAA;AAAA,MAC7B,sBAAA;AAAA,MACA,IAAI,gCAAiC;AAAA,KACvC;AACA,IAAA,IAAA,CAAK,yBAA0B,CAAA,GAAA;AAAA,MAC7B,KAAA;AAAA,MACA,IAAI,gCAAiC;AAAA,KACvC;AACA,IAAA,IAAA,CAAK,yBAA0B,CAAA,GAAA;AAAA,MAC7B,OAAA;AAAA,MACA,IAAI,gCAAiC;AAAA,KACvC;AACA,IAAA,IAAA,CAAK,yBAA0B,CAAA,GAAA;AAAA,MAC7B,mBAAA;AAAA,MACA,IAAI,gCAAiC;AAAA,KACvC;AACA,IAAA,IAAA,CAAK,yBAA0B,CAAA,GAAA;AAAA,MAC7B,KAAA;AAAA,MACA,IAAI,yBAA0B,CAAA,OAAA,CAAQ,gBAAgB;AAAA,KACxD;AAEA,IAAA,IAAI,QAAQ,aAAe,EAAA;AACzB,MAAA,MAAA,CAAO,IAAK,CAAA,OAAA,CAAQ,aAAa,CAAA,CAAE,QAAQ,CAAY,QAAA,KAAA;AACrD,QAAA,IAAA,CAAK,yBAA0B,CAAA,GAAA;AAAA,UAC7B,QAAQ,QAAQ,CAAA,CAAA;AAAA,UAChB,IAAI,0BAAA;AAAA,YACF,QAAA;AAAA,YACA,OAAA,CAAQ,cAAe,QAAQ;AAAA;AACjC,SACF;AAAA,OACD,CAAA;AAAA;AACH;AACF,EAEA,MAAM,0BACJ,CAAA,YAAA,EACA,WACgC,EAAA;AAChC,IAAA,MAAM,sBACJ,GAAA,IAAA,CAAK,yBAA0B,CAAA,GAAA,CAAI,YAAY,CAAA;AACjD,IAAA,IAAI,sBAAwB,EAAA;AAC1B,MAAA,OAAO,MAAM,sBAAuB,CAAA,0BAAA;AAAA,QAClC;AAAA,OACF;AAAA;AAGF,IAAI,IAAA,YAAA,CAAa,UAAW,CAAA,OAAO,CAAG,EAAA;AACpC,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,8DAA8D,YAAY,CAAA;AAAA,OAC5E;AAAA;AAEF,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,iBAAiB,YAAY,CAAA,8CAAA;AAAA,KAC/B;AAAA;AACF,EAEA,MAAM,eAAe,YAAmD,EAAA;AACtE,IAAA,MAAM,sBACJ,GAAA,IAAA,CAAK,yBAA0B,CAAA,GAAA,CAAI,YAAY,CAAA;AAEjD,IAAA,IAAI,sBAAwB,EAAA;AAC1B,MAAO,OAAA,MAAM,uBAAuB,cAAe,EAAA;AAAA;AAGrD,IAAI,IAAA,YAAA,CAAa,UAAW,CAAA,OAAO,CAAG,EAAA;AACpC,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,8DAA8D,YAAY,CAAA;AAAA,OAC5E;AAAA;AAEF,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,iBAAiB,YAAY,CAAA,8CAAA;AAAA,KAC/B;AAAA;AAEJ;;;;"}