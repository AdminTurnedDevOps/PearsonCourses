import { GoogleKubernetesAuthProvider } from './GoogleKubernetesAuthProvider.esm.js';
import { ServerSideKubernetesAuthProvider } from './ServerSideAuthProvider.esm.js';
import { OidcKubernetesAuthProvider } from './OidcKubernetesAuthProvider.esm.js';
import { AksKubernetesAuthProvider } from './AksKubernetesAuthProvider.esm.js';

class KubernetesAuthProviders {
  kubernetesAuthProviderMap;
  constructor(options) {
    this.kubernetesAuthProviderMap = /* @__PURE__ */ new Map();
    this.kubernetesAuthProviderMap.set(
      "google",
      new GoogleKubernetesAuthProvider(options.googleAuthApi)
    );
    this.kubernetesAuthProviderMap.set(
      "serviceAccount",
      new ServerSideKubernetesAuthProvider()
    );
    this.kubernetesAuthProviderMap.set(
      "googleServiceAccount",
      new ServerSideKubernetesAuthProvider()
    );
    this.kubernetesAuthProviderMap.set(
      "aws",
      new ServerSideKubernetesAuthProvider()
    );
    this.kubernetesAuthProviderMap.set(
      "azure",
      new ServerSideKubernetesAuthProvider()
    );
    this.kubernetesAuthProviderMap.set(
      "localKubectlProxy",
      new ServerSideKubernetesAuthProvider()
    );
    this.kubernetesAuthProviderMap.set(
      "aks",
      new AksKubernetesAuthProvider(options.microsoftAuthApi)
    );
    if (options.oidcProviders) {
      Object.keys(options.oidcProviders).forEach((provider) => {
        this.kubernetesAuthProviderMap.set(
          `oidc.${provider}`,
          new OidcKubernetesAuthProvider(
            provider,
            options.oidcProviders[provider]
          )
        );
      });
    }
  }
  async decorateRequestBodyForAuth(authProvider, requestBody) {
    const kubernetesAuthProvider = this.kubernetesAuthProviderMap.get(authProvider);
    if (kubernetesAuthProvider) {
      return await kubernetesAuthProvider.decorateRequestBodyForAuth(
        requestBody
      );
    }
    if (authProvider.startsWith("oidc.")) {
      throw new Error(
        `KubernetesAuthProviders has no oidcProvider configured for ${authProvider}`
      );
    }
    throw new Error(
      `authProvider "${authProvider}" has no KubernetesAuthProvider defined for it`
    );
  }
  async getCredentials(authProvider) {
    const kubernetesAuthProvider = this.kubernetesAuthProviderMap.get(authProvider);
    if (kubernetesAuthProvider) {
      return await kubernetesAuthProvider.getCredentials();
    }
    if (authProvider.startsWith("oidc.")) {
      throw new Error(
        `KubernetesAuthProviders has no oidcProvider configured for ${authProvider}`
      );
    }
    throw new Error(
      `authProvider "${authProvider}" has no KubernetesAuthProvider defined for it`
    );
  }
}

export { KubernetesAuthProviders };
//# sourceMappingURL=KubernetesAuthProviders.esm.js.map
