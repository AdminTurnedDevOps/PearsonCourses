class OidcKubernetesAuthProvider {
  providerName;
  authProvider;
  constructor(providerName, authProvider) {
    this.providerName = providerName;
    this.authProvider = authProvider;
  }
  async decorateRequestBodyForAuth(requestBody) {
    const authToken = (await this.getCredentials()).token;
    const auth = { ...requestBody.auth };
    if (auth.oidc) {
      auth.oidc[this.providerName] = authToken;
    } else {
      auth.oidc = { [this.providerName]: authToken };
    }
    requestBody.auth = auth;
    return requestBody;
  }
  async getCredentials() {
    return {
      token: await this.authProvider.getIdToken()
    };
  }
}

export { OidcKubernetesAuthProvider };
//# sourceMappingURL=OidcKubernetesAuthProvider.esm.js.map
