function getOwnedResources(potentialOwner, possiblyOwned) {
  return possiblyOwned.filter(
    (p) => p.metadata?.ownerReferences?.some(
      (o) => o.uid === potentialOwner.metadata?.uid
    ) ?? false
  );
}
const getOwnedPodsThroughReplicaSets = (potentialOwner, replicaSets, pods) => {
  return getOwnedResources(
    potentialOwner,
    replicaSets.filter((rs) => rs.status && rs.status.replicas > 0)
  ).reduce((accum, rs) => {
    return accum.concat(getOwnedResources(rs, pods));
  }, []);
};
const getMatchingHpa = (owner, hpas) => {
  return hpas.find((hpa) => {
    return (hpa.spec?.scaleTargetRef?.kind ?? "").toLocaleLowerCase("en-US") === owner.kind.toLocaleLowerCase("en-US") && (hpa.metadata?.namespace ?? "") === (owner.namespace ?? "unknown-namespace") && (hpa.spec?.scaleTargetRef?.name ?? "") === (owner.name ?? "unknown-deployment");
  });
};

export { getMatchingHpa, getOwnedPodsThroughReplicaSets, getOwnedResources };
//# sourceMappingURL=owner.esm.js.map
