import React__default, { Fragment } from 'react';
import '@material-ui/core/Chip';
import { StatusOK, SubvalueCell, StatusError, StatusAborted } from '@backstage/core-components';
import { formatMillicores, bytesToMiB } from './resources.esm.js';

const containersReady = (pod) => {
  const containerStatuses2 = pod.status?.containerStatuses ?? [];
  const containersReadyItem = containerStatuses2.filter((cs) => cs.ready).length;
  return `${containersReadyItem}/${containerStatuses2.length}`;
};
const totalRestarts = (pod) => {
  const containerStatuses2 = pod.status?.containerStatuses ?? [];
  return containerStatuses2?.reduce((a, b) => a + b.restartCount, 0);
};
const containerStatuses = (pod) => {
  const containerStatusesItem = pod.status?.containerStatuses ?? [];
  const errors = containerStatusesItem.reduce((accum, next) => {
    if (next.state === void 0) {
      return accum;
    }
    const waiting = next.state.waiting;
    const terminated = next.state.terminated;
    const renderCell = (reason) => /* @__PURE__ */ React__default.createElement(Fragment, { key: `${pod.metadata?.name}-${next.name}` }, /* @__PURE__ */ React__default.createElement(
      SubvalueCell,
      {
        value: reason === "Completed" ? /* @__PURE__ */ React__default.createElement(StatusOK, null, "Container: ", next.name) : /* @__PURE__ */ React__default.createElement(StatusError, null, "Container: ", next.name),
        subvalue: reason
      }
    ), /* @__PURE__ */ React__default.createElement("br", null));
    if (waiting) {
      accum.push(renderCell(waiting.reason));
    }
    if (terminated) {
      accum.push(renderCell(terminated.reason));
    }
    return accum;
  }, []);
  if (errors.length === 0) {
    return /* @__PURE__ */ React__default.createElement(StatusOK, null, "OK");
  }
  return errors;
};
const renderCondition = (condition) => {
  const status = condition.status;
  if (status === "True") {
    return [condition.type, /* @__PURE__ */ React__default.createElement(StatusOK, null, "True")];
  } else if (status === "False") {
    return [
      condition.type,
      /* @__PURE__ */ React__default.createElement(
        SubvalueCell,
        {
          value: /* @__PURE__ */ React__default.createElement(StatusError, null, "False"),
          subvalue: condition.message ?? ""
        }
      )
    ];
  }
  return [condition.type, /* @__PURE__ */ React__default.createElement(StatusAborted, null)];
};
const currentToDeclaredResourceToPerc = (current, resource) => {
  if (Number(resource) === 0) return `0%`;
  if (typeof current === "number" && typeof resource === "number") {
    return `${Math.round(current / resource * 100)}%`;
  }
  const numerator = BigInt(
    typeof current === "number" ? Math.round(current) : current
  );
  const denominator = BigInt(
    typeof resource === "number" ? Math.round(resource) : resource
  );
  return `${numerator * BigInt(100) / denominator}%`;
};
const podStatusToCpuUtil = (podStatus) => {
  const cpuUtil = podStatus.cpu;
  let currentUsage = cpuUtil.currentUsage;
  if (typeof cpuUtil.currentUsage === "number") {
    currentUsage = cpuUtil.currentUsage / 10;
  }
  return /* @__PURE__ */ React__default.createElement(
    SubvalueCell,
    {
      value: `requests: ${currentToDeclaredResourceToPerc(
        currentUsage,
        cpuUtil.requestTotal
      )} of ${formatMillicores(cpuUtil.requestTotal)}`,
      subvalue: `limits: ${currentToDeclaredResourceToPerc(
        currentUsage,
        cpuUtil.limitTotal
      )} of ${formatMillicores(cpuUtil.limitTotal)}`
    }
  );
};
const podStatusToMemoryUtil = (podStatus) => {
  const memUtil = podStatus.memory;
  return /* @__PURE__ */ React__default.createElement(
    SubvalueCell,
    {
      value: `requests: ${currentToDeclaredResourceToPerc(
        memUtil.currentUsage,
        memUtil.requestTotal
      )} of ${bytesToMiB(memUtil.requestTotal)}`,
      subvalue: `limits: ${currentToDeclaredResourceToPerc(
        memUtil.currentUsage,
        memUtil.limitTotal
      )} of ${bytesToMiB(memUtil.limitTotal)}`
    }
  );
};

export { containerStatuses, containersReady, currentToDeclaredResourceToPerc, podStatusToCpuUtil, podStatusToMemoryUtil, renderCondition, totalRestarts };
//# sourceMappingURL=pod.esm.js.map
