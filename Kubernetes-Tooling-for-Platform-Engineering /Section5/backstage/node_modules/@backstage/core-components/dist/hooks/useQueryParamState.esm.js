import { isEqual } from 'lodash';
import qs from 'qs';
import { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { useDebouncedEffect } from '@react-hookz/web';

function stringify(queryParams) {
  return qs.stringify(queryParams, {
    strictNullHandling: true
  });
}
function parse(queryString) {
  return qs.parse(queryString, {
    ignoreQueryPrefix: true,
    strictNullHandling: true
  });
}
function extractState(queryString, stateName) {
  const queryParams = parse(queryString);
  return queryParams[stateName];
}
function joinQueryString(queryString, stateName, state) {
  const queryParams = {
    ...parse(queryString),
    [stateName]: state
  };
  return stringify(queryParams);
}
function useQueryParamState(stateName, debounceTime = 250) {
  const [searchParams, setSearchParams] = useSearchParams();
  const searchParamsString = searchParams.toString();
  const [queryParamState, setQueryParamState] = useState(
    extractState(searchParamsString, stateName)
  );
  useEffect(() => {
    const newState = extractState(searchParamsString, stateName);
    setQueryParamState(
      (oldState) => isEqual(newState, oldState) ? oldState : newState
    );
  }, [searchParamsString, setQueryParamState, stateName]);
  useDebouncedEffect(
    () => {
      const queryString = joinQueryString(
        searchParamsString,
        stateName,
        queryParamState
      );
      if (searchParamsString !== queryString) {
        setSearchParams(queryString, { replace: true });
      }
    },
    [setSearchParams, queryParamState, searchParamsString, stateName],
    debounceTime
  );
  return [queryParamState, setQueryParamState];
}

export { useQueryParamState };
//# sourceMappingURL=useQueryParamState.esm.js.map
