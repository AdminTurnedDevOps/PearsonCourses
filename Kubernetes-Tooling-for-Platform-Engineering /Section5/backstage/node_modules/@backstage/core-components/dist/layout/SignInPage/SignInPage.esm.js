import { useApi, configApiRef } from '@backstage/core-plugin-api';
import { UserIdentity } from './UserIdentity.esm.js';
import Button from '@material-ui/core/Button';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import React__default, { useState } from 'react';
import { useMountEffect } from '@react-hookz/web';
import { Progress } from '../../components/Progress/Progress.esm.js';
import { Content } from '../Content/Content.esm.js';
import { ContentHeader } from '../ContentHeader/ContentHeader.esm.js';
import { Header } from '../Header/Header.esm.js';
import { InfoCard } from '../InfoCard/InfoCard.esm.js';
import { Page } from '../Page/Page.esm.js';
import { getSignInProviders, useSignInProviders } from './providers.esm.js';
import { useStyles, GridItem } from './styles.esm.js';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { useSearchParams } from 'react-router-dom';

const MultiSignInPage = ({
  onSignInSuccess,
  providers = [],
  title,
  titleComponent,
  align = "left"
}) => {
  const configApi = useApi(configApiRef);
  const classes = useStyles();
  const signInProviders = getSignInProviders(providers);
  const [loading, providerElements] = useSignInProviders(
    signInProviders,
    onSignInSuccess
  );
  if (loading) {
    return /* @__PURE__ */ React__default.createElement(Progress, null);
  }
  return /* @__PURE__ */ React__default.createElement(Page, { themeId: "home" }, /* @__PURE__ */ React__default.createElement(Header, { title: configApi.getString("app.title") }), /* @__PURE__ */ React__default.createElement(Content, null, (title || titleComponent) && /* @__PURE__ */ React__default.createElement(
    ContentHeader,
    {
      title,
      titleComponent,
      textAlign: align
    }
  ), /* @__PURE__ */ React__default.createElement(
    Grid,
    {
      container: true,
      justifyContent: align === "center" ? align : "flex-start",
      spacing: 2,
      component: "ul",
      classes
    },
    providerElements
  )));
};
const SingleSignInPage = ({
  provider,
  auto,
  onSignInSuccess,
  ErrorComponent
}) => {
  const classes = useStyles();
  const authApi = useApi(provider.apiRef);
  const configApi = useApi(configApiRef);
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  const [error, setError] = useState();
  const [showLoginPage, setShowLoginPage] = useState(false);
  const [searchParams, _setSearchParams] = useSearchParams();
  const errorParam = searchParams.get("error");
  const login = async ({ checkExisting, showPopup }) => {
    try {
      let identityResponse;
      if (checkExisting) {
        identityResponse = await authApi.getBackstageIdentity({
          optional: true
        });
      }
      if (!identityResponse && (showPopup || auto) && !errorParam) {
        setShowLoginPage(true);
        identityResponse = await authApi.getBackstageIdentity({
          instantPopup: true
        });
        if (!identityResponse) {
          throw new Error(
            `The ${provider.title} provider is not configured to support sign-in`
          );
        }
      }
      if (!identityResponse) {
        setShowLoginPage(true);
        return;
      }
      const profile = await authApi.getProfile();
      onSignInSuccess(
        UserIdentity.create({
          identity: identityResponse.identity,
          authApi,
          profile
        })
      );
    } catch (err) {
      setError(err);
      setShowLoginPage(true);
    }
  };
  useMountEffect(() => {
    if (errorParam) {
      setError(new Error(errorParam));
    }
    login({ checkExisting: true });
  });
  return showLoginPage ? /* @__PURE__ */ React__default.createElement(Page, { themeId: "home" }, /* @__PURE__ */ React__default.createElement(Header, { title: configApi.getString("app.title") }), /* @__PURE__ */ React__default.createElement(Content, null, /* @__PURE__ */ React__default.createElement(
    Grid,
    {
      container: true,
      justifyContent: "center",
      spacing: 2,
      component: "ul",
      classes
    },
    /* @__PURE__ */ React__default.createElement(GridItem, null, /* @__PURE__ */ React__default.createElement(
      InfoCard,
      {
        variant: "fullHeight",
        title: provider.title,
        actions: /* @__PURE__ */ React__default.createElement(
          Button,
          {
            color: "primary",
            variant: "outlined",
            onClick: () => {
              login({ showPopup: true });
            }
          },
          t("signIn.title")
        )
      },
      /* @__PURE__ */ React__default.createElement(Typography, { variant: "body1" }, provider.message),
      error && error.name !== "PopupRejectedError" && (ErrorComponent ? /* @__PURE__ */ React__default.createElement(ErrorComponent, { error }) : /* @__PURE__ */ React__default.createElement(Typography, { variant: "body1", color: "error" }, error.message))
    ))
  ))) : /* @__PURE__ */ React__default.createElement(Progress, null);
};
function SignInPage(props) {
  if ("provider" in props) {
    return /* @__PURE__ */ React__default.createElement(SingleSignInPage, { ...props });
  }
  return /* @__PURE__ */ React__default.createElement(MultiSignInPage, { ...props });
}

export { MultiSignInPage, SignInPage, SingleSignInPage };
//# sourceMappingURL=SignInPage.esm.js.map
