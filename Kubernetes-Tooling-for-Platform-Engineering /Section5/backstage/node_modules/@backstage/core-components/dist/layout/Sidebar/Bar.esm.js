import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import { makeStyles } from '@material-ui/core/styles';
import useMediaQuery from '@material-ui/core/useMediaQuery';
import classNames from 'classnames';
import React__default, { useContext, useState, useRef } from 'react';
import { makeSidebarConfig, makeSidebarSubmenuConfig, SidebarConfigContext } from './config.esm.js';
import { MobileSidebar } from './MobileSidebar.esm.js';
import { useContent } from './Page.esm.js';
import { SidebarOpenStateProvider } from './SidebarOpenStateContext.esm.js';
import { useSidebarPinState } from './SidebarPinStateContext.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { coreComponentsTranslationRef } from '../../translation.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    drawer: {
      display: "flex",
      flexFlow: "column nowrap",
      alignItems: "flex-start",
      position: "fixed",
      left: 0,
      top: 0,
      bottom: 0,
      zIndex: theme.zIndex.appBar,
      background: theme.palette.navigation.background,
      overflowX: "hidden",
      msOverflowStyle: "none",
      scrollbarWidth: "none",
      transition: theme.transitions.create("width", {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.shortest
      }),
      "& > *": {
        flexShrink: 0
      },
      "&::-webkit-scrollbar": {
        display: "none"
      },
      "@media print": {
        display: "none"
      }
    },
    drawerWidth: (props) => ({
      width: props.sidebarConfig.drawerWidthClosed
    }),
    drawerOpen: (props) => ({
      width: props.sidebarConfig.drawerWidthOpen,
      transition: theme.transitions.create("width", {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.shorter
      })
    }),
    visuallyHidden: {
      top: 0,
      position: "absolute",
      zIndex: 1e3,
      transform: "translateY(-200%)",
      "&:focus": {
        transform: "translateY(5px)"
      }
    }
  }),
  { name: "BackstageSidebar" }
);
const DesktopSidebar = (props) => {
  const { sidebarConfig } = useContext(SidebarConfigContext);
  const {
    openDelayMs = sidebarConfig.defaultOpenDelayMs,
    closeDelayMs = sidebarConfig.defaultCloseDelayMs,
    disableExpandOnHover,
    children
  } = props;
  const classes = useStyles({ sidebarConfig });
  const isSmallScreen = useMediaQuery(
    (theme) => theme.breakpoints.down("md"),
    { noSsr: true }
  );
  const [state, setState] = useState(0 /* Closed */);
  const hoverTimerRef = useRef();
  const { isPinned, toggleSidebarPinState } = useSidebarPinState();
  const handleOpen = () => {
    if (isPinned || disableExpandOnHover) {
      return;
    }
    if (hoverTimerRef.current) {
      clearTimeout(hoverTimerRef.current);
      hoverTimerRef.current = void 0;
    }
    if (state !== 2 /* Open */ && !isSmallScreen) {
      hoverTimerRef.current = window.setTimeout(() => {
        hoverTimerRef.current = void 0;
        setState(2 /* Open */);
      }, openDelayMs);
      setState(1 /* Idle */);
    }
  };
  const handleClose = () => {
    if (isPinned || disableExpandOnHover) {
      return;
    }
    if (hoverTimerRef.current) {
      clearTimeout(hoverTimerRef.current);
      hoverTimerRef.current = void 0;
    }
    if (state === 1 /* Idle */) {
      setState(0 /* Closed */);
    } else if (state === 2 /* Open */) {
      hoverTimerRef.current = window.setTimeout(() => {
        hoverTimerRef.current = void 0;
        setState(0 /* Closed */);
      }, closeDelayMs);
    }
  };
  const isOpen = state === 2 /* Open */ && !isSmallScreen || isPinned;
  const setOpen = (open) => {
    if (open) {
      setState(2 /* Open */);
      toggleSidebarPinState();
    } else {
      setState(0 /* Closed */);
      toggleSidebarPinState();
    }
  };
  return /* @__PURE__ */ React__default.createElement("nav", { style: {}, "aria-label": "sidebar nav" }, /* @__PURE__ */ React__default.createElement(A11ySkipSidebar, null), /* @__PURE__ */ React__default.createElement(SidebarOpenStateProvider, { value: { isOpen, setOpen } }, /* @__PURE__ */ React__default.createElement(
    Box,
    {
      className: classes.root,
      "data-testid": "sidebar-root",
      onMouseEnter: disableExpandOnHover ? () => {
      } : handleOpen,
      onFocus: disableExpandOnHover ? () => {
      } : handleOpen,
      onMouseLeave: disableExpandOnHover ? () => {
      } : handleClose,
      onBlur: disableExpandOnHover ? () => {
      } : handleClose
    },
    /* @__PURE__ */ React__default.createElement(
      Box,
      {
        className: classNames(classes.drawer, classes.drawerWidth, {
          [classes.drawerOpen]: isOpen
        })
      },
      children
    )
  )));
};
const Sidebar = (props) => {
  const sidebarConfig = makeSidebarConfig(
    props.sidebarOptions ?? {}
  );
  const submenuConfig = makeSidebarSubmenuConfig(
    props.submenuOptions ?? {}
  );
  const { children, disableExpandOnHover, openDelayMs, closeDelayMs } = props;
  const { isMobile } = useSidebarPinState();
  return isMobile ? /* @__PURE__ */ React__default.createElement(MobileSidebar, null, children) : /* @__PURE__ */ React__default.createElement(SidebarConfigContext.Provider, { value: { sidebarConfig, submenuConfig } }, /* @__PURE__ */ React__default.createElement(
    DesktopSidebar,
    {
      openDelayMs,
      closeDelayMs,
      disableExpandOnHover
    },
    children
  ));
};
function A11ySkipSidebar() {
  const { sidebarConfig } = useContext(SidebarConfigContext);
  const { focusContent, contentRef } = useContent();
  const classes = useStyles({ sidebarConfig });
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  if (!contentRef?.current) {
    return null;
  }
  return /* @__PURE__ */ React__default.createElement(
    Button,
    {
      onClick: focusContent,
      variant: "contained",
      className: classNames(classes.visuallyHidden)
    },
    t("skipToContent")
  );
}

export { Sidebar };
//# sourceMappingURL=Bar.esm.js.map
