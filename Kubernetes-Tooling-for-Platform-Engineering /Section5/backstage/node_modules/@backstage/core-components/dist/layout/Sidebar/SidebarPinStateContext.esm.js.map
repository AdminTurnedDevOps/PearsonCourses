{"version":3,"file":"SidebarPinStateContext.esm.js","sources":["../../../src/layout/Sidebar/SidebarPinStateContext.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createVersionedContext,\n  createVersionedValueMap,\n} from '@backstage/version-bridge';\nimport React, { createContext, ReactNode, useContext } from 'react';\n\n/**\n * Type of `SidebarPinStateContext`\n *\n * @public\n * @deprecated Use `SidebarPinState` instead.\n */\nexport type SidebarPinStateContextType = {\n  isPinned: boolean;\n  toggleSidebarPinState: () => any;\n  isMobile?: boolean;\n};\n\n/**\n * The pin state of the sidebar.\n *\n * @public\n */\nexport type SidebarPinState = {\n  /**\n   * Whether or not the sidebar is pinned to the `open` state. When `isPinned`\n   * is `false`, the sidebar opens and closes on hover. When `true`, the\n   * sidebar is permanently opened, regardless of user interaction.\n   */\n  isPinned: boolean;\n\n  /**\n   * A function to toggle the pin state of the sidebar.\n   */\n  toggleSidebarPinState: () => any;\n\n  /**\n   * Whether or not the sidebar is or should be rendered in a mobile-optimized\n   * way.\n   */\n  isMobile?: boolean;\n};\n\nconst defaultSidebarPinStateContext = {\n  isPinned: true,\n  toggleSidebarPinState: () => {},\n  isMobile: false,\n};\n\n/**\n * Contains the state on how the `Sidebar` is rendered\n *\n * @public @deprecated\n * Use `<SidebarPinStateContextProvider>` + `useSidebarPinState()` instead.\n */\nexport const LegacySidebarPinStateContext =\n  createContext<SidebarPinStateContextType>(defaultSidebarPinStateContext);\n\nconst VersionedSidebarPinStateContext = createVersionedContext<{\n  1: SidebarPinState;\n}>('sidebar-pin-state-context');\n\n/**\n * Provides state for how the `Sidebar` is rendered\n *\n * @public\n */\nexport function SidebarPinStateProvider(props: {\n  children: ReactNode;\n  value: SidebarPinStateContextType;\n}) {\n  const { children, value } = props;\n  return (\n    <LegacySidebarPinStateContext.Provider value={value}>\n      <VersionedSidebarPinStateContext.Provider\n        value={createVersionedValueMap({ 1: value })}\n      >\n        {children}\n      </VersionedSidebarPinStateContext.Provider>\n    </LegacySidebarPinStateContext.Provider>\n  );\n}\n\n/**\n * Hook to read and update sidebar pin state, which controls whether or not the\n * sidebar is pinned open.\n *\n * @public\n */\nexport const useSidebarPinState = (): SidebarPinState => {\n  const versionedPinStateContext = useContext(VersionedSidebarPinStateContext);\n  const legacyPinStateContext = useContext(LegacySidebarPinStateContext);\n\n  // Invoked from outside a SidebarPinStateProvider: check for the legacy\n  // context's value, but otherwise return the default.\n  if (versionedPinStateContext === undefined) {\n    return legacyPinStateContext || defaultSidebarPinStateContext;\n  }\n\n  const pinStateContext = versionedPinStateContext.atVersion(1);\n  if (pinStateContext === undefined) {\n    throw new Error('No context found for version 1.');\n  }\n\n  return pinStateContext;\n};\n"],"names":["React"],"mappings":";;;AA2DA,MAAM,6BAAgC,GAAA;AAAA,EACpC,QAAU,EAAA,IAAA;AAAA,EACV,uBAAuB,MAAM;AAAA,GAAC;AAAA,EAC9B,QAAU,EAAA;AACZ,CAAA;AAQa,MAAA,4BAAA,GACX,cAA0C,6BAA6B;AAEzE,MAAM,+BAAA,GAAkC,uBAErC,2BAA2B,CAAA;AAOvB,SAAS,wBAAwB,KAGrC,EAAA;AACD,EAAM,MAAA,EAAE,QAAU,EAAA,KAAA,EAAU,GAAA,KAAA;AAC5B,EAAA,uBACGA,cAAA,CAAA,aAAA,CAAA,4BAAA,CAA6B,QAA7B,EAAA,EAAsC,KACrC,EAAA,kBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,+BAAgC,CAAA,QAAA;AAAA,IAAhC;AAAA,MACC,KAAO,EAAA,uBAAA,CAAwB,EAAE,CAAA,EAAG,OAAO;AAAA,KAAA;AAAA,IAE1C;AAAA,GAEL,CAAA;AAEJ;AAQO,MAAM,qBAAqB,MAAuB;AACvD,EAAM,MAAA,wBAAA,GAA2B,WAAW,+BAA+B,CAAA;AAC3E,EAAM,MAAA,qBAAA,GAAwB,WAAW,4BAA4B,CAAA;AAIrE,EAAA,IAAI,6BAA6B,KAAW,CAAA,EAAA;AAC1C,IAAA,OAAO,qBAAyB,IAAA,6BAAA;AAAA;AAGlC,EAAM,MAAA,eAAA,GAAkB,wBAAyB,CAAA,SAAA,CAAU,CAAC,CAAA;AAC5D,EAAA,IAAI,oBAAoB,KAAW,CAAA,EAAA;AACjC,IAAM,MAAA,IAAI,MAAM,iCAAiC,CAAA;AAAA;AAGnD,EAAO,OAAA,eAAA;AACT;;;;"}