import Card from '@material-ui/core/Card';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import CardHeader from '@material-ui/core/CardHeader';
import Divider from '@material-ui/core/Divider';
import { makeStyles, withStyles } from '@material-ui/core/styles';
import classNames from 'classnames';
import React__default from 'react';
import { BottomLink } from '../BottomLink/BottomLink.esm.js';
import { ErrorBoundary } from '../ErrorBoundary/ErrorBoundary.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    noPadding: {
      padding: 0,
      "&:last-child": {
        paddingBottom: 0
      }
    },
    contentAlignBottom: {
      display: "flex",
      alignItems: "self-end"
    },
    header: {
      padding: theme.spacing(2, 2, 2, 2.5)
    },
    headerTitle: {
      fontWeight: theme.typography.fontWeightBold
    },
    headerSubheader: {
      paddingTop: theme.spacing(1)
    },
    headerAvatar: {},
    headerAction: {},
    headerContent: {},
    subheader: {
      display: "flex"
    }
  }),
  { name: "BackstageInfoCard" }
);
const CardActionsTopRight = withStyles(
  (theme) => ({
    root: {
      display: "inline-block",
      padding: theme.spacing(8, 8, 0, 0),
      float: "right"
    }
  }),
  { name: "BackstageInfoCardCardActionsTopRight" }
)(CardActions);
const VARIANT_STYLES = {
  card: {
    flex: {
      display: "flex",
      flexDirection: "column"
    },
    fullHeight: {
      display: "flex",
      flexDirection: "column",
      height: "100%"
    },
    gridItem: {
      display: "flex",
      flexDirection: "column",
      height: "calc(100% - 10px)",
      // for pages without content header
      marginBottom: "10px",
      breakInside: "avoid-page",
      "@media print": {
        height: "auto"
      }
    }
  },
  cardContent: {
    fullHeight: {
      flex: 1
    },
    gridItem: {
      flex: 1
    }
  }
};
function InfoCard(props) {
  const {
    title,
    subheader,
    divider = true,
    deepLink,
    slackChannel,
    errorBoundaryProps,
    variant,
    alignContent = "normal",
    children,
    headerStyle,
    headerProps,
    icon,
    action,
    actionsClassName,
    actions,
    cardClassName,
    actionsTopRight,
    className,
    noPadding,
    titleTypographyProps,
    subheaderTypographyProps
  } = props;
  const classes = useStyles();
  let calculatedStyle = {};
  let calculatedCardStyle = {};
  if (variant) {
    const variants = variant.split(/[\s]+/g);
    variants.forEach((name) => {
      calculatedStyle = {
        ...calculatedStyle,
        ...VARIANT_STYLES.card[name]
      };
      calculatedCardStyle = {
        ...calculatedCardStyle,
        ...VARIANT_STYLES.cardContent[name]
      };
    });
  }
  const cardSubTitle = () => {
    if (!subheader && !icon) {
      return null;
    }
    return /* @__PURE__ */ React__default.createElement("div", { "data-testid": "info-card-subheader" }, subheader && /* @__PURE__ */ React__default.createElement("div", { className: classes.subheader }, subheader), icon);
  };
  const errProps = errorBoundaryProps || (slackChannel ? { slackChannel } : {});
  return /* @__PURE__ */ React__default.createElement(Card, { style: calculatedStyle, className }, /* @__PURE__ */ React__default.createElement(ErrorBoundary, { ...errProps }, title && /* @__PURE__ */ React__default.createElement(
    CardHeader,
    {
      classes: {
        root: classNames(classes.header),
        title: classes.headerTitle,
        subheader: classes.headerSubheader,
        avatar: classes.headerAvatar,
        action: classes.headerAction,
        content: classes.headerContent
      },
      title,
      subheader: cardSubTitle(),
      action,
      style: { ...headerStyle },
      titleTypographyProps,
      subheaderTypographyProps,
      ...headerProps
    }
  ), actionsTopRight && /* @__PURE__ */ React__default.createElement(CardActionsTopRight, null, actionsTopRight), divider && /* @__PURE__ */ React__default.createElement(Divider, null), /* @__PURE__ */ React__default.createElement(
    CardContent,
    {
      className: classNames(cardClassName, {
        [classes.noPadding]: noPadding,
        [classes.contentAlignBottom]: alignContent === "bottom"
      }),
      style: calculatedCardStyle
    },
    children
  ), actions && /* @__PURE__ */ React__default.createElement(CardActions, { className: actionsClassName }, actions), deepLink && /* @__PURE__ */ React__default.createElement(BottomLink, { ...deepLink })));
}

export { InfoCard };
//# sourceMappingURL=InfoCard.esm.js.map
