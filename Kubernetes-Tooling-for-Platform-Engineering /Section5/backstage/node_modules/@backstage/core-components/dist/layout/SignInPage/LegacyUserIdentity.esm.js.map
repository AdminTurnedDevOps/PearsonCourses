{"version":3,"file":"LegacyUserIdentity.esm.js","sources":["../../../src/layout/SignInPage/LegacyUserIdentity.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  IdentityApi,\n  ProfileInfo,\n  BackstageUserIdentity,\n} from '@backstage/core-plugin-api';\n\nfunction parseJwtPayload(token: string) {\n  const [_header, payload, _signature] = token.split('.');\n  return JSON.parse(window.atob(payload));\n}\n\ntype LegacySignInResult = {\n  userId: string;\n  profile: ProfileInfo;\n  getIdToken?: () => Promise<string>;\n  signOut?: () => Promise<void>;\n};\n\n/** @internal */\nexport class LegacyUserIdentity implements IdentityApi {\n  private constructor(private readonly result: LegacySignInResult) {}\n\n  getUserId(): string {\n    return this.result.userId;\n  }\n\n  static fromResult(result: LegacySignInResult): LegacyUserIdentity {\n    return new LegacyUserIdentity(result);\n  }\n\n  async getIdToken(): Promise<string | undefined> {\n    return this.result.getIdToken?.();\n  }\n\n  getProfile(): ProfileInfo {\n    return this.result.profile;\n  }\n\n  async getProfileInfo(): Promise<ProfileInfo> {\n    return this.result.profile;\n  }\n\n  async getBackstageIdentity(): Promise<BackstageUserIdentity> {\n    const token = await this.getIdToken();\n\n    if (!token) {\n      const userEntityRef = `user:default/${this.getUserId()}`;\n      return {\n        type: 'user',\n        userEntityRef,\n        ownershipEntityRefs: [userEntityRef],\n      };\n    }\n\n    const { sub, ent } = parseJwtPayload(token);\n    return {\n      type: 'user',\n      userEntityRef: sub,\n      ownershipEntityRefs: ent ?? [],\n    };\n  }\n\n  async getCredentials(): Promise<{ token?: string | undefined }> {\n    const token = await this.result.getIdToken?.();\n    return { token };\n  }\n\n  async signOut(): Promise<void> {\n    return this.result.signOut?.();\n  }\n}\n"],"names":[],"mappings":"AAsBA,SAAS,gBAAgB,KAAe,EAAA;AACtC,EAAA,MAAM,CAAC,OAAS,EAAA,OAAA,EAAS,UAAU,CAAI,GAAA,KAAA,CAAM,MAAM,GAAG,CAAA;AACtD,EAAA,OAAO,IAAK,CAAA,KAAA,CAAM,MAAO,CAAA,IAAA,CAAK,OAAO,CAAC,CAAA;AACxC;AAUO,MAAM,kBAA0C,CAAA;AAAA,EAC7C,YAA6B,MAA4B,EAAA;AAA5B,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA;AAAA;AAA6B,EAElE,SAAoB,GAAA;AAClB,IAAA,OAAO,KAAK,MAAO,CAAA,MAAA;AAAA;AACrB,EAEA,OAAO,WAAW,MAAgD,EAAA;AAChE,IAAO,OAAA,IAAI,mBAAmB,MAAM,CAAA;AAAA;AACtC,EAEA,MAAM,UAA0C,GAAA;AAC9C,IAAO,OAAA,IAAA,CAAK,OAAO,UAAa,IAAA;AAAA;AAClC,EAEA,UAA0B,GAAA;AACxB,IAAA,OAAO,KAAK,MAAO,CAAA,OAAA;AAAA;AACrB,EAEA,MAAM,cAAuC,GAAA;AAC3C,IAAA,OAAO,KAAK,MAAO,CAAA,OAAA;AAAA;AACrB,EAEA,MAAM,oBAAuD,GAAA;AAC3D,IAAM,MAAA,KAAA,GAAQ,MAAM,IAAA,CAAK,UAAW,EAAA;AAEpC,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,MAAM,aAAgB,GAAA,CAAA,aAAA,EAAgB,IAAK,CAAA,SAAA,EAAW,CAAA,CAAA;AACtD,MAAO,OAAA;AAAA,QACL,IAAM,EAAA,MAAA;AAAA,QACN,aAAA;AAAA,QACA,mBAAA,EAAqB,CAAC,aAAa;AAAA,OACrC;AAAA;AAGF,IAAA,MAAM,EAAE,GAAA,EAAK,GAAI,EAAA,GAAI,gBAAgB,KAAK,CAAA;AAC1C,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,MAAA;AAAA,MACN,aAAe,EAAA,GAAA;AAAA,MACf,mBAAA,EAAqB,OAAO;AAAC,KAC/B;AAAA;AACF,EAEA,MAAM,cAA0D,GAAA;AAC9D,IAAA,MAAM,KAAQ,GAAA,MAAM,IAAK,CAAA,MAAA,CAAO,UAAa,IAAA;AAC7C,IAAA,OAAO,EAAE,KAAM,EAAA;AAAA;AACjB,EAEA,MAAM,OAAyB,GAAA;AAC7B,IAAO,OAAA,IAAA,CAAK,OAAO,OAAU,IAAA;AAAA;AAEjC;;;;"}