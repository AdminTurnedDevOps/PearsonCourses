import Box from '@material-ui/core/Box';
import MaterialBreadcrumbs from '@material-ui/core/Breadcrumbs';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import Popover from '@material-ui/core/Popover';
import { withStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import React__default, { Fragment } from 'react';

const ClickableText = withStyles(
  {
    root: {
      textDecoration: "underline",
      cursor: "pointer"
    }
  },
  { name: "BackstageBreadcrumbsClickableText" }
)(Typography);
const StyledBox = withStyles(
  {
    root: {
      textDecoration: "underline",
      color: "inherit"
    }
  },
  { name: "BackstageBreadcrumbsStyledBox" }
)(Box);
const BreadcrumbsCurrentPage = withStyles(
  {
    root: {
      fontStyle: "italic"
    }
  },
  { name: "BreadcrumbsCurrentPage" }
)(Box);
function Breadcrumbs(props) {
  const { children, ...restProps } = props;
  const [anchorEl, setAnchorEl] = React__default.useState(
    null
  );
  const childrenArray = React__default.Children.toArray(children);
  const [firstPage, secondPage, ...expandablePages] = childrenArray;
  const currentPage = expandablePages.length ? expandablePages.pop() : childrenArray[childrenArray.length - 1];
  const hasHiddenBreadcrumbs = childrenArray.length > 3;
  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };
  const handleClose = () => {
    setAnchorEl(null);
  };
  const open = Boolean(anchorEl);
  return /* @__PURE__ */ React__default.createElement(Fragment, null, /* @__PURE__ */ React__default.createElement(MaterialBreadcrumbs, { "aria-label": "breadcrumb", ...restProps }, childrenArray.length > 1 && /* @__PURE__ */ React__default.createElement(StyledBox, { clone: true }, firstPage), childrenArray.length > 2 && /* @__PURE__ */ React__default.createElement(StyledBox, { clone: true }, secondPage), hasHiddenBreadcrumbs && /* @__PURE__ */ React__default.createElement(ClickableText, { onClick: handleClick }, "..."), /* @__PURE__ */ React__default.createElement(BreadcrumbsCurrentPage, null, currentPage)), /* @__PURE__ */ React__default.createElement(
    Popover,
    {
      open,
      anchorEl,
      onClose: handleClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "left"
      },
      transformOrigin: {
        vertical: "top",
        horizontal: "left"
      }
    },
    /* @__PURE__ */ React__default.createElement(List, null, expandablePages.map((pageLink, index) => /* @__PURE__ */ React__default.createElement(ListItem, { key: index, button: true }, /* @__PURE__ */ React__default.createElement(StyledBox, { clone: true }, pageLink))))
  ));
}

export { Breadcrumbs };
//# sourceMappingURL=Breadcrumbs.esm.js.map
