import React__default from 'react';
import Typography from '@material-ui/core/Typography';
import Button from '@material-ui/core/Button';
import { InfoCard } from '../InfoCard/InfoCard.esm.js';
import { useApi, errorApiRef } from '@backstage/core-plugin-api';
import { GridItem } from './styles.esm.js';
import { ForwardedError } from '@backstage/errors';
import { UserIdentity } from './UserIdentity.esm.js';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const Component = ({
  config,
  onSignInStarted,
  onSignInSuccess,
  onSignInFailure
}) => {
  const { apiRef, title, message } = config;
  const authApi = useApi(apiRef);
  const errorApi = useApi(errorApiRef);
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  const handleLogin = async () => {
    try {
      onSignInStarted();
      const identityResponse = await authApi.getBackstageIdentity({
        instantPopup: true
      });
      if (!identityResponse) {
        onSignInFailure();
        throw new Error(
          `The ${title} provider is not configured to support sign-in`
        );
      }
      const profile = await authApi.getProfile();
      onSignInSuccess(
        UserIdentity.create({
          identity: identityResponse.identity,
          profile,
          authApi
        })
      );
    } catch (error) {
      onSignInFailure();
      errorApi.post(new ForwardedError(t("signIn.loginFailed"), error));
    }
  };
  return /* @__PURE__ */ React__default.createElement(GridItem, null, /* @__PURE__ */ React__default.createElement(
    InfoCard,
    {
      variant: "fullHeight",
      title,
      actions: /* @__PURE__ */ React__default.createElement(Button, { color: "primary", variant: "outlined", onClick: handleLogin }, t("signIn.title"))
    },
    /* @__PURE__ */ React__default.createElement(Typography, { variant: "body1" }, message)
  ));
};
const loader = async (apis, apiRef) => {
  const authApi = apis.get(apiRef);
  const identityResponse = await authApi.getBackstageIdentity({
    optional: true
  });
  if (!identityResponse) {
    return void 0;
  }
  const profile = await authApi.getProfile();
  return UserIdentity.create({
    identity: identityResponse.identity,
    profile,
    authApi
  });
};
const commonProvider = { Component, loader };

export { commonProvider };
//# sourceMappingURL=commonProvider.esm.js.map
