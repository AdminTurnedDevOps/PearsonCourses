import { useElementFilter } from '@backstage/core-plugin-api';
import BottomNavigation from '@material-ui/core/BottomNavigation';
import Box from '@material-ui/core/Box';
import IconButton from '@material-ui/core/IconButton';
import { makeStyles } from '@material-ui/core/styles';
import Drawer from '@material-ui/core/Drawer';
import Typography from '@material-ui/core/Typography';
import CloseIcon from '@material-ui/icons/Close';
import MenuIcon from '@material-ui/icons/Menu';
import { orderBy } from 'lodash';
import React__default, { useContext, useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { SidebarOpenStateProvider } from './SidebarOpenStateContext.esm.js';
import { SidebarGroup } from './SidebarGroup.esm.js';
import { SidebarConfigContext } from './config.esm.js';
import { MobileSidebarContext } from './MobileSidebarContext.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      position: "fixed",
      backgroundColor: theme.palette.navigation.background,
      color: theme.palette.navigation.color,
      bottom: 0,
      left: 0,
      right: 0,
      zIndex: theme.zIndex.snackbar,
      // SidebarDivider color
      borderTop: "1px solid #383838",
      "@media print": {
        display: "none"
      }
    },
    overlay: (props) => ({
      background: theme.palette.navigation.background,
      width: "100%",
      bottom: `${props.sidebarConfig.mobileSidebarHeight}px`,
      height: `calc(100% - ${props.sidebarConfig.mobileSidebarHeight}px)`,
      flex: "0 1 auto",
      overflow: "auto"
    }),
    overlayHeader: {
      display: "flex",
      color: theme.palette.navigation.color,
      alignItems: "center",
      justifyContent: "space-between",
      padding: theme.spacing(2, 3)
    },
    overlayHeaderClose: {
      color: theme.palette.navigation.color
    },
    marginMobileSidebar: (props) => ({
      marginBottom: `${props.sidebarConfig.mobileSidebarHeight}px`
    })
  })
);
const sortSidebarGroupsForPriority = (children) => orderBy(
  children,
  ({ props: { priority } }) => Number.isInteger(priority) ? priority : -1,
  "desc"
);
const sidebarGroupType = React__default.createElement(SidebarGroup).type;
const OverlayMenu = ({
  children,
  label = "Menu",
  open,
  onClose
}) => {
  const { sidebarConfig } = useContext(SidebarConfigContext);
  const classes = useStyles({ sidebarConfig });
  return /* @__PURE__ */ React__default.createElement(
    Drawer,
    {
      anchor: "bottom",
      open,
      onClose,
      ModalProps: {
        BackdropProps: { classes: { root: classes.marginMobileSidebar } }
      },
      classes: {
        root: classes.marginMobileSidebar,
        paperAnchorBottom: classes.overlay
      }
    },
    /* @__PURE__ */ React__default.createElement(Box, { className: classes.overlayHeader }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "h3" }, label), /* @__PURE__ */ React__default.createElement(
      IconButton,
      {
        onClick: onClose,
        classes: { root: classes.overlayHeaderClose }
      },
      /* @__PURE__ */ React__default.createElement(CloseIcon, null)
    )),
    /* @__PURE__ */ React__default.createElement(Box, { component: "nav" }, children)
  );
};
const MobileSidebar = (props) => {
  const { sidebarConfig } = useContext(SidebarConfigContext);
  const { children } = props;
  const classes = useStyles({ sidebarConfig });
  const location = useLocation();
  const [selectedMenuItemIndex, setSelectedMenuItemIndex] = useState(-1);
  useEffect(() => {
    setSelectedMenuItemIndex(-1);
  }, [location.pathname]);
  let sidebarGroups = useElementFilter(
    children,
    (elements) => elements.getElements().filter((child) => child.type === sidebarGroupType)
  );
  if (!children) {
    return null;
  } else if (!sidebarGroups.length) {
    sidebarGroups.push(
      /* @__PURE__ */ React__default.createElement(SidebarGroup, { key: "default_menu", icon: /* @__PURE__ */ React__default.createElement(MenuIcon, null) }, children)
    );
  } else {
    sidebarGroups = sortSidebarGroupsForPriority(sidebarGroups);
  }
  const shouldShowGroupChildren = selectedMenuItemIndex >= 0 && !sidebarGroups[selectedMenuItemIndex].props.to;
  return /* @__PURE__ */ React__default.createElement(SidebarOpenStateProvider, { value: { isOpen: true, setOpen: () => {
  } } }, /* @__PURE__ */ React__default.createElement(
    MobileSidebarContext.Provider,
    {
      value: { selectedMenuItemIndex, setSelectedMenuItemIndex }
    },
    /* @__PURE__ */ React__default.createElement(
      OverlayMenu,
      {
        label: sidebarGroups[selectedMenuItemIndex] && sidebarGroups[selectedMenuItemIndex].props.label,
        open: shouldShowGroupChildren,
        onClose: () => setSelectedMenuItemIndex(-1)
      },
      sidebarGroups[selectedMenuItemIndex] && sidebarGroups[selectedMenuItemIndex].props.children
    ),
    /* @__PURE__ */ React__default.createElement(
      BottomNavigation,
      {
        className: classes.root,
        "data-testid": "mobile-sidebar-root",
        component: "nav"
      },
      sidebarGroups
    )
  ));
};

export { MobileSidebar };
//# sourceMappingURL=MobileSidebar.esm.js.map
