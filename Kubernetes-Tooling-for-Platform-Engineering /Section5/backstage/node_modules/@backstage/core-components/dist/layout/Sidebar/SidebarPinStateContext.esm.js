import { createVersionedContext, createVersionedValueMap } from '@backstage/version-bridge';
import React__default, { createContext, useContext } from 'react';

const defaultSidebarPinStateContext = {
  isPinned: true,
  toggleSidebarPinState: () => {
  },
  isMobile: false
};
const LegacySidebarPinStateContext = createContext(defaultSidebarPinStateContext);
const VersionedSidebarPinStateContext = createVersionedContext("sidebar-pin-state-context");
function SidebarPinStateProvider(props) {
  const { children, value } = props;
  return /* @__PURE__ */ React__default.createElement(LegacySidebarPinStateContext.Provider, { value }, /* @__PURE__ */ React__default.createElement(
    VersionedSidebarPinStateContext.Provider,
    {
      value: createVersionedValueMap({ 1: value })
    },
    children
  ));
}
const useSidebarPinState = () => {
  const versionedPinStateContext = useContext(VersionedSidebarPinStateContext);
  const legacyPinStateContext = useContext(LegacySidebarPinStateContext);
  if (versionedPinStateContext === void 0) {
    return legacyPinStateContext || defaultSidebarPinStateContext;
  }
  const pinStateContext = versionedPinStateContext.atVersion(1);
  if (pinStateContext === void 0) {
    throw new Error("No context found for version 1.");
  }
  return pinStateContext;
};

export { LegacySidebarPinStateContext, SidebarPinStateProvider, useSidebarPinState };
//# sourceMappingURL=SidebarPinStateContext.esm.js.map
