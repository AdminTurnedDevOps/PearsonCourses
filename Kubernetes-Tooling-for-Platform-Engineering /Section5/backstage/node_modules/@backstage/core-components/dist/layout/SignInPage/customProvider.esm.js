import React__default from 'react';
import { useForm } from 'react-hook-form';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import Button from '@material-ui/core/Button';
import FormControl from '@material-ui/core/FormControl';
import TextField from '@material-ui/core/TextField';
import FormHelperText from '@material-ui/core/FormHelperText';
import isEmpty from 'lodash/isEmpty';
import { InfoCard } from '../InfoCard/InfoCard.esm.js';
import { GridItem } from './styles.esm.js';
import { UserIdentity } from './UserIdentity.esm.js';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const ID_TOKEN_REGEX = /^[a-z0-9_\-]+\.[a-z0-9_\-]+\.[a-z0-9_\-]+$/i;
const useFormStyles = makeStyles(
  (theme) => ({
    form: {
      display: "flex",
      flexFlow: "column nowrap"
    },
    button: {
      alignSelf: "center",
      marginTop: theme.spacing(2)
    },
    subTitle: {
      whiteSpace: "pre-line"
    }
  }),
  { name: "BackstageCustomProvider" }
);
const asInputRef = (renderResult) => {
  const { ref, ...rest } = renderResult;
  return {
    inputRef: ref,
    ...rest
  };
};
const Component = ({ onSignInStarted, onSignInSuccess }) => {
  const classes = useFormStyles();
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  const { register, handleSubmit, formState } = useForm({
    mode: "onChange"
  });
  const { errors } = formState;
  const handleResult = ({ userId, idToken }) => {
    onSignInStarted();
    onSignInSuccess(
      UserIdentity.fromLegacy({
        userId,
        getIdToken: idToken !== void 0 ? async () => idToken : void 0,
        profile: {
          email: `${userId}@example.com`
        }
      })
    );
  };
  return /* @__PURE__ */ React__default.createElement(GridItem, null, /* @__PURE__ */ React__default.createElement(InfoCard, { title: t("signIn.customProvider.title"), variant: "fullHeight" }, /* @__PURE__ */ React__default.createElement(Typography, { variant: "body1", className: classes.subTitle }, t("signIn.customProvider.subtitle")), /* @__PURE__ */ React__default.createElement("form", { className: classes.form, onSubmit: handleSubmit(handleResult) }, /* @__PURE__ */ React__default.createElement(FormControl, null, /* @__PURE__ */ React__default.createElement(
    TextField,
    {
      ...asInputRef(register("userId", { required: true })),
      label: t("signIn.customProvider.userId"),
      margin: "normal",
      error: Boolean(errors.userId)
    }
  ), errors.userId && /* @__PURE__ */ React__default.createElement(FormHelperText, { error: true }, errors.userId.message)), /* @__PURE__ */ React__default.createElement(FormControl, null, /* @__PURE__ */ React__default.createElement(
    TextField,
    {
      ...asInputRef(
        register("idToken", {
          required: false,
          validate: (token) => !token || ID_TOKEN_REGEX.test(token) || t("signIn.customProvider.tokenInvalid")
        })
      ),
      label: t("signIn.customProvider.idToken"),
      margin: "normal",
      autoComplete: "off",
      error: Boolean(errors.idToken)
    }
  ), errors.idToken && /* @__PURE__ */ React__default.createElement(FormHelperText, { error: true }, errors.idToken.message)), /* @__PURE__ */ React__default.createElement(
    Button,
    {
      type: "submit",
      color: "primary",
      variant: "outlined",
      className: classes.button,
      disabled: !formState?.isDirty || !isEmpty(errors)
    },
    t("signIn.customProvider.continue")
  ))));
};
const loader = async () => void 0;
const customProvider = { Component, loader };

export { customProvider };
//# sourceMappingURL=customProvider.esm.js.map
