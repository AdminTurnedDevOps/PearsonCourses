import React__default from 'react';
import Typography from '@material-ui/core/Typography';
import Button from '@material-ui/core/Button';
import { InfoCard } from '../InfoCard/InfoCard.esm.js';
import { GridItem } from './styles.esm.js';
import { ProxiedSignInIdentity } from '../ProxiedSignInPage/ProxiedSignInIdentity.esm.js';
import { useApi, discoveryApiRef } from '@backstage/core-plugin-api';
import { GuestUserIdentity } from './GuestUserIdentity.esm.js';
import useLocalStorage from 'react-use/esm/useLocalStorage';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const getIdentity = async (identity) => {
  try {
    const identityResponse = await identity.getBackstageIdentity();
    return identityResponse;
  } catch (error) {
    if (error.name === "ResponseError" && error.cause.name === "NotFoundError") {
      return void 0;
    }
    throw error;
  }
};
const Component = ({
  onSignInStarted,
  onSignInSuccess,
  onSignInFailure
}) => {
  const discoveryApi = useApi(discoveryApiRef);
  const [_, setUseLegacyGuestToken] = useLocalStorage("enableLegacyGuestToken");
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  const handle = async () => {
    onSignInStarted();
    const identity = new ProxiedSignInIdentity({
      provider: "guest",
      discoveryApi
    });
    const identityResponse = await getIdentity(identity).catch((error) => {
      console.warn(`Failed to sign in as a guest, ${error}`);
      return void 0;
    });
    if (!identityResponse) {
      const useLegacyGuestTokenResponse = confirm(
        "Failed to sign in as a guest using the auth backend. Do you want to fallback to the legacy guest token?"
      );
      if (useLegacyGuestTokenResponse) {
        setUseLegacyGuestToken(true);
        onSignInSuccess(new GuestUserIdentity());
        return;
      }
      onSignInFailure();
      throw new Error(
        `You cannot sign in as a guest, you must either enable the legacy guest token or configure the auth backend to support guest sign in.`
      );
    }
    onSignInSuccess(identity);
  };
  return /* @__PURE__ */ React__default.createElement(GridItem, null, /* @__PURE__ */ React__default.createElement(
    InfoCard,
    {
      title: "Guest",
      variant: "fullHeight",
      actions: /* @__PURE__ */ React__default.createElement(Button, { color: "primary", variant: "outlined", onClick: handle }, t("signIn.guestProvider.enter"))
    },
    /* @__PURE__ */ React__default.createElement(Typography, { variant: "body1", style: { whiteSpace: "pre-line" } }, t("signIn.guestProvider.subtitle"))
  ));
};
const loader = async (apis) => {
  const useLegacyGuestToken = localStorage.getItem("enableLegacyGuestToken") === "true";
  const identity = new ProxiedSignInIdentity({
    provider: "guest",
    discoveryApi: apis.get(discoveryApiRef)
  });
  const identityResponse = await getIdentity(identity).catch((error) => {
    console.warn(`Failed to sign in as a guest, ${error}`);
    return void 0;
  });
  if (!identityResponse && !useLegacyGuestToken) {
    return void 0;
  } else if (identityResponse && useLegacyGuestToken) {
    const switchToNewGuestToken = confirm(
      "You are currently using the legacy guest token, but you have the new guest backend module installed. Do you want to use the new module?"
    );
    if (switchToNewGuestToken) {
      localStorage.removeItem("enableLegacyGuestToken");
    } else {
      return new GuestUserIdentity();
    }
  } else if (useLegacyGuestToken) {
    return new GuestUserIdentity();
  }
  return identity;
};
const guestProvider = { Component, loader };

export { guestProvider };
//# sourceMappingURL=guestProvider.esm.js.map
