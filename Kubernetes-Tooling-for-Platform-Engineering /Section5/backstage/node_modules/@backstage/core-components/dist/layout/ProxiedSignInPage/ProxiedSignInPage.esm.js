import { useApi, discoveryApiRef } from '@backstage/core-plugin-api';
import React__default from 'react';
import { useAsync, useMountEffect } from '@react-hookz/web';
import { ErrorPanel } from '../../components/ErrorPanel/ErrorPanel.esm.js';
import { Progress } from '../../components/Progress/Progress.esm.js';
import { ProxiedSignInIdentity } from './ProxiedSignInIdentity.esm.js';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const ProxiedSignInPage = (props) => {
  const discoveryApi = useApi(discoveryApiRef);
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  const [{ status, error }, { execute }] = useAsync(async () => {
    const identity = new ProxiedSignInIdentity({
      provider: props.provider,
      discoveryApi,
      headers: props.headers
    });
    await identity.start();
    props.onSignInSuccess(identity);
  });
  useMountEffect(execute);
  if (status === "loading") {
    return /* @__PURE__ */ React__default.createElement(Progress, null);
  } else if (error) {
    return props.ErrorComponent ? /* @__PURE__ */ React__default.createElement(props.ErrorComponent, { error }) : /* @__PURE__ */ React__default.createElement(ErrorPanel, { title: t("proxiedSignInPage.title"), error });
  }
  return null;
};

export { ProxiedSignInPage };
//# sourceMappingURL=ProxiedSignInPage.esm.js.map
