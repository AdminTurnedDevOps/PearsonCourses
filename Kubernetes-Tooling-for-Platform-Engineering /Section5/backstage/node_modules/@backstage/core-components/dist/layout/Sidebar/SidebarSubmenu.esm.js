import Box from '@material-ui/core/Box';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import classNames from 'classnames';
import React__default, { useContext, useState, useEffect } from 'react';
import { SidebarConfigContext, SidebarItemWithSubmenuContext } from './config.esm.js';
import { useSidebarOpenState } from './SidebarOpenStateContext.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      zIndex: 1e3,
      position: "relative",
      overflow: "visible",
      width: theme.spacing(7) + 1
    },
    drawer: (props) => ({
      display: "flex",
      flexFlow: "column nowrap",
      alignItems: "flex-start",
      position: "fixed",
      opacity: 0,
      [theme.breakpoints.up("sm")]: {
        marginLeft: props.left,
        transition: theme.transitions.create(["margin-left", "opacity"], {
          easing: theme.transitions.easing.sharp,
          duration: props.submenuConfig.defaultOpenDelayMs
        })
      },
      top: 0,
      bottom: 0,
      padding: 0,
      background: theme.palette.navigation.submenu?.background ?? "#404040",
      overflowX: "hidden",
      msOverflowStyle: "none",
      scrollbarWidth: "none",
      cursor: "default",
      width: props.submenuConfig.drawerWidthClosed,
      transitionDelay: `${props.submenuConfig.defaultOpenDelayMs}ms`,
      "& > *": {
        flexShrink: 0
      },
      "&::-webkit-scrollbar": {
        display: "none"
      }
    }),
    drawerOpen: (props) => ({
      marginLeft: props.left,
      opacity: 1,
      width: props.submenuConfig.drawerWidthOpen,
      [theme.breakpoints.down("xs")]: {
        width: "100%",
        position: "relative",
        paddingLeft: theme.spacing(3),
        left: 0,
        top: 0
      }
    }),
    title: {
      fontSize: theme.typography.h5.fontSize,
      fontWeight: theme.typography.fontWeightMedium,
      color: theme.palette.navigation.color,
      padding: theme.spacing(2.5),
      [theme.breakpoints.down("xs")]: {
        display: "none"
      }
    }
  }),
  { name: "BackstageSidebarSubmenu" }
);
const SidebarSubmenu = (props) => {
  const { isOpen } = useSidebarOpenState();
  const { sidebarConfig, submenuConfig } = useContext(SidebarConfigContext);
  const left = isOpen ? sidebarConfig.drawerWidthOpen : sidebarConfig.drawerWidthClosed;
  const classes = useStyles({ left, submenuConfig });
  const { isHoveredOn } = useContext(SidebarItemWithSubmenuContext);
  const [isSubmenuOpen, setIsSubmenuOpen] = useState(false);
  useEffect(() => {
    setIsSubmenuOpen(isHoveredOn);
  }, [isHoveredOn]);
  return /* @__PURE__ */ React__default.createElement(
    Box,
    {
      className: classNames(classes.drawer, {
        [classes.drawerOpen]: isSubmenuOpen
      })
    },
    /* @__PURE__ */ React__default.createElement(Typography, { variant: "h5", component: "span", className: classes.title }, props.title),
    props.children
  );
};

export { SidebarSubmenu };
//# sourceMappingURL=SidebarSubmenu.esm.js.map
