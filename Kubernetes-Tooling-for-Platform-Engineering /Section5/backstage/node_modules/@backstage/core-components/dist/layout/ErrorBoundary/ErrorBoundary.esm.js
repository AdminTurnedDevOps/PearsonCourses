import Typography from '@material-ui/core/Typography';
import React__default, { Component } from 'react';
import { LinkButton } from '../../components/LinkButton/LinkButton.esm.js';
import { ErrorPanel } from '../../components/ErrorPanel/ErrorPanel.esm.js';
import { coreComponentsTranslationRef } from '../../translation.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';

const SlackLink = (props) => {
  const { slackChannel } = props;
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  if (!slackChannel) {
    return null;
  } else if (typeof slackChannel === "string") {
    return /* @__PURE__ */ React__default.createElement(Typography, null, t("errorBoundary.title", { slackChannel }));
  } else if (!slackChannel.href) {
    return /* @__PURE__ */ React__default.createElement(Typography, null, t("errorBoundary.title", {
      slackChannel: slackChannel.name
    }));
  }
  return /* @__PURE__ */ React__default.createElement(LinkButton, { to: slackChannel.href, variant: "contained" }, slackChannel.name);
};
const ErrorBoundary = class ErrorBoundary2 extends Component {
  constructor(props) {
    super(props);
    this.state = {
      error: void 0,
      errorInfo: void 0
    };
  }
  componentDidCatch(error, errorInfo) {
    console.error(`ErrorBoundary, error: ${error}`, { error, errorInfo });
    this.setState({ error, errorInfo });
  }
  render() {
    const { slackChannel, children } = this.props;
    const { error } = this.state;
    if (!error) {
      return children;
    }
    return /* @__PURE__ */ React__default.createElement(ErrorPanel, { title: "Something Went Wrong", error }, /* @__PURE__ */ React__default.createElement(SlackLink, { slackChannel }));
  }
};

export { ErrorBoundary };
//# sourceMappingURL=ErrorBoundary.esm.js.map
