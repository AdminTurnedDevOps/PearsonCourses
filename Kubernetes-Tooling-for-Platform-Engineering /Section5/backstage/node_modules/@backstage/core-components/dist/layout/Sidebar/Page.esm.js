import Box from '@material-ui/core/Box';
import { makeStyles } from '@material-ui/core/styles';
import useMediaQuery from '@material-ui/core/useMediaQuery';
import React__default, { createContext, useState, useContext, useRef, useMemo, useEffect, useCallback } from 'react';
import { SidebarConfigContext } from './config.esm.js';
import { LocalStorage } from './localStorage.esm.js';
import { SidebarPinStateProvider } from './SidebarPinStateContext.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      width: "100%",
      transition: "padding-left 0.1s ease-out",
      isolation: "isolate",
      [theme.breakpoints.up("sm")]: {
        paddingLeft: (props) => props.isPinned ? props.sidebarConfig.drawerWidthOpen : props.sidebarConfig.drawerWidthClosed
      },
      [theme.breakpoints.down("xs")]: {
        paddingBottom: (props) => props.sidebarConfig.mobileSidebarHeight
      },
      "@media print": {
        padding: "0px !important"
      }
    },
    content: {
      zIndex: 0,
      isolation: "isolate",
      "&:focus": {
        outline: 0
      }
    }
  }),
  { name: "BackstageSidebarPage" }
);
const PageContext = createContext({
  content: {
    contentRef: void 0
  }
});
function SidebarPage(props) {
  const [isPinned, setIsPinned] = useState(
    () => LocalStorage.getSidebarPinState()
  );
  const { sidebarConfig } = useContext(SidebarConfigContext);
  const contentRef = useRef(null);
  const pageContext = useMemo(
    () => ({
      content: {
        contentRef
      }
    }),
    [contentRef]
  );
  useEffect(() => {
    LocalStorage.setSidebarPinState(isPinned);
  }, [isPinned]);
  const isMobile = useMediaQuery((theme) => theme.breakpoints.down("xs"), {
    noSsr: true
  });
  const toggleSidebarPinState = () => setIsPinned(!isPinned);
  const classes = useStyles({ isPinned, sidebarConfig });
  return /* @__PURE__ */ React__default.createElement(
    SidebarPinStateProvider,
    {
      value: {
        isPinned,
        toggleSidebarPinState,
        isMobile
      }
    },
    /* @__PURE__ */ React__default.createElement(PageContext.Provider, { value: pageContext }, /* @__PURE__ */ React__default.createElement(Box, { className: classes.root }, props.children))
  );
}
function useContent() {
  const { content } = useContext(PageContext);
  const focusContent = useCallback(() => {
    content?.contentRef?.current?.focus();
  }, [content]);
  return { focusContent, contentRef: content?.contentRef };
}

export { SidebarPage, useContent };
//# sourceMappingURL=Page.esm.js.map
