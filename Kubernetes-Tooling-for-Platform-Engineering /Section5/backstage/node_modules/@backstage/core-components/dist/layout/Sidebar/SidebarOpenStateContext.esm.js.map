{"version":3,"file":"SidebarOpenStateContext.esm.js","sources":["../../../src/layout/Sidebar/SidebarOpenStateContext.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { createContext, ReactNode, useContext } from 'react';\nimport {\n  createVersionedContext,\n  createVersionedValueMap,\n} from '@backstage/version-bridge';\n\n/**\n * Types for the `SidebarContext`\n *\n * @public @deprecated\n * Use `SidebarOpenState` instead.\n */\nexport type SidebarContextType = {\n  isOpen: boolean;\n  setOpen: (open: boolean) => void;\n};\n\n/**\n * The open state of the sidebar.\n *\n * @public\n */\nexport type SidebarOpenState = {\n  /**\n   * Whether or not the sidebar is open and full-width. When `false`, the\n   * sidebar is \"closed\" and typically only shows icons with no text.\n   */\n  isOpen: boolean;\n\n  /**\n   * A function to set whether or not the sidebar is open. Pass `true` to open\n   * the sidebar. Pass `false` to close it.\n   */\n  setOpen: (open: boolean) => void;\n};\n\nconst defaultSidebarOpenStateContext = {\n  isOpen: false,\n  setOpen: () => {},\n};\n\n/**\n * Context whether the `Sidebar` is open\n *\n * @public @deprecated\n * Use `<SidebarOpenStateProvider>` + `useSidebarOpenState()` instead.\n */\nexport const LegacySidebarContext = createContext<SidebarContextType>(\n  defaultSidebarOpenStateContext,\n);\n\nconst VersionedSidebarContext = createVersionedContext<{\n  1: SidebarOpenState;\n}>('sidebar-open-state-context');\n\n/**\n * Provides context for reading and updating sidebar state.\n *\n * @public\n */\nexport function SidebarOpenStateProvider(props: {\n  children: ReactNode;\n  value: SidebarOpenState;\n}) {\n  const { children, value } = props;\n  return (\n    <LegacySidebarContext.Provider value={value}>\n      <VersionedSidebarContext.Provider\n        value={createVersionedValueMap({ 1: value })}\n      >\n        {children}\n      </VersionedSidebarContext.Provider>\n    </LegacySidebarContext.Provider>\n  );\n}\n\n/**\n * Hook to read and update the sidebar's open state, which controls whether or\n * not the sidebar is open and full-width, or closed and only displaying icons.\n *\n * @public\n */\nexport const useSidebarOpenState = (): SidebarOpenState => {\n  const versionedOpenStateContext = useContext(VersionedSidebarContext);\n  const legacyOpenStateContext = useContext(LegacySidebarContext);\n\n  // Invoked from outside a SidebarOpenStateProvider: check for the legacy\n  // context's value, but otherwise return the default.\n  if (versionedOpenStateContext === undefined) {\n    return legacyOpenStateContext || defaultSidebarOpenStateContext;\n  }\n\n  const openStateContext = versionedOpenStateContext.atVersion(1);\n  if (openStateContext === undefined) {\n    throw new Error('No context found for version 1.');\n  }\n\n  return openStateContext;\n};\n"],"names":["React"],"mappings":";;;AAoDA,MAAM,8BAAiC,GAAA;AAAA,EACrC,MAAQ,EAAA,KAAA;AAAA,EACR,SAAS,MAAM;AAAA;AACjB,CAAA;AAQO,MAAM,oBAAuB,GAAA,aAAA;AAAA,EAClC;AACF;AAEA,MAAM,uBAAA,GAA0B,uBAE7B,4BAA4B,CAAA;AAOxB,SAAS,yBAAyB,KAGtC,EAAA;AACD,EAAM,MAAA,EAAE,QAAU,EAAA,KAAA,EAAU,GAAA,KAAA;AAC5B,EAAA,uBACGA,cAAA,CAAA,aAAA,CAAA,oBAAA,CAAqB,QAArB,EAAA,EAA8B,KAC7B,EAAA,kBAAAA,cAAA,CAAA,aAAA;AAAA,IAAC,uBAAwB,CAAA,QAAA;AAAA,IAAxB;AAAA,MACC,KAAO,EAAA,uBAAA,CAAwB,EAAE,CAAA,EAAG,OAAO;AAAA,KAAA;AAAA,IAE1C;AAAA,GAEL,CAAA;AAEJ;AAQO,MAAM,sBAAsB,MAAwB;AACzD,EAAM,MAAA,yBAAA,GAA4B,WAAW,uBAAuB,CAAA;AACpE,EAAM,MAAA,sBAAA,GAAyB,WAAW,oBAAoB,CAAA;AAI9D,EAAA,IAAI,8BAA8B,KAAW,CAAA,EAAA;AAC3C,IAAA,OAAO,sBAA0B,IAAA,8BAAA;AAAA;AAGnC,EAAM,MAAA,gBAAA,GAAmB,yBAA0B,CAAA,SAAA,CAAU,CAAC,CAAA;AAC9D,EAAA,IAAI,qBAAqB,KAAW,CAAA,EAAA;AAClC,IAAM,MAAA,IAAI,MAAM,iCAAiC,CAAA;AAAA;AAGnD,EAAO,OAAA,gBAAA;AACT;;;;"}