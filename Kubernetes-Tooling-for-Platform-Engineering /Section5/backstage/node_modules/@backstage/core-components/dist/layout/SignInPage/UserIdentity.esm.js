import { GuestUserIdentity } from './GuestUserIdentity.esm.js';
import { LegacyUserIdentity } from './LegacyUserIdentity.esm.js';

class UserIdentity {
  constructor(identity, authApi, profile) {
    this.identity = identity;
    this.authApi = authApi;
    this.profile = profile;
  }
  profilePromise;
  /**
   * Creates a new IdentityApi that acts as a Guest User.
   *
   * @public
   */
  static createGuest() {
    return new GuestUserIdentity();
  }
  /**
   * Creates a new IdentityApi using a legacy SignInResult object.
   *
   * @public
   */
  static fromLegacy(result) {
    return LegacyUserIdentity.fromResult(result);
  }
  /**
   * Creates a new IdentityApi implementation using a user identity
   * and an auth API that will be used to request backstage tokens.
   *
   * @public
   */
  static create(options) {
    return new UserIdentity(options.identity, options.authApi, options.profile);
  }
  /** {@inheritdoc @backstage/core-plugin-api#IdentityApi.getUserId} */
  getUserId() {
    const ref = this.identity.userEntityRef;
    const match = /^([^:/]+:)?([^:/]+\/)?([^:/]+)$/.exec(ref);
    if (!match) {
      throw new TypeError(`Invalid user entity reference "${ref}"`);
    }
    return match[3];
  }
  /** {@inheritdoc @backstage/core-plugin-api#IdentityApi.getIdToken} */
  async getIdToken() {
    const identity = await this.authApi.getBackstageIdentity();
    return identity.token;
  }
  /** {@inheritdoc @backstage/core-plugin-api#IdentityApi.getProfile} */
  getProfile() {
    if (!this.profile) {
      throw new Error(
        "The identity API does not implement synchronous profile fetching, use getProfileInfo() instead"
      );
    }
    return this.profile;
  }
  /** {@inheritdoc @backstage/core-plugin-api#IdentityApi.getProfileInfo} */
  async getProfileInfo() {
    if (this.profilePromise) {
      return await this.profilePromise;
    }
    try {
      this.profilePromise = this.authApi.getProfile();
      return await this.profilePromise;
    } catch (ex) {
      this.profilePromise = void 0;
      throw ex;
    }
  }
  /** {@inheritdoc @backstage/core-plugin-api#IdentityApi.getBackstageIdentity} */
  async getBackstageIdentity() {
    return this.identity;
  }
  /** {@inheritdoc @backstage/core-plugin-api#IdentityApi.getCredentials} */
  async getCredentials() {
    const identity = await this.authApi.getBackstageIdentity();
    return { token: identity.token };
  }
  /** {@inheritdoc @backstage/core-plugin-api#IdentityApi.signOut} */
  async signOut() {
    return this.authApi.signOut();
  }
}

export { UserIdentity };
//# sourceMappingURL=UserIdentity.esm.js.map
