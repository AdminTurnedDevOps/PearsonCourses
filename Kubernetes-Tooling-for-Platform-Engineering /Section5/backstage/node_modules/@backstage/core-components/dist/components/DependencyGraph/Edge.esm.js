import React__default from 'react';
import * as d3Shape from 'd3-shape';
import isFinite from 'lodash/isFinite';
import makeStyles from '@material-ui/core/styles/makeStyles';
import { EDGE_TEST_ID, ARROW_MARKER_ID, LABEL_TEST_ID } from './constants.esm.js';
import { DefaultLabel } from './DefaultLabel.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    path: {
      strokeWidth: 1.3,
      stroke: theme.palette.textSubtle,
      fill: "none",
      transition: `${theme.transitions.duration.shortest}ms`
    },
    label: {
      transition: `${theme.transitions.duration.shortest}ms`
    }
  }),
  { name: "BackstageDependencyGraphEdge" }
);
const renderDefault = (props) => /* @__PURE__ */ React__default.createElement(DefaultLabel, { ...props });
function Edge({
  render = renderDefault,
  setEdge,
  id,
  edge,
  curve,
  showArrowHeads
}) {
  const { x = 0, y = 0, width, height, points } = edge;
  const labelProps = edge;
  const classes = useStyles();
  const labelRef = React__default.useRef(null);
  React__default.useLayoutEffect(() => {
    if (labelRef.current) {
      let { height: renderedHeight, width: renderedWidth } = labelRef.current.getBBox();
      renderedHeight = Math.round(renderedHeight);
      renderedWidth = Math.round(renderedWidth);
      if (renderedHeight !== height || renderedWidth !== width) {
        setEdge(id, {
          ...edge,
          height: renderedHeight,
          width: renderedWidth
        });
      }
    }
  }, [edge, height, width, setEdge, id]);
  let path = "";
  const createPath = React__default.useMemo(
    () => d3Shape.line().x((d) => d.x).y((d) => d.y).curve(d3Shape[curve]),
    [curve]
  );
  if (points) {
    const finitePoints = points.filter(
      (point) => isFinite(point.x) && isFinite(point.y)
    );
    path = createPath(finitePoints) || "";
  }
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, path && /* @__PURE__ */ React__default.createElement(
    "path",
    {
      "data-testid": EDGE_TEST_ID,
      className: classes.path,
      markerEnd: showArrowHeads ? `url(#${ARROW_MARKER_ID})` : void 0,
      d: path
    }
  ), labelProps.label ? /* @__PURE__ */ React__default.createElement(
    "g",
    {
      ref: labelRef,
      "data-testid": LABEL_TEST_ID,
      className: classes.label,
      transform: `translate(${x},${y})`
    },
    render({ edge: labelProps })
  ) : null);
}

export { Edge };
//# sourceMappingURL=Edge.esm.js.map
