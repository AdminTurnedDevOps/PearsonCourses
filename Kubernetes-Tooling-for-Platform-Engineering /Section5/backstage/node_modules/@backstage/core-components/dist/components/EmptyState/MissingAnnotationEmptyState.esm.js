import Box from '@material-ui/core/Box';
import Button from '@material-ui/core/Button';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import React__default from 'react';
import { CodeSnippet } from '../CodeSnippet/CodeSnippet.esm.js';
import { Link } from '../Link/Link.esm.js';
import { EmptyState } from './EmptyState.esm.js';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { coreComponentsTranslationRef } from '../../translation.esm.js';

const COMPONENT_YAML_TEMPLATE = `apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: example
  description: example.com
  annotations:
    ANNOTATION: value
spec:
  type: website
  lifecycle: production
  owner: user:guest`;
const ANNOTATION_REGEXP = /^.*ANNOTATION.*$/m;
const ANNOTATION_YAML = COMPONENT_YAML_TEMPLATE.match(ANNOTATION_REGEXP)[0];
const ANNOTATION_LINE = COMPONENT_YAML_TEMPLATE.split("\n").findIndex(
  (line) => ANNOTATION_REGEXP.test(line)
);
const useStyles = makeStyles(
  (theme) => ({
    code: {
      borderRadius: 6,
      margin: theme.spacing(2, 0),
      background: theme.palette.type === "dark" ? "#444" : theme.palette.common.white
    }
  }),
  { name: "BackstageMissingAnnotationEmptyState" }
);
function generateLineNumbers(lineCount) {
  return Array.from(Array(lineCount + 1).keys(), (i) => i + ANNOTATION_LINE);
}
function generateComponentYaml(annotations) {
  const annotationYaml = annotations.map((ann) => ANNOTATION_YAML.replace("ANNOTATION", ann)).join("\n");
  return COMPONENT_YAML_TEMPLATE.replace(ANNOTATION_YAML, annotationYaml);
}
function useGenerateDescription(annotations) {
  const isSingular = annotations.length <= 1;
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, "The ", isSingular ? "annotation" : "annotations", " ", annotations.map((ann) => /* @__PURE__ */ React__default.createElement("code", null, ann)).reduce((prev, curr) => /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, prev, ", ", curr)), " ", isSingular ? "is" : "are", " missing. You need to add the", " ", isSingular ? "annotation" : "annotations", " to your component if you want to enable this tool.");
}
function MissingAnnotationEmptyState(props) {
  const { annotation, readMoreUrl } = props;
  const annotations = Array.isArray(annotation) ? annotation : [annotation];
  const url = readMoreUrl || "https://backstage.io/docs/features/software-catalog/well-known-annotations";
  const classes = useStyles();
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  return /* @__PURE__ */ React__default.createElement(
    EmptyState,
    {
      missing: "field",
      title: t("emptyState.missingAnnotation.title"),
      description: useGenerateDescription(annotations),
      action: /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(Typography, { variant: "body1" }, t("emptyState.missingAnnotation.actionTitle")), /* @__PURE__ */ React__default.createElement(Box, { className: classes.code }, /* @__PURE__ */ React__default.createElement(
        CodeSnippet,
        {
          text: generateComponentYaml(annotations),
          language: "yaml",
          showLineNumbers: true,
          highlightedNumbers: generateLineNumbers(annotations.length),
          customStyle: { background: "inherit", fontSize: "115%" }
        }
      )), /* @__PURE__ */ React__default.createElement(Button, { color: "primary", component: Link, to: url }, t("emptyState.missingAnnotation.readMore")))
    }
  );
}

export { MissingAnnotationEmptyState };
//# sourceMappingURL=MissingAnnotationEmptyState.esm.js.map
