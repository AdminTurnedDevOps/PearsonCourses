import { makeStyles } from '@material-ui/core/styles';
import ReactMarkdown from 'react-markdown';
import gfm from 'remark-gfm';
import React__default from 'react';
import { CodeSnippet } from '../CodeSnippet/CodeSnippet.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    markdown: {
      "& table": {
        borderCollapse: "collapse",
        border: `1px solid ${theme.palette.border}`
      },
      "& th, & td": {
        border: `1px solid ${theme.palette.border}`,
        padding: theme.spacing(1)
      },
      "& td": {
        wordBreak: "break-word",
        overflow: "hidden",
        verticalAlign: "middle",
        lineHeight: "1",
        margin: 0,
        padding: theme.spacing(3, 2, 3, 2.5),
        borderBottom: 0
      },
      "& th": {
        backgroundColor: theme.palette.background.paper
      },
      "& tr": {
        backgroundColor: theme.palette.background.paper
      },
      "& tr:nth-child(odd)": {
        backgroundColor: theme.palette.background.default
      },
      "& a": {
        color: theme.palette.link
      },
      "& img": {
        maxWidth: "100%"
      }
    }
  }),
  { name: "BackstageMarkdownContent" }
);
const flatten = (text, child) => {
  if (!child) return text;
  return typeof child === "string" ? text + child : React__default.Children.toArray(child.props.children).reduce(flatten, text);
};
const headingRenderer = ({ level, children }) => {
  const childrenArray = React__default.Children.toArray(children);
  const text = childrenArray.reduce(flatten, "");
  const slug = text.toLocaleLowerCase("en-US").replace(/\W/g, "-");
  return React__default.createElement(`h${level}`, { id: slug }, children);
};
const components = {
  code: ({ inline, className, children, ...props }) => {
    const text = String(children).replace(/\n+$/, "");
    const match = /language-(\w+)/.exec(className || "");
    return !inline && match ? /* @__PURE__ */ React__default.createElement(CodeSnippet, { language: match[1], text }) : /* @__PURE__ */ React__default.createElement("code", { className, ...props }, children);
  },
  h1: headingRenderer,
  h2: headingRenderer,
  h3: headingRenderer,
  h4: headingRenderer,
  h5: headingRenderer,
  h6: headingRenderer
};
function MarkdownContent(props) {
  const {
    content,
    dialect = "gfm",
    linkTarget,
    transformLinkUri,
    transformImageUri,
    className
  } = props;
  const classes = useStyles();
  return /* @__PURE__ */ React__default.createElement(
    ReactMarkdown,
    {
      remarkPlugins: dialect === "gfm" ? [gfm] : [],
      className: `${classes.markdown} ${className ?? ""}`.trim(),
      children: content,
      components,
      linkTarget,
      transformLinkUri,
      transformImageUri
    }
  );
}

export { MarkdownContent };
//# sourceMappingURL=MarkdownContent.esm.js.map
