{"version":3,"file":"StructuredMetadataTable.esm.js","sources":["../../../src/components/StructuredMetadataTable/StructuredMetadataTable.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { Fragment, ReactElement } from 'react';\nimport {\n  withStyles,\n  createStyles,\n  WithStyles,\n  Theme,\n} from '@material-ui/core/styles';\nimport startCase from 'lodash/startCase';\nimport Typography from '@material-ui/core/Typography';\n\nimport {\n  MetadataTable,\n  MetadataTableItem,\n  MetadataList,\n  MetadataListItem,\n} from './MetadataTable';\n\nexport type StructuredMetadataTableListClassKey = 'root';\n\nconst listStyle = createStyles({\n  root: {\n    margin: '0 0',\n    listStyleType: 'none',\n  },\n});\n\nexport type StructuredMetadataTableNestedListClassKey = 'root';\n\nconst nestedListStyle = (theme: Theme) =>\n  createStyles({\n    root: {\n      ...listStyle.root,\n      paddingLeft: theme.spacing(1),\n    },\n  });\n\ninterface StyleProps extends WithStyles {\n  children?: React.ReactNode;\n}\n// Sub Components\nconst StyledList = withStyles(listStyle, {\n  name: 'BackstageStructuredMetadataTableList',\n})(({ classes, children }: StyleProps) => (\n  <MetadataList classes={classes}>{children}</MetadataList>\n));\nconst StyledNestedList = withStyles(nestedListStyle, {\n  name: 'BackstageStructuredMetadataTableNestedList',\n})(({ classes, children }: StyleProps) => (\n  <MetadataList classes={classes}>{children}</MetadataList>\n));\n\nfunction renderList(list: Array<any>, options: Options, nested: boolean) {\n  const values = list.map((item: any, index: number) => (\n    <MetadataListItem key={index}>\n      {toValue(item, options, nested)}\n    </MetadataListItem>\n  ));\n  return nested ? (\n    <StyledNestedList>{values}</StyledNestedList>\n  ) : (\n    <StyledList>{values}</StyledList>\n  );\n}\n\nfunction renderMap(\n  map: { [key: string]: any },\n  options: Options,\n  nested: boolean,\n) {\n  const values = Object.keys(map).map(key => {\n    const value = toValue(map[key], options, true);\n    return (\n      <MetadataListItem key={key}>\n        <Typography variant=\"body2\" component=\"span\">\n          {`${options.titleFormat(key)}: `}\n        </Typography>\n        {value}\n      </MetadataListItem>\n    );\n  });\n\n  return nested ? (\n    <StyledNestedList>{values}</StyledNestedList>\n  ) : (\n    <StyledList>{values}</StyledList>\n  );\n}\n\nfunction toValue(\n  value: ReactElement | object | Array<any> | boolean,\n  options: Options,\n  nested: boolean,\n) {\n  if (React.isValidElement(value)) {\n    return <Fragment>{value}</Fragment>;\n  }\n\n  if (value !== null && typeof value === 'object' && !Array.isArray(value)) {\n    return renderMap(value, options, nested);\n  }\n\n  if (Array.isArray(value)) {\n    return renderList(value, options, nested);\n  }\n\n  if (typeof value === 'boolean') {\n    return <Fragment>{value ? '✅' : '❌'}</Fragment>;\n  }\n\n  return (\n    <Typography variant=\"body2\" component=\"span\">\n      {value}\n    </Typography>\n  );\n}\nconst ItemValue = ({ value, options }: { value: any; options: Options }) => (\n  <Fragment>{toValue(value, options, false)}</Fragment>\n);\n\nconst TableItem = ({\n  title,\n  value,\n  options,\n}: {\n  title: string;\n  value: any;\n  options: Options;\n}) => {\n  return (\n    <MetadataTableItem title={options.titleFormat(title)}>\n      <ItemValue value={value} options={options} />\n    </MetadataTableItem>\n  );\n};\n\nfunction mapToItems(info: { [key: string]: string }, options: Options) {\n  return Object.keys(info).map(key => (\n    <TableItem key={key} title={key} value={info[key]} options={options} />\n  ));\n}\n\n/** @public */\nexport interface StructuredMetadataTableProps {\n  metadata: { [key: string]: any };\n  dense?: boolean;\n  options?: {\n    /**\n     * Function to format the keys from the `metadata` object. Defaults to\n     * startCase from the lodash library.\n     * @param key - A key within the `metadata`\n     * @returns Formatted key\n     */\n    titleFormat?: (key: string) => string;\n  };\n}\n\ntype Options = Required<NonNullable<StructuredMetadataTableProps['options']>>;\n\n/** @public */\nexport function StructuredMetadataTable(props: StructuredMetadataTableProps) {\n  const { metadata, dense = true, options = {} } = props;\n  const metadataItems = mapToItems(metadata, {\n    titleFormat: startCase,\n    ...options,\n  });\n  return <MetadataTable dense={dense}>{metadataItems}</MetadataTable>;\n}\n"],"names":["React"],"mappings":"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"}