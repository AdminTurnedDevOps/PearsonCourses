import { makeStyles, darken, lighten } from '@material-ui/core/styles';
import Accordion from '@material-ui/core/Accordion';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import ErrorOutline from '@material-ui/icons/ErrorOutline';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import React__default from 'react';
import { MarkdownContent } from '../MarkdownContent/MarkdownContent.esm.js';

const getWarningTextColor = (severity, theme) => {
  const getColor = theme.palette.type === "light" ? darken : lighten;
  return getColor(theme.palette[severity].light, 0.6);
};
const getWarningBackgroundColor = (severity, theme) => {
  const getBackgroundColor = theme.palette.type === "light" ? lighten : darken;
  return getBackgroundColor(theme.palette[severity].light, 0.9);
};
const useErrorOutlineStyles = makeStyles((theme) => ({
  root: {
    marginRight: theme.spacing(1),
    fill: ({ severity }) => getWarningTextColor(
      severity,
      theme
    )
  }
}));
const ErrorOutlineStyled = ({ severity }) => {
  const classes = useErrorOutlineStyles({ severity });
  return /* @__PURE__ */ React__default.createElement(ErrorOutline, { classes });
};
const ExpandMoreIconStyled = ({ severity }) => {
  const classes = useErrorOutlineStyles({ severity });
  return /* @__PURE__ */ React__default.createElement(ExpandMoreIcon, { classes });
};
const useStyles = makeStyles(
  (theme) => ({
    panel: {
      backgroundColor: ({ severity }) => getWarningBackgroundColor(
        severity,
        theme
      ),
      color: ({ severity }) => getWarningTextColor(
        severity,
        theme
      ),
      verticalAlign: "middle"
    },
    summary: {
      display: "flex",
      flexDirection: "row"
    },
    summaryText: {
      color: ({ severity }) => getWarningTextColor(
        severity,
        theme
      ),
      fontWeight: theme.typography.fontWeightBold
    },
    markdownContent: {
      "& p": {
        display: "inline"
      }
    },
    message: {
      width: "100%",
      display: "block",
      color: ({ severity }) => getWarningTextColor(
        severity,
        theme
      ),
      backgroundColor: ({ severity }) => getWarningBackgroundColor(
        severity,
        theme
      )
    },
    details: {
      width: "100%",
      display: "block",
      color: theme.palette.textContrast,
      backgroundColor: theme.palette.background.default,
      border: `1px solid ${theme.palette.border}`,
      padding: theme.spacing(2),
      fontFamily: "sans-serif"
    }
  }),
  { name: "BackstageWarningPanel" }
);
const capitalize = (s) => {
  return s.charAt(0).toLocaleUpperCase("en-US") + s.slice(1);
};
function WarningPanel(props) {
  const {
    severity = "warning",
    title,
    titleFormat,
    message,
    children,
    defaultExpanded
  } = props;
  const classes = useStyles({ severity });
  const subTitle = capitalize(severity) + (title ? `: ${title}` : "");
  return /* @__PURE__ */ React__default.createElement(
    Accordion,
    {
      defaultExpanded: defaultExpanded ?? false,
      className: classes.panel,
      role: "alert"
    },
    /* @__PURE__ */ React__default.createElement(
      AccordionSummary,
      {
        expandIcon: /* @__PURE__ */ React__default.createElement(ExpandMoreIconStyled, { severity }),
        className: classes.summary
      },
      /* @__PURE__ */ React__default.createElement(ErrorOutlineStyled, { severity }),
      /* @__PURE__ */ React__default.createElement(Typography, { className: classes.summaryText, variant: "subtitle1" }, titleFormat === "markdown" ? /* @__PURE__ */ React__default.createElement(
        MarkdownContent,
        {
          content: subTitle,
          className: classes.markdownContent
        }
      ) : subTitle)
    ),
    (message || children) && /* @__PURE__ */ React__default.createElement(AccordionDetails, null, /* @__PURE__ */ React__default.createElement(Grid, { container: true }, message && /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React__default.createElement(Typography, { className: classes.message, variant: "body1" }, message)), children && /* @__PURE__ */ React__default.createElement(Grid, { item: true, xs: 12, className: classes.details }, children)))
  );
}

export { WarningPanel };
//# sourceMappingURL=WarningPanel.esm.js.map
