import { useCallback, useState } from 'react';

const STATES_LOCAL_STORAGE_KEY = "core.calloutSeen";
function useCalloutStates() {
  const [states, setStates] = useState(() => {
    const raw = localStorage.getItem(STATES_LOCAL_STORAGE_KEY);
    return raw ? JSON.parse(raw) : {};
  });
  const setState = useCallback((key, value) => {
    const raw = localStorage.getItem(STATES_LOCAL_STORAGE_KEY);
    const oldStates = raw ? JSON.parse(raw) : {};
    const newStates = { ...oldStates, [key]: value };
    setStates(newStates);
    localStorage.setItem(STATES_LOCAL_STORAGE_KEY, JSON.stringify(newStates));
  }, []);
  return { states, setState };
}
function useCalloutHasBeenSeen(featureId) {
  const { states, setState } = useCalloutStates();
  const markSeen = useCallback(() => {
    setState(featureId, true);
  }, [setState, featureId]);
  return { seen: states[featureId] === true, markSeen };
}
function useShowCallout(featureId) {
  const { seen, markSeen } = useCalloutHasBeenSeen(featureId);
  return { show: seen === false, hide: markSeen };
}

export { useShowCallout };
//# sourceMappingURL=useShowCallout.esm.js.map
