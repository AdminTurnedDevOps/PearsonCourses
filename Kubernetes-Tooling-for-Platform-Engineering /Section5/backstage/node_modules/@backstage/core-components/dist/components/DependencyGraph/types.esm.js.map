{"version":3,"file":"types.esm.js","sources":["../../../src/components/DependencyGraph/types.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Types used to customize and provide data to {@link DependencyGraph}\n *\n * @packageDocumentation\n */\n\nimport React from 'react';\n\n/**\n * Types for the {@link DependencyGraph} component.\n *\n * @public\n */\nexport namespace DependencyGraphTypes {\n  /**\n   * Edge of {@link DependencyGraph}\n   *\n   * @public\n   */\n  export type DependencyEdge<T = {}> = T & {\n    /**\n     * ID of {@link DependencyNode} from where the Edge start\n     */\n    from: string;\n    /**\n     * ID of {@link DependencyNode} to where the Edge goes to\n     */\n    to: string;\n    /**\n     * Label assigned and rendered with the Edge\n     */\n    label?: string;\n  };\n\n  /**\n   * Properties of {@link DependencyGraphTypes.RenderLabelFunction} for {@link DependencyGraphTypes.DependencyEdge}\n   *\n   * @public\n   */\n  export type RenderLabelProps<T = unknown> = { edge: DependencyEdge<T> };\n\n  /**\n   * Custom React component for edge labels\n   *\n   * @public\n   */\n  export type RenderLabelFunction<T = {}> = (\n    props: RenderLabelProps<T>,\n  ) => React.ReactNode;\n\n  /**\n   * Node of {@link DependencyGraph}\n   *\n   * @public\n   */\n  export type DependencyNode<T = {}> = T & {\n    id: string;\n  };\n\n  /**\n   * Properties of {@link DependencyGraphTypes.RenderNodeFunction} for {@link DependencyGraphTypes.DependencyNode}\n   *\n   * @public\n   */\n  export type RenderNodeProps<T = unknown> = { node: DependencyNode<T> };\n\n  /**\n   * Custom React component for graph {@link DependencyGraphTypes.DependencyNode}\n   *\n   * @public\n   */\n  export type RenderNodeFunction<T = {}> = (\n    props: RenderNodeProps<T>,\n  ) => React.ReactNode;\n\n  /**\n   * Graph direction\n   *\n   * @public\n   */\n  export enum Direction {\n    /**\n     * Top to Bottom\n     */\n    TOP_BOTTOM = 'TB',\n    /**\n     * Bottom to Top\n     */\n    BOTTOM_TOP = 'BT',\n    /**\n     * Left to Right\n     */\n    LEFT_RIGHT = 'LR',\n    /**\n     * Right to Left\n     */\n    RIGHT_LEFT = 'RL',\n  }\n\n  /**\n   * Node alignment\n   *\n   * @public\n   */\n  export enum Alignment {\n    /**\n     * Up Left\n     */\n    UP_LEFT = 'UL',\n    /**\n     * Up Right\n     */\n    UP_RIGHT = 'UR',\n    /**\n     * Down Left\n     */\n    DOWN_LEFT = 'DL',\n    /**\n     * Down Right\n     */\n    DOWN_RIGHT = 'DR',\n  }\n\n  /**\n   * Algorithm used to rand nodes in graph\n   *\n   * @public\n   */\n  export enum Ranker {\n    /**\n     * {@link https://en.wikipedia.org/wiki/Network_simplex_algorithm | Network Simplex} algorithm\n     */\n    NETWORK_SIMPLEX = 'network-simplex',\n    /**\n     * Tight Tree algorithm\n     */\n    TIGHT_TREE = 'tight-tree',\n    /**\n     * Longest path algorithm\n     *\n     * @remarks\n     *\n     * Simplest and fastest\n     */\n    LONGEST_PATH = 'longest-path',\n  }\n\n  /**\n   * Position of label in relation to the edge\n   *\n   * @public\n   */\n  export enum LabelPosition {\n    LEFT = 'l',\n    RIGHT = 'r',\n    CENTER = 'c',\n  }\n}\n"],"names":["DependencyGraphTypes","Direction","Alignment","Ranker","LabelPosition"],"mappings":"AA6BiB,IAAA;AAAA,CAAV,CAAUA,qBAAV,KAAA;AAmEE,EAAA,CAAA,CAAKC,UAAL,KAAA;AAIL,IAAAA,WAAA,YAAa,CAAA,GAAA,IAAA;AAIb,IAAAA,WAAA,YAAa,CAAA,GAAA,IAAA;AAIb,IAAAA,WAAA,YAAa,CAAA,GAAA,IAAA;AAIb,IAAAA,WAAA,YAAa,CAAA,GAAA,IAAA;AAAA,GAhBH,EAAAD,qBAAA,CAAA,SAAA,KAAAA,qBAAA,CAAA,SAAA,GAAA,EAAA,CAAA,CAAA;AAwBL,EAAA,CAAA,CAAKE,UAAL,KAAA;AAIL,IAAAA,WAAA,SAAU,CAAA,GAAA,IAAA;AAIV,IAAAA,WAAA,UAAW,CAAA,GAAA,IAAA;AAIX,IAAAA,WAAA,WAAY,CAAA,GAAA,IAAA;AAIZ,IAAAA,WAAA,YAAa,CAAA,GAAA,IAAA;AAAA,GAhBH,EAAAF,qBAAA,CAAA,SAAA,KAAAA,qBAAA,CAAA,SAAA,GAAA,EAAA,CAAA,CAAA;AAwBL,EAAA,CAAA,CAAKG,OAAL,KAAA;AAIL,IAAAA,QAAA,iBAAkB,CAAA,GAAA,iBAAA;AAIlB,IAAAA,QAAA,YAAa,CAAA,GAAA,YAAA;AAQb,IAAAA,QAAA,cAAe,CAAA,GAAA,cAAA;AAAA,GAhBL,EAAAH,qBAAA,CAAA,MAAA,KAAAA,qBAAA,CAAA,MAAA,GAAA,EAAA,CAAA,CAAA;AAwBL,EAAA,CAAA,CAAKI,cAAL,KAAA;AACL,IAAAA,eAAA,MAAO,CAAA,GAAA,GAAA;AACP,IAAAA,eAAA,OAAQ,CAAA,GAAA,GAAA;AACR,IAAAA,eAAA,QAAS,CAAA,GAAA,GAAA;AAAA,GAHC,EAAAJ,qBAAA,CAAA,aAAA,KAAAA,qBAAA,CAAA,aAAA,GAAA,EAAA,CAAA,CAAA;AAAA,CA3IG,EAAA,oBAAA,KAAA,oBAAA,GAAA,EAAA,CAAA,CAAA;;;;"}