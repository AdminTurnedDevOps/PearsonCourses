{"version":3,"file":"Gauge.esm.js","sources":["../../../src/components/ProgressBars/Gauge.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BackstagePalette } from '@backstage/theme';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { Circle } from 'rc-progress';\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport classNames from 'classnames';\n\n/** @public */\nexport type GaugeClassKey =\n  | 'root'\n  | 'overlay'\n  | 'description'\n  | 'circle'\n  | 'colorUnknown';\n\nconst useStyles = makeStyles(\n  theme => ({\n    root: {\n      position: 'relative',\n      lineHeight: 0,\n    },\n    overlay: {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -60%)',\n      fontSize: theme.typography.pxToRem(45),\n      fontWeight: theme.typography.fontWeightBold,\n      color: theme.palette.textContrast,\n    },\n    overlaySmall: {\n      fontSize: theme.typography.pxToRem(25),\n    },\n    description: {\n      fontSize: '100%',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      position: 'absolute',\n      wordBreak: 'break-all',\n      display: 'inline-block',\n    },\n    circle: {\n      width: '80%',\n      transform: 'translate(10%, 0)',\n    },\n    colorUnknown: {},\n  }),\n  { name: 'BackstageGauge' },\n);\n\n/** @public */\nexport type GaugeProps = {\n  value: number;\n  fractional?: boolean;\n  inverse?: boolean;\n  unit?: string;\n  max?: number;\n  size?: 'normal' | 'small';\n  description?: ReactNode;\n  getColor?: GaugePropsGetColor;\n  relativeToMax?: boolean;\n  decimalDigits?: number;\n};\n\n/** @public */\nexport type GaugePropsGetColorOptions = {\n  palette: BackstagePalette;\n  value: number;\n  inverse?: boolean;\n  max?: number;\n};\n\n/** @public */\nexport type GaugePropsGetColor = (args: GaugePropsGetColorOptions) => string;\n\nconst defaultGaugeProps = {\n  fractional: true,\n  inverse: false,\n  unit: '%',\n  max: 100,\n  relativeToMax: false,\n};\n\nexport const getProgressColor: GaugePropsGetColor = ({\n  palette,\n  value,\n  inverse,\n  max,\n}) => {\n  if (isNaN(value)) {\n    return '#ddd';\n  }\n\n  const actualMax = max ? max : defaultGaugeProps.max;\n  const actualValue = inverse ? actualMax - value : value;\n\n  if (actualValue < actualMax / 3) {\n    return palette.status.error;\n  } else if (actualValue < actualMax * (2 / 3)) {\n    return palette.status.warning;\n  }\n\n  return palette.status.ok;\n};\n\n/**\n * Circular Progress Bar\n *\n * @public\n *\n */\n\nexport function Gauge(props: GaugeProps) {\n  const [hoverRef, setHoverRef] = useState<HTMLDivElement | null>(null);\n  const { getColor = getProgressColor, size = 'normal' } = props;\n  const classes = useStyles(props);\n  const { palette } = useTheme();\n  const {\n    value,\n    fractional,\n    inverse,\n    unit,\n    max,\n    description,\n    relativeToMax,\n    decimalDigits,\n  } = {\n    ...defaultGaugeProps,\n    ...props,\n  };\n\n  let asPercentage: number;\n  if (relativeToMax) {\n    asPercentage = (value / max) * 100;\n  } else {\n    asPercentage = fractional ? Math.round(value * max) : value;\n  }\n  let asActual: number;\n  if (relativeToMax) {\n    asActual = value;\n  } else {\n    asActual = max !== 100 ? Math.round(value) : asPercentage;\n  }\n  const asDisplay =\n    decimalDigits === undefined\n      ? asActual.toString()\n      : asActual.toFixed(decimalDigits);\n\n  const [isHovering, setIsHovering] = useState(false);\n\n  useEffect(() => {\n    const node = hoverRef;\n    const handleMouseOver = () => setIsHovering(true);\n    const handleMouseOut = () => setIsHovering(false);\n    if (node && description) {\n      node.addEventListener('mouseenter', handleMouseOver);\n      node.addEventListener('mouseleave', handleMouseOut);\n\n      return () => {\n        node.removeEventListener('mouseenter', handleMouseOver);\n        node.removeEventListener('mouseleave', handleMouseOut);\n      };\n    }\n    return () => {\n      setIsHovering(false);\n    };\n  }, [description, hoverRef]);\n\n  return (\n    <Box {...{ ref: setHoverRef }} className={classes.root}>\n      <Circle\n        strokeLinecap=\"butt\"\n        percent={asPercentage}\n        strokeWidth={12}\n        trailWidth={12}\n        strokeColor={getColor({\n          palette,\n          value: asPercentage,\n          inverse,\n          max: relativeToMax ? 100 : max,\n        })}\n        className={classes.circle}\n      />\n      {description && isHovering ? (\n        <Box className={classes.description}>{description}</Box>\n      ) : (\n        <Box\n          className={classNames(classes.overlay, {\n            [classes.overlaySmall]: size === 'small',\n          })}\n        >\n          {isNaN(value) ? 'N/A' : `${asDisplay}${unit}`}\n        </Box>\n      )}\n    </Box>\n  );\n}\n"],"names":["React"],"mappings":"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"}