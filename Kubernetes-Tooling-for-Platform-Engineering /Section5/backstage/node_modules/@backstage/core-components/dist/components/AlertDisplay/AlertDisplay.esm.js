import { useApi, alertApiRef } from '@backstage/core-plugin-api';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import IconButton from '@material-ui/core/IconButton';
import Snackbar from '@material-ui/core/Snackbar';
import Typography from '@material-ui/core/Typography';
import CloseIcon from '@material-ui/icons/Close';
import Alert from '@material-ui/lab/Alert';
import React__default, { useState, useEffect } from 'react';
import { coreComponentsTranslationRef } from '../../translation.esm.js';

function AlertDisplay(props) {
  const [messages, setMessages] = useState([]);
  const alertApi = useApi(alertApiRef);
  const { t } = useTranslationRef(coreComponentsTranslationRef);
  const {
    anchorOrigin = { vertical: "top", horizontal: "center" },
    transientTimeoutMs
  } = props;
  const timeoutMs = transientTimeoutMs ?? 5e3;
  useEffect(() => {
    const subscription = alertApi.alert$().subscribe((message) => setMessages((msgs) => msgs.concat(message)));
    return () => {
      subscription.unsubscribe();
    };
  }, [alertApi]);
  const [firstMessage] = messages;
  useEffect(() => {
    if (firstMessage && firstMessage.display === "transient") {
      const timeout = setTimeout(() => {
        setMessages((msgs) => {
          const newMsgs = msgs.filter((msg) => msg !== firstMessage);
          return newMsgs.length === msgs.length ? msgs : newMsgs;
        });
      }, timeoutMs);
      return () => clearTimeout(timeout);
    }
    return void 0;
  }, [firstMessage, timeoutMs]);
  if (messages.length === 0) {
    return null;
  }
  const handleClose = () => {
    setMessages((msgs) => msgs.filter((msg) => msg !== firstMessage));
  };
  return /* @__PURE__ */ React__default.createElement(Snackbar, { open: true, anchorOrigin }, /* @__PURE__ */ React__default.createElement(
    Alert,
    {
      action: /* @__PURE__ */ React__default.createElement(
        IconButton,
        {
          color: "inherit",
          size: "small",
          onClick: handleClose,
          "data-testid": "error-button-close"
        },
        /* @__PURE__ */ React__default.createElement(CloseIcon, null)
      ),
      severity: firstMessage.severity
    },
    /* @__PURE__ */ React__default.createElement(Typography, { component: "span" }, String(firstMessage.message), messages.length > 1 && /* @__PURE__ */ React__default.createElement("em", null, t("alertDisplay.message", {
      count: messages.length - 1
    })))
  ));
}

export { AlertDisplay };
//# sourceMappingURL=AlertDisplay.esm.js.map
