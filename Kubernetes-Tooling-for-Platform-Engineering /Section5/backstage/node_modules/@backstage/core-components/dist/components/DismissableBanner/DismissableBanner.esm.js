import React__default, { useState, useEffect } from 'react';
import { useApi, storageApiRef } from '@backstage/core-plugin-api';
import useObservable from 'react-use/esm/useObservable';
import classNames from 'classnames';
import { makeStyles } from '@material-ui/core/styles';
import Snackbar from '@material-ui/core/Snackbar';
import SnackbarContent from '@material-ui/core/SnackbarContent';
import IconButton from '@material-ui/core/IconButton';
import CloseIcon from '@material-ui/icons/Close';

const useStyles = makeStyles(
  (theme) => ({
    root: {
      padding: theme.spacing(0),
      marginBottom: theme.spacing(0),
      marginTop: theme.spacing(0),
      display: "flex",
      flexFlow: "row nowrap"
    },
    // showing on top
    topPosition: {
      position: "relative",
      marginBottom: theme.spacing(6),
      marginTop: -theme.spacing(3),
      zIndex: "unset"
    },
    icon: {
      fontSize: theme.typography.h6.fontSize
    },
    content: {
      width: "100%",
      maxWidth: "inherit",
      flexWrap: "nowrap",
      color: theme.palette.banner.text
    },
    message: {
      display: "flex",
      alignItems: "center",
      "& a": {
        color: theme.palette.banner.link
      }
    },
    button: {
      color: theme.palette.banner.closeButtonColor ?? "inherit"
    },
    info: {
      backgroundColor: theme.palette.banner.info
    },
    error: {
      backgroundColor: theme.palette.banner.error
    },
    warning: {
      backgroundColor: theme.palette.banner.warning ?? theme.palette.banner.error
    }
  }),
  { name: "BackstageDismissableBanner" }
);
const DismissableBanner = (props) => {
  const { variant, message, id, fixed = false } = props;
  const classes = useStyles();
  const storageApi = useApi(storageApiRef);
  const notificationsStore = storageApi.forBucket("notifications");
  const rawDismissedBanners = notificationsStore.snapshot("dismissedBanners").value ?? [];
  const [dismissedBanners, setDismissedBanners] = useState(
    new Set(rawDismissedBanners)
  );
  const observedItems = useObservable(
    notificationsStore.observe$("dismissedBanners")
  );
  useEffect(() => {
    if (observedItems?.value) {
      const currentValue = observedItems?.value ?? [];
      setDismissedBanners(new Set(currentValue));
    }
  }, [observedItems?.value]);
  const handleClick = () => {
    notificationsStore.set("dismissedBanners", [...dismissedBanners, id]);
  };
  return /* @__PURE__ */ React__default.createElement(
    Snackbar,
    {
      anchorOrigin: fixed ? { vertical: "bottom", horizontal: "center" } : { vertical: "top", horizontal: "center" },
      open: !dismissedBanners.has(id),
      classes: {
        root: classNames(classes.root, !fixed && classes.topPosition)
      }
    },
    /* @__PURE__ */ React__default.createElement(
      SnackbarContent,
      {
        classes: {
          root: classNames(classes.content, classes[variant]),
          message: classes.message
        },
        message,
        action: [
          /* @__PURE__ */ React__default.createElement(
            IconButton,
            {
              key: "dismiss",
              title: "Permanently dismiss this message",
              className: classes.button,
              onClick: handleClick
            },
            /* @__PURE__ */ React__default.createElement(CloseIcon, { className: classes.icon })
          )
        ]
      }
    )
  );
};

export { DismissableBanner };
//# sourceMappingURL=DismissableBanner.esm.js.map
