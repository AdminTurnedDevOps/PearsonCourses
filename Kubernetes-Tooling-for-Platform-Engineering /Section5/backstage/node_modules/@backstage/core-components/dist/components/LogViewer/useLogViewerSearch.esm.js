import { useState, useMemo } from 'react';
import { useToggle } from '@react-hookz/web';

function applySearchFilter(lines, searchText) {
  if (!searchText) {
    return { lines };
  }
  const matchingLines = [];
  const searchResults = [];
  for (const line of lines) {
    if (line.text.includes(searchText)) {
      matchingLines.push(line);
      let offset = 0;
      let lineResultIndex = 0;
      for (; ; ) {
        const start = line.text.indexOf(searchText, offset);
        if (start === -1) {
          break;
        }
        searchResults.push({
          lineNumber: line.lineNumber,
          lineIndex: lineResultIndex++
        });
        offset = start + searchText.length;
      }
    }
  }
  return {
    lines: matchingLines,
    results: searchResults
  };
}
function useLogViewerSearch(lines) {
  const [searchInput, setSearchInput] = useState("");
  const searchText = searchInput.toLocaleLowerCase("en-US");
  const [resultIndex, setResultIndex] = useState(0);
  const [shouldFilter, toggleShouldFilter] = useToggle(false);
  const filter = useMemo(
    () => applySearchFilter(lines, searchText),
    [lines, searchText]
  );
  const searchResult = filter.results ? filter.results[Math.min(resultIndex, filter.results.length - 1)] : void 0;
  const resultCount = filter.results?.length;
  const resultIndexStep = (decrement) => {
    if (decrement) {
      if (resultCount !== void 0) {
        const next = Math.min(resultIndex - 1, resultCount - 2);
        setResultIndex(next < 0 ? resultCount - 1 : next);
      }
    } else {
      if (resultCount !== void 0) {
        const next = resultIndex + 1;
        setResultIndex(next >= resultCount ? 0 : next);
      }
    }
  };
  return {
    lines: shouldFilter ? filter.lines : lines,
    searchText,
    searchInput,
    setSearchInput,
    shouldFilter,
    toggleShouldFilter,
    resultCount,
    resultIndex,
    resultIndexStep,
    resultLine: searchResult?.lineNumber,
    resultLineIndex: searchResult?.lineIndex
  };
}

export { applySearchFilter, useLogViewerSearch };
//# sourceMappingURL=useLogViewerSearch.esm.js.map
