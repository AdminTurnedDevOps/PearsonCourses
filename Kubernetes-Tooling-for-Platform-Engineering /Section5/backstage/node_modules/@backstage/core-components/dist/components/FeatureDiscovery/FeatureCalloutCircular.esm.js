import Box from '@material-ui/core/Box';
import ClickAwayListener from '@material-ui/core/ClickAwayListener';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import React__default, { useRef, useState, useCallback, useEffect, useLayoutEffect } from 'react';
import { createPortal } from 'react-dom';
import { usePortal } from './lib/usePortal.esm.js';
import { useShowCallout } from './lib/useShowCallout.esm.js';

const useStyles = makeStyles(
  (theme) => ({
    "@keyframes pulsateSlightly": {
      "0%": { transform: "scale(1.0)" },
      "100%": { transform: "scale(1.1)" }
    },
    "@keyframes pulsateAndFade": {
      "0%": { transform: "scale(1.0)", opacity: 0.9 },
      "100%": { transform: "scale(1.5)", opacity: 0 }
    },
    featureWrapper: {
      position: "relative"
    },
    backdrop: {
      zIndex: 2e3,
      position: "fixed",
      overflow: "hidden",
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    },
    dot: {
      position: "absolute",
      backgroundColor: "transparent",
      borderRadius: "100%",
      border: "1px solid rgba(103, 146, 180, 0.98)",
      boxShadow: "0px 0px 0px 20000px rgba(0, 0, 0, 0.5)",
      zIndex: 2001,
      transformOrigin: "center center",
      animation: "$pulsateSlightly 1744ms 1.2s cubic-bezier(0.4, 0, 0.2, 1) alternate infinite"
    },
    pulseCircle: {
      width: "100%",
      height: "100%",
      backgroundColor: "transparent",
      borderRadius: "100%",
      border: `2px solid ${theme.palette.common.white}`,
      zIndex: 2001,
      transformOrigin: "center center",
      animation: "$pulsateAndFade 872ms 1.2s cubic-bezier(0.4, 0, 0.2, 1) infinite"
    },
    text: {
      position: "absolute",
      color: theme.palette.common.white,
      zIndex: 2003
    }
  }),
  { name: "BackstageFeatureCalloutCircular" }
);
function FeatureCalloutCircular(props) {
  const { featureId, title, description, children } = props;
  const { show, hide } = useShowCallout(featureId);
  const portalElement = usePortal("core.callout");
  const wrapperRef = useRef(null);
  const [placement, setPlacement] = useState();
  const classes = useStyles();
  const update = useCallback(() => {
    if (wrapperRef.current) {
      const wrapperBounds = wrapperRef.current.getBoundingClientRect();
      const longest = Math.max(wrapperBounds.width, wrapperBounds.height);
      const borderWidth = 800;
      const dotLeft = wrapperBounds.x - (longest - wrapperBounds.width) / 2 - borderWidth;
      const dotTop = wrapperBounds.y - (longest - wrapperBounds.height) / 2 - borderWidth;
      const dotSize = longest + 2 * borderWidth;
      const textWidth = 450;
      const textLeft = wrapperBounds.x + wrapperBounds.width / 2 - textWidth;
      const textTop = wrapperBounds.y - (longest - wrapperBounds.height) / 2 + longest + 20;
      setPlacement({
        dotLeft,
        dotTop,
        dotSize,
        borderWidth,
        textTop,
        textLeft,
        textWidth
      });
    }
  }, []);
  useEffect(() => {
    window.addEventListener("resize", update);
    window.addEventListener("scroll", update);
    return () => {
      window.removeEventListener("resize", update);
      window.removeEventListener("scroll", update);
    };
  }, [update]);
  useLayoutEffect(update, [wrapperRef.current, update]);
  if (!show) {
    return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, children);
  }
  return /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(Box, { className: classes.featureWrapper, ...{ ref: wrapperRef } }, children), createPortal(
    /* @__PURE__ */ React__default.createElement(Box, { className: classes.backdrop }, /* @__PURE__ */ React__default.createElement(ClickAwayListener, { onClickAway: hide }, /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(
      Box,
      {
        className: classes.dot,
        "data-testid": "dot",
        style: {
          left: placement?.dotLeft,
          top: placement?.dotTop,
          width: placement?.dotSize,
          height: placement?.dotSize,
          borderWidth: placement?.borderWidth
        },
        onClick: hide,
        onKeyDown: hide,
        role: "button",
        tabIndex: 0
      },
      /* @__PURE__ */ React__default.createElement(Box, { className: classes.pulseCircle })
    ), /* @__PURE__ */ React__default.createElement(
      Box,
      {
        className: classes.text,
        "data-testid": "text",
        style: {
          left: placement?.textLeft,
          top: placement?.textTop,
          width: placement?.textWidth
        }
      },
      /* @__PURE__ */ React__default.createElement(Typography, { variant: "h2", paragraph: true }, title),
      /* @__PURE__ */ React__default.createElement(Typography, null, description)
    )))),
    portalElement
  ));
}

export { FeatureCalloutCircular };
//# sourceMappingURL=FeatureCalloutCircular.esm.js.map
