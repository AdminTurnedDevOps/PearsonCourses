import { useAnalytics, useApp, useApi, configApiRef } from '@backstage/core-plugin-api';
import MaterialLink from '@material-ui/core/Link';
import { makeStyles } from '@material-ui/core/styles';
import Typography from '@material-ui/core/Typography';
import classNames from 'classnames';
import { trimEnd } from 'lodash';
import React__default from 'react';
import { Link as Link$1, createRoutesFromChildren, Route } from 'react-router-dom';
import OpenInNew from '@material-ui/icons/OpenInNew';

function isReactRouterBeta() {
  const [obj] = createRoutesFromChildren(/* @__PURE__ */ React__default.createElement(Route, { index: true, element: /* @__PURE__ */ React__default.createElement("div", null) }));
  return !obj.index;
}
const useStyles = makeStyles(
  (theme) => ({
    visuallyHidden: {
      clip: "rect(0 0 0 0)",
      clipPath: "inset(50%)",
      overflow: "hidden",
      position: "absolute",
      userSelect: "none",
      whiteSpace: "nowrap",
      height: 1,
      width: 1
    },
    externalLink: {
      position: "relative"
    },
    externalLinkIcon: {
      verticalAlign: "bottom",
      marginLeft: theme.spacing(0.5)
    }
  }),
  { name: "Link" }
);
const ExternalLinkIcon = () => {
  const app = useApp();
  const Icon = app.getSystemIcon("externalLink") || OpenInNew;
  const classes = useStyles();
  return /* @__PURE__ */ React__default.createElement(Icon, { className: classes.externalLinkIcon });
};
const isExternalUri = (uri) => /^([a-z+.-]+):/.test(uri);
const scriptProtocolPattern = (
  // eslint-disable-next-line no-control-regex
  /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i
);
const originalWindowOpen = window.open;
if (originalWindowOpen && !originalWindowOpen.__backstage) {
  const newOpen = function open(...args) {
    const url = String(args[0]);
    if (scriptProtocolPattern.test(url)) {
      throw new Error(
        "Rejected window.open() with a javascript: URL as a security precaution"
      );
    }
    return originalWindowOpen.apply(this, args);
  };
  newOpen.__backstage = true;
  window.open = newOpen;
}
const useBaseUrl = () => {
  try {
    const config = useApi(configApiRef);
    return config.getOptionalString("app.baseUrl");
  } catch {
    return void 0;
  }
};
const useBasePath = () => {
  const base = "http://sample.dev";
  const url = useBaseUrl() ?? "/";
  const { pathname } = new URL(url, base);
  return trimEnd(pathname, "/");
};
const useResolvedPath = (uri) => {
  let resolvedPath = String(uri);
  const basePath = useBasePath();
  const external = isExternalUri(resolvedPath);
  const startsWithBasePath = resolvedPath.startsWith(basePath);
  if (!external && !startsWithBasePath) {
    resolvedPath = basePath.concat(resolvedPath);
  }
  return resolvedPath;
};
const getNodeText = (node) => {
  if (node instanceof Array) {
    return node.map(getNodeText).join(" ").trim();
  }
  if (typeof node === "object" && node) {
    return getNodeText(node?.props?.children);
  }
  if (["string", "number"].includes(typeof node)) {
    return String(node);
  }
  return "";
};
const Link = React__default.forwardRef(
  ({ onClick, noTrack, externalLinkIcon, ...props }, ref) => {
    const classes = useStyles();
    const analytics = useAnalytics();
    const to = isReactRouterBeta() ? useResolvedPath(props.to) : props.to;
    const linkText = getNodeText(props.children) || to;
    const external = isExternalUri(to);
    const newWindow = external && !!/^https?:/.exec(to);
    if (scriptProtocolPattern.test(to)) {
      throw new Error(
        "Link component rejected javascript: URL as a security precaution"
      );
    }
    const handleClick = (event) => {
      onClick?.(event);
      if (!noTrack) {
        analytics.captureEvent("click", linkText, { attributes: { to } });
      }
    };
    return external ? (
      // External links
      /* @__PURE__ */ React__default.createElement(
        MaterialLink,
        {
          ...newWindow ? { target: "_blank", rel: "noopener" } : {},
          ...props,
          ...props["aria-label"] ? { "aria-label": `${props["aria-label"]}, Opens in a new window` } : {},
          ref,
          href: to,
          onClick: handleClick,
          className: classNames(classes.externalLink, props.className)
        },
        props.children,
        externalLinkIcon && /* @__PURE__ */ React__default.createElement(ExternalLinkIcon, null),
        /* @__PURE__ */ React__default.createElement(Typography, { component: "span", className: classes.visuallyHidden }, ", Opens in a new window")
      )
    ) : (
      // Interact with React Router for internal links
      /* @__PURE__ */ React__default.createElement(
        MaterialLink,
        {
          ...props,
          ref,
          component: Link$1,
          to,
          onClick: handleClick
        }
      )
    );
  }
);

export { Link, isExternalUri, isReactRouterBeta, useResolvedPath };
//# sourceMappingURL=Link.esm.js.map
