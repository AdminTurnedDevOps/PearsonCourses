{"version":3,"file":"Api.client.esm.js","sources":["../../../../../src/schema/openapi/generated/apis/Api.client.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// ******************************************************************\n// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *\n// ******************************************************************\nimport { DiscoveryApi } from '../types/discovery';\nimport { FetchApi } from '../types/fetch';\nimport crossFetch from 'cross-fetch';\nimport { pluginId } from '../pluginId';\nimport * as parser from 'uri-template';\nimport { AnalyzeLocationRequest } from '../models/AnalyzeLocationRequest.model';\nimport { AnalyzeLocationResponse } from '../models/AnalyzeLocationResponse.model';\nimport { CreateLocation201Response } from '../models/CreateLocation201Response.model';\nimport { CreateLocationRequest } from '../models/CreateLocationRequest.model';\nimport { EntitiesBatchResponse } from '../models/EntitiesBatchResponse.model';\nimport { EntitiesQueryResponse } from '../models/EntitiesQueryResponse.model';\nimport { Entity } from '../models/Entity.model';\nimport { EntityAncestryResponse } from '../models/EntityAncestryResponse.model';\nimport { EntityFacetsResponse } from '../models/EntityFacetsResponse.model';\nimport { GetEntitiesByRefsRequest } from '../models/GetEntitiesByRefsRequest.model';\nimport { GetLocations200ResponseInner } from '../models/GetLocations200ResponseInner.model';\nimport { Location } from '../models/Location.model';\nimport { RefreshEntityRequest } from '../models/RefreshEntityRequest.model';\nimport { ValidateEntityRequest } from '../models/ValidateEntityRequest.model';\n\n/**\n * Wraps the Response type to convey a type on the json call.\n *\n * @public\n */\nexport type TypedResponse<T> = Omit<Response, 'json'> & {\n  json: () => Promise<T>;\n};\n\n/**\n * Options you can pass into a request for additional information.\n *\n * @public\n */\nexport interface RequestOptions {\n  token?: string;\n}\n/**\n * @public\n */\nexport type AnalyzeLocation = {\n  body: AnalyzeLocationRequest;\n};\n/**\n * @public\n */\nexport type CreateLocation = {\n  body: CreateLocationRequest;\n  query: {\n    dryRun?: string;\n  };\n};\n/**\n * @public\n */\nexport type DeleteEntityByUid = {\n  path: {\n    uid: string;\n  };\n};\n/**\n * @public\n */\nexport type DeleteLocation = {\n  path: {\n    id: string;\n  };\n};\n/**\n * @public\n */\nexport type GetEntities = {\n  query: {\n    fields?: Array<string>;\n    limit?: number;\n    filter?: Array<string>;\n    offset?: number;\n    after?: string;\n    order?: Array<string>;\n  };\n};\n/**\n * @public\n */\nexport type GetEntitiesByQuery = {\n  query: {\n    fields?: Array<string>;\n    limit?: number;\n    offset?: number;\n    orderField?: Array<string>;\n    cursor?: string;\n    filter?: Array<string>;\n    fullTextFilterTerm?: string;\n    fullTextFilterFields?: Array<string>;\n  };\n};\n/**\n * @public\n */\nexport type GetEntitiesByRefs = {\n  body: GetEntitiesByRefsRequest;\n  query: {\n    filter?: Array<string>;\n  };\n};\n/**\n * @public\n */\nexport type GetEntityAncestryByName = {\n  path: {\n    kind: string;\n    namespace: string;\n    name: string;\n  };\n};\n/**\n * @public\n */\nexport type GetEntityByName = {\n  path: {\n    kind: string;\n    namespace: string;\n    name: string;\n  };\n};\n/**\n * @public\n */\nexport type GetEntityByUid = {\n  path: {\n    uid: string;\n  };\n};\n/**\n * @public\n */\nexport type GetEntityFacets = {\n  query: {\n    facet: Array<string>;\n    filter?: Array<string>;\n  };\n};\n/**\n * @public\n */\nexport type GetLocation = {\n  path: {\n    id: string;\n  };\n};\n/**\n * @public\n */\nexport type GetLocationByEntity = {\n  path: {\n    kind: string;\n    namespace: string;\n    name: string;\n  };\n};\n/**\n * @public\n */\nexport type GetLocations = {};\n/**\n * @public\n */\nexport type RefreshEntity = {\n  body: RefreshEntityRequest;\n};\n/**\n * @public\n */\nexport type ValidateEntity = {\n  body: ValidateEntityRequest;\n};\n\n/**\n * @public\n */\nexport class DefaultApiClient {\n  private readonly discoveryApi: DiscoveryApi;\n  private readonly fetchApi: FetchApi;\n\n  constructor(options: {\n    discoveryApi: { getBaseUrl(pluginId: string): Promise<string> };\n    fetchApi?: { fetch: typeof fetch };\n  }) {\n    this.discoveryApi = options.discoveryApi;\n    this.fetchApi = options.fetchApi || { fetch: crossFetch };\n  }\n\n  /**\n   * Validate a given location.\n   * @param analyzeLocationRequest -\n   */\n  public async analyzeLocation(\n    // @ts-ignore\n    request: AnalyzeLocation,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<AnalyzeLocationResponse>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/analyze-location`;\n\n    const uri = parser.parse(uriTemplate).expand({});\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'POST',\n      body: JSON.stringify(request.body),\n    });\n  }\n\n  /**\n   * Create a location for a given target.\n   * @param createLocationRequest -\n   * @param dryRun -\n   */\n  public async createLocation(\n    // @ts-ignore\n    request: CreateLocation,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<CreateLocation201Response>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/locations{?dryRun}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      ...request.query,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'POST',\n      body: JSON.stringify(request.body),\n    });\n  }\n\n  /**\n   * Delete a single entity by UID.\n   * @param uid -\n   */\n  public async deleteEntityByUid(\n    // @ts-ignore\n    request: DeleteEntityByUid,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<void>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/entities/by-uid/{uid}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      uid: request.path.uid,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * Delete a location by id.\n   * @param id -\n   */\n  public async deleteLocation(\n    // @ts-ignore\n    request: DeleteLocation,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<void>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/locations/{id}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      id: request.path.id,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * Get all entities matching a given filter.\n   * @param fields - Restrict to just these fields in the response.\n   * @param limit - Number of records to return in the response.\n   * @param filter - Filter for just the entities defined by this filter.\n   * @param offset - Number of records to skip in the query page.\n   * @param after - Pointer to the previous page of results.\n   * @param order -\n   */\n  public async getEntities(\n    // @ts-ignore\n    request: GetEntities,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Array<Entity>>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/entities{?fields,limit,filter*,offset,after,order*}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      ...request.query,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Search for entities by a given query.\n   * @param fields - Restrict to just these fields in the response.\n   * @param limit - Number of records to return in the response.\n   * @param offset - Number of records to skip in the query page.\n   * @param orderField - The fields to sort returned results by.\n   * @param cursor - Cursor to a set page of results.\n   * @param filter - Filter for just the entities defined by this filter.\n   * @param fullTextFilterTerm - Text search term.\n   * @param fullTextFilterFields - A comma separated list of fields to sort returned results by.\n   */\n  public async getEntitiesByQuery(\n    // @ts-ignore\n    request: GetEntitiesByQuery,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<EntitiesQueryResponse>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/entities/by-query{?fields,limit,offset,orderField*,cursor,filter*,fullTextFilterTerm,fullTextFilterFields}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      ...request.query,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Get a batch set of entities given an array of entityRefs.\n   * @param filter - Filter for just the entities defined by this filter.\n   * @param getEntitiesByRefsRequest -\n   */\n  public async getEntitiesByRefs(\n    // @ts-ignore\n    request: GetEntitiesByRefs,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<EntitiesBatchResponse>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/entities/by-refs{?filter*}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      ...request.query,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'POST',\n      body: JSON.stringify(request.body),\n    });\n  }\n\n  /**\n   * Get an entity's ancestry by entity ref.\n   * @param kind -\n   * @param namespace -\n   * @param name -\n   */\n  public async getEntityAncestryByName(\n    // @ts-ignore\n    request: GetEntityAncestryByName,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<EntityAncestryResponse>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/entities/by-name/{kind}/{namespace}/{name}/ancestry`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      kind: request.path.kind,\n      namespace: request.path.namespace,\n      name: request.path.name,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Get an entity by an entity ref.\n   * @param kind -\n   * @param namespace -\n   * @param name -\n   */\n  public async getEntityByName(\n    // @ts-ignore\n    request: GetEntityByName,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Entity>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/entities/by-name/{kind}/{namespace}/{name}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      kind: request.path.kind,\n      namespace: request.path.namespace,\n      name: request.path.name,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Get a single entity by the UID.\n   * @param uid -\n   */\n  public async getEntityByUid(\n    // @ts-ignore\n    request: GetEntityByUid,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Entity>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/entities/by-uid/{uid}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      uid: request.path.uid,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Get all entity facets that match the given filters.\n   * @param facet -\n   * @param filter - Filter for just the entities defined by this filter.\n   */\n  public async getEntityFacets(\n    // @ts-ignore\n    request: GetEntityFacets,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<EntityFacetsResponse>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/entity-facets{?facet*,filter*}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      ...request.query,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Get a location by id.\n   * @param id -\n   */\n  public async getLocation(\n    // @ts-ignore\n    request: GetLocation,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Location>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/locations/{id}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      id: request.path.id,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Get a location for entity.\n   * @param kind -\n   * @param namespace -\n   * @param name -\n   */\n  public async getLocationByEntity(\n    // @ts-ignore\n    request: GetLocationByEntity,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Location>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/locations/by-entity/{kind}/{namespace}/{name}`;\n\n    const uri = parser.parse(uriTemplate).expand({\n      kind: request.path.kind,\n      namespace: request.path.namespace,\n      name: request.path.name,\n    });\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Get all locations\n   */\n  public async getLocations(\n    // @ts-ignore\n    request: GetLocations,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<Array<GetLocations200ResponseInner>>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/locations`;\n\n    const uri = parser.parse(uriTemplate).expand({});\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'GET',\n    });\n  }\n\n  /**\n   * Refresh the entity related to entityRef.\n   * @param refreshEntityRequest -\n   */\n  public async refreshEntity(\n    // @ts-ignore\n    request: RefreshEntity,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<void>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/refresh`;\n\n    const uri = parser.parse(uriTemplate).expand({});\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'POST',\n      body: JSON.stringify(request.body),\n    });\n  }\n\n  /**\n   * Validate that a passed in entity has no errors in schema.\n   * @param validateEntityRequest -\n   */\n  public async validateEntity(\n    // @ts-ignore\n    request: ValidateEntity,\n    options?: RequestOptions,\n  ): Promise<TypedResponse<void>> {\n    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId);\n\n    const uriTemplate = `/validate-entity`;\n\n    const uri = parser.parse(uriTemplate).expand({});\n\n    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options?.token && { Authorization: `Bearer ${options?.token}` }),\n      },\n      method: 'POST',\n      body: JSON.stringify(request.body),\n    });\n  }\n}\n"],"names":[],"mappings":"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"}