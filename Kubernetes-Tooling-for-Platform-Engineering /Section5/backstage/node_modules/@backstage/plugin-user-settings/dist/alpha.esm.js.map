{"version":3,"file":"alpha.esm.js","sources":["../src/alpha.tsx"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  coreExtensionData,\n  createExtensionInput,\n  createFrontendPlugin,\n  PageBlueprint,\n  NavItemBlueprint,\n} from '@backstage/frontend-plugin-api';\nimport {\n  convertLegacyRouteRef,\n  convertLegacyRouteRefs,\n  compatWrapper,\n} from '@backstage/core-compat-api';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { settingsRouteRef } from './plugin';\n\nimport React from 'react';\n\nexport * from './translation';\n\nconst userSettingsPage = PageBlueprint.makeWithOverrides({\n  inputs: {\n    providerSettings: createExtensionInput([coreExtensionData.reactElement], {\n      singleton: true,\n      optional: true,\n    }),\n  },\n  factory(originalFactory, { inputs }) {\n    return originalFactory({\n      defaultPath: '/settings',\n      routeRef: convertLegacyRouteRef(settingsRouteRef),\n      loader: () =>\n        import('./components/SettingsPage').then(m =>\n          compatWrapper(\n            <m.SettingsPage\n              providerSettings={inputs.providerSettings?.get(\n                coreExtensionData.reactElement,\n              )}\n            />,\n          ),\n        ),\n    });\n  },\n});\n\n/** @alpha */\nexport const settingsNavItem = NavItemBlueprint.make({\n  params: {\n    routeRef: convertLegacyRouteRef(settingsRouteRef),\n    title: 'Settings',\n    icon: SettingsIcon,\n  },\n});\n\n/**\n * @alpha\n */\nexport default createFrontendPlugin({\n  id: 'user-settings',\n  extensions: [userSettingsPage, settingsNavItem],\n  routes: convertLegacyRouteRefs({\n    root: settingsRouteRef,\n  }),\n});\n"],"names":[],"mappings":";;;;;;;AAkCA,MAAM,gBAAA,GAAmB,cAAc,iBAAkB,CAAA;AAAA,EACvD,MAAQ,EAAA;AAAA,IACN,gBAAkB,EAAA,oBAAA,CAAqB,CAAC,iBAAA,CAAkB,YAAY,CAAG,EAAA;AAAA,MACvE,SAAW,EAAA,IAAA;AAAA,MACX,QAAU,EAAA;AAAA,KACX;AAAA,GACH;AAAA,EACA,OAAQ,CAAA,eAAA,EAAiB,EAAE,MAAA,EAAU,EAAA;AACnC,IAAA,OAAO,eAAgB,CAAA;AAAA,MACrB,WAAa,EAAA,WAAA;AAAA,MACb,QAAA,EAAU,sBAAsB,gBAAgB,CAAA;AAAA,MAChD,MAAQ,EAAA,MACN,OAAO,wCAA2B,CAAE,CAAA,IAAA;AAAA,QAAK,CACvC,CAAA,KAAA,aAAA;AAAA,0BACE,KAAA,CAAA,aAAA;AAAA,YAAC,CAAE,CAAA,YAAA;AAAA,YAAF;AAAA,cACC,gBAAA,EAAkB,OAAO,gBAAkB,EAAA,GAAA;AAAA,gBACzC,iBAAkB,CAAA;AAAA;AACpB;AAAA;AACF;AACF;AACF,KACH,CAAA;AAAA;AAEL,CAAC,CAAA;AAGY,MAAA,eAAA,GAAkB,iBAAiB,IAAK,CAAA;AAAA,EACnD,MAAQ,EAAA;AAAA,IACN,QAAA,EAAU,sBAAsB,gBAAgB,CAAA;AAAA,IAChD,KAAO,EAAA,UAAA;AAAA,IACP,IAAM,EAAA;AAAA;AAEV,CAAC;AAKD,YAAe,oBAAqB,CAAA;AAAA,EAClC,EAAI,EAAA,eAAA;AAAA,EACJ,UAAA,EAAY,CAAC,gBAAA,EAAkB,eAAe,CAAA;AAAA,EAC9C,QAAQ,sBAAuB,CAAA;AAAA,IAC7B,IAAM,EAAA;AAAA,GACP;AACH,CAAC,CAAA;;;;"}