import React, { cloneElement } from 'react';
import useObservable from 'react-use/esm/useObservable';
import AutoIcon from '@material-ui/icons/BrightnessAuto';
import ToggleButton from '@material-ui/lab/ToggleButton';
import ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';
import ListItem from '@material-ui/core/ListItem';
import ListItemText from '@material-ui/core/ListItemText';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import Tooltip from '@material-ui/core/Tooltip';
import { makeStyles } from '@material-ui/core/styles';
import { useApi, appThemeApiRef } from '@backstage/core-plugin-api';
import { useTranslationRef } from '@backstage/core-plugin-api/alpha';
import { userSettingsTranslationRef } from '../../translation.esm.js';

const ThemeIcon = ({ id, activeId, icon }) => icon ? cloneElement(icon, {
  color: activeId === id ? "primary" : void 0
}) : /* @__PURE__ */ React.createElement(AutoIcon, { color: activeId === id ? "primary" : void 0 });
const useStyles = makeStyles((theme) => ({
  container: {
    display: "flex",
    flexWrap: "wrap",
    width: "100%",
    justifyContent: "space-between",
    alignItems: "center",
    paddingBottom: 8,
    paddingRight: 16
  },
  list: {
    width: "initial",
    [theme.breakpoints.down("xs")]: {
      width: "100%",
      padding: `0 0 12px`
    }
  },
  listItemText: {
    paddingRight: 0,
    paddingLeft: 0
  },
  listItemSecondaryAction: {
    position: "relative",
    transform: "unset",
    top: "auto",
    right: "auto",
    paddingLeft: 16,
    [theme.breakpoints.down("xs")]: {
      paddingLeft: 0
    }
  }
}));
const TooltipToggleButton = ({
  children,
  title,
  value,
  ...props
}) => /* @__PURE__ */ React.createElement(Tooltip, { placement: "top", arrow: true, title }, /* @__PURE__ */ React.createElement(ToggleButton, { value, ...props }, children));
const UserSettingsThemeToggle = () => {
  const classes = useStyles();
  const appThemeApi = useApi(appThemeApiRef);
  const activeThemeId = useObservable(
    appThemeApi.activeThemeId$(),
    appThemeApi.getActiveThemeId()
  );
  const themeIds = appThemeApi.getInstalledThemes();
  const { t } = useTranslationRef(userSettingsTranslationRef);
  const handleSetTheme = (_event, newThemeId) => {
    if (themeIds.some((it) => it.id === newThemeId)) {
      appThemeApi.setActiveThemeId(newThemeId);
    } else {
      appThemeApi.setActiveThemeId(void 0);
    }
  };
  return /* @__PURE__ */ React.createElement(
    ListItem,
    {
      className: classes.list,
      classes: { container: classes.container }
    },
    /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        className: classes.listItemText,
        primary: t("themeToggle.title"),
        secondary: t("themeToggle.description")
      }
    ),
    /* @__PURE__ */ React.createElement(ListItemSecondaryAction, { className: classes.listItemSecondaryAction }, /* @__PURE__ */ React.createElement(
      ToggleButtonGroup,
      {
        exclusive: true,
        size: "small",
        value: activeThemeId ?? "auto",
        onChange: handleSetTheme
      },
      themeIds.map((theme) => {
        const themeId = theme.id;
        const themeIcon = theme.icon;
        const themeTitle = theme.title || (themeId === "light" || themeId === "dark" ? t(`themeToggle.names.${themeId}`) : themeId);
        return /* @__PURE__ */ React.createElement(
          TooltipToggleButton,
          {
            key: themeId,
            title: t("themeToggle.select", { theme: themeTitle }),
            value: themeId
          },
          /* @__PURE__ */ React.createElement(React.Fragment, null, themeTitle, "\xA0", /* @__PURE__ */ React.createElement(
            ThemeIcon,
            {
              id: themeId,
              icon: themeIcon,
              activeId: activeThemeId
            }
          ))
        );
      }),
      /* @__PURE__ */ React.createElement(Tooltip, { placement: "top", arrow: true, title: t("themeToggle.selectAuto") }, /* @__PURE__ */ React.createElement(ToggleButton, { value: "auto", selected: activeThemeId === void 0 }, t("themeToggle.names.auto"), "\xA0", /* @__PURE__ */ React.createElement(
        AutoIcon,
        {
          color: activeThemeId === void 0 ? "primary" : void 0
        }
      )))
    ))
  );
};

export { UserSettingsThemeToggle };
//# sourceMappingURL=UserSettingsThemeToggle.esm.js.map
