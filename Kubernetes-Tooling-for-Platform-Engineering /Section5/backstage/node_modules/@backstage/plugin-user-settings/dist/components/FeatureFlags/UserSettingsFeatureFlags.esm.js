import React, { useState, useCallback } from 'react';
import List from '@material-ui/core/List';
import TextField from '@material-ui/core/TextField';
import IconButton from '@material-ui/core/IconButton';
import Grid from '@material-ui/core/Grid';
import Typography from '@material-ui/core/Typography';
import { EmptyFlags } from './EmptyFlags.esm.js';
import { FlagItem } from './FeatureFlagsItem.esm.js';
import { useApi, featureFlagsApiRef, FeatureFlagState } from '@backstage/core-plugin-api';
import { InfoCard } from '@backstage/core-components';
import ClearIcon from '@material-ui/icons/Clear';

const sortFlags = (flags, featureFlagsApi) => {
  const activeFlags = flags.filter((flag) => featureFlagsApi.isActive(flag.name));
  const idleFlags = flags.filter((flag) => !featureFlagsApi.isActive(flag.name));
  return [...activeFlags, ...idleFlags];
};
const UserSettingsFeatureFlags = () => {
  const featureFlagsApi = useApi(featureFlagsApiRef);
  const inputRef = React.useRef();
  const initialFeatureFlags = featureFlagsApi.getRegisteredFlags();
  const initialFeatureFlagsSorted = sortFlags(
    initialFeatureFlags,
    featureFlagsApi
  );
  const [featureFlags] = useState(initialFeatureFlagsSorted);
  const initialFlagState = Object.fromEntries(
    featureFlags.map(({ name }) => [name, featureFlagsApi.isActive(name)])
  );
  const [state, setState] = useState(initialFlagState);
  const [filterInput, setFilterInput] = useState("");
  const toggleFlag = useCallback(
    (flagName) => {
      const newState = featureFlagsApi.isActive(flagName) ? FeatureFlagState.None : FeatureFlagState.Active;
      featureFlagsApi.save({
        states: { [flagName]: newState },
        merge: true
      });
      setState((prevState) => ({
        ...prevState,
        [flagName]: newState === FeatureFlagState.Active
      }));
    },
    [featureFlagsApi]
  );
  if (!featureFlags.length) {
    return /* @__PURE__ */ React.createElement(EmptyFlags, null);
  }
  const clearFilterInput = () => {
    setFilterInput("");
    inputRef?.current?.focus();
  };
  const filteredFeatureFlags = featureFlags.filter((featureFlag) => {
    const featureFlagName = featureFlag.name.toLocaleLowerCase("en-US");
    return featureFlagName.includes(filterInput.toLocaleLowerCase("en-US"));
  });
  const Header = () => /* @__PURE__ */ React.createElement(Grid, { container: true, style: { justifyContent: "space-between" } }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 6, md: 8 }, /* @__PURE__ */ React.createElement(Typography, { variant: "h5" }, "Feature Flags"), /* @__PURE__ */ React.createElement(Typography, { variant: "subtitle1" }, "Please refresh the page when toggling feature flags")), featureFlags.length >= 10 && /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 6, md: 4 }, /* @__PURE__ */ React.createElement(
    TextField,
    {
      label: "Filter",
      style: { display: "flex", justifyContent: "flex-end" },
      inputRef: (ref) => ref && ref.focus(),
      InputProps: {
        ...filterInput.length && {
          endAdornment: /* @__PURE__ */ React.createElement(
            IconButton,
            {
              "aria-label": "Clear filter",
              onClick: clearFilterInput,
              edge: "end"
            },
            /* @__PURE__ */ React.createElement(ClearIcon, null)
          )
        }
      },
      onChange: (e) => setFilterInput(e.target.value),
      value: filterInput
    }
  )));
  return /* @__PURE__ */ React.createElement(InfoCard, { title: /* @__PURE__ */ React.createElement(Header, null) }, /* @__PURE__ */ React.createElement(List, { dense: true }, filteredFeatureFlags.map((featureFlag) => {
    const enabled = Boolean(state[featureFlag.name]);
    return /* @__PURE__ */ React.createElement(
      FlagItem,
      {
        key: featureFlag.name,
        flag: featureFlag,
        enabled,
        toggleHandler: toggleFlag
      }
    );
  })));
};

export { UserSettingsFeatureFlags, sortFlags };
//# sourceMappingURL=UserSettingsFeatureFlags.esm.js.map
