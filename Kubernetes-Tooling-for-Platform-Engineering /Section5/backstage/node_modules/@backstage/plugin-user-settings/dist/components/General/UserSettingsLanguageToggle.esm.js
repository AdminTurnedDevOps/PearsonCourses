import React, { useState } from 'react';
import { appLanguageApiRef, useTranslationRef } from '@backstage/core-plugin-api/alpha';
import ListItem from '@material-ui/core/ListItem';
import ListItemText from '@material-ui/core/ListItemText';
import ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';
import { makeStyles } from '@material-ui/core/styles';
import { userSettingsTranslationRef } from '../../translation.esm.js';
import { useApi } from '@backstage/core-plugin-api';
import useObservable from 'react-use/esm/useObservable';
import { Select } from '@backstage/core-components';

const useStyles = makeStyles((theme) => ({
  container: {
    display: "flex",
    flexWrap: "wrap",
    width: "100%",
    justifyContent: "space-between",
    alignItems: "center",
    paddingBottom: 8,
    paddingRight: 16
  },
  list: {
    width: "initial",
    [theme.breakpoints.down("xs")]: {
      width: "100%",
      padding: `0 0 12px`
    }
  },
  listItemText: {
    paddingRight: 0,
    paddingLeft: 0
  },
  listItemSecondaryAction: {
    position: "relative",
    transform: "unset",
    top: "auto",
    right: "auto",
    paddingLeft: 16,
    [theme.breakpoints.down("xs")]: {
      paddingLeft: 0
    }
  }
}));
const UserSettingsLanguageToggle = () => {
  const classes = useStyles();
  const languageApi = useApi(appLanguageApiRef);
  const { t } = useTranslationRef(userSettingsTranslationRef);
  const [languageObservable] = useState(() => languageApi.language$());
  const { language: currentLanguage } = useObservable(
    languageObservable,
    languageApi.getLanguage()
  );
  const { languages } = languageApi.getAvailableLanguages();
  if (languages.length <= 1) {
    return null;
  }
  const handleSetLanguage = (newLanguage) => {
    languageApi.setLanguage(newLanguage);
  };
  const getLanguageDisplayName = (language) => {
    try {
      const names = new Intl.DisplayNames([language], {
        type: "language"
      });
      return names.of(language) || language;
    } catch (err) {
      return language;
    }
  };
  return /* @__PURE__ */ React.createElement(
    ListItem,
    {
      className: classes.list,
      classes: { container: classes.container }
    },
    /* @__PURE__ */ React.createElement(
      ListItemText,
      {
        className: classes.listItemText,
        primary: t("languageToggle.title"),
        secondary: t("languageToggle.description")
      }
    ),
    /* @__PURE__ */ React.createElement(ListItemSecondaryAction, { className: classes.listItemSecondaryAction }, /* @__PURE__ */ React.createElement(
      Select,
      {
        label: "",
        selected: currentLanguage,
        items: languages.map((language) => ({
          label: getLanguageDisplayName(language),
          value: language
        })),
        onChange: (selectedItems) => handleSetLanguage(selectedItems)
      }
    ))
  );
};

export { UserSettingsLanguageToggle };
//# sourceMappingURL=UserSettingsLanguageToggle.esm.js.map
