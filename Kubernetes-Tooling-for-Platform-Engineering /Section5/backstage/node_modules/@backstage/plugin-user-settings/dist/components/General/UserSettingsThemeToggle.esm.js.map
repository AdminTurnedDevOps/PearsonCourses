{"version":3,"file":"UserSettingsThemeToggle.esm.js","sources":["../../../src/components/General/UserSettingsThemeToggle.tsx"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { cloneElement } from 'react';\nimport useObservable from 'react-use/esm/useObservable';\nimport AutoIcon from '@material-ui/icons/BrightnessAuto';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { appThemeApiRef, useApi } from '@backstage/core-plugin-api';\nimport { useTranslationRef } from '@backstage/core-plugin-api/alpha';\nimport { userSettingsTranslationRef } from '../../translation';\n\ntype ThemeIconProps = {\n  id: string;\n  activeId: string | undefined;\n  icon: JSX.Element | undefined;\n};\n\nconst ThemeIcon = ({ id, activeId, icon }: ThemeIconProps) =>\n  icon ? (\n    cloneElement(icon, {\n      color: activeId === id ? 'primary' : undefined,\n    })\n  ) : (\n    <AutoIcon color={activeId === id ? 'primary' : undefined} />\n  );\n\ntype TooltipToggleButtonProps = {\n  children: JSX.Element;\n  title: string;\n  value: string;\n};\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingBottom: 8,\n    paddingRight: 16,\n  },\n  list: {\n    width: 'initial',\n    [theme.breakpoints.down('xs')]: {\n      width: '100%',\n      padding: `0 0 12px`,\n    },\n  },\n  listItemText: {\n    paddingRight: 0,\n    paddingLeft: 0,\n  },\n  listItemSecondaryAction: {\n    position: 'relative',\n    transform: 'unset',\n    top: 'auto',\n    right: 'auto',\n    paddingLeft: 16,\n    [theme.breakpoints.down('xs')]: {\n      paddingLeft: 0,\n    },\n  },\n}));\n\n// ToggleButtonGroup uses React.children.map instead of context\n// so wrapping with Tooltip breaks ToggleButton functionality.\nconst TooltipToggleButton = ({\n  children,\n  title,\n  value,\n  ...props\n}: TooltipToggleButtonProps) => (\n  <Tooltip placement=\"top\" arrow title={title}>\n    <ToggleButton value={value} {...props}>\n      {children}\n    </ToggleButton>\n  </Tooltip>\n);\n\n/** @public */\nexport const UserSettingsThemeToggle = () => {\n  const classes = useStyles();\n  const appThemeApi = useApi(appThemeApiRef);\n  const activeThemeId = useObservable(\n    appThemeApi.activeThemeId$(),\n    appThemeApi.getActiveThemeId(),\n  );\n\n  const themeIds = appThemeApi.getInstalledThemes();\n\n  const { t } = useTranslationRef(userSettingsTranslationRef);\n\n  const handleSetTheme = (\n    _event: React.MouseEvent<HTMLElement>,\n    newThemeId: string | undefined,\n  ) => {\n    if (themeIds.some(it => it.id === newThemeId)) {\n      appThemeApi.setActiveThemeId(newThemeId);\n    } else {\n      appThemeApi.setActiveThemeId(undefined);\n    }\n  };\n\n  return (\n    <ListItem\n      className={classes.list}\n      classes={{ container: classes.container }}\n    >\n      <ListItemText\n        className={classes.listItemText}\n        primary={t('themeToggle.title')}\n        secondary={t('themeToggle.description')}\n      />\n      <ListItemSecondaryAction className={classes.listItemSecondaryAction}>\n        <ToggleButtonGroup\n          exclusive\n          size=\"small\"\n          value={activeThemeId ?? 'auto'}\n          onChange={handleSetTheme}\n        >\n          {themeIds.map(theme => {\n            const themeId = theme.id;\n            const themeIcon = theme.icon;\n            const themeTitle =\n              theme.title ||\n              (themeId === 'light' || themeId === 'dark'\n                ? t(`themeToggle.names.${themeId}`)\n                : themeId);\n            return (\n              <TooltipToggleButton\n                key={themeId}\n                title={t('themeToggle.select', { theme: themeTitle })}\n                value={themeId}\n              >\n                <>\n                  {themeTitle}&nbsp;\n                  <ThemeIcon\n                    id={themeId}\n                    icon={themeIcon}\n                    activeId={activeThemeId}\n                  />\n                </>\n              </TooltipToggleButton>\n            );\n          })}\n          <Tooltip placement=\"top\" arrow title={t('themeToggle.selectAuto')}>\n            <ToggleButton value=\"auto\" selected={activeThemeId === undefined}>\n              {t('themeToggle.names.auto')}&nbsp;\n              <AutoIcon\n                color={activeThemeId === undefined ? 'primary' : undefined}\n              />\n            </ToggleButton>\n          </Tooltip>\n        </ToggleButtonGroup>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n"],"names":[],"mappings":"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"}