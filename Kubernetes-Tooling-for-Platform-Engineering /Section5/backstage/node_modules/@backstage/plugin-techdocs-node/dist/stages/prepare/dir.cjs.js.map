{"version":3,"file":"dir.cjs.js","sources":["../../../src/stages/prepare/dir.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { TECHDOCS_ANNOTATION } from '@backstage/plugin-techdocs-common';\nimport { parseReferenceAnnotation, transformDirLocation } from '../../helpers';\nimport {\n  PreparerBase,\n  PreparerConfig,\n  PreparerOptions,\n  PreparerResponse,\n} from './types';\nimport { LoggerService, UrlReaderService } from '@backstage/backend-plugin-api';\n\n/**\n * Preparer used to retrieve documentation files from a local directory\n * @public\n */\nexport class DirectoryPreparer implements PreparerBase {\n  private readonly scmIntegrations: ScmIntegrationRegistry;\n  private readonly reader: UrlReaderService;\n\n  /**\n   * Returns a directory preparer instance\n   * @param config - A backstage config\n   * @param options - A directory preparer options containing a logger and reader\n   */\n  static fromConfig(\n    config: Config,\n    options: PreparerConfig,\n  ): DirectoryPreparer {\n    return new DirectoryPreparer(config, options.logger, options.reader);\n  }\n\n  private constructor(\n    config: Config,\n    _logger: LoggerService | null,\n    reader: UrlReaderService,\n  ) {\n    this.reader = reader;\n    this.scmIntegrations = ScmIntegrations.fromConfig(config);\n  }\n\n  /** {@inheritDoc PreparerBase.shouldCleanPreparedDirectory} */\n  shouldCleanPreparedDirectory() {\n    return false;\n  }\n\n  /** {@inheritDoc PreparerBase.prepare} */\n  async prepare(\n    entity: Entity,\n    options?: PreparerOptions,\n  ): Promise<PreparerResponse> {\n    const annotation = parseReferenceAnnotation(TECHDOCS_ANNOTATION, entity);\n    const { type, target } = transformDirLocation(\n      entity,\n      annotation,\n      this.scmIntegrations,\n    );\n\n    switch (type) {\n      case 'url': {\n        options?.logger?.debug(`Reading files from ${target}`);\n        // the target is an absolute url since it has already been transformed\n        const response = await this.reader.readTree(target, {\n          etag: options?.etag,\n        });\n        const preparedDir = await response.dir();\n\n        options?.logger?.debug(`Tree downloaded and stored at ${preparedDir}`);\n\n        return {\n          preparedDir,\n          etag: response.etag,\n        };\n      }\n\n      case 'dir': {\n        return {\n          // the transformation already validated that the target is in a safe location\n          preparedDir: target,\n          // Instead of supporting caching on local sources, use techdocs-cli for local development and debugging.\n          etag: '',\n        };\n      }\n\n      default:\n        throw new InputError(`Unable to resolve location type ${type}`);\n    }\n  }\n}\n"],"names":["ScmIntegrations","parseReferenceAnnotation","TECHDOCS_ANNOTATION","transformDirLocation","InputError"],"mappings":";;;;;;;AAqCO,MAAM,iBAA0C,CAAA;AAAA,EACpC,eAAA;AAAA,EACA,MAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjB,OAAO,UACL,CAAA,MAAA,EACA,OACmB,EAAA;AACnB,IAAA,OAAO,IAAI,iBAAkB,CAAA,MAAA,EAAQ,OAAQ,CAAA,MAAA,EAAQ,QAAQ,MAAM,CAAA;AAAA;AACrE,EAEQ,WAAA,CACN,MACA,EAAA,OAAA,EACA,MACA,EAAA;AACA,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AACd,IAAK,IAAA,CAAA,eAAA,GAAkBA,2BAAgB,CAAA,UAAA,CAAW,MAAM,CAAA;AAAA;AAC1D;AAAA,EAGA,4BAA+B,GAAA;AAC7B,IAAO,OAAA,KAAA;AAAA;AACT;AAAA,EAGA,MAAM,OACJ,CAAA,MAAA,EACA,OAC2B,EAAA;AAC3B,IAAM,MAAA,UAAA,GAAaC,gCAAyB,CAAAC,wCAAA,EAAqB,MAAM,CAAA;AACvE,IAAM,MAAA,EAAE,IAAM,EAAA,MAAA,EAAW,GAAAC,4BAAA;AAAA,MACvB,MAAA;AAAA,MACA,UAAA;AAAA,MACA,IAAK,CAAA;AAAA,KACP;AAEA,IAAA,QAAQ,IAAM;AAAA,MACZ,KAAK,KAAO,EAAA;AACV,QAAA,OAAA,EAAS,MAAQ,EAAA,KAAA,CAAM,CAAsB,mBAAA,EAAA,MAAM,CAAE,CAAA,CAAA;AAErD,QAAA,MAAM,QAAW,GAAA,MAAM,IAAK,CAAA,MAAA,CAAO,SAAS,MAAQ,EAAA;AAAA,UAClD,MAAM,OAAS,EAAA;AAAA,SAChB,CAAA;AACD,QAAM,MAAA,WAAA,GAAc,MAAM,QAAA,CAAS,GAAI,EAAA;AAEvC,QAAA,OAAA,EAAS,MAAQ,EAAA,KAAA,CAAM,CAAiC,8BAAA,EAAA,WAAW,CAAE,CAAA,CAAA;AAErE,QAAO,OAAA;AAAA,UACL,WAAA;AAAA,UACA,MAAM,QAAS,CAAA;AAAA,SACjB;AAAA;AACF,MAEA,KAAK,KAAO,EAAA;AACV,QAAO,OAAA;AAAA;AAAA,UAEL,WAAa,EAAA,MAAA;AAAA;AAAA,UAEb,IAAM,EAAA;AAAA,SACR;AAAA;AACF,MAEA;AACE,QAAA,MAAM,IAAIC,iBAAA,CAAW,CAAmC,gCAAA,EAAA,IAAI,CAAE,CAAA,CAAA;AAAA;AAClE;AAEJ;;;;"}