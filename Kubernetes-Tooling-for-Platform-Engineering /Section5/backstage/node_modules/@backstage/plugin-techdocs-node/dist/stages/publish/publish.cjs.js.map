{"version":3,"file":"publish.cjs.js","sources":["../../../src/stages/publish/publish.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AwsS3Publish } from './awsS3';\nimport { AzureBlobStoragePublish } from './azureBlobStorage';\nimport { GoogleGCSPublish } from './googleStorage';\nimport { LocalPublish } from './local';\nimport { OpenStackSwiftPublish } from './openStackSwift';\nimport {\n  PublisherFactory,\n  PublisherBase,\n  PublisherType,\n  PublisherBuilder,\n} from './types';\n\n/**\n * Factory class to create a TechDocs publisher based on defined publisher type in app config.\n * Uses `techdocs.publisher.type`.\n * @public\n */\nexport class Publisher implements PublisherBuilder {\n  private publishers: Map<PublisherType | 'techdocs', PublisherBase> =\n    new Map();\n\n  register(type: PublisherType | 'techdocs', publisher: PublisherBase): void {\n    this.publishers.set(type, publisher);\n  }\n\n  get(config: Config): PublisherBase {\n    const publisherType = (config.getOptionalString(\n      'techdocs.publisher.type',\n    ) ?? 'local') as PublisherType;\n\n    if (!publisherType) {\n      throw new Error('TechDocs publisher type not specified for the entity');\n    }\n\n    const publisher = this.publishers.get(publisherType);\n    if (!publisher) {\n      throw new Error(\n        `TechDocs publisher '${publisherType}' is not registered`,\n      );\n    }\n\n    return publisher;\n  }\n\n  /**\n   * Returns a instance of TechDocs publisher\n   * @param config - A Backstage configuration\n   * @param options - Options for configuring the publisher factory\n   */\n  static async fromConfig(\n    config: Config,\n    options: PublisherFactory,\n  ): Promise<PublisherBase> {\n    const { logger, discovery, customPublisher } = options;\n\n    const publishers = new Publisher();\n\n    if (customPublisher) {\n      publishers.register('techdocs', customPublisher);\n      return customPublisher;\n    }\n\n    const publisherType = (config.getOptionalString(\n      'techdocs.publisher.type',\n    ) ?? 'local') as PublisherType;\n\n    switch (publisherType) {\n      case 'googleGcs':\n        logger.info('Creating Google Storage Bucket publisher for TechDocs');\n        publishers.register(\n          publisherType,\n          GoogleGCSPublish.fromConfig(\n            config,\n            logger,\n            options.publisherSettings?.googleGcs,\n          ),\n        );\n        break;\n      case 'awsS3':\n        logger.info('Creating AWS S3 Bucket publisher for TechDocs');\n        publishers.register(\n          publisherType,\n          await AwsS3Publish.fromConfig(config, logger),\n        );\n        break;\n      case 'azureBlobStorage':\n        logger.info(\n          'Creating Azure Blob Storage Container publisher for TechDocs',\n        );\n        publishers.register(\n          publisherType,\n          AzureBlobStoragePublish.fromConfig(config, logger),\n        );\n        break;\n      case 'openStackSwift':\n        logger.info(\n          'Creating OpenStack Swift Container publisher for TechDocs',\n        );\n        publishers.register(\n          publisherType,\n          OpenStackSwiftPublish.fromConfig(config, logger),\n        );\n        break;\n      case 'local':\n        logger.info('Creating Local publisher for TechDocs');\n        publishers.register(\n          publisherType,\n          LocalPublish.fromConfig(config, logger, discovery),\n        );\n        break;\n      default:\n        logger.info('Creating Local publisher for TechDocs');\n        publishers.register(\n          publisherType,\n          LocalPublish.fromConfig(config, logger, discovery),\n        );\n    }\n\n    return publishers.get(config);\n  }\n}\n"],"names":["GoogleGCSPublish","AwsS3Publish","AzureBlobStoragePublish","OpenStackSwiftPublish","LocalPublish"],"mappings":"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"}