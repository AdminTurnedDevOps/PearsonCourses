{"version":3,"file":"local.cjs.js","sources":["../../../src/stages/publish/local.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DiscoveryService,\n  LoggerService,\n  resolvePackagePath,\n  resolveSafeChildPath,\n} from '@backstage/backend-plugin-api';\nimport {\n  Entity,\n  CompoundEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport createLimiter from 'p-limit';\nimport path from 'path';\nimport {\n  PublisherBase,\n  PublishRequest,\n  PublishResponse,\n  ReadinessResponse,\n  TechDocsMetadata,\n} from './types';\nimport {\n  getFileTreeRecursively,\n  getHeadersForFileExtension,\n  lowerCaseEntityTripletInStoragePath,\n} from './helpers';\nimport { ForwardedError } from '@backstage/errors';\n\n/**\n * Local publisher which uses the local filesystem to store the generated static files. It uses by default a\n * directory called \"static\" at the root of techdocs-backend plugin unless a directory has been configured by\n * \"techdocs.publisher.local.publishDirectory\".\n */\nexport class LocalPublish implements PublisherBase {\n  private readonly legacyPathCasing: boolean;\n  private readonly logger: LoggerService;\n  private readonly discovery: DiscoveryService;\n  private readonly staticDocsDir: string;\n\n  constructor(options: {\n    logger: LoggerService;\n    discovery: DiscoveryService;\n    legacyPathCasing: boolean;\n    staticDocsDir: string;\n  }) {\n    this.logger = options.logger;\n    this.discovery = options.discovery;\n    this.legacyPathCasing = options.legacyPathCasing;\n    this.staticDocsDir = options.staticDocsDir;\n  }\n\n  static fromConfig(\n    config: Config,\n    logger: LoggerService,\n    discovery: DiscoveryService,\n  ): PublisherBase {\n    const legacyPathCasing =\n      config.getOptionalBoolean(\n        'techdocs.legacyUseCaseSensitiveTripletPaths',\n      ) || false;\n\n    let staticDocsDir = config.getOptionalString(\n      'techdocs.publisher.local.publishDirectory',\n    );\n    if (!staticDocsDir) {\n      try {\n        staticDocsDir = resolvePackagePath(\n          '@backstage/plugin-techdocs-backend',\n          'static/docs',\n        );\n      } catch (err) {\n        // This will most probably never be used.\n        // The try/catch is introduced so that techdocs-cli can import @backstage/plugin-techdocs-node\n        // on CI/CD without installing techdocs backend plugin.\n        staticDocsDir = os.tmpdir();\n      }\n    }\n\n    return new LocalPublish({\n      logger,\n      discovery,\n      legacyPathCasing,\n      staticDocsDir,\n    });\n  }\n\n  async getReadiness(): Promise<ReadinessResponse> {\n    return {\n      isAvailable: true,\n    };\n  }\n\n  async publish({\n    entity,\n    directory,\n  }: PublishRequest): Promise<PublishResponse> {\n    const entityNamespace = entity.metadata.namespace ?? 'default';\n    let publishDir: string;\n\n    try {\n      publishDir = this.staticEntityPathJoin(\n        entityNamespace,\n        entity.kind,\n        entity.metadata.name,\n      );\n    } catch (error) {\n      throw new ForwardedError(\n        `Unable to publish TechDocs site for entity: ${stringifyEntityRef(\n          entity,\n        )}`,\n        error,\n      );\n    }\n\n    if (!fs.existsSync(publishDir)) {\n      this.logger.info(`Could not find ${publishDir}, creating the directory.`);\n      fs.mkdirSync(publishDir, { recursive: true });\n    }\n\n    try {\n      await fs.copy(directory, publishDir);\n      this.logger.info(`Published site stored at ${publishDir}`);\n    } catch (error) {\n      this.logger.debug(\n        `Failed to copy docs from ${directory} to ${publishDir}`,\n      );\n      throw error;\n    }\n\n    // Generate publish response.\n    const techdocsApiUrl = await this.discovery.getBaseUrl('techdocs');\n    const publishedFilePaths = (await getFileTreeRecursively(publishDir)).map(\n      abs => {\n        return abs.split(`${this.staticDocsDir}/`)[1];\n      },\n    );\n\n    return {\n      remoteUrl: `${techdocsApiUrl}/static/docs/${encodeURIComponent(\n        entity.metadata.name,\n      )}`,\n      objects: publishedFilePaths,\n    };\n  }\n\n  async fetchTechDocsMetadata(\n    entityName: CompoundEntityRef,\n  ): Promise<TechDocsMetadata> {\n    let metadataPath: string;\n\n    try {\n      metadataPath = this.staticEntityPathJoin(\n        entityName.namespace,\n        entityName.kind,\n        entityName.name,\n        'techdocs_metadata.json',\n      );\n    } catch (err) {\n      throw new ForwardedError(\n        `Unexpected entity when fetching metadata: ${stringifyEntityRef(\n          entityName,\n        )}`,\n        err,\n      );\n    }\n\n    try {\n      return await fs.readJson(metadataPath);\n    } catch (err) {\n      throw new ForwardedError(\n        `Unable to read techdocs_metadata.json at ${metadataPath}. Error: ${err}`,\n        err,\n      );\n    }\n  }\n\n  docsRouter(): express.Handler {\n    const router = express.Router();\n\n    // Redirect middleware ensuring that requests to case-sensitive entity\n    // triplet paths are always sent to lower-case versions.\n    router.use((req, res, next) => {\n      // If legacy path casing is on, let the request immediately continue.\n      if (this.legacyPathCasing) {\n        return next();\n      }\n\n      // Generate a lower-case entity triplet path.\n      const [_, namespace, kind, name, ...rest] = req.path.split('/');\n\n      // Ignore non-triplet objects.\n      if (!namespace || !kind || !name) {\n        return next();\n      }\n\n      const newPath = [\n        _,\n        namespace.toLowerCase(),\n        kind.toLowerCase(),\n        name.toLowerCase(),\n        ...rest,\n      ].join('/');\n\n      // If there was no change, then let express.static() handle the request.\n      if (newPath === req.path) {\n        return next();\n      }\n\n      // Otherwise, redirect to the new path.\n      return res.redirect(301, req.baseUrl + newPath);\n    });\n    router.use(\n      express.static(this.staticDocsDir, {\n        // Handle content-type header the same as all other publishers.\n        setHeaders: (res, filePath) => {\n          const fileExtension = path.extname(filePath);\n          const headers = getHeadersForFileExtension(fileExtension);\n          for (const [header, value] of Object.entries(headers)) {\n            res.setHeader(header, value);\n          }\n        },\n      }),\n    );\n\n    return router;\n  }\n\n  async hasDocsBeenGenerated(entity: Entity): Promise<boolean> {\n    const namespace = entity.metadata.namespace ?? 'default';\n\n    // Check if the file exists\n    try {\n      const indexHtmlPath = this.staticEntityPathJoin(\n        namespace,\n        entity.kind,\n        entity.metadata.name,\n        'index.html',\n      );\n\n      await fs.access(indexHtmlPath, fs.constants.F_OK);\n\n      return true;\n    } catch (err) {\n      if (err.name === 'NotAllowedError') {\n        this.logger.error(\n          `Unexpected entity when checking if generated: ${stringifyEntityRef(\n            entity,\n          )}`,\n        );\n      }\n      return false;\n    }\n  }\n\n  /**\n   * This code will never run in practice. It is merely here to illustrate how\n   * to implement this method for other storage providers.\n   */\n  async migrateDocsCase({\n    removeOriginal = false,\n    concurrency = 25,\n  }): Promise<void> {\n    // Iterate through every file in the root of the publisher.\n    const files = await getFileTreeRecursively(this.staticDocsDir);\n    const limit = createLimiter(concurrency);\n\n    await Promise.all(\n      files.map(f =>\n        limit(async file => {\n          const relativeFile = file.replace(\n            `${this.staticDocsDir}${path.sep}`,\n            '',\n          );\n          const newFile = lowerCaseEntityTripletInStoragePath(relativeFile);\n\n          // If all parts are already lowercase, ignore.\n          if (relativeFile === newFile) {\n            return;\n          }\n\n          // Otherwise, copy or move the file.\n          await new Promise<void>(resolve => {\n            const migrate = removeOriginal ? fs.move : fs.copyFile;\n            this.logger.debug(`Migrating ${relativeFile}`);\n            migrate(file, newFile, err => {\n              if (err) {\n                this.logger.warn(\n                  `Unable to migrate ${relativeFile}: ${err.message}`,\n                );\n              }\n              resolve();\n            });\n          });\n        }, f),\n      ),\n    );\n  }\n\n  /**\n   * Utility wrapper around path.join(), used to control legacy case logic.\n   */\n  protected staticEntityPathJoin(...allParts: string[]): string {\n    let staticEntityPath = this.staticDocsDir;\n\n    allParts\n      .map(part => part.split(path.sep))\n      .flat()\n      .forEach((part, index) => {\n        // Respect legacy path casing when operating on namespace, kind, or name.\n        if (index < 3) {\n          staticEntityPath = resolveSafeChildPath(\n            staticEntityPath,\n            this.legacyPathCasing ? part : part.toLowerCase(),\n          );\n          return;\n        }\n\n        // Otherwise, respect the provided case.\n        staticEntityPath = resolveSafeChildPath(staticEntityPath, part);\n      });\n\n    return staticEntityPath;\n  }\n}\n"],"names":["resolvePackagePath","os","ForwardedError","stringifyEntityRef","fs","getFileTreeRecursively","express","path","getHeadersForFileExtension","createLimiter","lowerCaseEntityTripletInStoragePath","resolveSafeChildPath"],"mappings":"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"}