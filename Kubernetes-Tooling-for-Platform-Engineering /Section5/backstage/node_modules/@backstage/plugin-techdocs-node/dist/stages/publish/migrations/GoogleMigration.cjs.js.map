{"version":3,"file":"GoogleMigration.cjs.js","sources":["../../../../src/stages/publish/migrations/GoogleMigration.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertError } from '@backstage/errors';\nimport { File } from '@google-cloud/storage';\nimport { Writable } from 'stream';\nimport { lowerCaseEntityTripletInStoragePath } from '../helpers';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n/**\n * Writable stream to handle object copy/move operations. This implementation\n * ensures we don't read in files from GCS faster than GCS can copy/move them.\n */\nexport class MigrateWriteStream extends Writable {\n  protected logger: LoggerService;\n  protected removeOriginal: boolean;\n  protected maxConcurrency: number;\n  protected inFlight = 0;\n\n  constructor(\n    logger: LoggerService,\n    removeOriginal: boolean,\n    concurrency: number,\n  ) {\n    super({ objectMode: true });\n    this.logger = logger;\n    this.removeOriginal = removeOriginal;\n    this.maxConcurrency = concurrency;\n  }\n\n  _write(file: File, _encoding: BufferEncoding, next: Function) {\n    let shouldCallNext = true;\n    let newFile;\n    try {\n      newFile = lowerCaseEntityTripletInStoragePath(file.name);\n    } catch (e) {\n      assertError(e);\n      this.logger.warn(e.message);\n      next();\n      return;\n    }\n\n    // If all parts are already lowercase, ignore.\n    if (newFile === file.name) {\n      next();\n      return;\n    }\n\n    // Allow up to n-many files to be migrated at a time.\n    this.inFlight++;\n    if (this.inFlight < this.maxConcurrency) {\n      next();\n      shouldCallNext = false;\n    }\n\n    // Otherwise, copy or move the file.\n    const migrate = this.removeOriginal\n      ? file.move.bind(file)\n      : file.copy.bind(file);\n    this.logger.debug(`Migrating ${file.name}`);\n    migrate(newFile)\n      .catch(e =>\n        this.logger.warn(`Unable to migrate ${file.name}: ${e.message}`),\n      )\n      .finally(() => {\n        this.inFlight--;\n        if (shouldCallNext) {\n          next();\n        }\n      });\n  }\n}\n"],"names":["Writable","lowerCaseEntityTripletInStoragePath","assertError"],"mappings":";;;;;;AA0BO,MAAM,2BAA2BA,eAAS,CAAA;AAAA,EACrC,MAAA;AAAA,EACA,cAAA;AAAA,EACA,cAAA;AAAA,EACA,QAAW,GAAA,CAAA;AAAA,EAErB,WAAA,CACE,MACA,EAAA,cAAA,EACA,WACA,EAAA;AACA,IAAM,KAAA,CAAA,EAAE,UAAY,EAAA,IAAA,EAAM,CAAA;AAC1B,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AACd,IAAA,IAAA,CAAK,cAAiB,GAAA,cAAA;AACtB,IAAA,IAAA,CAAK,cAAiB,GAAA,WAAA;AAAA;AACxB,EAEA,MAAA,CAAO,IAAY,EAAA,SAAA,EAA2B,IAAgB,EAAA;AAC5D,IAAA,IAAI,cAAiB,GAAA,IAAA;AACrB,IAAI,IAAA,OAAA;AACJ,IAAI,IAAA;AACF,MAAU,OAAA,GAAAC,2CAAA,CAAoC,KAAK,IAAI,CAAA;AAAA,aAChD,CAAG,EAAA;AACV,MAAAC,kBAAA,CAAY,CAAC,CAAA;AACb,MAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,CAAA,CAAE,OAAO,CAAA;AAC1B,MAAK,IAAA,EAAA;AACL,MAAA;AAAA;AAIF,IAAI,IAAA,OAAA,KAAY,KAAK,IAAM,EAAA;AACzB,MAAK,IAAA,EAAA;AACL,MAAA;AAAA;AAIF,IAAK,IAAA,CAAA,QAAA,EAAA;AACL,IAAI,IAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,cAAgB,EAAA;AACvC,MAAK,IAAA,EAAA;AACL,MAAiB,cAAA,GAAA,KAAA;AAAA;AAInB,IAAM,MAAA,OAAA,GAAU,IAAK,CAAA,cAAA,GACjB,IAAK,CAAA,IAAA,CAAK,IAAK,CAAA,IAAI,CACnB,GAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,IAAI,CAAA;AACvB,IAAA,IAAA,CAAK,MAAO,CAAA,KAAA,CAAM,CAAa,UAAA,EAAA,IAAA,CAAK,IAAI,CAAE,CAAA,CAAA;AAC1C,IAAA,OAAA,CAAQ,OAAO,CACZ,CAAA,KAAA;AAAA,MAAM,CAAA,CAAA,KACL,IAAK,CAAA,MAAA,CAAO,IAAK,CAAA,CAAA,kBAAA,EAAqB,KAAK,IAAI,CAAA,EAAA,EAAK,CAAE,CAAA,OAAO,CAAE,CAAA;AAAA,KACjE,CACC,QAAQ,MAAM;AACb,MAAK,IAAA,CAAA,QAAA,EAAA;AACL,MAAA,IAAI,cAAgB,EAAA;AAClB,QAAK,IAAA,EAAA;AAAA;AACP,KACD,CAAA;AAAA;AAEP;;;;"}