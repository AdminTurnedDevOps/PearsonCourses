{"version":3,"file":"DefaultCatalogCollatorFactory.cjs.js","sources":["../../src/collators/DefaultCatalogCollatorFactory.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TokenManager,\n  createLegacyAuthAdapters,\n} from '@backstage/backend-common';\nimport {\n  CatalogApi,\n  CatalogClient,\n  GetEntitiesRequest,\n} from '@backstage/catalog-client';\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { CatalogEntityDocument } from '@backstage/plugin-catalog-common';\nimport { catalogEntityReadPermission } from '@backstage/plugin-catalog-common/alpha';\nimport { Permission } from '@backstage/plugin-permission-common';\nimport { DocumentCollatorFactory } from '@backstage/plugin-search-common';\nimport { Readable } from 'stream';\nimport { CatalogCollatorEntityTransformer } from './CatalogCollatorEntityTransformer';\nimport { readCollatorConfigOptions } from './config';\nimport { defaultCatalogCollatorEntityTransformer } from './defaultCatalogCollatorEntityTransformer';\nimport { AuthService, DiscoveryService } from '@backstage/backend-plugin-api';\n\n/**\n * @public\n * @deprecated This type is deprecated along with the {@link DefaultCatalogCollatorFactory}.\n */\nexport type DefaultCatalogCollatorFactoryOptions = {\n  auth?: AuthService;\n  discovery: DiscoveryService;\n  tokenManager?: TokenManager;\n  /**\n   * @deprecated Use the config key `search.collators.catalog.locationTemplate` instead.\n   */\n  locationTemplate?: string;\n  /**\n   * @deprecated Use the config key `search.collators.catalog.filter` instead.\n   */\n  filter?: GetEntitiesRequest['filter'];\n  /**\n   * @deprecated Use the config key `search.collators.catalog.batchSize` instead.\n   */\n  batchSize?: number;\n  catalogClient?: CatalogApi;\n  /**\n   * Allows you to customize how entities are shaped into documents.\n   */\n  entityTransformer?: CatalogCollatorEntityTransformer;\n};\n\n/**\n * Collates entities from the Catalog into documents for the search backend.\n *\n * @public\n * @deprecated Migrate to the {@link https://backstage.io/docs/backend-system/building-backends/migrating | new backend system} and install this collator via module instead (see {@link https://github.com/backstage/backstage/blob/nbs10/search-deprecate-create-router/plugins/search-backend-module-catalog/README.md#installation | here} for more installation details).\n */\nexport class DefaultCatalogCollatorFactory implements DocumentCollatorFactory {\n  public readonly type = 'software-catalog';\n  public readonly visibilityPermission: Permission =\n    catalogEntityReadPermission;\n\n  private locationTemplate: string;\n  private filter?: GetEntitiesRequest['filter'];\n  private batchSize: number;\n  private readonly catalogClient: CatalogApi;\n  private entityTransformer: CatalogCollatorEntityTransformer;\n  private auth: AuthService;\n\n  static fromConfig(\n    configRoot: Config,\n    options: DefaultCatalogCollatorFactoryOptions,\n  ) {\n    const configOptions = readCollatorConfigOptions(configRoot);\n    const { auth: adaptedAuth } = createLegacyAuthAdapters({\n      auth: options.auth,\n      discovery: options.discovery,\n      tokenManager: options.tokenManager,\n    });\n    return new DefaultCatalogCollatorFactory({\n      locationTemplate:\n        options.locationTemplate ?? configOptions.locationTemplate,\n      filter: options.filter ?? configOptions.filter,\n      batchSize: options.batchSize ?? configOptions.batchSize,\n      entityTransformer: options.entityTransformer,\n      auth: adaptedAuth,\n      discovery: options.discovery,\n      catalogClient: options.catalogClient,\n    });\n  }\n\n  private constructor(options: {\n    locationTemplate: string;\n    filter: GetEntitiesRequest['filter'];\n    batchSize: number;\n    entityTransformer?: CatalogCollatorEntityTransformer;\n    auth: AuthService;\n    discovery: DiscoveryService;\n    catalogClient?: CatalogApi;\n  }) {\n    const {\n      auth,\n      batchSize,\n      discovery,\n      locationTemplate,\n      filter,\n      catalogClient,\n      entityTransformer,\n    } = options;\n\n    this.locationTemplate = locationTemplate;\n    this.filter = filter;\n    this.batchSize = batchSize;\n    this.catalogClient =\n      catalogClient || new CatalogClient({ discoveryApi: discovery });\n    this.entityTransformer =\n      entityTransformer ?? defaultCatalogCollatorEntityTransformer;\n    this.auth = auth;\n  }\n\n  async getCollator(): Promise<Readable> {\n    return Readable.from(this.execute());\n  }\n\n  private async *execute(): AsyncGenerator<CatalogEntityDocument> {\n    let entitiesRetrieved = 0;\n    let moreEntitiesToGet = true;\n\n    // Offset/limit pagination is used on the Catalog Client in order to\n    // limit (and allow some control over) memory used by the search backend\n    // at index-time.\n    while (moreEntitiesToGet) {\n      const { token } = await this.auth.getPluginRequestToken({\n        onBehalfOf: await this.auth.getOwnServiceCredentials(),\n        targetPluginId: 'catalog',\n      });\n      const entities = (\n        await this.catalogClient.getEntities(\n          {\n            filter: this.filter,\n            limit: this.batchSize,\n            offset: entitiesRetrieved,\n          },\n          { token },\n        )\n      ).items;\n\n      // Control looping through entity batches.\n      moreEntitiesToGet = entities.length === this.batchSize;\n      entitiesRetrieved += entities.length;\n\n      for (const entity of entities) {\n        yield {\n          ...this.entityTransformer(entity),\n          authorization: {\n            resourceRef: stringifyEntityRef(entity),\n          },\n          location: this.applyArgsToFormat(this.locationTemplate, {\n            namespace: entity.metadata.namespace || 'default',\n            kind: entity.kind,\n            name: entity.metadata.name,\n          }),\n        };\n      }\n    }\n  }\n\n  private applyArgsToFormat(\n    format: string,\n    args: Record<string, string>,\n  ): string {\n    let formatted = format;\n\n    for (const [key, value] of Object.entries(args)) {\n      formatted = formatted.replace(`:${key}`, value);\n    }\n\n    return formatted.toLowerCase();\n  }\n}\n"],"names":["catalogEntityReadPermission","readCollatorConfigOptions","createLegacyAuthAdapters","catalogClient","CatalogClient","defaultCatalogCollatorEntityTransformer","Readable","stringifyEntityRef"],"mappings":";;;;;;;;;;AAsEO,MAAM,6BAAiE,CAAA;AAAA,EAC5D,IAAO,GAAA,kBAAA;AAAA,EACP,oBACd,GAAAA,iCAAA;AAAA,EAEM,gBAAA;AAAA,EACA,MAAA;AAAA,EACA,SAAA;AAAA,EACS,aAAA;AAAA,EACT,iBAAA;AAAA,EACA,IAAA;AAAA,EAER,OAAO,UACL,CAAA,UAAA,EACA,OACA,EAAA;AACA,IAAM,MAAA,aAAA,GAAgBC,iCAA0B,UAAU,CAAA;AAC1D,IAAA,MAAM,EAAE,IAAA,EAAM,WAAY,EAAA,GAAIC,sCAAyB,CAAA;AAAA,MACrD,MAAM,OAAQ,CAAA,IAAA;AAAA,MACd,WAAW,OAAQ,CAAA,SAAA;AAAA,MACnB,cAAc,OAAQ,CAAA;AAAA,KACvB,CAAA;AACD,IAAA,OAAO,IAAI,6BAA8B,CAAA;AAAA,MACvC,gBAAA,EACE,OAAQ,CAAA,gBAAA,IAAoB,aAAc,CAAA,gBAAA;AAAA,MAC5C,MAAA,EAAQ,OAAQ,CAAA,MAAA,IAAU,aAAc,CAAA,MAAA;AAAA,MACxC,SAAA,EAAW,OAAQ,CAAA,SAAA,IAAa,aAAc,CAAA,SAAA;AAAA,MAC9C,mBAAmB,OAAQ,CAAA,iBAAA;AAAA,MAC3B,IAAM,EAAA,WAAA;AAAA,MACN,WAAW,OAAQ,CAAA,SAAA;AAAA,MACnB,eAAe,OAAQ,CAAA;AAAA,KACxB,CAAA;AAAA;AACH,EAEQ,YAAY,OAQjB,EAAA;AACD,IAAM,MAAA;AAAA,MACJ,IAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,gBAAA;AAAA,MACA,MAAA;AAAA,qBACAC,eAAA;AAAA,MACA;AAAA,KACE,GAAA,OAAA;AAEJ,IAAA,IAAA,CAAK,gBAAmB,GAAA,gBAAA;AACxB,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AACd,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA;AACjB,IAAA,IAAA,CAAK,gBACHA,eAAiB,IAAA,IAAIC,4BAAc,EAAE,YAAA,EAAc,WAAW,CAAA;AAChE,IAAA,IAAA,CAAK,oBACH,iBAAqB,IAAAC,+EAAA;AACvB,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA;AAAA;AACd,EAEA,MAAM,WAAiC,GAAA;AACrC,IAAA,OAAOC,eAAS,CAAA,IAAA,CAAK,IAAK,CAAA,OAAA,EAAS,CAAA;AAAA;AACrC,EAEA,OAAe,OAAiD,GAAA;AAC9D,IAAA,IAAI,iBAAoB,GAAA,CAAA;AACxB,IAAA,IAAI,iBAAoB,GAAA,IAAA;AAKxB,IAAA,OAAO,iBAAmB,EAAA;AACxB,MAAA,MAAM,EAAE,KAAM,EAAA,GAAI,MAAM,IAAA,CAAK,KAAK,qBAAsB,CAAA;AAAA,QACtD,UAAY,EAAA,MAAM,IAAK,CAAA,IAAA,CAAK,wBAAyB,EAAA;AAAA,QACrD,cAAgB,EAAA;AAAA,OACjB,CAAA;AACD,MAAM,MAAA,QAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,WAAA;AAAA,QACvB;AAAA,UACE,QAAQ,IAAK,CAAA,MAAA;AAAA,UACb,OAAO,IAAK,CAAA,SAAA;AAAA,UACZ,MAAQ,EAAA;AAAA,SACV;AAAA,QACA,EAAE,KAAM;AAAA,OAEV,EAAA,KAAA;AAGF,MAAoB,iBAAA,GAAA,QAAA,CAAS,WAAW,IAAK,CAAA,SAAA;AAC7C,MAAA,iBAAA,IAAqB,QAAS,CAAA,MAAA;AAE9B,MAAA,KAAA,MAAW,UAAU,QAAU,EAAA;AAC7B,QAAM,MAAA;AAAA,UACJ,GAAG,IAAK,CAAA,iBAAA,CAAkB,MAAM,CAAA;AAAA,UAChC,aAAe,EAAA;AAAA,YACb,WAAA,EAAaC,gCAAmB,MAAM;AAAA,WACxC;AAAA,UACA,QAAU,EAAA,IAAA,CAAK,iBAAkB,CAAA,IAAA,CAAK,gBAAkB,EAAA;AAAA,YACtD,SAAA,EAAW,MAAO,CAAA,QAAA,CAAS,SAAa,IAAA,SAAA;AAAA,YACxC,MAAM,MAAO,CAAA,IAAA;AAAA,YACb,IAAA,EAAM,OAAO,QAAS,CAAA;AAAA,WACvB;AAAA,SACH;AAAA;AACF;AACF;AACF,EAEQ,iBAAA,CACN,QACA,IACQ,EAAA;AACR,IAAA,IAAI,SAAY,GAAA,MAAA;AAEhB,IAAA,KAAA,MAAW,CAAC,GAAK,EAAA,KAAK,KAAK,MAAO,CAAA,OAAA,CAAQ,IAAI,CAAG,EAAA;AAC/C,MAAA,SAAA,GAAY,SAAU,CAAA,OAAA,CAAQ,CAAI,CAAA,EAAA,GAAG,IAAI,KAAK,CAAA;AAAA;AAGhD,IAAA,OAAO,UAAU,WAAY,EAAA;AAAA;AAEjC;;;;"}