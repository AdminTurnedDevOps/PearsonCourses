'use strict';

var backendCommon = require('@backstage/backend-common');
var catalogClient = require('@backstage/catalog-client');
var catalogModel = require('@backstage/catalog-model');
var alpha = require('@backstage/plugin-catalog-common/alpha');
var stream = require('stream');
var config = require('./config.cjs.js');
var defaultCatalogCollatorEntityTransformer = require('./defaultCatalogCollatorEntityTransformer.cjs.js');

class DefaultCatalogCollatorFactory {
  type = "software-catalog";
  visibilityPermission = alpha.catalogEntityReadPermission;
  locationTemplate;
  filter;
  batchSize;
  catalogClient;
  entityTransformer;
  auth;
  static fromConfig(configRoot, options) {
    const configOptions = config.readCollatorConfigOptions(configRoot);
    const { auth: adaptedAuth } = backendCommon.createLegacyAuthAdapters({
      auth: options.auth,
      discovery: options.discovery,
      tokenManager: options.tokenManager
    });
    return new DefaultCatalogCollatorFactory({
      locationTemplate: options.locationTemplate ?? configOptions.locationTemplate,
      filter: options.filter ?? configOptions.filter,
      batchSize: options.batchSize ?? configOptions.batchSize,
      entityTransformer: options.entityTransformer,
      auth: adaptedAuth,
      discovery: options.discovery,
      catalogClient: options.catalogClient
    });
  }
  constructor(options) {
    const {
      auth,
      batchSize,
      discovery,
      locationTemplate,
      filter,
      catalogClient: catalogClient$1,
      entityTransformer
    } = options;
    this.locationTemplate = locationTemplate;
    this.filter = filter;
    this.batchSize = batchSize;
    this.catalogClient = catalogClient$1 || new catalogClient.CatalogClient({ discoveryApi: discovery });
    this.entityTransformer = entityTransformer ?? defaultCatalogCollatorEntityTransformer.defaultCatalogCollatorEntityTransformer;
    this.auth = auth;
  }
  async getCollator() {
    return stream.Readable.from(this.execute());
  }
  async *execute() {
    let entitiesRetrieved = 0;
    let moreEntitiesToGet = true;
    while (moreEntitiesToGet) {
      const { token } = await this.auth.getPluginRequestToken({
        onBehalfOf: await this.auth.getOwnServiceCredentials(),
        targetPluginId: "catalog"
      });
      const entities = (await this.catalogClient.getEntities(
        {
          filter: this.filter,
          limit: this.batchSize,
          offset: entitiesRetrieved
        },
        { token }
      )).items;
      moreEntitiesToGet = entities.length === this.batchSize;
      entitiesRetrieved += entities.length;
      for (const entity of entities) {
        yield {
          ...this.entityTransformer(entity),
          authorization: {
            resourceRef: catalogModel.stringifyEntityRef(entity)
          },
          location: this.applyArgsToFormat(this.locationTemplate, {
            namespace: entity.metadata.namespace || "default",
            kind: entity.kind,
            name: entity.metadata.name
          })
        };
      }
    }
  }
  applyArgsToFormat(format, args) {
    let formatted = format;
    for (const [key, value] of Object.entries(args)) {
      formatted = formatted.replace(`:${key}`, value);
    }
    return formatted.toLowerCase();
  }
}

exports.DefaultCatalogCollatorFactory = DefaultCatalogCollatorFactory;
//# sourceMappingURL=DefaultCatalogCollatorFactory.cjs.js.map
