'use strict';

var passportOauth2 = require('passport-oauth2');
var pluginAuthNode = require('@backstage/plugin-auth-node');

const oauth2Authenticator = pluginAuthNode.createOAuthAuthenticator({
  defaultProfileTransform: pluginAuthNode.PassportOAuthAuthenticatorHelper.defaultProfileTransform,
  initialize({ callbackUrl, config }) {
    const clientId = config.getString("clientId");
    const clientSecret = config.getString("clientSecret");
    const authorizationUrl = config.getString("authorizationUrl");
    const tokenUrl = config.getString("tokenUrl");
    const includeBasicAuth = config.getOptionalBoolean("includeBasicAuth");
    if (config.has("scope")) {
      throw new Error(
        'The oauth2 provider no longer supports the "scope" configuration option. Please use the "additionalScopes" option instead.'
      );
    }
    return pluginAuthNode.PassportOAuthAuthenticatorHelper.from(
      new passportOauth2.Strategy(
        {
          clientID: clientId,
          clientSecret,
          callbackURL: callbackUrl,
          authorizationURL: authorizationUrl,
          tokenURL: tokenUrl,
          passReqToCallback: false,
          customHeaders: includeBasicAuth ? {
            Authorization: `Basic ${encodeClientCredentials(
              clientId,
              clientSecret
            )}`
          } : void 0
        },
        (accessToken, refreshToken, params, fullProfile, done) => {
          done(
            void 0,
            { fullProfile, params, accessToken },
            { refreshToken }
          );
        }
      )
    );
  },
  async start(input, helper) {
    return helper.start(input, {
      accessType: "offline",
      prompt: "consent"
    });
  },
  async authenticate(input, helper) {
    return helper.authenticate(input);
  },
  async refresh(input, helper) {
    return helper.refresh(input);
  }
});
function encodeClientCredentials(clientID, clientSecret) {
  return Buffer.from(`${clientID}:${clientSecret}`).toString("base64");
}

exports.oauth2Authenticator = oauth2Authenticator;
//# sourceMappingURL=authenticator.cjs.js.map
