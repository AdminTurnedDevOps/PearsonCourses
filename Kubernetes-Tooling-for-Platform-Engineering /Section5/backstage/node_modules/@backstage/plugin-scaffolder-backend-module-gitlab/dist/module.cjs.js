'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var integration = require('@backstage/integration');
var alpha = require('@backstage/plugin-scaffolder-node/alpha');
var gitlab = require('./actions/gitlab.cjs.js');
var gitlabGroupEnsureExists = require('./actions/gitlabGroupEnsureExists.cjs.js');
var gitlabIssueCreate = require('./actions/gitlabIssueCreate.cjs.js');
var gitlabIssueEdit = require('./actions/gitlabIssueEdit.cjs.js');
var gitlabMergeRequest = require('./actions/gitlabMergeRequest.cjs.js');
var gitlabPipelineTrigger = require('./actions/gitlabPipelineTrigger.cjs.js');
var gitlabProjectAccessTokenCreate = require('./actions/gitlabProjectAccessTokenCreate.cjs.js');
var gitlabProjectDeployTokenCreate = require('./actions/gitlabProjectDeployTokenCreate.cjs.js');
var gitlabProjectVariableCreate = require('./actions/gitlabProjectVariableCreate.cjs.js');
var gitlabRepoPush = require('./actions/gitlabRepoPush.cjs.js');
require('./commonGitlabConfig.cjs.js');
var autocomplete = require('./autocomplete/autocomplete.cjs.js');

const gitlabModule = backendPluginApi.createBackendModule({
  pluginId: "scaffolder",
  moduleId: "gitlab",
  register({ registerInit }) {
    registerInit({
      deps: {
        scaffolder: alpha.scaffolderActionsExtensionPoint,
        autocomplete: alpha.scaffolderAutocompleteExtensionPoint,
        config: backendPluginApi.coreServices.rootConfig
      },
      async init({ scaffolder, autocomplete: autocomplete$1, config }) {
        const integrations = integration.ScmIntegrations.fromConfig(config);
        scaffolder.addActions(
          gitlabGroupEnsureExists.createGitlabGroupEnsureExistsAction({ integrations }),
          gitlabIssueCreate.createGitlabIssueAction({ integrations }),
          gitlabProjectAccessTokenCreate.createGitlabProjectAccessTokenAction({ integrations }),
          gitlabProjectDeployTokenCreate.createGitlabProjectDeployTokenAction({ integrations }),
          gitlabProjectVariableCreate.createGitlabProjectVariableAction({ integrations }),
          gitlabRepoPush.createGitlabRepoPushAction({ integrations }),
          gitlabIssueEdit.editGitlabIssueAction({ integrations }),
          gitlab.createPublishGitlabAction({ config, integrations }),
          gitlabMergeRequest.createPublishGitlabMergeRequestAction({ integrations }),
          gitlabPipelineTrigger.createTriggerGitlabPipelineAction({ integrations })
        );
        autocomplete$1.addAutocompleteProvider({
          id: "gitlab",
          handler: autocomplete.createHandleAutocompleteRequest({ integrations })
        });
      }
    });
  }
});

exports.gitlabModule = gitlabModule;
//# sourceMappingURL=module.cjs.js.map
