{"version":3,"file":"util.cjs.js","sources":["../src/util.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport {\n  GitLabIntegration,\n  ScmIntegrationRegistry,\n} from '@backstage/integration';\nimport { Gitlab, GroupSchema } from '@gitbeaker/rest';\nimport { z } from 'zod';\nimport commonGitlabConfig from './commonGitlabConfig';\n\nexport const parseRepoHost = (repoUrl: string): string => {\n  let parsed;\n  try {\n    parsed = new URL(`https://${repoUrl}`);\n  } catch (error) {\n    throw new InputError(\n      `Invalid repo URL passed to publisher, got ${repoUrl}, ${error}`,\n    );\n  }\n  return parsed.host;\n};\n\nexport const getToken = (\n  config: z.infer<typeof commonGitlabConfig>,\n  integrations: ScmIntegrationRegistry,\n): { token: string; integrationConfig: GitLabIntegration } => {\n  const host = parseRepoHost(config.repoUrl);\n  const integrationConfig = integrations.gitlab.byHost(host);\n\n  if (!integrationConfig) {\n    throw new InputError(\n      `No matching integration configuration for host ${host}, please check your integrations config`,\n    );\n  }\n\n  const token = config.token || integrationConfig.config.token!;\n\n  return { token: token, integrationConfig: integrationConfig };\n};\n\nexport type RepoSpec = {\n  repo: string;\n  host: string;\n  owner?: string;\n};\n\nexport const parseRepoUrl = (\n  repoUrl: string,\n  integrations: ScmIntegrationRegistry,\n): RepoSpec => {\n  let parsed;\n  try {\n    parsed = new URL(`https://${repoUrl}`);\n  } catch (error) {\n    throw new InputError(\n      `Invalid repo URL passed to publisher, got ${repoUrl}, ${error}`,\n    );\n  }\n  const host = parsed.host;\n  const owner = parsed.searchParams.get('owner') ?? undefined;\n  const repo: string = parsed.searchParams.get('repo')!;\n\n  const type = integrations.byHost(host)?.type;\n\n  if (!type) {\n    throw new InputError(\n      `No matching integration configuration for host ${host}, please check your integrations config`,\n    );\n  }\n\n  return { host, owner, repo };\n};\n\nexport function getClient(props: {\n  host: string;\n  token?: string;\n  integrations: ScmIntegrationRegistry;\n}): InstanceType<typeof Gitlab> {\n  const { host, token, integrations } = props;\n  const integrationConfig = integrations.gitlab.byHost(host);\n\n  if (!integrationConfig) {\n    throw new InputError(\n      `No matching integration configuration for host ${host}, please check your integrations config`,\n    );\n  }\n\n  const { config } = integrationConfig;\n\n  if (!config.token && !token) {\n    throw new InputError(`No token available for host ${host}`);\n  }\n\n  const requestToken = token || config.token!;\n  const tokenType = token ? 'oauthToken' : 'token';\n\n  const gitlabOptions: any = {\n    host: config.baseUrl,\n  };\n\n  gitlabOptions[tokenType] = requestToken;\n  return new Gitlab(gitlabOptions);\n}\n\nexport function convertDate(\n  inputDate: string | undefined,\n  defaultDate: string,\n) {\n  try {\n    return inputDate\n      ? new Date(inputDate).toISOString()\n      : new Date(defaultDate).toISOString();\n  } catch (error) {\n    throw new InputError(`Error converting input date - ${error}`);\n  }\n}\n\nexport async function getTopLevelParentGroup(\n  client: InstanceType<typeof Gitlab>,\n  groupId: number,\n): Promise<GroupSchema> {\n  try {\n    const topParentGroup = await client.Groups.show(groupId);\n    if (topParentGroup.parent_id) {\n      return getTopLevelParentGroup(client, topParentGroup.parent_id as number);\n    }\n    return topParentGroup as GroupSchema;\n  } catch (error: any) {\n    throw new InputError(\n      `Error finding top-level parent group ID: ${error.message}`,\n    );\n  }\n}\n\nexport async function checkEpicScope(\n  client: InstanceType<typeof Gitlab>,\n  projectId: number,\n  epicId: number,\n) {\n  try {\n    // If project exists, get the top level group id\n    const project = await client.Projects.show(projectId);\n    if (!project) {\n      throw new InputError(\n        `Project with id ${projectId} not found. Check your GitLab instance.`,\n      );\n    }\n    const topParentGroup = await getTopLevelParentGroup(\n      client,\n      project.namespace.id,\n    );\n    if (!topParentGroup) {\n      throw new InputError(`Couldn't find a suitable top-level parent group.`);\n    }\n    // Get the epic\n    const epic = (await client.Epics.all(topParentGroup.id)).find(\n      (x: any) => x.id === epicId,\n    );\n    if (!epic) {\n      throw new InputError(\n        `Epic with id ${epicId} not found in the top-level parent group ${topParentGroup.name}.`,\n      );\n    }\n\n    const epicGroup = await client.Groups.show(epic.group_id as number);\n    const projectNamespace: string = project.path_with_namespace as string;\n    return projectNamespace.startsWith(epicGroup.full_path as string);\n  } catch (error: any) {\n    throw new InputError(`Could not find epic scope: ${error.message}`);\n  }\n}\n"],"names":["InputError","Gitlab"],"mappings":"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"}