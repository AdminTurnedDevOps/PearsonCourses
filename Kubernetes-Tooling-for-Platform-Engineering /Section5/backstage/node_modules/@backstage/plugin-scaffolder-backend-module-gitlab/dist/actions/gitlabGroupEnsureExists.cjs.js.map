{"version":3,"file":"gitlabGroupEnsureExists.cjs.js","sources":["../../src/actions/gitlabGroupEnsureExists.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { GroupSchema } from '@gitbeaker/rest';\nimport { z } from 'zod';\nimport commonGitlabConfig from '../commonGitlabConfig';\nimport { getClient, parseRepoUrl } from '../util';\nimport { examples } from './gitlabGroupEnsureExists.examples';\n\n/**\n * Creates an `gitlab:group:ensureExists` Scaffolder action.\n *\n * @public\n */\nexport const createGitlabGroupEnsureExistsAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n\n  return createTemplateAction({\n    id: 'gitlab:group:ensureExists',\n    description: 'Ensures a Gitlab group exists',\n    supportsDryRun: true,\n    examples,\n    schema: {\n      input: commonGitlabConfig.merge(\n        z.object({\n          path: z\n            .array(z.string(), {\n              description: 'A path of group names that is ensured to exist',\n            })\n            .min(1),\n        }),\n      ),\n      output: z.object({\n        groupId: z\n          .number({ description: 'The id of the innermost sub-group' })\n          .optional(),\n      }),\n    },\n    async handler(ctx) {\n      if (ctx.isDryRun) {\n        ctx.output('groupId', 42);\n        return;\n      }\n\n      const { token, repoUrl, path } = ctx.input;\n\n      const { host } = parseRepoUrl(repoUrl, integrations);\n\n      const api = getClient({ host, integrations, token });\n\n      let currentPath: string | null = null;\n      let parentId: number | null = null;\n      for (const pathElement of path) {\n        const fullPath: string = currentPath\n          ? `${currentPath}/${pathElement}`\n          : pathElement;\n        const result = (await api.Groups.search(\n          fullPath,\n        )) as unknown as Array<GroupSchema>; // recast since the return type for search is wrong in the gitbeaker typings\n        const subGroup = result.find(\n          searchPathElem => searchPathElem.full_path === fullPath,\n        );\n        if (!subGroup) {\n          ctx.logger.info(`creating missing group ${fullPath}`);\n          parentId = (\n            await api.Groups.create(\n              pathElement,\n              pathElement,\n              parentId\n                ? {\n                    parentId: parentId,\n                  }\n                : {},\n            )\n          )?.id;\n        } else {\n          parentId = subGroup.id;\n        }\n        currentPath = fullPath;\n      }\n      if (parentId !== null) {\n        ctx.output('groupId', parentId);\n      }\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","commonGitlabConfig","z","parseRepoUrl","getClient"],"mappings":";;;;;;;;AA6Ba,MAAA,mCAAA,GAAsC,CAAC,OAE9C,KAAA;AACJ,EAAM,MAAA,EAAE,cAAiB,GAAA,OAAA;AAEzB,EAAA,OAAOA,yCAAqB,CAAA;AAAA,IAC1B,EAAI,EAAA,2BAAA;AAAA,IACJ,WAAa,EAAA,+BAAA;AAAA,IACb,cAAgB,EAAA,IAAA;AAAA,cAChBC,yCAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,OAAOC,0BAAmB,CAAA,KAAA;AAAA,QACxBC,MAAE,MAAO,CAAA;AAAA,UACP,IAAM,EAAAA,KAAA,CACH,KAAM,CAAAA,KAAA,CAAE,QAAU,EAAA;AAAA,YACjB,WAAa,EAAA;AAAA,WACd,CACA,CAAA,GAAA,CAAI,CAAC;AAAA,SACT;AAAA,OACH;AAAA,MACA,MAAA,EAAQA,MAAE,MAAO,CAAA;AAAA,QACf,OAAA,EAASA,MACN,MAAO,CAAA,EAAE,aAAa,mCAAoC,EAAC,EAC3D,QAAS;AAAA,OACb;AAAA,KACH;AAAA,IACA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAA,IAAI,IAAI,QAAU,EAAA;AAChB,QAAI,GAAA,CAAA,MAAA,CAAO,WAAW,EAAE,CAAA;AACxB,QAAA;AAAA;AAGF,MAAA,MAAM,EAAE,KAAA,EAAO,OAAS,EAAA,IAAA,KAAS,GAAI,CAAA,KAAA;AAErC,MAAA,MAAM,EAAE,IAAA,EAAS,GAAAC,iBAAA,CAAa,SAAS,YAAY,CAAA;AAEnD,MAAA,MAAM,MAAMC,cAAU,CAAA,EAAE,IAAM,EAAA,YAAA,EAAc,OAAO,CAAA;AAEnD,MAAA,IAAI,WAA6B,GAAA,IAAA;AACjC,MAAA,IAAI,QAA0B,GAAA,IAAA;AAC9B,MAAA,KAAA,MAAW,eAAe,IAAM,EAAA;AAC9B,QAAA,MAAM,WAAmB,WACrB,GAAA,CAAA,EAAG,WAAW,CAAA,CAAA,EAAI,WAAW,CAC7B,CAAA,GAAA,WAAA;AACJ,QAAM,MAAA,MAAA,GAAU,MAAM,GAAA,CAAI,MAAO,CAAA,MAAA;AAAA,UAC/B;AAAA,SACF;AACA,QAAA,MAAM,WAAW,MAAO,CAAA,IAAA;AAAA,UACtB,CAAA,cAAA,KAAkB,eAAe,SAAc,KAAA;AAAA,SACjD;AACA,QAAA,IAAI,CAAC,QAAU,EAAA;AACb,UAAA,GAAA,CAAI,MAAO,CAAA,IAAA,CAAK,CAA0B,uBAAA,EAAA,QAAQ,CAAE,CAAA,CAAA;AACpD,UACE,QAAA,GAAA,CAAA,MAAM,IAAI,MAAO,CAAA,MAAA;AAAA,YACf,WAAA;AAAA,YACA,WAAA;AAAA,YACA,QACI,GAAA;AAAA,cACE;AAAA,gBAEF;AAAC,WAEN,GAAA,EAAA;AAAA,SACE,MAAA;AACL,UAAA,QAAA,GAAW,QAAS,CAAA,EAAA;AAAA;AAEtB,QAAc,WAAA,GAAA,QAAA;AAAA;AAEhB,MAAA,IAAI,aAAa,IAAM,EAAA;AACrB,QAAI,GAAA,CAAA,MAAA,CAAO,WAAW,QAAQ,CAAA;AAAA;AAChC;AACF,GACD,CAAA;AACH;;;;"}