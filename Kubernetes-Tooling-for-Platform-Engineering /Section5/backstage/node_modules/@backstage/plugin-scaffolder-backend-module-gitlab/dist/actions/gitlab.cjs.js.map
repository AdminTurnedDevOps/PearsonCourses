{"version":3,"file":"gitlab.cjs.js","sources":["../../src/actions/gitlab.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { Gitlab, VariableType } from '@gitbeaker/rest';\nimport {\n  initRepoAndPush,\n  getRepoSourceDirectory,\n  parseRepoUrl,\n} from '@backstage/plugin-scaffolder-node';\nimport { Config } from '@backstage/config';\nimport { examples } from './gitlab.examples';\n\n/**\n * Creates a new action that initializes a git repository of the content in the workspace\n * and publishes it to GitLab.\n *\n * @public\n */\nexport function createPublishGitlabAction(options: {\n  integrations: ScmIntegrationRegistry;\n  config: Config;\n}) {\n  const { integrations, config } = options;\n\n  return createTemplateAction<{\n    repoUrl: string;\n    defaultBranch?: string;\n    /** @deprecated in favour of settings.visibility field */\n    repoVisibility?: 'private' | 'internal' | 'public';\n    sourcePath?: string;\n    token?: string;\n    gitCommitMessage?: string;\n    gitAuthorName?: string;\n    gitAuthorEmail?: string;\n    setUserAsOwner?: boolean;\n    /** @deprecated in favour of settings.topics field */\n    topics?: string[];\n    settings?: {\n      path?: string;\n      auto_devops_enabled?: boolean;\n      ci_config_path?: string;\n      description?: string;\n      merge_method?: 'merge' | 'rebase_merge' | 'ff';\n      squash_option?: 'default_off' | 'default_on' | 'never' | 'always';\n      topics?: string[];\n      visibility?: 'private' | 'internal' | 'public';\n      only_allow_merge_if_all_discussions_are_resolved?: boolean;\n      only_allow_merge_if_pipeline_succeeds?: boolean;\n      allow_merge_on_skipped_pipeline?: boolean;\n    };\n    branches?: Array<{\n      name: string;\n      protect?: boolean;\n      create?: boolean;\n      ref?: string;\n    }>;\n    projectVariables?: Array<{\n      key: string;\n      value: string;\n      description?: string;\n      variable_type?: string;\n      protected?: boolean;\n      masked?: boolean;\n      raw?: boolean;\n      environment_scope?: string;\n    }>;\n  }>({\n    id: 'publish:gitlab',\n    description:\n      'Initializes a git repository of the content in the workspace, and publishes it to GitLab.',\n    examples,\n    schema: {\n      input: {\n        type: 'object',\n        required: ['repoUrl'],\n        properties: {\n          repoUrl: {\n            title: 'Repository Location',\n            type: 'string',\n            description: `Accepts the format 'gitlab.com?repo=project_name&owner=group_name' where 'project_name' is the repository name and 'group_name' is a group or username`,\n          },\n          repoVisibility: {\n            title: 'Repository Visibility',\n            description: `Sets the visibility of the repository. The default value is 'private'. (deprecated, use settings.visibility instead)`,\n            type: 'string',\n            enum: ['private', 'public', 'internal'],\n          },\n          defaultBranch: {\n            title: 'Default Branch',\n            type: 'string',\n            description: `Sets the default branch on the repository. The default value is 'master'`,\n          },\n          gitCommitMessage: {\n            title: 'Git Commit Message',\n            type: 'string',\n            description: `Sets the commit message on the repository. The default value is 'initial commit'`,\n          },\n          gitAuthorName: {\n            title: 'Default Author Name',\n            type: 'string',\n            description: `Sets the default author name for the commit. The default value is 'Scaffolder'`,\n          },\n          gitAuthorEmail: {\n            title: 'Default Author Email',\n            type: 'string',\n            description: `Sets the default author email for the commit.`,\n          },\n          sourcePath: {\n            title: 'Source Path',\n            description:\n              'Path within the workspace that will be used as the repository root. If omitted, the entire workspace will be published as the repository.',\n            type: 'string',\n          },\n          token: {\n            title: 'Authentication Token',\n            type: 'string',\n            description: 'The token to use for authorization to GitLab',\n          },\n          setUserAsOwner: {\n            title: 'Set User As Owner',\n            type: 'boolean',\n            description:\n              'Set the token user as owner of the newly created repository. Requires a token authorized to do the edit in the integration configuration for the matching host',\n          },\n          topics: {\n            title: 'Topic labels',\n            description:\n              'Topic labels to apply on the repository. (deprecated, use settings.topics instead)',\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          settings: {\n            title: 'Project settings',\n            description:\n              'Additional project settings, based on https://docs.gitlab.com/ee/api/projects.html#create-project attributes',\n            type: 'object',\n            properties: {\n              path: {\n                title: 'Project path',\n                description:\n                  'Repository name for new project. Generated based on name if not provided (generated as lowercase with dashes).',\n                type: 'string',\n              },\n              auto_devops_enabled: {\n                title: 'Auto DevOps enabled',\n                description: 'Enable Auto DevOps for this project',\n                type: 'boolean',\n              },\n              ci_config_path: {\n                title: 'CI config path',\n                description: 'Custom CI config path for this project',\n                type: 'string',\n              },\n              description: {\n                title: 'Project description',\n                description: 'Short project description',\n                type: 'string',\n              },\n              merge_method: {\n                title: 'Merge Method to use',\n                description: 'Merge Methods (merge, rebase_merge, ff)',\n                type: 'string',\n                enum: ['merge', 'rebase_merge', 'ff'],\n              },\n              squash_option: {\n                title: 'Squash option',\n                description:\n                  'Set squash option for the project (never, always, default_on, default_off)',\n                type: 'string',\n                enum: ['default_off', 'default_on', 'never', 'always'],\n              },\n              topics: {\n                title: 'Topic labels',\n                description: 'Topic labels to apply on the repository',\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n              visibility: {\n                title: 'Project visibility',\n                description:\n                  'The visibility of the project. Can be private, internal, or public. The default value is private.',\n                type: 'string',\n                enum: ['private', 'public', 'internal'],\n              },\n              only_allow_merge_if_all_discussions_are_resolved: {\n                title: 'All threads must be resolved',\n                description:\n                  'Set whether merge requests can only be merged when all the discussions are resolved.',\n                type: 'boolean',\n              },\n              only_allow_merge_if_pipeline_succeeds: {\n                title: 'Pipelines must succeed',\n                description:\n                  'Set whether merge requests can only be merged with successful pipelines. This setting is named Pipelines must succeed in the project settings.',\n                type: 'boolean',\n              },\n              allow_merge_on_skipped_pipeline: {\n                title: 'Skipped pipelines are considered successful',\n                description:\n                  'Set whether or not merge requests can be merged with skipped jobs.',\n                type: 'boolean',\n              },\n            },\n          },\n          branches: {\n            title: 'Project branches settings',\n            type: 'array',\n            items: {\n              type: 'object',\n              required: ['name'],\n              properties: {\n                name: {\n                  title: 'Branch name',\n                  type: 'string',\n                },\n                protect: {\n                  title: 'Should branch be protected',\n                  description: `Will mark branch as protected. The default value is 'false'`,\n                  type: 'boolean',\n                },\n                create: {\n                  title: 'Should branch be created',\n                  description: `If branch does not exist, it will be created from provided ref. The default value is 'false'`,\n                  type: 'boolean',\n                },\n                ref: {\n                  title: 'Branch reference',\n                  description: `Branch reference to create branch from. The default value is 'master'`,\n                  type: 'string',\n                },\n              },\n            },\n          },\n          projectVariables: {\n            title: 'Project variables',\n            description:\n              'Project variables settings based on Gitlab Project Environments API - https://docs.gitlab.com/ee/api/project_level_variables.html#create-a-variable',\n            type: 'array',\n            items: {\n              type: 'object',\n              required: ['key', 'value'],\n              properties: {\n                key: {\n                  title: 'Variable key',\n                  description:\n                    'The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed',\n                  type: 'string',\n                },\n                value: {\n                  title: 'Variable value',\n                  description: 'The value of a variable',\n                  type: 'string',\n                },\n                description: {\n                  title: 'Variable description',\n                  description: `The description of the variable. The default value is 'null'`,\n                  type: 'string',\n                },\n                variable_type: {\n                  title: 'Variable type',\n                  description: `The type of a variable. The default value is 'env_var'`,\n                  type: 'string',\n                  enum: ['env_var', 'file'],\n                },\n                protected: {\n                  title: 'Variable protection',\n                  description: `Whether the variable is protected. The default value is 'false'`,\n                  type: 'boolean',\n                },\n                raw: {\n                  title: 'Variable raw',\n                  description: `Whether the variable is in raw format. The default value is 'false'`,\n                  type: 'boolean',\n                },\n                environment_scope: {\n                  title: 'Variable environment scope',\n                  description: `The environment_scope of the variable. The default value is '*'`,\n                  type: 'string',\n                },\n              },\n            },\n          },\n        },\n      },\n      output: {\n        type: 'object',\n        properties: {\n          remoteUrl: {\n            title: 'A URL to the repository with the provider',\n            type: 'string',\n          },\n          repoContentsUrl: {\n            title: 'A URL to the root of the repository',\n            type: 'string',\n          },\n          projectId: {\n            title: 'The ID of the project',\n            type: 'number',\n          },\n          commitHash: {\n            title: 'The git commit hash of the initial commit',\n            type: 'string',\n          },\n        },\n      },\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        repoVisibility = 'private',\n        defaultBranch = 'master',\n        gitCommitMessage = 'initial commit',\n        gitAuthorName,\n        gitAuthorEmail,\n        setUserAsOwner = false,\n        topics = [],\n        settings = {},\n        branches = [],\n        projectVariables = [],\n      } = ctx.input;\n      const { owner, repo, host } = parseRepoUrl(repoUrl, integrations);\n\n      if (!owner) {\n        throw new InputError(\n          `No owner provided for host: ${host}, and repo ${repo}`,\n        );\n      }\n\n      const integrationConfig = integrations.gitlab.byHost(host);\n\n      if (!integrationConfig) {\n        throw new InputError(\n          `No matching integration configuration for host ${host}, please check your integrations config`,\n        );\n      }\n\n      if (!integrationConfig.config.token && !ctx.input.token) {\n        throw new InputError(`No token available for host ${host}`);\n      }\n\n      const token = ctx.input.token || integrationConfig.config.token!;\n      const tokenType = ctx.input.token ? 'oauthToken' : 'token';\n\n      const client = new Gitlab({\n        host: integrationConfig.config.baseUrl,\n        [tokenType]: token,\n      });\n\n      let targetNamespaceId;\n\n      try {\n        const namespaceResponse = (await client.Namespaces.show(owner)) as {\n          id: number;\n        };\n\n        targetNamespaceId = namespaceResponse.id;\n      } catch (e) {\n        if (e.response && e.response.statusCode === 404) {\n          throw new InputError(\n            `The namespace ${owner} is not found or the user doesn't have permissions to access it`,\n          );\n        }\n        throw e;\n      }\n\n      const { id: userId } = (await client.Users.showCurrentUser()) as {\n        id: number;\n      };\n\n      if (!targetNamespaceId) {\n        targetNamespaceId = userId;\n      }\n\n      const { id: projectId, http_url_to_repo } = await client.Projects.create({\n        namespaceId: targetNamespaceId,\n        name: repo,\n        visibility: repoVisibility,\n        ...(topics.length ? { topics } : {}),\n        ...(Object.keys(settings).length ? { ...settings } : {}),\n      });\n\n      // When setUserAsOwner is true the input token is expected to come from an unprivileged user GitLab\n      // OAuth flow. In this case GitLab works in a way that allows the unprivileged user to\n      // create the repository, but not to push the default protected branch (e.g. master).\n      // In order to set the user as owner of the newly created repository we need to check that the\n      // GitLab integration configuration for the matching host contains a token and use\n      // such token to bootstrap a new privileged client.\n      if (setUserAsOwner && integrationConfig.config.token) {\n        const adminClient = new Gitlab({\n          host: integrationConfig.config.baseUrl,\n          token: integrationConfig.config.token,\n        });\n\n        await adminClient.ProjectMembers.add(projectId, userId, 50);\n      }\n\n      const remoteUrl = (http_url_to_repo as string).replace(/\\.git$/, '');\n      const repoContentsUrl = `${remoteUrl}/-/blob/${defaultBranch}`;\n\n      const gitAuthorInfo = {\n        name: gitAuthorName\n          ? gitAuthorName\n          : config.getOptionalString('scaffolder.defaultAuthor.name'),\n        email: gitAuthorEmail\n          ? gitAuthorEmail\n          : config.getOptionalString('scaffolder.defaultAuthor.email'),\n      };\n      const commitResult = await initRepoAndPush({\n        dir: getRepoSourceDirectory(ctx.workspacePath, ctx.input.sourcePath),\n        remoteUrl: http_url_to_repo as string,\n        defaultBranch,\n        auth: {\n          username: 'oauth2',\n          password: token,\n        },\n        logger: ctx.logger,\n        commitMessage: gitCommitMessage\n          ? gitCommitMessage\n          : config.getOptionalString('scaffolder.defaultCommitMessage'),\n        gitAuthorInfo,\n      });\n\n      if (branches) {\n        for (const branch of branches) {\n          const {\n            name,\n            protect = false,\n            create = false,\n            ref = 'master',\n          } = branch;\n\n          if (create) {\n            try {\n              await client.Branches.create(projectId, name, ref);\n            } catch (e) {\n              throw new InputError(\n                `Branch creation failed for ${name}. ${printGitlabError(e)}`,\n              );\n            }\n            ctx.logger.info(\n              `Branch ${name} created for ${projectId} with ref ${ref}`,\n            );\n          }\n\n          if (protect) {\n            try {\n              await client.ProtectedBranches.protect(projectId, name);\n            } catch (e) {\n              throw new InputError(\n                `Branch protection failed for ${name}. ${printGitlabError(e)}`,\n              );\n            }\n            ctx.logger.info(`Branch ${name} protected for ${projectId}`);\n          }\n        }\n      }\n\n      if (projectVariables) {\n        for (const variable of projectVariables) {\n          const variableWithDefaults = Object.assign(variable, {\n            variable_type: (variable.variable_type ??\n              'env_var') as VariableType,\n            protected: variable.protected ?? false,\n            masked: variable.masked ?? false,\n            raw: variable.raw ?? false,\n            environment_scope: variable.environment_scope ?? '*',\n          });\n\n          try {\n            await client.ProjectVariables.create(\n              projectId,\n              variableWithDefaults.key,\n              variableWithDefaults.value,\n              {\n                variableType: variableWithDefaults.variable_type,\n                protected: variableWithDefaults.protected,\n                masked: variableWithDefaults.masked,\n                environmentScope: variableWithDefaults.environment_scope,\n                description: variableWithDefaults.description,\n                raw: variableWithDefaults.raw,\n              },\n            );\n          } catch (e) {\n            throw new InputError(\n              `Environment variable creation failed for ${\n                variableWithDefaults.key\n              }. ${printGitlabError(e)}`,\n            );\n          }\n        }\n      }\n\n      ctx.output('commitHash', commitResult?.commitHash);\n      ctx.output('remoteUrl', remoteUrl);\n      ctx.output('repoContentsUrl', repoContentsUrl);\n      ctx.output('projectId', projectId);\n    },\n  });\n}\n\nfunction printGitlabError(error: any): string {\n  return JSON.stringify({ code: error.code, message: error.description });\n}\n"],"names":["createTemplateAction","examples","parseRepoUrl","InputError","Gitlab","initRepoAndPush","getRepoSourceDirectory"],"mappings":";;;;;;;AAkCO,SAAS,0BAA0B,OAGvC,EAAA;AACD,EAAM,MAAA,EAAE,YAAc,EAAA,MAAA,EAAW,GAAA,OAAA;AAEjC,EAAA,OAAOA,yCA0CJ,CAAA;AAAA,IACD,EAAI,EAAA,gBAAA;AAAA,IACJ,WACE,EAAA,2FAAA;AAAA,cACFC,wBAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,KAAO,EAAA;AAAA,QACL,IAAM,EAAA,QAAA;AAAA,QACN,QAAA,EAAU,CAAC,SAAS,CAAA;AAAA,QACpB,UAAY,EAAA;AAAA,UACV,OAAS,EAAA;AAAA,YACP,KAAO,EAAA,qBAAA;AAAA,YACP,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,CAAA,sJAAA;AAAA,WACf;AAAA,UACA,cAAgB,EAAA;AAAA,YACd,KAAO,EAAA,uBAAA;AAAA,YACP,WAAa,EAAA,CAAA,oHAAA,CAAA;AAAA,YACb,IAAM,EAAA,QAAA;AAAA,YACN,IAAM,EAAA,CAAC,SAAW,EAAA,QAAA,EAAU,UAAU;AAAA,WACxC;AAAA,UACA,aAAe,EAAA;AAAA,YACb,KAAO,EAAA,gBAAA;AAAA,YACP,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,CAAA,wEAAA;AAAA,WACf;AAAA,UACA,gBAAkB,EAAA;AAAA,YAChB,KAAO,EAAA,oBAAA;AAAA,YACP,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,CAAA,gFAAA;AAAA,WACf;AAAA,UACA,aAAe,EAAA;AAAA,YACb,KAAO,EAAA,qBAAA;AAAA,YACP,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,CAAA,8EAAA;AAAA,WACf;AAAA,UACA,cAAgB,EAAA;AAAA,YACd,KAAO,EAAA,sBAAA;AAAA,YACP,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,CAAA,6CAAA;AAAA,WACf;AAAA,UACA,UAAY,EAAA;AAAA,YACV,KAAO,EAAA,aAAA;AAAA,YACP,WACE,EAAA,2IAAA;AAAA,YACF,IAAM,EAAA;AAAA,WACR;AAAA,UACA,KAAO,EAAA;AAAA,YACL,KAAO,EAAA,sBAAA;AAAA,YACP,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA;AAAA,WACf;AAAA,UACA,cAAgB,EAAA;AAAA,YACd,KAAO,EAAA,mBAAA;AAAA,YACP,IAAM,EAAA,SAAA;AAAA,YACN,WACE,EAAA;AAAA,WACJ;AAAA,UACA,MAAQ,EAAA;AAAA,YACN,KAAO,EAAA,cAAA;AAAA,YACP,WACE,EAAA,oFAAA;AAAA,YACF,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA;AAAA;AACR,WACF;AAAA,UACA,QAAU,EAAA;AAAA,YACR,KAAO,EAAA,kBAAA;AAAA,YACP,WACE,EAAA,8GAAA;AAAA,YACF,IAAM,EAAA,QAAA;AAAA,YACN,UAAY,EAAA;AAAA,cACV,IAAM,EAAA;AAAA,gBACJ,KAAO,EAAA,cAAA;AAAA,gBACP,WACE,EAAA,gHAAA;AAAA,gBACF,IAAM,EAAA;AAAA,eACR;AAAA,cACA,mBAAqB,EAAA;AAAA,gBACnB,KAAO,EAAA,qBAAA;AAAA,gBACP,WAAa,EAAA,qCAAA;AAAA,gBACb,IAAM,EAAA;AAAA,eACR;AAAA,cACA,cAAgB,EAAA;AAAA,gBACd,KAAO,EAAA,gBAAA;AAAA,gBACP,WAAa,EAAA,wCAAA;AAAA,gBACb,IAAM,EAAA;AAAA,eACR;AAAA,cACA,WAAa,EAAA;AAAA,gBACX,KAAO,EAAA,qBAAA;AAAA,gBACP,WAAa,EAAA,2BAAA;AAAA,gBACb,IAAM,EAAA;AAAA,eACR;AAAA,cACA,YAAc,EAAA;AAAA,gBACZ,KAAO,EAAA,qBAAA;AAAA,gBACP,WAAa,EAAA,yCAAA;AAAA,gBACb,IAAM,EAAA,QAAA;AAAA,gBACN,IAAM,EAAA,CAAC,OAAS,EAAA,cAAA,EAAgB,IAAI;AAAA,eACtC;AAAA,cACA,aAAe,EAAA;AAAA,gBACb,KAAO,EAAA,eAAA;AAAA,gBACP,WACE,EAAA,4EAAA;AAAA,gBACF,IAAM,EAAA,QAAA;AAAA,gBACN,IAAM,EAAA,CAAC,aAAe,EAAA,YAAA,EAAc,SAAS,QAAQ;AAAA,eACvD;AAAA,cACA,MAAQ,EAAA;AAAA,gBACN,KAAO,EAAA,cAAA;AAAA,gBACP,WAAa,EAAA,yCAAA;AAAA,gBACb,IAAM,EAAA,OAAA;AAAA,gBACN,KAAO,EAAA;AAAA,kBACL,IAAM,EAAA;AAAA;AACR,eACF;AAAA,cACA,UAAY,EAAA;AAAA,gBACV,KAAO,EAAA,oBAAA;AAAA,gBACP,WACE,EAAA,mGAAA;AAAA,gBACF,IAAM,EAAA,QAAA;AAAA,gBACN,IAAM,EAAA,CAAC,SAAW,EAAA,QAAA,EAAU,UAAU;AAAA,eACxC;AAAA,cACA,gDAAkD,EAAA;AAAA,gBAChD,KAAO,EAAA,8BAAA;AAAA,gBACP,WACE,EAAA,sFAAA;AAAA,gBACF,IAAM,EAAA;AAAA,eACR;AAAA,cACA,qCAAuC,EAAA;AAAA,gBACrC,KAAO,EAAA,wBAAA;AAAA,gBACP,WACE,EAAA,gJAAA;AAAA,gBACF,IAAM,EAAA;AAAA,eACR;AAAA,cACA,+BAAiC,EAAA;AAAA,gBAC/B,KAAO,EAAA,6CAAA;AAAA,gBACP,WACE,EAAA,oEAAA;AAAA,gBACF,IAAM,EAAA;AAAA;AACR;AACF,WACF;AAAA,UACA,QAAU,EAAA;AAAA,YACR,KAAO,EAAA,2BAAA;AAAA,YACP,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,QAAA;AAAA,cACN,QAAA,EAAU,CAAC,MAAM,CAAA;AAAA,cACjB,UAAY,EAAA;AAAA,gBACV,IAAM,EAAA;AAAA,kBACJ,KAAO,EAAA,aAAA;AAAA,kBACP,IAAM,EAAA;AAAA,iBACR;AAAA,gBACA,OAAS,EAAA;AAAA,kBACP,KAAO,EAAA,4BAAA;AAAA,kBACP,WAAa,EAAA,CAAA,2DAAA,CAAA;AAAA,kBACb,IAAM,EAAA;AAAA,iBACR;AAAA,gBACA,MAAQ,EAAA;AAAA,kBACN,KAAO,EAAA,0BAAA;AAAA,kBACP,WAAa,EAAA,CAAA,4FAAA,CAAA;AAAA,kBACb,IAAM,EAAA;AAAA,iBACR;AAAA,gBACA,GAAK,EAAA;AAAA,kBACH,KAAO,EAAA,kBAAA;AAAA,kBACP,WAAa,EAAA,CAAA,qEAAA,CAAA;AAAA,kBACb,IAAM,EAAA;AAAA;AACR;AACF;AACF,WACF;AAAA,UACA,gBAAkB,EAAA;AAAA,YAChB,KAAO,EAAA,mBAAA;AAAA,YACP,WACE,EAAA,qJAAA;AAAA,YACF,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,QAAA;AAAA,cACN,QAAA,EAAU,CAAC,KAAA,EAAO,OAAO,CAAA;AAAA,cACzB,UAAY,EAAA;AAAA,gBACV,GAAK,EAAA;AAAA,kBACH,KAAO,EAAA,cAAA;AAAA,kBACP,WACE,EAAA,qGAAA;AAAA,kBACF,IAAM,EAAA;AAAA,iBACR;AAAA,gBACA,KAAO,EAAA;AAAA,kBACL,KAAO,EAAA,gBAAA;AAAA,kBACP,WAAa,EAAA,yBAAA;AAAA,kBACb,IAAM,EAAA;AAAA,iBACR;AAAA,gBACA,WAAa,EAAA;AAAA,kBACX,KAAO,EAAA,sBAAA;AAAA,kBACP,WAAa,EAAA,CAAA,4DAAA,CAAA;AAAA,kBACb,IAAM,EAAA;AAAA,iBACR;AAAA,gBACA,aAAe,EAAA;AAAA,kBACb,KAAO,EAAA,eAAA;AAAA,kBACP,WAAa,EAAA,CAAA,sDAAA,CAAA;AAAA,kBACb,IAAM,EAAA,QAAA;AAAA,kBACN,IAAA,EAAM,CAAC,SAAA,EAAW,MAAM;AAAA,iBAC1B;AAAA,gBACA,SAAW,EAAA;AAAA,kBACT,KAAO,EAAA,qBAAA;AAAA,kBACP,WAAa,EAAA,CAAA,+DAAA,CAAA;AAAA,kBACb,IAAM,EAAA;AAAA,iBACR;AAAA,gBACA,GAAK,EAAA;AAAA,kBACH,KAAO,EAAA,cAAA;AAAA,kBACP,WAAa,EAAA,CAAA,mEAAA,CAAA;AAAA,kBACb,IAAM,EAAA;AAAA,iBACR;AAAA,gBACA,iBAAmB,EAAA;AAAA,kBACjB,KAAO,EAAA,4BAAA;AAAA,kBACP,WAAa,EAAA,CAAA,+DAAA,CAAA;AAAA,kBACb,IAAM,EAAA;AAAA;AACR;AACF;AACF;AACF;AACF,OACF;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,SAAW,EAAA;AAAA,YACT,KAAO,EAAA,2CAAA;AAAA,YACP,IAAM,EAAA;AAAA,WACR;AAAA,UACA,eAAiB,EAAA;AAAA,YACf,KAAO,EAAA,qCAAA;AAAA,YACP,IAAM,EAAA;AAAA,WACR;AAAA,UACA,SAAW,EAAA;AAAA,YACT,KAAO,EAAA,uBAAA;AAAA,YACP,IAAM,EAAA;AAAA,WACR;AAAA,UACA,UAAY,EAAA;AAAA,YACV,KAAO,EAAA,2CAAA;AAAA,YACP,IAAM,EAAA;AAAA;AACR;AACF;AACF,KACF;AAAA,IACA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAM,MAAA;AAAA,QACJ,OAAA;AAAA,QACA,cAAiB,GAAA,SAAA;AAAA,QACjB,aAAgB,GAAA,QAAA;AAAA,QAChB,gBAAmB,GAAA,gBAAA;AAAA,QACnB,aAAA;AAAA,QACA,cAAA;AAAA,QACA,cAAiB,GAAA,KAAA;AAAA,QACjB,SAAS,EAAC;AAAA,QACV,WAAW,EAAC;AAAA,QACZ,WAAW,EAAC;AAAA,QACZ,mBAAmB;AAAC,UAClB,GAAI,CAAA,KAAA;AACR,MAAA,MAAM,EAAE,KAAO,EAAA,IAAA,EAAM,MAAS,GAAAC,iCAAA,CAAa,SAAS,YAAY,CAAA;AAEhE,MAAA,IAAI,CAAC,KAAO,EAAA;AACV,QAAA,MAAM,IAAIC,iBAAA;AAAA,UACR,CAAA,4BAAA,EAA+B,IAAI,CAAA,WAAA,EAAc,IAAI,CAAA;AAAA,SACvD;AAAA;AAGF,MAAA,MAAM,iBAAoB,GAAA,YAAA,CAAa,MAAO,CAAA,MAAA,CAAO,IAAI,CAAA;AAEzD,MAAA,IAAI,CAAC,iBAAmB,EAAA;AACtB,QAAA,MAAM,IAAIA,iBAAA;AAAA,UACR,kDAAkD,IAAI,CAAA,uCAAA;AAAA,SACxD;AAAA;AAGF,MAAA,IAAI,CAAC,iBAAkB,CAAA,MAAA,CAAO,SAAS,CAAC,GAAA,CAAI,MAAM,KAAO,EAAA;AACvD,QAAA,MAAM,IAAIA,iBAAA,CAAW,CAA+B,4BAAA,EAAA,IAAI,CAAE,CAAA,CAAA;AAAA;AAG5D,MAAA,MAAM,KAAQ,GAAA,GAAA,CAAI,KAAM,CAAA,KAAA,IAAS,kBAAkB,MAAO,CAAA,KAAA;AAC1D,MAAA,MAAM,SAAY,GAAA,GAAA,CAAI,KAAM,CAAA,KAAA,GAAQ,YAAe,GAAA,OAAA;AAEnD,MAAM,MAAA,MAAA,GAAS,IAAIC,WAAO,CAAA;AAAA,QACxB,IAAA,EAAM,kBAAkB,MAAO,CAAA,OAAA;AAAA,QAC/B,CAAC,SAAS,GAAG;AAAA,OACd,CAAA;AAED,MAAI,IAAA,iBAAA;AAEJ,MAAI,IAAA;AACF,QAAA,MAAM,iBAAqB,GAAA,MAAM,MAAO,CAAA,UAAA,CAAW,KAAK,KAAK,CAAA;AAI7D,QAAA,iBAAA,GAAoB,iBAAkB,CAAA,EAAA;AAAA,eAC/B,CAAG,EAAA;AACV,QAAA,IAAI,CAAE,CAAA,QAAA,IAAY,CAAE,CAAA,QAAA,CAAS,eAAe,GAAK,EAAA;AAC/C,UAAA,MAAM,IAAID,iBAAA;AAAA,YACR,iBAAiB,KAAK,CAAA,+DAAA;AAAA,WACxB;AAAA;AAEF,QAAM,MAAA,CAAA;AAAA;AAGR,MAAA,MAAM,EAAE,EAAI,EAAA,MAAA,KAAY,MAAM,MAAA,CAAO,MAAM,eAAgB,EAAA;AAI3D,MAAA,IAAI,CAAC,iBAAmB,EAAA;AACtB,QAAoB,iBAAA,GAAA,MAAA;AAAA;AAGtB,MAAM,MAAA,EAAE,IAAI,SAAW,EAAA,gBAAA,KAAqB,MAAM,MAAA,CAAO,SAAS,MAAO,CAAA;AAAA,QACvE,WAAa,EAAA,iBAAA;AAAA,QACb,IAAM,EAAA,IAAA;AAAA,QACN,UAAY,EAAA,cAAA;AAAA,QACZ,GAAI,MAAO,CAAA,MAAA,GAAS,EAAE,MAAA,KAAW,EAAC;AAAA,QAClC,GAAI,MAAO,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAE,SAAS,EAAE,GAAG,QAAS,EAAA,GAAI;AAAC,OACvD,CAAA;AAQD,MAAI,IAAA,cAAA,IAAkB,iBAAkB,CAAA,MAAA,CAAO,KAAO,EAAA;AACpD,QAAM,MAAA,WAAA,GAAc,IAAIC,WAAO,CAAA;AAAA,UAC7B,IAAA,EAAM,kBAAkB,MAAO,CAAA,OAAA;AAAA,UAC/B,KAAA,EAAO,kBAAkB,MAAO,CAAA;AAAA,SACjC,CAAA;AAED,QAAA,MAAM,WAAY,CAAA,cAAA,CAAe,GAAI,CAAA,SAAA,EAAW,QAAQ,EAAE,CAAA;AAAA;AAG5D,MAAA,MAAM,SAAa,GAAA,gBAAA,CAA4B,OAAQ,CAAA,QAAA,EAAU,EAAE,CAAA;AACnE,MAAA,MAAM,eAAkB,GAAA,CAAA,EAAG,SAAS,CAAA,QAAA,EAAW,aAAa,CAAA,CAAA;AAE5D,MAAA,MAAM,aAAgB,GAAA;AAAA,QACpB,IAAM,EAAA,aAAA,GACF,aACA,GAAA,MAAA,CAAO,kBAAkB,+BAA+B,CAAA;AAAA,QAC5D,KAAO,EAAA,cAAA,GACH,cACA,GAAA,MAAA,CAAO,kBAAkB,gCAAgC;AAAA,OAC/D;AACA,MAAM,MAAA,YAAA,GAAe,MAAMC,oCAAgB,CAAA;AAAA,QACzC,KAAKC,2CAAuB,CAAA,GAAA,CAAI,aAAe,EAAA,GAAA,CAAI,MAAM,UAAU,CAAA;AAAA,QACnE,SAAW,EAAA,gBAAA;AAAA,QACX,aAAA;AAAA,QACA,IAAM,EAAA;AAAA,UACJ,QAAU,EAAA,QAAA;AAAA,UACV,QAAU,EAAA;AAAA,SACZ;AAAA,QACA,QAAQ,GAAI,CAAA,MAAA;AAAA,QACZ,aAAe,EAAA,gBAAA,GACX,gBACA,GAAA,MAAA,CAAO,kBAAkB,iCAAiC,CAAA;AAAA,QAC9D;AAAA,OACD,CAAA;AAED,MAAA,IAAI,QAAU,EAAA;AACZ,QAAA,KAAA,MAAW,UAAU,QAAU,EAAA;AAC7B,UAAM,MAAA;AAAA,YACJ,IAAA;AAAA,YACA,OAAU,GAAA,KAAA;AAAA,YACV,MAAS,GAAA,KAAA;AAAA,YACT,GAAM,GAAA;AAAA,WACJ,GAAA,MAAA;AAEJ,UAAA,IAAI,MAAQ,EAAA;AACV,YAAI,IAAA;AACF,cAAA,MAAM,MAAO,CAAA,QAAA,CAAS,MAAO,CAAA,SAAA,EAAW,MAAM,GAAG,CAAA;AAAA,qBAC1C,CAAG,EAAA;AACV,cAAA,MAAM,IAAIH,iBAAA;AAAA,gBACR,CAA8B,2BAAA,EAAA,IAAI,CAAK,EAAA,EAAA,gBAAA,CAAiB,CAAC,CAAC,CAAA;AAAA,eAC5D;AAAA;AAEF,YAAA,GAAA,CAAI,MAAO,CAAA,IAAA;AAAA,cACT,CAAU,OAAA,EAAA,IAAI,CAAgB,aAAA,EAAA,SAAS,aAAa,GAAG,CAAA;AAAA,aACzD;AAAA;AAGF,UAAA,IAAI,OAAS,EAAA;AACX,YAAI,IAAA;AACF,cAAA,MAAM,MAAO,CAAA,iBAAA,CAAkB,OAAQ,CAAA,SAAA,EAAW,IAAI,CAAA;AAAA,qBAC/C,CAAG,EAAA;AACV,cAAA,MAAM,IAAIA,iBAAA;AAAA,gBACR,CAAgC,6BAAA,EAAA,IAAI,CAAK,EAAA,EAAA,gBAAA,CAAiB,CAAC,CAAC,CAAA;AAAA,eAC9D;AAAA;AAEF,YAAA,GAAA,CAAI,OAAO,IAAK,CAAA,CAAA,OAAA,EAAU,IAAI,CAAA,eAAA,EAAkB,SAAS,CAAE,CAAA,CAAA;AAAA;AAC7D;AACF;AAGF,MAAA,IAAI,gBAAkB,EAAA;AACpB,QAAA,KAAA,MAAW,YAAY,gBAAkB,EAAA;AACvC,UAAM,MAAA,oBAAA,GAAuB,MAAO,CAAA,MAAA,CAAO,QAAU,EAAA;AAAA,YACnD,aAAA,EAAgB,SAAS,aACvB,IAAA,SAAA;AAAA,YACF,SAAA,EAAW,SAAS,SAAa,IAAA,KAAA;AAAA,YACjC,MAAA,EAAQ,SAAS,MAAU,IAAA,KAAA;AAAA,YAC3B,GAAA,EAAK,SAAS,GAAO,IAAA,KAAA;AAAA,YACrB,iBAAA,EAAmB,SAAS,iBAAqB,IAAA;AAAA,WAClD,CAAA;AAED,UAAI,IAAA;AACF,YAAA,MAAM,OAAO,gBAAiB,CAAA,MAAA;AAAA,cAC5B,SAAA;AAAA,cACA,oBAAqB,CAAA,GAAA;AAAA,cACrB,oBAAqB,CAAA,KAAA;AAAA,cACrB;AAAA,gBACE,cAAc,oBAAqB,CAAA,aAAA;AAAA,gBACnC,WAAW,oBAAqB,CAAA,SAAA;AAAA,gBAChC,QAAQ,oBAAqB,CAAA,MAAA;AAAA,gBAC7B,kBAAkB,oBAAqB,CAAA,iBAAA;AAAA,gBACvC,aAAa,oBAAqB,CAAA,WAAA;AAAA,gBAClC,KAAK,oBAAqB,CAAA;AAAA;AAC5B,aACF;AAAA,mBACO,CAAG,EAAA;AACV,YAAA,MAAM,IAAIA,iBAAA;AAAA,cACR,4CACE,oBAAqB,CAAA,GACvB,CAAK,EAAA,EAAA,gBAAA,CAAiB,CAAC,CAAC,CAAA;AAAA,aAC1B;AAAA;AACF;AACF;AAGF,MAAI,GAAA,CAAA,MAAA,CAAO,YAAc,EAAA,YAAA,EAAc,UAAU,CAAA;AACjD,MAAI,GAAA,CAAA,MAAA,CAAO,aAAa,SAAS,CAAA;AACjC,MAAI,GAAA,CAAA,MAAA,CAAO,mBAAmB,eAAe,CAAA;AAC7C,MAAI,GAAA,CAAA,MAAA,CAAO,aAAa,SAAS,CAAA;AAAA;AACnC,GACD,CAAA;AACH;AAEA,SAAS,iBAAiB,KAAoB,EAAA;AAC5C,EAAO,OAAA,IAAA,CAAK,UAAU,EAAE,IAAA,EAAM,MAAM,IAAM,EAAA,OAAA,EAAS,KAAM,CAAA,WAAA,EAAa,CAAA;AACxE;;;;"}