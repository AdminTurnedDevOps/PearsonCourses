{"version":3,"file":"gitlabPipelineTrigger.cjs.js","sources":["../../src/actions/gitlabPipelineTrigger.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport {\n  ExpandedPipelineSchema,\n  PipelineTriggerTokenSchema,\n} from '@gitbeaker/rest';\nimport { z } from 'zod';\nimport commonGitlabConfig from '../commonGitlabConfig';\nimport { getClient, parseRepoUrl } from '../util';\nimport { examples } from './gitlabPipelineTrigger.examples';\nimport { getErrorMessage } from './helpers';\n\nconst pipelineInputProperties = z.object({\n  projectId: z.number().describe('Project Id'),\n  tokenDescription: z.string().describe('Pipeline token description'),\n  branch: z.string().describe('Project branch'),\n  variables: z\n    .record(z.string(), z.string())\n    .optional()\n    .describe(\n      'A object/record of key-valued strings containing the pipeline variables.',\n    ),\n});\n\nconst pipelineOutputProperties = z.object({\n  pipelineUrl: z.string({ description: 'Pipeline Url' }),\n});\n\n/**\n * Creates a `gitlab:pipeline:trigger` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createTriggerGitlabPipelineAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:pipeline:trigger',\n    description: 'Triggers a GitLab Pipeline.',\n    examples,\n    schema: {\n      input: commonGitlabConfig.merge(pipelineInputProperties),\n      output: pipelineOutputProperties,\n    },\n    async handler(ctx) {\n      let pipelineTokenResponse: PipelineTriggerTokenSchema | null = null;\n\n      const { repoUrl, projectId, tokenDescription, token, branch, variables } =\n        commonGitlabConfig.merge(pipelineInputProperties).parse(ctx.input);\n\n      const { host } = parseRepoUrl(repoUrl, integrations);\n      const api = getClient({ host, integrations, token });\n\n      try {\n        // Create a pipeline token\n        pipelineTokenResponse = (await api.PipelineTriggerTokens.create(\n          projectId,\n          tokenDescription,\n        )) as PipelineTriggerTokenSchema;\n\n        if (!pipelineTokenResponse.token) {\n          ctx.logger.error('Failed to create pipeline token.');\n          return;\n        }\n        ctx.logger.info(\n          `Pipeline token id ${pipelineTokenResponse.id} created.`,\n        );\n\n        // Use the pipeline token to trigger the pipeline in the project\n        const pipelineTriggerResponse =\n          (await api.PipelineTriggerTokens.trigger(\n            projectId,\n            branch,\n            pipelineTokenResponse.token,\n            { variables },\n          )) as ExpandedPipelineSchema;\n\n        if (!pipelineTriggerResponse.id) {\n          ctx.logger.error('Failed to trigger pipeline.');\n          return;\n        }\n\n        ctx.logger.info(`Pipeline id ${pipelineTriggerResponse.id} triggered.`);\n\n        ctx.output('pipelineUrl', pipelineTriggerResponse.web_url);\n      } catch (error: any) {\n        if (error instanceof z.ZodError) {\n          // Handling Zod validation errors\n          throw new InputError(`Validation error: ${error.message}`, {\n            validationErrors: error.errors,\n          });\n        }\n        // Handling other errors\n        throw new InputError(\n          `Failed to trigger Pipeline: ${getErrorMessage(error)}`,\n        );\n      } finally {\n        // Delete the pipeline token if it was created\n        if (pipelineTokenResponse && pipelineTokenResponse.id) {\n          try {\n            await api.PipelineTriggerTokens.remove(\n              projectId,\n              pipelineTokenResponse.id,\n            );\n            ctx.logger.info(\n              `Deleted pipeline token ${pipelineTokenResponse.id}.`,\n            );\n          } catch (error: any) {\n            ctx.logger.error(\n              `Failed to delete pipeline token id ${pipelineTokenResponse.id}.`,\n            );\n          }\n        }\n      }\n    },\n  });\n};\n"],"names":["z","createTemplateAction","examples","commonGitlabConfig","parseRepoUrl","getClient","InputError","getErrorMessage"],"mappings":"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"}