{"version":3,"file":"gitlabIssueCreate.cjs.js","sources":["../../src/actions/gitlabIssueCreate.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport commonGitlabConfig, { IssueType } from '../commonGitlabConfig';\nimport { examples } from './gitlabIssueCreate.examples';\nimport { z } from 'zod';\nimport { checkEpicScope, convertDate, getClient, parseRepoUrl } from '../util';\nimport { CreateIssueOptions, IssueSchema } from '@gitbeaker/rest';\nimport { getErrorMessage } from './helpers';\n\nconst issueInputProperties = z.object({\n  projectId: z.number().describe('Project Id'),\n  title: z.string({ description: 'Title of the issue' }),\n  assignees: z\n    .array(z.number(), {\n      description: 'IDs of the users to assign the issue to.',\n    })\n    .optional(),\n  confidential: z.boolean({ description: 'Issue Confidentiality' }).optional(),\n  description: z.string().describe('Issue description').max(1048576).optional(),\n  createdAt: z\n    .string()\n    .describe('Creation date/time')\n    .regex(\n      /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/,\n      'Invalid date format. Use YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.SSSZ',\n    )\n    .optional(),\n  dueDate: z\n    .string()\n    .describe('Due date/time')\n    .regex(\n      /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/,\n      'Invalid date format. Use YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.SSSZ',\n    )\n    .optional(),\n  discussionToResolve: z\n    .string({\n      description:\n        'Id of a discussion to resolve. Use in combination with \"merge_request_to_resolve_discussions_of\"',\n    })\n    .optional(),\n  epicId: z\n    .number({ description: 'Id of the linked Epic' })\n    .min(0, 'Valid values should be equal or greater than zero')\n    .optional(),\n  labels: z.string({ description: 'Labels to apply' }).optional(),\n  issueType: z\n    .nativeEnum(IssueType, {\n      description: 'Type of the issue',\n    })\n    .optional(),\n  mergeRequestToResolveDiscussionsOf: z\n    .number({\n      description: 'IID of a merge request in which to resolve all issues',\n    })\n    .optional(),\n  milestoneId: z\n    .number({ description: 'Global ID of a milestone to assign the issue' })\n    .optional(),\n  weight: z\n    .number({ description: 'The issue weight' })\n    .min(0)\n    .refine(value => {\n      const isValid = value >= 0;\n      if (!isValid) {\n        return {\n          message: 'Valid values should be equal or greater than zero',\n        };\n      }\n      return isValid;\n    })\n    .optional(),\n});\n\nconst issueOutputProperties = z.object({\n  issueUrl: z.string({ description: 'Issue Url' }),\n  issueId: z.number({ description: 'Issue Id' }),\n  issueIid: z.number({ description: 'Issue Iid' }),\n});\n\n/**\n * Creates a `gitlab:issues:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabIssueAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:issues:create',\n    description: 'Creates a Gitlab issue.',\n    examples,\n    schema: {\n      input: commonGitlabConfig.merge(issueInputProperties),\n      output: issueOutputProperties,\n    },\n    async handler(ctx) {\n      try {\n        const {\n          repoUrl,\n          projectId,\n          title,\n          description = '',\n          confidential = false,\n          assignees = [],\n          createdAt = '',\n          dueDate,\n          discussionToResolve = '',\n          epicId,\n          labels = '',\n          issueType,\n          mergeRequestToResolveDiscussionsOf,\n          milestoneId,\n          weight,\n          token,\n        } = commonGitlabConfig.merge(issueInputProperties).parse(ctx.input);\n\n        const { host } = parseRepoUrl(repoUrl, integrations);\n        const api = getClient({ host, integrations, token });\n\n        let isEpicScoped = false;\n\n        if (epicId) {\n          isEpicScoped = await checkEpicScope(api, projectId, epicId);\n\n          if (isEpicScoped) {\n            ctx.logger.info('Epic is within Project Scope');\n          } else {\n            ctx.logger.warn(\n              'Chosen epic is not within the Project Scope. The issue will be created without an associated epic.',\n            );\n          }\n        }\n        const mappedCreatedAt = convertDate(\n          String(createdAt),\n          new Date().toISOString(),\n        );\n        const mappedDueDate = dueDate\n          ? convertDate(String(dueDate), new Date().toISOString())\n          : undefined;\n\n        const issueOptions: CreateIssueOptions = {\n          description,\n          assigneeIds: assignees,\n          confidential,\n          epicId: isEpicScoped ? epicId : undefined,\n          labels,\n          createdAt: mappedCreatedAt,\n          dueDate: mappedDueDate,\n          discussionToResolve,\n          issueType,\n          mergeRequestToResolveDiscussionsOf,\n          milestoneId,\n          weight,\n        };\n\n        const response = (await api.Issues.create(\n          projectId,\n          title,\n          issueOptions,\n        )) as IssueSchema;\n\n        ctx.output('issueId', response.id);\n        ctx.output('issueUrl', response.web_url);\n        ctx.output('issueIid', response.iid);\n      } catch (error: any) {\n        if (error instanceof z.ZodError) {\n          // Handling Zod validation errors\n          throw new InputError(`Validation error: ${error.message}`, {\n            validationErrors: error.errors,\n          });\n        }\n        // Handling other errors\n        throw new InputError(\n          `Failed to create GitLab issue: ${getErrorMessage(error)}`,\n        );\n      }\n    },\n  });\n};\n"],"names":["z","IssueType","createTemplateAction","examples","commonGitlabConfig","parseRepoUrl","getClient","checkEpicScope","convertDate","InputError","getErrorMessage"],"mappings":"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"}