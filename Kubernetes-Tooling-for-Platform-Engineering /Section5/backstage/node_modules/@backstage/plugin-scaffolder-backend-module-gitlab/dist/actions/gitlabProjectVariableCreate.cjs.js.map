{"version":3,"file":"gitlabProjectVariableCreate.cjs.js","sources":["../../src/actions/gitlabProjectVariableCreate.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { VariableType } from '@gitbeaker/rest';\nimport { z } from 'zod';\nimport commonGitlabConfig from '../commonGitlabConfig';\nimport { getClient, parseRepoUrl } from '../util';\nimport { examples } from './gitlabProjectVariableCreate.examples';\n\n/**\n * Creates a `gitlab:projectVariable:create` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const createGitlabProjectVariableAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:projectVariable:create',\n    examples,\n    schema: {\n      input: commonGitlabConfig.merge(\n        z.object({\n          projectId: z.union([z.number(), z.string()], {\n            description: 'Project ID',\n          }),\n          key: z\n            .string({\n              description:\n                'The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed',\n            })\n            .regex(/^[A-Za-z0-9_]{1,255}$/),\n          value: z.string({ description: 'The value of a variable' }),\n          variableType: z.string({\n            description: 'Variable Type (env_var or file)',\n          }),\n          variableProtected: z\n            .boolean({ description: 'Whether the variable is protected' })\n            .default(false)\n            .optional(),\n          masked: z\n            .boolean({ description: 'Whether the variable is masked' })\n            .default(false)\n            .optional(),\n          raw: z\n            .boolean({ description: 'Whether the variable is expandable' })\n            .default(false)\n            .optional(),\n          environmentScope: z\n            .string({ description: 'The environment_scope of the variable' })\n            .default('*')\n            .optional(),\n        }),\n      ),\n    },\n    async handler(ctx) {\n      const {\n        repoUrl,\n        projectId,\n        key,\n        value,\n        variableType,\n        variableProtected = false,\n        masked = false,\n        raw = false,\n        environmentScope = '*',\n        token,\n      } = ctx.input;\n\n      const { host } = parseRepoUrl(repoUrl, integrations);\n\n      const api = getClient({ host, integrations, token });\n\n      await api.ProjectVariables.create(projectId, key, value, {\n        variableType: variableType as VariableType,\n        protected: variableProtected,\n        masked,\n        raw,\n        environmentScope,\n      });\n    },\n  });\n};\n"],"names":["createTemplateAction","examples","commonGitlabConfig","z","parseRepoUrl","getClient"],"mappings":";;;;;;;;AA8Ba,MAAA,iCAAA,GAAoC,CAAC,OAE5C,KAAA;AACJ,EAAM,MAAA,EAAE,cAAiB,GAAA,OAAA;AACzB,EAAA,OAAOA,yCAAqB,CAAA;AAAA,IAC1B,EAAI,EAAA,+BAAA;AAAA,cACJC,6CAAA;AAAA,IACA,MAAQ,EAAA;AAAA,MACN,OAAOC,0BAAmB,CAAA,KAAA;AAAA,QACxBC,MAAE,MAAO,CAAA;AAAA,UACP,SAAA,EAAWA,KAAE,CAAA,KAAA,CAAM,CAACA,KAAA,CAAE,QAAU,EAAAA,KAAA,CAAE,MAAO,EAAC,CAAG,EAAA;AAAA,YAC3C,WAAa,EAAA;AAAA,WACd,CAAA;AAAA,UACD,GAAA,EAAKA,MACF,MAAO,CAAA;AAAA,YACN,WACE,EAAA;AAAA,WACH,CACA,CAAA,KAAA,CAAM,uBAAuB,CAAA;AAAA,UAChC,OAAOA,KAAE,CAAA,MAAA,CAAO,EAAE,WAAA,EAAa,2BAA2B,CAAA;AAAA,UAC1D,YAAA,EAAcA,MAAE,MAAO,CAAA;AAAA,YACrB,WAAa,EAAA;AAAA,WACd,CAAA;AAAA,UACD,iBAAA,EAAmBA,KAChB,CAAA,OAAA,CAAQ,EAAE,WAAA,EAAa,mCAAoC,EAAC,CAC5D,CAAA,OAAA,CAAQ,KAAK,CAAA,CACb,QAAS,EAAA;AAAA,UACZ,MAAA,EAAQA,KACL,CAAA,OAAA,CAAQ,EAAE,WAAA,EAAa,gCAAiC,EAAC,CACzD,CAAA,OAAA,CAAQ,KAAK,CAAA,CACb,QAAS,EAAA;AAAA,UACZ,GAAA,EAAKA,KACF,CAAA,OAAA,CAAQ,EAAE,WAAA,EAAa,oCAAqC,EAAC,CAC7D,CAAA,OAAA,CAAQ,KAAK,CAAA,CACb,QAAS,EAAA;AAAA,UACZ,gBAAA,EAAkBA,KACf,CAAA,MAAA,CAAO,EAAE,WAAA,EAAa,uCAAwC,EAAC,CAC/D,CAAA,OAAA,CAAQ,GAAG,CAAA,CACX,QAAS;AAAA,SACb;AAAA;AACH,KACF;AAAA,IACA,MAAM,QAAQ,GAAK,EAAA;AACjB,MAAM,MAAA;AAAA,QACJ,OAAA;AAAA,QACA,SAAA;AAAA,QACA,GAAA;AAAA,QACA,KAAA;AAAA,QACA,YAAA;AAAA,QACA,iBAAoB,GAAA,KAAA;AAAA,QACpB,MAAS,GAAA,KAAA;AAAA,QACT,GAAM,GAAA,KAAA;AAAA,QACN,gBAAmB,GAAA,GAAA;AAAA,QACnB;AAAA,UACE,GAAI,CAAA,KAAA;AAER,MAAA,MAAM,EAAE,IAAA,EAAS,GAAAC,iBAAA,CAAa,SAAS,YAAY,CAAA;AAEnD,MAAA,MAAM,MAAMC,cAAU,CAAA,EAAE,IAAM,EAAA,YAAA,EAAc,OAAO,CAAA;AAEnD,MAAA,MAAM,GAAI,CAAA,gBAAA,CAAiB,MAAO,CAAA,SAAA,EAAW,KAAK,KAAO,EAAA;AAAA,QACvD,YAAA;AAAA,QACA,SAAW,EAAA,iBAAA;AAAA,QACX,MAAA;AAAA,QACA,GAAA;AAAA,QACA;AAAA,OACD,CAAA;AAAA;AACH,GACD,CAAA;AACH;;;;"}