{"version":3,"file":"gitlabIssueEdit.cjs.js","sources":["../../src/actions/gitlabIssueEdit.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport commonGitlabConfig, {\n  IssueType,\n  IssueStateEvent,\n} from '../commonGitlabConfig';\nimport { examples } from './gitlabIssueEdit.examples';\nimport { z } from 'zod';\nimport { checkEpicScope, convertDate, getClient, parseRepoUrl } from '../util';\nimport { IssueSchema, EditIssueOptions } from '@gitbeaker/rest';\nimport { getErrorMessage } from './helpers';\n\nconst editIssueInputProperties = z.object({\n  projectId: z\n    .number()\n    .describe(\n      'The global ID or URL-encoded path of the project owned by the authenticated user.',\n    ),\n  issueIid: z.number().describe(\"The internal ID of a project's issue\"),\n  addLabels: z\n    .string({\n      description:\n        'Comma-separated label names to add to an issue. If a label does not already exist, this creates a new project label and assigns it to the issue.',\n    })\n    .optional(),\n  assignees: z\n    .array(z.number(), {\n      description: 'IDs of the users to assign the issue to.',\n    })\n    .optional(),\n  confidential: z\n    .boolean({ description: 'Updates an issue to be confidential.' })\n    .optional(),\n  description: z\n    .string()\n    .describe('The description of an issue. Limited to 1,048,576 characters.')\n    .max(1048576)\n    .optional(),\n  discussionLocked: z\n    .boolean({\n      description:\n        'Flag indicating if the issueâ€™s discussion is locked. If the discussion is locked only project members can add or edit comments.',\n    })\n    .optional(),\n  dueDate: z\n    .string()\n    .describe(\n      'The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11.',\n    )\n    .regex(/^\\d{4}-\\d{2}-\\d{2}$/, 'Invalid date format. Use YYYY-MM-DD')\n    .optional(),\n  epicId: z\n    .number({\n      description:\n        'ID of the epic to add the issue to. Valid values are greater than or equal to 0.',\n    })\n    .min(0, 'Valid values should be equal or greater than zero')\n    .optional(),\n  issueType: z\n    .nativeEnum(IssueType, {\n      description:\n        'Updates the type of issue. One of issue, incident, test_case or task.',\n    })\n    .optional(),\n  labels: z\n    .string({\n      description:\n        'Comma-separated label names for an issue. Set to an empty string to unassign all labels. If a label does not already exist, this creates a new project label and assigns it to the issue.',\n    })\n    .optional(),\n  milestoneId: z\n    .number({\n      description:\n        'The global ID of a milestone to assign the issue to. Set to 0 or provide an empty value to unassign a milestone',\n    })\n    .optional(),\n  removeLabels: z\n    .string({\n      description: 'Comma-separated label names to remove from an issue.',\n    })\n    .optional(),\n  stateEvent: z\n    .nativeEnum(IssueStateEvent, {\n      description:\n        'The state event of an issue. To close the issue, use close, and to reopen it, use reopen.',\n    })\n    .optional(),\n  title: z.string().describe('The title of an issue.').optional(),\n  updatedAt: z\n    .string()\n    .describe(\n      'When the issue was updated. Date time string, ISO 8601 formatted',\n    )\n    .regex(\n      /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?Z$/,\n      'Invalid date format. Use YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss.SSSZ',\n    )\n    .optional(),\n  weight: z\n    .number({ description: 'The issue weight' })\n    .min(0, 'Valid values should be equal or greater than zero')\n    .max(10, 'Valid values should be equal or less than 10')\n    .optional(),\n});\n\nconst editIssueOutputProperties = z.object({\n  issueUrl: z.string({ description: 'Issue WebUrl' }),\n  projectId: z.number({\n    description: 'The project id the issue belongs to WebUrl',\n  }),\n  issueId: z.number({ description: 'The issues Id' }),\n  issueIid: z.number({\n    description: \"The issues internal ID of a project's issue\",\n  }),\n  state: z.string({ description: 'The state event of an issue' }),\n  title: z.string({ description: 'The title of an issue.' }),\n  updatedAt: z.string({ description: 'The last updated time of the issue.' }),\n});\n\n/**\n * Creates a `gitlab:issue:edit` Scaffolder action.\n *\n * @param options - Templating configuration.\n * @public\n */\nexport const editGitlabIssueAction = (options: {\n  integrations: ScmIntegrationRegistry;\n}) => {\n  const { integrations } = options;\n  return createTemplateAction({\n    id: 'gitlab:issue:edit',\n    description: 'Edit a Gitlab issue.',\n    examples,\n    schema: {\n      input: commonGitlabConfig.merge(editIssueInputProperties),\n      output: editIssueOutputProperties,\n    },\n    async handler(ctx) {\n      try {\n        const {\n          repoUrl,\n          projectId,\n          title,\n          addLabels,\n          removeLabels,\n          issueIid,\n          description,\n          confidential = false,\n          assignees = [],\n          updatedAt = '',\n          dueDate,\n          discussionLocked = false,\n          epicId,\n          labels,\n          issueType,\n          milestoneId,\n          stateEvent,\n          weight,\n          token,\n        } = commonGitlabConfig.merge(editIssueInputProperties).parse(ctx.input);\n\n        const { host } = parseRepoUrl(repoUrl, integrations);\n        const api = getClient({ host, integrations, token });\n\n        let isEpicScoped = false;\n\n        if (epicId) {\n          isEpicScoped = await checkEpicScope(api, projectId, epicId);\n\n          if (isEpicScoped) {\n            ctx.logger.info('Epic is within Project Scope');\n          } else {\n            ctx.logger.warn(\n              'Chosen epic is not within the Project Scope. The issue will be created without an associated epic.',\n            );\n          }\n        }\n\n        const mappedUpdatedAt = convertDate(\n          String(updatedAt),\n          new Date().toISOString(),\n        );\n\n        const editIssueOptions: EditIssueOptions = {\n          addLabels,\n          assigneeIds: assignees,\n          confidential,\n          description,\n          discussionLocked,\n          dueDate,\n          epicId: isEpicScoped ? epicId : undefined,\n          issueType,\n          labels,\n          milestoneId,\n          removeLabels,\n          stateEvent,\n          title,\n          updatedAt: mappedUpdatedAt,\n          weight,\n        };\n\n        const response = (await api.Issues.edit(\n          projectId,\n          issueIid,\n          editIssueOptions,\n        )) as IssueSchema;\n\n        ctx.output('issueId', response.id);\n        ctx.output('projectId', response.project_id);\n        ctx.output('issueUrl', response.web_url);\n        ctx.output('issueIid', response.iid);\n        ctx.output('title', response.title);\n        ctx.output('state', response.state);\n        ctx.output('updatedAt', response.updated_at);\n      } catch (error: any) {\n        if (error instanceof z.ZodError) {\n          // Handling Zod validation errors\n          throw new InputError(`Validation error: ${error.message}`, {\n            validationErrors: error.errors,\n          });\n        }\n        // Handling other errors\n        throw new InputError(\n          `Failed to edit/modify GitLab issue: ${getErrorMessage(error)}`,\n        );\n      }\n    },\n  });\n};\n"],"names":["z","IssueType","IssueStateEvent","createTemplateAction","examples","commonGitlabConfig","parseRepoUrl","getClient","checkEpicScope","convertDate","InputError","getErrorMessage"],"mappings":"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"}