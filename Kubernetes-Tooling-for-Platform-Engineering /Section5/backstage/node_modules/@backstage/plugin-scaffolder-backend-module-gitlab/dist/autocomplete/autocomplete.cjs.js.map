{"version":3,"file":"autocomplete.cjs.js","sources":["../../src/autocomplete/autocomplete.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { getClient } from '../util';\n\nexport function createHandleAutocompleteRequest(options: {\n  integrations: ScmIntegrationRegistry;\n}) {\n  return async function handleAutocompleteRequest({\n    resource,\n    token,\n    context,\n  }: {\n    resource: string;\n    token: string;\n    context: Record<string, string>;\n  }): Promise<{\n    results: {\n      title?: string;\n      id: string;\n    }[];\n  }> {\n    const { integrations } = options;\n    const client = getClient({\n      host: context.host ?? 'gitlab.com',\n      integrations,\n      token,\n    });\n\n    switch (resource) {\n      case 'groups': {\n        let groups: any[] = [];\n        let page = 1;\n        const perPage = 100;\n        let response = [];\n        let continueFetch = true;\n        while (continueFetch) {\n          response = await client.Groups.all({\n            pagination: 'offset',\n            page,\n            perPage,\n          });\n\n          groups = groups.concat(response);\n          if (response.length < perPage) continueFetch = false;\n          page++;\n        }\n\n        const result: {\n          results: {\n            title: string;\n            id: string;\n          }[];\n        } = {\n          results: groups.map(group => ({\n            title: group.full_path,\n            id: group.id.toString(),\n          })),\n        };\n        // append also user context\n        const user = await client.Users.showCurrentUser();\n        result.results.push({\n          title: user.username,\n          id: user.id.toString(),\n        });\n\n        return result;\n      }\n      case 'repositories': {\n        if (!context.id)\n          throw new InputError('Missing groupId and userId context parameter');\n\n        let response;\n        if (\n          context.id === (await client.Users.showCurrentUser())?.id.toString()\n        ) {\n          response = await client.Users.allProjects(context.id);\n        } else {\n          response = await client.Groups.allProjects(context.id);\n        }\n\n        return {\n          results: response.map(project => ({\n            title: project.name.trim(),\n            id: project.id.toString(),\n          })),\n        };\n      }\n      default:\n        throw new InputError(`Invalid resource: ${resource}`);\n    }\n  };\n}\n"],"names":["getClient","InputError"],"mappings":";;;;;AAoBO,SAAS,gCAAgC,OAE7C,EAAA;AACD,EAAA,OAAO,eAAe,yBAA0B,CAAA;AAAA,IAC9C,QAAA;AAAA,IACA,KAAA;AAAA,IACA;AAAA,GAUC,EAAA;AACD,IAAM,MAAA,EAAE,cAAiB,GAAA,OAAA;AACzB,IAAA,MAAM,SAASA,cAAU,CAAA;AAAA,MACvB,IAAA,EAAM,QAAQ,IAAQ,IAAA,YAAA;AAAA,MACtB,YAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAA,QAAQ,QAAU;AAAA,MAChB,KAAK,QAAU,EAAA;AACb,QAAA,IAAI,SAAgB,EAAC;AACrB,QAAA,IAAI,IAAO,GAAA,CAAA;AACX,QAAA,MAAM,OAAU,GAAA,GAAA;AAChB,QAAA,IAAI,WAAW,EAAC;AAChB,QAAA,IAAI,aAAgB,GAAA,IAAA;AACpB,QAAA,OAAO,aAAe,EAAA;AACpB,UAAW,QAAA,GAAA,MAAM,MAAO,CAAA,MAAA,CAAO,GAAI,CAAA;AAAA,YACjC,UAAY,EAAA,QAAA;AAAA,YACZ,IAAA;AAAA,YACA;AAAA,WACD,CAAA;AAED,UAAS,MAAA,GAAA,MAAA,CAAO,OAAO,QAAQ,CAAA;AAC/B,UAAI,IAAA,QAAA,CAAS,MAAS,GAAA,OAAA,EAAyB,aAAA,GAAA,KAAA;AAC/C,UAAA,IAAA,EAAA;AAAA;AAGF,QAAA,MAAM,MAKF,GAAA;AAAA,UACF,OAAA,EAAS,MAAO,CAAA,GAAA,CAAI,CAAU,KAAA,MAAA;AAAA,YAC5B,OAAO,KAAM,CAAA,SAAA;AAAA,YACb,EAAA,EAAI,KAAM,CAAA,EAAA,CAAG,QAAS;AAAA,WACtB,CAAA;AAAA,SACJ;AAEA,QAAA,MAAM,IAAO,GAAA,MAAM,MAAO,CAAA,KAAA,CAAM,eAAgB,EAAA;AAChD,QAAA,MAAA,CAAO,QAAQ,IAAK,CAAA;AAAA,UAClB,OAAO,IAAK,CAAA,QAAA;AAAA,UACZ,EAAA,EAAI,IAAK,CAAA,EAAA,CAAG,QAAS;AAAA,SACtB,CAAA;AAED,QAAO,OAAA,MAAA;AAAA;AACT,MACA,KAAK,cAAgB,EAAA;AACnB,QAAA,IAAI,CAAC,OAAQ,CAAA,EAAA;AACX,UAAM,MAAA,IAAIC,kBAAW,8CAA8C,CAAA;AAErE,QAAI,IAAA,QAAA;AACJ,QACE,IAAA,OAAA,CAAQ,QAAQ,MAAM,MAAA,CAAO,MAAM,eAAgB,EAAA,GAAI,EAAG,CAAA,QAAA,EAC1D,EAAA;AACA,UAAA,QAAA,GAAW,MAAM,MAAA,CAAO,KAAM,CAAA,WAAA,CAAY,QAAQ,EAAE,CAAA;AAAA,SAC/C,MAAA;AACL,UAAA,QAAA,GAAW,MAAM,MAAA,CAAO,MAAO,CAAA,WAAA,CAAY,QAAQ,EAAE,CAAA;AAAA;AAGvD,QAAO,OAAA;AAAA,UACL,OAAA,EAAS,QAAS,CAAA,GAAA,CAAI,CAAY,OAAA,MAAA;AAAA,YAChC,KAAA,EAAO,OAAQ,CAAA,IAAA,CAAK,IAAK,EAAA;AAAA,YACzB,EAAA,EAAI,OAAQ,CAAA,EAAA,CAAG,QAAS;AAAA,WACxB,CAAA;AAAA,SACJ;AAAA;AACF,MACA;AACE,QAAA,MAAM,IAAIA,iBAAA,CAAW,CAAqB,kBAAA,EAAA,QAAQ,CAAE,CAAA,CAAA;AAAA;AACxD,GACF;AACF;;;;"}