/// <reference types="react" />
import * as _backstage_plugin_search_react from '@backstage/plugin-search-react';
import { SearchBarBaseProps } from '@backstage/plugin-search-react';
import * as React from 'react';
import React__default, { ReactNode } from 'react';
import { SearchResultSet } from '@backstage/plugin-search-common';
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { IconComponent } from '@backstage/core-plugin-api';

/**
 * Props for {@link HomePageSearchBar}.
 *
 * @public
 */
type HomePageSearchBarProps = Partial<Omit<SearchBarBaseProps, 'onChange' | 'onSubmit'>>;

/**
 * @public
 */
interface SearchModalChildrenProps {
    /**
     * A function that should be invoked when navigating away from the modal.
     */
    toggleModal: () => void;
    /**
     * Ability to provide custom components to render the result items
     */
    resultItemComponents?: ReactNode | ((resultSet: SearchResultSet) => JSX.Element);
}
/**
 * @public
 */
interface SearchModalProps {
    /**
     * If true, it renders the modal.
     */
    open?: boolean;
    /**
     * This is supposed to be used together with the open prop.
     * If `hidden` is true, it hides the modal.
     * If `open` is false, the value of `hidden` has no effect on the modal.
     * Use `open` for controlling whether the modal should be rendered or not.
     */
    hidden?: boolean;
    /**
     * a function invoked when a search item is pressed or when the dialog
     * should be closed.
     */
    toggleModal: () => void;
    /**
     * A function that returns custom content to render in the search modal in
     * place of the default.
     */
    children?: (props: SearchModalChildrenProps) => JSX.Element;
    /**
     * Optional ability to pass in result item component renderers.
     */
    resultItemComponents?: SearchModalChildrenProps['resultItemComponents'];
}
/**
 * @public
 */
declare const SearchModal: (props: SearchModalProps) => React__default.JSX.Element;

/**
 * The state of the search modal, as well as functions for changing the modal's
 * visibility.
 *
 * @public
 */
type SearchModalValue = {
    state: {
        hidden: boolean;
        open: boolean;
    };
    toggleModal: () => void;
    setOpen: (open: boolean) => void;
};
/**
 * Props for the SearchModalProvider.
 * @public
 */
type SearchModalProviderProps = {
    /**
     * Children which should have access to the SearchModal context and the
     * associated useSearchModal() hook.
     */
    children: ReactNode;
    /**
     * Pass true if the modal should be rendered initially.
     */
    showInitially?: boolean;
};
/**
 * A context provider responsible for storing and managing state related to the
 * search modal.
 *
 * @remarks
 * If you need to control visibility of the search toggle outside of the modal
 * itself, you can optionally place this higher up in the react tree where your
 * custom code and the search modal share the same context.
 *
 * @example
 * ```tsx
 * import {
 *   SearchModalProvider,
 *   SidebarSearchModal,
 * } from '@backstage/plugin-search';
 *
 * // ...
 *
 * <SearchModalProvider>
 *   <KeyboardShortcutSearchToggler />
 *   <SidebarSearchModal>
 *     {({ toggleModal }) => <SearchModal toggleModal={toggleModal} />}
 *   </SidebarSearchModal>
 * </SearchModalProvider>
 * ```
 *
 * @public
 */
declare const SearchModalProvider: (props: SearchModalProviderProps) => React__default.JSX.Element;
/**
 * Use this hook to manage the state of {@link SearchModal}
 * and change its visibility. Monitors route changes setting the hidden state
 * to avoid having to call toggleModal on every result click.
 *
 * @public
 *
 * @param initialState - pass `true` to make the modal initially visible
 * @returns an object containing the state of the modal together with
 * functions for changing the visibility of the modal.
 */
declare function useSearchModal(initialState?: boolean): SearchModalValue;

/**
 * @public
 */
declare const SearchPage$1: () => React__default.JSX.Element;

/**
 * @public
 */
type SearchTypeAccordionProps = {
    name: string;
    types: Array<{
        value: string;
        name: string;
        icon: JSX.Element;
    }>;
    defaultValue?: string;
    showCounts?: boolean;
};

/**
 * @public
 */
type SearchTypeTabsProps = {
    types: Array<{
        value: string;
        name: string;
    }>;
    defaultValue?: string;
};

/**
 * Props for {@link SearchType}.
 *
 * @public
 */
type SearchTypeProps = {
    className?: string;
    name: string;
    values?: string[];
    defaultValue?: string[] | string | null;
};
/**
 * @public
 */
declare const SearchType: {
    (props: SearchTypeProps): React__default.JSX.Element;
    /**
     * A control surface for the search query's "types" property, displayed as a
     * single-select collapsible accordion suitable for use in faceted search UIs.
     * @public
     */
    Accordion(props: SearchTypeAccordionProps): React__default.JSX.Element;
    /**
     * A control surface for the search query's "types" property, displayed as a
     * tabs suitable for use in faceted search UIs.
     * @public
     */
    Tabs(props: SearchTypeTabsProps): React__default.JSX.Element;
};

/**
 * Props for {@link SidebarSearch}.
 *
 * @public
 */
type SidebarSearchProps = {
    icon?: IconComponent;
};
/**
 * @public
 */
declare const SidebarSearch: (props: SidebarSearchProps) => React__default.JSX.Element;

/**
 * Props for {@link SidebarSearchModal}.
 *
 * @public
 */
type SidebarSearchModalProps = Pick<SearchModalProps, 'children' | 'resultItemComponents'> & {
    icon?: IconComponent;
};

/**
 * @public
 */
declare const searchPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    root: _backstage_core_plugin_api.RouteRef<undefined>;
}, {}>;
/**
 * @public
 */
declare const SearchPage: () => React.JSX.Element;
/**
 * @public
 */
declare const SidebarSearchModal: (props: SidebarSearchModalProps) => JSX.Element | null;
/**
 * @public
 */
declare const HomePageSearchBar: (props: Partial<Omit<_backstage_plugin_search_react.SearchBarBaseProps, "onChange" | "onSubmit">>) => React.JSX.Element;

export { HomePageSearchBar, type HomePageSearchBarProps, SearchPage$1 as Router, SearchModal, type SearchModalChildrenProps, type SearchModalProps, SearchModalProvider, type SearchModalProviderProps, type SearchModalValue, SearchPage, SearchType, type SearchTypeAccordionProps, type SearchTypeProps, type SearchTypeTabsProps, SidebarSearch, SidebarSearchModal, type SidebarSearchModalProps, type SidebarSearchProps, searchPlugin as plugin, searchPlugin, useSearchModal };
