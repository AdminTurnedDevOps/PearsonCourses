{"version":3,"file":"SearchType.esm.js","sources":["../../../src/components/SearchType/SearchType.tsx"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { ChangeEvent } from 'react';\nimport useEffectOnce from 'react-use/esm/useEffectOnce';\nimport {\n  SearchTypeAccordion,\n  SearchTypeAccordionProps,\n} from './SearchType.Accordion';\nimport { SearchTypeTabs, SearchTypeTabsProps } from './SearchType.Tabs';\nimport { useSearch } from '@backstage/plugin-search-react';\n\nconst useStyles = makeStyles(theme => ({\n  label: {\n    textTransform: 'capitalize',\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginTop: theme.spacing(1),\n  },\n  chip: {\n    margin: 2,\n  },\n}));\n\n/**\n * Props for {@link SearchType}.\n *\n * @public\n */\nexport type SearchTypeProps = {\n  className?: string;\n  name: string;\n  values?: string[];\n  defaultValue?: string[] | string | null;\n};\n\n/**\n * @public\n */\nconst SearchType = (props: SearchTypeProps) => {\n  const { className, defaultValue, name, values = [] } = props;\n  const classes = useStyles();\n  const { types, setTypes } = useSearch();\n\n  useEffectOnce(() => {\n    if (!types.length) {\n      if (defaultValue && Array.isArray(defaultValue)) {\n        setTypes(defaultValue);\n      } else if (defaultValue) {\n        setTypes([defaultValue]);\n      }\n    }\n  });\n\n  const handleChange = (e: ChangeEvent<{ value: unknown }>) => {\n    const value = e.target.value as string[];\n    setTypes(value as string[]);\n  };\n\n  return (\n    <FormControl\n      className={className}\n      variant=\"filled\"\n      fullWidth\n      data-testid=\"search-typefilter-next\"\n    >\n      <InputLabel className={classes.label} margin=\"dense\">\n        {name}\n      </InputLabel>\n      <Select\n        multiple\n        variant=\"outlined\"\n        value={types}\n        onChange={handleChange}\n        placeholder=\"All Results\"\n        renderValue={selected => (\n          <div className={classes.chips}>\n            {(selected as string[]).map(value => (\n              <Chip\n                key={value}\n                label={value}\n                className={classes.chip}\n                size=\"small\"\n              />\n            ))}\n          </div>\n        )}\n      >\n        {values.map((value: string) => (\n          <MenuItem key={value} value={value}>\n            <Checkbox checked={types.indexOf(value) > -1} />\n            <ListItemText primary={value} />\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\n/**\n * A control surface for the search query's \"types\" property, displayed as a\n * single-select collapsible accordion suitable for use in faceted search UIs.\n * @public\n */\nSearchType.Accordion = (props: SearchTypeAccordionProps) => {\n  return <SearchTypeAccordion {...props} />;\n};\n\n/**\n * A control surface for the search query's \"types\" property, displayed as a\n * tabs suitable for use in faceted search UIs.\n * @public\n */\nSearchType.Tabs = (props: SearchTypeTabsProps) => {\n  return <SearchTypeTabs {...props} />;\n};\n\nexport { SearchType };\nexport type { SearchTypeAccordionProps, SearchTypeTabsProps };\n"],"names":[],"mappings":"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"}