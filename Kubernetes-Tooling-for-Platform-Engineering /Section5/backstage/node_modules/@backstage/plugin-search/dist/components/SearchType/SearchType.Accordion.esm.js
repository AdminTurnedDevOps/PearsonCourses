import React, { useState, useEffect, Fragment, cloneElement } from 'react';
import { useApi } from '@backstage/core-plugin-api';
import { useSearch, searchApiRef } from '@backstage/plugin-search-react';
import Accordion from '@material-ui/core/Accordion';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import Box from '@material-ui/core/Box';
import Divider from '@material-ui/core/Divider';
import List from '@material-ui/core/List';
import ListItem from '@material-ui/core/ListItem';
import ListItemIcon from '@material-ui/core/ListItemIcon';
import ListItemText from '@material-ui/core/ListItemText';
import { makeStyles } from '@material-ui/core/styles';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Typography from '@material-ui/core/Typography';
import AllIcon from '@material-ui/icons/FontDownload';
import useAsync from 'react-use/esm/useAsync';

const useStyles = makeStyles((theme) => ({
  icon: {
    color: theme.palette.text.primary
  },
  list: {
    width: "100%"
  },
  listItemIcon: {
    width: "24px",
    height: "24px"
  },
  accordion: {
    backgroundColor: theme.palette.background.paper
  },
  accordionSummary: {
    minHeight: "auto",
    "&.Mui-expanded": {
      minHeight: "auto"
    }
  },
  accordionSummaryContent: {
    margin: theme.spacing(2, 0),
    "&.Mui-expanded": {
      margin: theme.spacing(2, 0)
    }
  },
  accordionDetails: {
    padding: theme.spacing(0, 0, 1)
  }
}));
const SearchTypeAccordion = (props) => {
  const classes = useStyles();
  const { filters, setPageCursor, setTypes, term, types } = useSearch();
  const searchApi = useApi(searchApiRef);
  const [expanded, setExpanded] = useState(true);
  const { defaultValue, name, showCounts, types: givenTypes } = props;
  const toggleExpanded = () => setExpanded((prevState) => !prevState);
  const handleClick = (type) => {
    return () => {
      setTypes(type !== "" ? [type] : []);
      setPageCursor(void 0);
    };
  };
  useEffect(() => {
    if (defaultValue) {
      setTypes([defaultValue]);
    }
  }, []);
  const definedTypes = [
    {
      value: "",
      name: "All",
      icon: /* @__PURE__ */ React.createElement(AllIcon, null)
    },
    ...givenTypes
  ];
  const selected = types[0] || "";
  const { value: resultCounts } = useAsync(async () => {
    if (!showCounts) {
      return {};
    }
    const counts = await Promise.all(
      definedTypes.map((t) => t.value).map(async (type) => {
        const { numberOfResults } = await searchApi.query({
          term,
          types: type ? [type] : [],
          filters: types.includes(type) || !types.length && !type ? filters : {},
          pageLimit: 0
        });
        return [
          type,
          numberOfResults !== void 0 ? `${numberOfResults >= 1e4 ? `>10000` : numberOfResults} results` : " -- "
        ];
      })
    );
    return Object.fromEntries(counts);
  }, [filters, showCounts, term, types]);
  return /* @__PURE__ */ React.createElement(Box, null, /* @__PURE__ */ React.createElement(Typography, { variant: "body2", component: "h2" }, name), /* @__PURE__ */ React.createElement(
    Accordion,
    {
      className: classes.accordion,
      expanded,
      onChange: toggleExpanded
    },
    /* @__PURE__ */ React.createElement(
      AccordionSummary,
      {
        classes: {
          root: classes.accordionSummary,
          content: classes.accordionSummaryContent
        },
        expandIcon: /* @__PURE__ */ React.createElement(ExpandMoreIcon, { className: classes.icon }),
        IconButtonProps: { size: "small" }
      },
      expanded ? "Collapse" : definedTypes.filter((t) => t.value === selected)[0].name
    ),
    /* @__PURE__ */ React.createElement(AccordionDetails, { classes: { root: classes.accordionDetails } }, /* @__PURE__ */ React.createElement(
      List,
      {
        className: classes.list,
        component: "nav",
        "aria-label": "filter by type",
        disablePadding: true,
        dense: true
      },
      definedTypes.map((type) => /* @__PURE__ */ React.createElement(Fragment, { key: type.value }, /* @__PURE__ */ React.createElement(Divider, null), /* @__PURE__ */ React.createElement(
        ListItem,
        {
          selected: types[0] === type.value || types.length === 0 && type.value === "",
          onClick: handleClick(type.value),
          button: true
        },
        /* @__PURE__ */ React.createElement(ListItemIcon, null, cloneElement(type.icon, {
          className: classes.listItemIcon
        })),
        /* @__PURE__ */ React.createElement(
          ListItemText,
          {
            primary: type.name,
            secondary: resultCounts && resultCounts[type.value]
          }
        )
      )))
    ))
  ));
};

export { SearchTypeAccordion };
//# sourceMappingURL=SearchType.Accordion.esm.js.map
