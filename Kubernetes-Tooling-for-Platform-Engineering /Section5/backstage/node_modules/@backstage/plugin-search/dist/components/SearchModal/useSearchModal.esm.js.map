{"version":3,"file":"useSearchModal.esm.js","sources":["../../../src/components/SearchModal/useSearchModal.tsx"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactNode, useCallback, useContext, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n  createVersionedContext,\n  createVersionedValueMap,\n} from '@backstage/version-bridge';\nimport useUpdateEffect from 'react-use/esm/useUpdateEffect';\n\n/**\n * The state of the search modal, as well as functions for changing the modal's\n * visibility.\n *\n * @public\n */\nexport type SearchModalValue = {\n  state: {\n    hidden: boolean;\n    open: boolean;\n  };\n  toggleModal: () => void;\n  setOpen: (open: boolean) => void;\n};\n\nconst SearchModalContext = createVersionedContext<{\n  1: SearchModalValue | undefined;\n}>('search-modal-context');\n\n/**\n * Props for the SearchModalProvider.\n * @public\n */\nexport type SearchModalProviderProps = {\n  /**\n   * Children which should have access to the SearchModal context and the\n   * associated useSearchModal() hook.\n   */\n  children: ReactNode;\n\n  /**\n   * Pass true if the modal should be rendered initially.\n   */\n  showInitially?: boolean;\n};\n\n/**\n * A context provider responsible for storing and managing state related to the\n * search modal.\n *\n * @remarks\n * If you need to control visibility of the search toggle outside of the modal\n * itself, you can optionally place this higher up in the react tree where your\n * custom code and the search modal share the same context.\n *\n * @example\n * ```tsx\n * import {\n *   SearchModalProvider,\n *   SidebarSearchModal,\n * } from '@backstage/plugin-search';\n *\n * // ...\n *\n * <SearchModalProvider>\n *   <KeyboardShortcutSearchToggler />\n *   <SidebarSearchModal>\n *     {({ toggleModal }) => <SearchModal toggleModal={toggleModal} />}\n *   </SidebarSearchModal>\n * </SearchModalProvider>\n * ```\n *\n * @public\n */\nexport const SearchModalProvider = (props: SearchModalProviderProps) => {\n  const value = useSearchModal(props.showInitially);\n  const versionedValue = createVersionedValueMap({ 1: value });\n  return (\n    <SearchModalContext.Provider value={versionedValue}>\n      {props.children}\n    </SearchModalContext.Provider>\n  );\n};\n\n/**\n * Use this hook to manage the state of {@link SearchModal}\n * and change its visibility. Monitors route changes setting the hidden state\n * to avoid having to call toggleModal on every result click.\n *\n * @public\n *\n * @param initialState - pass `true` to make the modal initially visible\n * @returns an object containing the state of the modal together with\n * functions for changing the visibility of the modal.\n */\nexport function useSearchModal(initialState = false) {\n  const [state, setState] = useState({\n    hidden: !initialState,\n    open: initialState,\n  });\n\n  const toggleModal = useCallback(\n    () =>\n      setState(prevState => ({\n        open: true,\n        hidden: !prevState.hidden,\n      })),\n    [],\n  );\n\n  const setOpen = useCallback(\n    (open: boolean) =>\n      setState(prevState => ({\n        open: prevState.open || open,\n        hidden: !open,\n      })),\n    [],\n  );\n\n  // Check for any existing parent context.\n  const parentContext = useContext(SearchModalContext);\n  const parentContextValue = parentContext?.atVersion(1);\n  const isParentContextPresent = !!parentContextValue?.state;\n\n  // Monitor route changes to automatically hide the modal.\n  const location = useLocation();\n  const locationKey = `${location.pathname}${location.search}${location.hash}`;\n  useUpdateEffect(() => {\n    setState(prevState => ({\n      open: prevState.open,\n      hidden: true,\n    }));\n  }, [locationKey]);\n\n  // Inherit from parent context, if set.\n  return isParentContextPresent\n    ? parentContextValue\n    : { state, toggleModal, setOpen };\n}\n"],"names":[],"mappings":";;;;;AAuCA,MAAM,kBAAA,GAAqB,uBAExB,sBAAsB,CAAA;AA+CZ,MAAA,mBAAA,GAAsB,CAAC,KAAoC,KAAA;AACtE,EAAM,MAAA,KAAA,GAAQ,cAAe,CAAA,KAAA,CAAM,aAAa,CAAA;AAChD,EAAA,MAAM,cAAiB,GAAA,uBAAA,CAAwB,EAAE,CAAA,EAAG,OAAO,CAAA;AAC3D,EAAA,2CACG,kBAAmB,CAAA,QAAA,EAAnB,EAA4B,KAAO,EAAA,cAAA,EAAA,EACjC,MAAM,QACT,CAAA;AAEJ;AAagB,SAAA,cAAA,CAAe,eAAe,KAAO,EAAA;AACnD,EAAA,MAAM,CAAC,KAAA,EAAO,QAAQ,CAAA,GAAI,QAAS,CAAA;AAAA,IACjC,QAAQ,CAAC,YAAA;AAAA,IACT,IAAM,EAAA;AAAA,GACP,CAAA;AAED,EAAA,MAAM,WAAc,GAAA,WAAA;AAAA,IAClB,MACE,SAAS,CAAc,SAAA,MAAA;AAAA,MACrB,IAAM,EAAA,IAAA;AAAA,MACN,MAAA,EAAQ,CAAC,SAAU,CAAA;AAAA,KACnB,CAAA,CAAA;AAAA,IACJ;AAAC,GACH;AAEA,EAAA,MAAM,OAAU,GAAA,WAAA;AAAA,IACd,CAAC,IACC,KAAA,QAAA,CAAS,CAAc,SAAA,MAAA;AAAA,MACrB,IAAA,EAAM,UAAU,IAAQ,IAAA,IAAA;AAAA,MACxB,QAAQ,CAAC;AAAA,KACT,CAAA,CAAA;AAAA,IACJ;AAAC,GACH;AAGA,EAAM,MAAA,aAAA,GAAgB,WAAW,kBAAkB,CAAA;AACnD,EAAM,MAAA,kBAAA,GAAqB,aAAe,EAAA,SAAA,CAAU,CAAC,CAAA;AACrD,EAAM,MAAA,sBAAA,GAAyB,CAAC,CAAC,kBAAoB,EAAA,KAAA;AAGrD,EAAA,MAAM,WAAW,WAAY,EAAA;AAC7B,EAAM,MAAA,WAAA,GAAc,GAAG,QAAS,CAAA,QAAQ,GAAG,QAAS,CAAA,MAAM,CAAG,EAAA,QAAA,CAAS,IAAI,CAAA,CAAA;AAC1E,EAAA,eAAA,CAAgB,MAAM;AACpB,IAAA,QAAA,CAAS,CAAc,SAAA,MAAA;AAAA,MACrB,MAAM,SAAU,CAAA,IAAA;AAAA,MAChB,MAAQ,EAAA;AAAA,KACR,CAAA,CAAA;AAAA,GACJ,EAAG,CAAC,WAAW,CAAC,CAAA;AAGhB,EAAA,OAAO,sBACH,GAAA,kBAAA,GACA,EAAE,KAAA,EAAO,aAAa,OAAQ,EAAA;AACpC;;;;"}