import React, { useState, useCallback, useContext } from 'react';
import { useLocation } from 'react-router-dom';
import { createVersionedContext, createVersionedValueMap } from '@backstage/version-bridge';
import useUpdateEffect from 'react-use/esm/useUpdateEffect';

const SearchModalContext = createVersionedContext("search-modal-context");
const SearchModalProvider = (props) => {
  const value = useSearchModal(props.showInitially);
  const versionedValue = createVersionedValueMap({ 1: value });
  return /* @__PURE__ */ React.createElement(SearchModalContext.Provider, { value: versionedValue }, props.children);
};
function useSearchModal(initialState = false) {
  const [state, setState] = useState({
    hidden: !initialState,
    open: initialState
  });
  const toggleModal = useCallback(
    () => setState((prevState) => ({
      open: true,
      hidden: !prevState.hidden
    })),
    []
  );
  const setOpen = useCallback(
    (open) => setState((prevState) => ({
      open: prevState.open || open,
      hidden: !open
    })),
    []
  );
  const parentContext = useContext(SearchModalContext);
  const parentContextValue = parentContext?.atVersion(1);
  const isParentContextPresent = !!parentContextValue?.state;
  const location = useLocation();
  const locationKey = `${location.pathname}${location.search}${location.hash}`;
  useUpdateEffect(() => {
    setState((prevState) => ({
      open: prevState.open,
      hidden: true
    }));
  }, [locationKey]);
  return isParentContextPresent ? parentContextValue : { state, toggleModal, setOpen };
}

export { SearchModalProvider, useSearchModal };
//# sourceMappingURL=useSearchModal.esm.js.map
