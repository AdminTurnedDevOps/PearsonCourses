import React, { useEffect } from 'react';
import usePrevious from 'react-use/esm/usePrevious';
import qs from 'qs';
import { useOutlet, useLocation } from 'react-router-dom';
import { SearchContextProvider, useSearch } from '@backstage/plugin-search-react';

const UrlUpdater = () => {
  const location = useLocation();
  const {
    term,
    setTerm,
    types,
    setTypes,
    pageCursor,
    setPageCursor,
    filters,
    setFilters
  } = useSearch();
  const prevQueryParams = usePrevious(location.search);
  useEffect(() => {
    if (location.search === prevQueryParams) {
      return;
    }
    const query = qs.parse(location.search.substring(1), { arrayLimit: 0 }) || {};
    if (query.filters) {
      setFilters(query.filters);
    }
    if (query.query) {
      setTerm(query.query);
    }
    if (query.pageCursor) {
      setPageCursor(query.pageCursor);
    }
    if (query.types) {
      setTypes(query.types);
    }
  }, [prevQueryParams, location, setTerm, setTypes, setPageCursor, setFilters]);
  useEffect(() => {
    const newParams = qs.stringify(
      {
        query: term,
        types,
        pageCursor,
        filters
      },
      { arrayFormat: "brackets" }
    );
    const newUrl = `${window.location.pathname}?${newParams}`;
    window.history.replaceState(null, document.title, newUrl);
  }, [term, types, pageCursor, filters]);
  return null;
};
const SearchPage = () => {
  const outlet = useOutlet();
  return /* @__PURE__ */ React.createElement(SearchContextProvider, null, /* @__PURE__ */ React.createElement(UrlUpdater, null), outlet);
};

export { SearchPage, UrlUpdater };
//# sourceMappingURL=SearchPage.esm.js.map
