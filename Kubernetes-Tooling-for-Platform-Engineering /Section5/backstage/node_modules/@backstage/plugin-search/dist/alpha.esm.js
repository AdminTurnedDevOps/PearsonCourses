import React from 'react';
import Grid from '@material-ui/core/Grid';
import Paper from '@material-ui/core/Paper';
import { makeStyles } from '@material-ui/core/styles';
import SearchIcon from '@material-ui/icons/Search';
import { useSidebarPinState, Page, Header, Content, CatalogIcon, DocsIcon } from '@backstage/core-components';
import { createApiFactory, discoveryApiRef, fetchApiRef, useApi } from '@backstage/core-plugin-api';
import { ApiBlueprint, PageBlueprint, createExtensionInput, NavItemBlueprint, createFrontendPlugin } from '@backstage/frontend-plugin-api';
import { catalogApiRef, CATALOG_FILTER_EXISTS } from '@backstage/plugin-catalog-react';
import { searchApiRef, SearchContextProvider, useSearch, SearchBar, SearchFilter, SearchPagination, SearchResult, SearchResultPager, DefaultResultListItem } from '@backstage/plugin-search-react';
import { SearchResultListItemBlueprint } from '@backstage/plugin-search-react/alpha';
import { rootRouteRef } from './plugin.esm.js';
import { SearchClient } from './apis.esm.js';
import { SearchType } from './components/SearchType/SearchType.esm.js';
import { UrlUpdater } from './components/SearchPage/SearchPage.esm.js';
import { convertLegacyRouteRef, compatWrapper, convertLegacyRouteRefs } from '@backstage/core-compat-api';

const searchApi = ApiBlueprint.make({
  params: {
    factory: createApiFactory({
      api: searchApiRef,
      deps: { discoveryApi: discoveryApiRef, fetchApi: fetchApiRef },
      factory: ({ discoveryApi, fetchApi }) => new SearchClient({ discoveryApi, fetchApi })
    })
  }
});
const useSearchPageStyles = makeStyles((theme) => ({
  filter: {
    "& + &": {
      marginTop: theme.spacing(2.5)
    }
  },
  filters: {
    padding: theme.spacing(2),
    marginTop: theme.spacing(2)
  }
}));
const searchPage = PageBlueprint.makeWithOverrides({
  config: {
    schema: {
      noTrack: (z) => z.boolean().default(false)
    }
  },
  inputs: {
    items: createExtensionInput([SearchResultListItemBlueprint.dataRefs.item])
  },
  factory(originalFactory, { config, inputs }) {
    return originalFactory({
      defaultPath: "/search",
      routeRef: convertLegacyRouteRef(rootRouteRef),
      loader: async () => {
        const getResultItemComponent = (result) => {
          const value = inputs.items.find(
            (item) => item?.get(SearchResultListItemBlueprint.dataRefs.item).predicate?.(result)
          );
          return value?.get(SearchResultListItemBlueprint.dataRefs.item).component ?? DefaultResultListItem;
        };
        const Component = () => {
          const classes = useSearchPageStyles();
          const { isMobile } = useSidebarPinState();
          const { types } = useSearch();
          const catalogApi = useApi(catalogApiRef);
          return /* @__PURE__ */ React.createElement(Page, { themeId: "home" }, !isMobile && /* @__PURE__ */ React.createElement(Header, { title: "Search" }), /* @__PURE__ */ React.createElement(Content, null, /* @__PURE__ */ React.createElement(Grid, { container: true, direction: "row" }, /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 12 }, /* @__PURE__ */ React.createElement(SearchBar, { debounceTime: 100 })), !isMobile && /* @__PURE__ */ React.createElement(Grid, { item: true, xs: 3 }, /* @__PURE__ */ React.createElement(
            SearchType.Accordion,
            {
              name: "Result Type",
              defaultValue: "software-catalog",
              showCounts: true,
              types: [
                {
                  value: "software-catalog",
                  name: "Software Catalog",
                  icon: /* @__PURE__ */ React.createElement(CatalogIcon, null)
                },
                {
                  value: "techdocs",
                  name: "Documentation",
                  icon: /* @__PURE__ */ React.createElement(DocsIcon, null)
                }
              ]
            }
          ), /* @__PURE__ */ React.createElement(Paper, { className: classes.filters }, types.includes("techdocs") && /* @__PURE__ */ React.createElement(
            SearchFilter.Select,
            {
              className: classes.filter,
              label: "Entity",
              name: "name",
              values: async () => {
                const { items } = await catalogApi.getEntities({
                  fields: ["metadata.name"],
                  filter: {
                    "metadata.annotations.backstage.io/techdocs-ref": CATALOG_FILTER_EXISTS
                  }
                });
                const names = items.map(
                  (entity) => entity.metadata.name
                );
                names.sort();
                return names;
              }
            }
          ), /* @__PURE__ */ React.createElement(
            SearchFilter.Select,
            {
              className: classes.filter,
              label: "Kind",
              name: "kind",
              values: ["Component", "Template"]
            }
          ), /* @__PURE__ */ React.createElement(
            SearchFilter.Checkbox,
            {
              className: classes.filter,
              label: "Lifecycle",
              name: "lifecycle",
              values: ["experimental", "production"]
            }
          ))), /* @__PURE__ */ React.createElement(Grid, { item: true, xs: true }, /* @__PURE__ */ React.createElement(SearchPagination, null), /* @__PURE__ */ React.createElement(SearchResult, null, ({ results }) => /* @__PURE__ */ React.createElement(React.Fragment, null, results.map((result, index) => {
            const { noTrack } = config;
            const { document, ...rest } = result;
            const SearchResultListItem = getResultItemComponent(result);
            return /* @__PURE__ */ React.createElement(
              SearchResultListItem,
              {
                ...rest,
                key: index,
                result: document,
                noTrack
              }
            );
          }))), /* @__PURE__ */ React.createElement(SearchResultPager, null)))));
        };
        return compatWrapper(
          /* @__PURE__ */ React.createElement(SearchContextProvider, null, /* @__PURE__ */ React.createElement(UrlUpdater, null), /* @__PURE__ */ React.createElement(Component, null))
        );
      }
    });
  }
});
const searchNavItem = NavItemBlueprint.make({
  params: {
    routeRef: convertLegacyRouteRef(rootRouteRef),
    title: "Search",
    icon: SearchIcon
  }
});
var alpha = createFrontendPlugin({
  id: "search",
  extensions: [searchApi, searchPage, searchNavItem],
  routes: convertLegacyRouteRefs({
    root: rootRouteRef
  })
});

export { alpha as default, searchApi, searchNavItem, searchPage };
//# sourceMappingURL=alpha.esm.js.map
