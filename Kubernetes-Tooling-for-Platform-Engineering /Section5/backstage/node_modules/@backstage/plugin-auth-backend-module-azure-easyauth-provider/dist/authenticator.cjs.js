'use strict';

var errors = require('@backstage/errors');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var jose = require('jose');

const ID_TOKEN_HEADER = "x-ms-token-aad-id-token";
const ACCESS_TOKEN_HEADER = "x-ms-token-aad-access-token";
const azureEasyAuthAuthenticator = pluginAuthNode.createProxyAuthenticator({
  defaultProfileTransform: async (result) => {
    return {
      profile: {
        displayName: result.fullProfile.displayName,
        email: result.fullProfile.emails?.[0].value,
        picture: result.fullProfile.photos?.[0].value
      }
    };
  },
  initialize() {
  },
  async authenticate({ req }) {
    const result = await getResult(req);
    return {
      result,
      providerInfo: {
        accessToken: result.accessToken
      }
    };
  }
});
async function getResult(req) {
  const idToken = req.header(ID_TOKEN_HEADER);
  const accessToken = req.header(ACCESS_TOKEN_HEADER);
  if (idToken === void 0) {
    throw new errors.AuthenticationError(`Missing ${ID_TOKEN_HEADER} header`);
  }
  return {
    fullProfile: idTokenToProfile(idToken),
    accessToken
  };
}
function idTokenToProfile(idToken) {
  const claims = jose.decodeJwt(idToken);
  if (claims.ver !== "2.0") {
    throw new Error("id_token is not version 2.0 ");
  }
  return {
    id: claims.oid,
    displayName: claims.name,
    provider: "easyauth",
    emails: [{ value: claims.email }],
    username: claims.preferred_username
  };
}

exports.ACCESS_TOKEN_HEADER = ACCESS_TOKEN_HEADER;
exports.ID_TOKEN_HEADER = ID_TOKEN_HEADER;
exports.azureEasyAuthAuthenticator = azureEasyAuthAuthenticator;
//# sourceMappingURL=authenticator.cjs.js.map
