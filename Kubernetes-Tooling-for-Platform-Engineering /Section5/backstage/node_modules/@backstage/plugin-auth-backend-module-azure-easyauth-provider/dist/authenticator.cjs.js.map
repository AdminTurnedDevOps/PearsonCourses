{"version":3,"file":"authenticator.cjs.js","sources":["../src/authenticator.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AuthenticationError } from '@backstage/errors';\nimport { createProxyAuthenticator } from '@backstage/plugin-auth-node';\nimport { AzureEasyAuthResult } from './types';\nimport { Request } from 'express';\nimport { Profile } from 'passport';\nimport { decodeJwt } from 'jose';\n\nexport const ID_TOKEN_HEADER = 'x-ms-token-aad-id-token';\nexport const ACCESS_TOKEN_HEADER = 'x-ms-token-aad-access-token';\n\n/** @public */\nexport const azureEasyAuthAuthenticator = createProxyAuthenticator({\n  defaultProfileTransform: async (result: AzureEasyAuthResult) => {\n    return {\n      profile: {\n        displayName: result.fullProfile.displayName,\n        email: result.fullProfile.emails?.[0].value,\n        picture: result.fullProfile.photos?.[0].value,\n      },\n    };\n  },\n  initialize() {},\n  async authenticate({ req }) {\n    const result = await getResult(req);\n    return {\n      result,\n      providerInfo: {\n        accessToken: result.accessToken,\n      },\n    };\n  },\n});\n\nasync function getResult(req: Request): Promise<AzureEasyAuthResult> {\n  const idToken = req.header(ID_TOKEN_HEADER);\n  const accessToken = req.header(ACCESS_TOKEN_HEADER);\n  if (idToken === undefined) {\n    throw new AuthenticationError(`Missing ${ID_TOKEN_HEADER} header`);\n  }\n\n  return {\n    fullProfile: idTokenToProfile(idToken),\n    accessToken: accessToken,\n  };\n}\n\nfunction idTokenToProfile(idToken: string) {\n  const claims = decodeJwt(idToken);\n\n  if (claims.ver !== '2.0') {\n    throw new Error('id_token is not version 2.0 ');\n  }\n\n  return {\n    id: claims.oid,\n    displayName: claims.name,\n    provider: 'easyauth',\n    emails: [{ value: claims.email }],\n    username: claims.preferred_username,\n  } as Profile;\n}\n"],"names":["createProxyAuthenticator","AuthenticationError","decodeJwt"],"mappings":";;;;;;AAuBO,MAAM,eAAkB,GAAA;AACxB,MAAM,mBAAsB,GAAA;AAG5B,MAAM,6BAA6BA,uCAAyB,CAAA;AAAA,EACjE,uBAAA,EAAyB,OAAO,MAAgC,KAAA;AAC9D,IAAO,OAAA;AAAA,MACL,OAAS,EAAA;AAAA,QACP,WAAA,EAAa,OAAO,WAAY,CAAA,WAAA;AAAA,QAChC,KAAO,EAAA,MAAA,CAAO,WAAY,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,KAAA;AAAA,QACtC,OAAS,EAAA,MAAA,CAAO,WAAY,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA;AAAA;AAC1C,KACF;AAAA,GACF;AAAA,EACA,UAAa,GAAA;AAAA,GAAC;AAAA,EACd,MAAM,YAAA,CAAa,EAAE,GAAA,EAAO,EAAA;AAC1B,IAAM,MAAA,MAAA,GAAS,MAAM,SAAA,CAAU,GAAG,CAAA;AAClC,IAAO,OAAA;AAAA,MACL,MAAA;AAAA,MACA,YAAc,EAAA;AAAA,QACZ,aAAa,MAAO,CAAA;AAAA;AACtB,KACF;AAAA;AAEJ,CAAC;AAED,eAAe,UAAU,GAA4C,EAAA;AACnE,EAAM,MAAA,OAAA,GAAU,GAAI,CAAA,MAAA,CAAO,eAAe,CAAA;AAC1C,EAAM,MAAA,WAAA,GAAc,GAAI,CAAA,MAAA,CAAO,mBAAmB,CAAA;AAClD,EAAA,IAAI,YAAY,KAAW,CAAA,EAAA;AACzB,IAAA,MAAM,IAAIC,0BAAA,CAAoB,CAAW,QAAA,EAAA,eAAe,CAAS,OAAA,CAAA,CAAA;AAAA;AAGnE,EAAO,OAAA;AAAA,IACL,WAAA,EAAa,iBAAiB,OAAO,CAAA;AAAA,IACrC;AAAA,GACF;AACF;AAEA,SAAS,iBAAiB,OAAiB,EAAA;AACzC,EAAM,MAAA,MAAA,GAASC,eAAU,OAAO,CAAA;AAEhC,EAAI,IAAA,MAAA,CAAO,QAAQ,KAAO,EAAA;AACxB,IAAM,MAAA,IAAI,MAAM,8BAA8B,CAAA;AAAA;AAGhD,EAAO,OAAA;AAAA,IACL,IAAI,MAAO,CAAA,GAAA;AAAA,IACX,aAAa,MAAO,CAAA,IAAA;AAAA,IACpB,QAAU,EAAA,UAAA;AAAA,IACV,QAAQ,CAAC,EAAE,KAAO,EAAA,MAAA,CAAO,OAAO,CAAA;AAAA,IAChC,UAAU,MAAO,CAAA;AAAA,GACnB;AACF;;;;;;"}