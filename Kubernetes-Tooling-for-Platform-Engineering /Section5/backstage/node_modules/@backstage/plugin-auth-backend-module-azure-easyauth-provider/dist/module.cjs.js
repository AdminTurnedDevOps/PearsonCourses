'use strict';

var backendPluginApi = require('@backstage/backend-plugin-api');
var pluginAuthNode = require('@backstage/plugin-auth-node');
var authenticator = require('./authenticator.cjs.js');
var resolvers = require('./resolvers.cjs.js');

const authModuleAzureEasyAuthProvider = backendPluginApi.createBackendModule({
  pluginId: "auth",
  moduleId: "azure-easyauth-provider",
  register(reg) {
    reg.registerInit({
      deps: {
        providers: pluginAuthNode.authProvidersExtensionPoint
      },
      async init({ providers }) {
        validateAppServiceConfiguration(process.env);
        providers.registerProvider({
          providerId: "azureEasyAuth",
          factory: pluginAuthNode.createProxyAuthProviderFactory({
            authenticator: authenticator.azureEasyAuthAuthenticator,
            signInResolverFactories: {
              ...pluginAuthNode.commonSignInResolvers,
              ...resolvers.azureEasyAuthSignInResolvers
            }
          })
        });
      }
    });
  }
});
function validateAppServiceConfiguration(env) {
  if (env.WEBSITE_SKU === void 0) {
    throw new Error("Backstage is not running on Azure App Services");
  }
  if (env.WEBSITE_AUTH_ENABLED?.toLocaleLowerCase("en-US") !== "true") {
    throw new Error("Azure App Services does not have authentication enabled");
  }
  if (env.WEBSITE_AUTH_DEFAULT_PROVIDER?.toLocaleLowerCase("en-US") !== "azureactivedirectory") {
    throw new Error("Authentication provider is not Entra ID");
  }
  if (env.WEBSITE_AUTH_TOKEN_STORE?.toLocaleLowerCase("en-US") !== "true") {
    throw new Error("Token Store is not enabled");
  }
}

exports.authModuleAzureEasyAuthProvider = authModuleAzureEasyAuthProvider;
//# sourceMappingURL=module.cjs.js.map
