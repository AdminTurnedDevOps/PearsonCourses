const __v5Spacing = (defaultSpacing) => (...argsInput) => {
  const args = argsInput.length === 0 ? [1] : argsInput;
  const transform = (argument, themeSpacing) => {
    if (typeof argument === "string") {
      return argument;
    }
    return themeSpacing * argument;
  };
  return args.map((argument) => {
    const output = transform(argument, defaultSpacing);
    return typeof output === "number" ? `${output}px` : output;
  }).join(" ");
};
function adaptV5CssBaselineOverride(theme, overrides) {
  if (!overrides || typeof overrides === "string") {
    return void 0;
  }
  const styles = typeof overrides === "function" ? overrides(theme) : overrides;
  if (styles) {
    return { "@global": styles };
  }
  return void 0;
}
function adaptV5Override(theme, overrides) {
  if (!overrides || typeof overrides === "string") {
    return void 0;
  }
  if (typeof overrides === "object") {
    const _theme = { ...theme };
    const defaultSpacing = theme.spacing(1);
    if (typeof defaultSpacing === "number") {
      _theme.spacing = __v5Spacing(defaultSpacing);
    }
    return Object.fromEntries(
      Object.entries(overrides).map(([className, style]) => {
        if (typeof style === "function") {
          return [className, style({ theme: _theme })];
        }
        return [className, style];
      })
    );
  }
  return overrides;
}
const stateStyleKeyPattern = /^&.Mui-([\w-]+)$/;
function extractV5StateOverrides(overrides) {
  let output = overrides;
  if (!overrides || typeof overrides !== "object") {
    return output;
  }
  for (const className of Object.keys(overrides)) {
    const styles = overrides[className];
    if (!styles || typeof styles !== "object") {
      continue;
    }
    for (const _styleKey of Object.keys(styles)) {
      const styleKey = _styleKey;
      const match = styleKey.match(stateStyleKeyPattern);
      if (match) {
        const [, state] = match;
        const { [styleKey]: stateStyles, ...restStyles } = styles;
        if (stateStyles) {
          output = {
            ...output,
            [className]: restStyles,
            [state]: stateStyles
          };
        }
      }
    }
  }
  return output;
}
function transformV5ComponentThemesToV4(theme, components = {}) {
  const overrides = {};
  const props = {};
  for (const name of Object.keys(components)) {
    const component = components[name];
    if (!component) {
      continue;
    }
    if ("styleOverrides" in component) {
      if (name === "MuiCssBaseline") {
        overrides[name] = adaptV5CssBaselineOverride(
          theme,
          component.styleOverrides
        );
      } else {
        overrides[name] = extractV5StateOverrides(
          adaptV5Override(theme, component.styleOverrides)
        );
      }
    }
    if ("defaultProps" in component) {
      props[name] = component.defaultProps;
    }
  }
  return { overrides, props };
}

export { transformV5ComponentThemesToV4 };
//# sourceMappingURL=overrides.esm.js.map
