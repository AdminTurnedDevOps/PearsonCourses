import { createTheme as createTheme$1 } from '@material-ui/core/styles';
import { createTheme, adaptV4Theme } from '@mui/material/styles';
import { createBaseThemeOptions } from '../base/createBaseThemeOptions.esm.js';
import { defaultComponentThemes } from '../v5/defaultComponentThemes.esm.js';
import { transformV5ComponentThemesToV4 } from './overrides.esm.js';

class UnifiedThemeHolder {
  #themes = /* @__PURE__ */ new Map();
  constructor(v4, v5) {
    this.#themes = /* @__PURE__ */ new Map();
    if (v4) {
      this.#themes.set("v4", v4);
    }
    if (v5) {
      this.#themes.set("v5", v5);
    }
  }
  getTheme(version) {
    return this.#themes.get(version);
  }
}
function createUnifiedTheme(options) {
  const themeOptions = createBaseThemeOptions(options);
  const components = { ...defaultComponentThemes, ...options.components };
  const v5Theme = createTheme({ ...themeOptions, components });
  const v4Overrides = transformV5ComponentThemesToV4(v5Theme, components);
  const v4Theme = { ...createTheme$1(themeOptions), ...v4Overrides };
  return new UnifiedThemeHolder(v4Theme, v5Theme);
}
function createUnifiedThemeFromV4(options) {
  const v5Theme = adaptV4Theme(options);
  const v4Theme = createTheme$1(options);
  return new UnifiedThemeHolder(v4Theme, createTheme(v5Theme));
}

export { UnifiedThemeHolder, createUnifiedTheme, createUnifiedThemeFromV4 };
//# sourceMappingURL=UnifiedTheme.esm.js.map
