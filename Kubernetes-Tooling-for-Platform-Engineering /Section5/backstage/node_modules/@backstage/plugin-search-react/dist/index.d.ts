/// <reference types="react" />
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { Extension } from '@backstage/core-plugin-api';
import { SearchQuery, SearchResultSet, SearchDocument, SearchResult as SearchResult$1, ResultHighlight } from '@backstage/plugin-search-common';
import React, { PropsWithChildren, ReactNode, ReactElement } from 'react';
import { ListProps } from '@material-ui/core/List';
import { ListItemProps } from '@material-ui/core/ListItem';
import { TextFieldProps } from '@material-ui/core/TextField';
import { AutocompleteProps } from '@material-ui/lab/Autocomplete';
import { ListItemTextProps } from '@material-ui/core/ListItemText';
import { AsyncState } from 'react-use/esm/useAsync';
import { TypographyProps } from '@material-ui/core/Typography';
import { JsonValue, JsonObject } from '@backstage/types';
import { LinkProps } from '@backstage/core-components';

/**
 * @public
 */
declare const searchApiRef: _backstage_core_plugin_api.ApiRef<SearchApi>;
/**
 * @public
 */
interface SearchApi {
    query(query: SearchQuery): Promise<SearchResultSet>;
}
/**
 * @public
 *
 * Search Api Mock that can be used in tests and storybooks
 */
declare class MockSearchApi implements SearchApi {
    mockedResults?: SearchResultSet | undefined;
    constructor(mockedResults?: SearchResultSet | undefined);
    query(): Promise<SearchResultSet>;
}

/**
 * @public
 * Extends props for any search result list item extension
 */
type SearchResultListItemExtensionProps<Props extends {} = {}> = Props & PropsWithChildren<{
    rank?: number;
    result?: SearchDocument;
    noTrack?: boolean;
} & Omit<ListItemProps, 'button'>>;
/**
 * @public
 * Options for {@link createSearchResultListItemExtension}.
 */
type SearchResultListItemExtensionOptions<Component extends (props: any) => JSX.Element | null> = {
    /**
     * The extension name.
     */
    name: string;
    /**
     * The extension component.
     */
    component: () => Promise<Component>;
    /**
     * When an extension defines a predicate, it returns true if the result should be rendered by that extension.
     * Defaults to a predicate that returns true, which means it renders all sorts of results.
     */
    predicate?: (result: SearchResult$1) => boolean;
};
/**
 * @public
 * Creates a search result item extension.
 * @param options - The extension options, see {@link SearchResultListItemExtensionOptions} for more details.
 */
declare const createSearchResultListItemExtension: <Component extends (props: any) => JSX.Element | null>(options: SearchResultListItemExtensionOptions<Component>) => Extension<Component>;
/**
 * @public
 * Returns a function that renders a result using extensions.
 */
declare const useSearchResultListItemExtensions: (children: ReactNode) => (result: SearchResult$1, key?: number) => React.JSX.Element;
/**
 * @public
 * Props for {@link SearchResultListItemExtensions}
 */
type SearchResultListItemExtensionsProps = Omit<ListProps, 'results'> & {
    /**
     * Search result list.
     */
    results: SearchResult$1[];
};
/**
 * @public
 * Render results using search extensions.
 * @param props - see {@link SearchResultListItemExtensionsProps}
 */
declare const SearchResultListItemExtensions: (props: SearchResultListItemExtensionsProps) => React.JSX.Element;

/** @public */
type HighlightedSearchResultTextClassKey = 'highlight';
/**
 * Props for {@link HighlightedSearchResultText}.
 *
 * @public
 */
type HighlightedSearchResultTextProps = {
    text: string;
    preTag: string;
    postTag: string;
};
/**
 * @public
 */
declare const HighlightedSearchResultText: (props: HighlightedSearchResultTextProps) => React.JSX.Element;

/**
 * Props for {@link SearchBarBase}.
 *
 * @public
 */
type SearchBarBaseProps = Omit<TextFieldProps, 'onChange'> & {
    debounceTime?: number;
    clearButton?: boolean;
    onClear?: () => void;
    onSubmit?: () => void;
    onChange: (value: string) => void;
    endAdornment?: React.ReactNode;
};
/**
 * All search boxes exported by the search plugin are based on the <SearchBarBase />,
 * and this one is based on the <InputBase /> component from Material UI.
 * Recommended if you don't use Search Provider or Search Context.
 *
 * @public
 */
declare const SearchBarBase: React.ForwardRefExoticComponent<Omit<SearchBarBaseProps, "ref"> & React.RefAttributes<unknown>>;
/**
 * Props for {@link SearchBar}.
 *
 * @public
 */
type SearchBarProps = Partial<SearchBarBaseProps>;
/**
 * Recommended search bar when you use the Search Provider or Search Context.
 *
 * @public
 */
declare const SearchBar: React.ForwardRefExoticComponent<Omit<Partial<SearchBarBaseProps>, "ref"> & React.RefAttributes<unknown>>;

/**
 * Props for {@link SearchAutocomplete}.
 *
 * @public
 */
type SearchAutocompleteProps<Option> = Omit<AutocompleteProps<Option, undefined, undefined, boolean>, 'renderInput' | 'disableClearable' | 'multiple'> & {
    'data-testid'?: string;
    inputPlaceholder?: SearchBarProps['placeholder'];
    inputDebounceTime?: SearchBarProps['debounceTime'];
};
/**
 * Type for {@link SearchAutocomplete}.
 *
 * @public
 */
type SearchAutocompleteComponent = <Option>(props: SearchAutocompleteProps<Option>) => JSX.Element;
/**
 * Recommended search autocomplete when you use the Search Provider or Search Context.
 *
 * @public
 */
declare const SearchAutocomplete: SearchAutocompleteComponent;

/**
 * Props for {@link SearchAutocompleteDefaultOption}.
 *
 * @public
 */
type SearchAutocompleteDefaultOptionProps = {
    icon?: ReactNode;
    primaryText: ListItemTextProps['primary'];
    primaryTextTypographyProps?: ListItemTextProps['primaryTypographyProps'];
    secondaryText?: ListItemTextProps['secondary'];
    secondaryTextTypographyProps?: ListItemTextProps['secondaryTypographyProps'];
    disableTextTypography?: ListItemTextProps['disableTypography'];
};
/**
 * A default search autocomplete option component.
 *
 * @public
 */
declare const SearchAutocompleteDefaultOption: (props: SearchAutocompleteDefaultOptionProps) => React.JSX.Element;

/**
 * @public
 */
type SearchAutocompleteFilterProps = SearchFilterComponentProps & {
    filterSelectedOptions?: boolean;
    limitTags?: number;
    multiple?: boolean;
};
/**
 * @public
 */
declare const AutocompleteFilter: (props: SearchAutocompleteFilterProps) => React.JSX.Element;

/**
 * @public
 */
type SearchFilterComponentProps = {
    className?: string;
    name: string;
    label?: string;
    /**
     * Either an array of values directly, or an async function to return a list
     * of values to be used in the filter. In the autocomplete filter, the last
     * input value is provided as an input to allow values to be filtered. This
     * function is debounced and values cached.
     */
    values?: string[] | ((partial: string) => Promise<string[]>);
    defaultValue?: string[] | string | null;
    /**
     * Debounce time in milliseconds, used when values is an async callback.
     * Defaults to 250ms.
     */
    valuesDebounceMs?: number;
};
/**
 * @public
 */
type SearchFilterWrapperProps = SearchFilterComponentProps & {
    component: (props: SearchFilterComponentProps) => ReactElement;
    debug?: boolean;
};
/**
 * @public
 */
declare const CheckboxFilter: (props: SearchFilterComponentProps) => React.JSX.Element;
/**
 * @public
 */
declare const SelectFilter: (props: SearchFilterComponentProps) => React.JSX.Element;
/**
 * @public
 */
declare const SearchFilter: {
    (props: SearchFilterWrapperProps): React.JSX.Element;
    Checkbox(props: Omit<SearchFilterWrapperProps, 'component'> & SearchFilterComponentProps): React.JSX.Element;
    Select(props: Omit<SearchFilterWrapperProps, 'component'> & SearchFilterComponentProps): React.JSX.Element;
    /**
     * A control surface for a given filter field name, rendered as an autocomplete
     * textfield. A hard-coded list of values may be provided, or an async function
     * which returns values may be provided instead.
     *
     * @public
     */
    Autocomplete(props: SearchAutocompleteFilterProps): React.JSX.Element;
};

/**
 * A page limit option, this value must not be greater than 100.
 * @public
 */
type SearchPaginationLimitOption<Current extends number = 101, Accumulator extends number[] = []> = Accumulator['length'] extends Current ? Accumulator[number] : SearchPaginationLimitOption<Current, [
    ...Accumulator,
    Accumulator['length']
]>;
/**
 * A page limit text, this function is called with a "\{ from, to, page, count \}" object.
 * @public
 */
type SearchPaginationLimitText = (params: {
    from: number;
    to: number;
    page: number;
    count: number;
}) => ReactNode;
/**
 * Props for {@link SearchPaginationBase}.
 * @public
 */
type SearchPaginationBaseProps = {
    /**
     * The component class name.
     */
    className?: string;
    /**
     * The total number of results.
     * For an unknown number of items, provide -1.
     * Defaults to -1.
     */
    total?: number;
    /**
     * The cursor for the current page.
     */
    cursor?: string;
    /**
     * Whether a next page exists
     */
    hasNextPage?: boolean;
    /**
     * Callback fired when the current page cursor is changed.
     */
    onCursorChange?: (pageCursor: string) => void;
    /**
     * The limit of results per page.
     * Set -1 to display all the results.
     */
    limit?: number;
    /**
     * Customize the results per page label.
     * Defaults to "Results per page:".
     */
    limitLabel?: ReactNode;
    /**
     * Customize the results per page text.
     * Defaults to "(\{ from, to, count \}) =\> count \> 0 ? `of $\{count\}` : `$\{from\}-$\{to\}`".
     */
    limitText?: SearchPaginationLimitText;
    /**
     * Options for setting how many results show per page.
     * If less than two options are available, no select field will be displayed.
     * Use -1 for the value with a custom label to show all the results.
     * Defaults to [10, 25, 50, 100].
     */
    limitOptions?: SearchPaginationLimitOption[];
    /**
     * Callback fired when the number of results per page is changed.
     */
    onLimitChange?: (value: number) => void;
};
/**
 * A component with controls for search results pagination.
 * @param props - See {@link SearchPaginationBaseProps}.
 * @public
 */
declare const SearchPaginationBase: (props: SearchPaginationBaseProps) => React.JSX.Element;
/**
 * Props for {@link SearchPagination}.
 * @public
 */
type SearchPaginationProps = Omit<SearchPaginationBaseProps, 'pageLimit' | 'onLimitChange' | 'pageCursor' | 'onPageCursorChange' | 'hasNextPage'>;
/**
 * A component for setting the search context page limit and cursor.
 * @param props - See {@link SearchPaginationProps}.
 * @public
 */
declare const SearchPagination: (props: SearchPaginationProps) => React.JSX.Element;

/**
 * Props for {@link SearchResultContext}
 * @public
 */
type SearchResultContextProps = {
    /**
     * A child function that receives an asynchronous result set and returns a react element.
     */
    children: (state: AsyncState<SearchResultSet>, query: Partial<SearchQuery>) => JSX.Element | null;
};
/**
 * Provides context-based results to a child function.
 * @param props - see {@link SearchResultContextProps}.
 * @example
 * ```
 * <SearchResultContext>
 *   {({ loading, error, value }) => (
 *     <List>
 *       {value?.map(({ document }) => (
 *         <DefaultSearchResultListItem
 *           key={document.location}
 *           result={document}
 *         />
 *       ))}
 *     </List>
 *   )}
 * </SearchResultContext>
 * ```
 * @public
 */
declare const SearchResultContext: (props: SearchResultContextProps) => JSX.Element | null;
/**
 * Props for {@link SearchResultApi}
 * @public
 */
type SearchResultApiProps = SearchResultContextProps & {
    query: Partial<SearchQuery>;
};
/**
 * Request results through the search api and provide them to a child function.
 * @param props - see {@link SearchResultApiProps}.
 * @example
 * ```
 * <SearchResultApi>
 *   {({ loading, error, value }) => (
 *     <List>
 *       {value?.map(({ document }) => (
 *         <DefaultSearchResultListItem
 *           key={document.location}
 *           result={document}
 *         />
 *       ))}
 *     </List>
 *   )}
 * </SearchResultApi>
 * ```
 * @public
 */
declare const SearchResultApi: (props: SearchResultApiProps) => JSX.Element | null;
/**
 * Props for {@link SearchResultState}
 * @public
 */
type SearchResultStateProps = SearchResultContextProps & Partial<SearchResultApiProps>;
/**
 * Call a child render function passing a search state as an argument.
 * @remarks By default, results are taken from context, but when a "query" prop is set, results are requested from the search api.
 * @param props - see {@link SearchResultStateProps}.
 * @example
 * Consuming results from context:
 * ```
 * <SearchResultState>
 *   {({ loading, error, value }) => (
 *     <List>
 *       {value?.map(({ document }) => (
 *         <DefaultSearchResultListItem
 *           key={document.location}
 *           result={document}
 *         />
 *       ))}
 *     </List>
 *   )}
 * </SearchResultState>
 * ```
 * @example
 * Requesting results using the search api:
 * ```
 * <SearchResultState query={{ term: 'documentation' }}>
 *   {({ loading, error, value }) => (
 *     <List>
 *       {value?.map(({ document }) => (
 *         <DefaultSearchResultListItem
 *           key={document.location}
 *           result={document}
 *         />
 *       ))}
 *     </List>
 *   )}
 * </SearchResultState>
 * ```
 * @public
 */
declare const SearchResultState: (props: SearchResultStateProps) => React.JSX.Element;
/**
 * Props for {@link SearchResult}
 * @public
 */
type SearchResultProps = Pick<SearchResultStateProps, 'query'> & Omit<SearchResultListItemExtensionsProps, 'results' | 'children'> & {
    children?: ReactNode | ((resultSet: SearchResultSet) => JSX.Element);
    noResultsComponent?: JSX.Element;
};
/**
 * Renders results from a parent search context or api.
 * @remarks default components for loading, error and empty variants are returned.
 * @param props - see {@link SearchResultProps}.
 * @public
 */
declare const SearchResultComponent: (props: SearchResultProps) => React.JSX.Element;
/**
 * A component returning the search result from a parent search context or api.
 * @param props - see {@link SearchResultProps}.
 * @public
 */
declare const SearchResult: (props: SearchResultProps) => React.JSX.Element;

/**
 * Props for {@link SearchResultListLayout}
 * @public
 */
type SearchResultListLayoutProps = ListProps & {
    /**
     * If defined, will render a default error panel.
     */
    error?: Error;
    /**
     * If defined, will render a default loading progress.
     */
    loading?: boolean;
    /**
     * Search results to be rendered as a list.
     */
    resultItems?: SearchResult$1[];
    /**
     * Function to customize how result items are rendered.
     */
    renderResultItem?: (value: SearchResult$1, index: number, array: SearchResult$1[]) => JSX.Element | null;
    /**
     * Optional component to render when no results. Default to <EmptyState /> component.
     */
    noResultsComponent?: ReactNode;
    /**
     * Optional property to provide if component should not render the component when no results are found.
     */
    disableRenderingWithNoResults?: boolean;
};
/**
 * Default layout for rendering search results in a list.
 * @param props - See {@link SearchResultListLayoutProps}.
 * @public
 */
declare const SearchResultListLayout: (props: SearchResultListLayoutProps) => React.JSX.Element;
/**
 * Props for {@link SearchResultList}.
 * @public
 */
type SearchResultListProps = Pick<SearchResultStateProps, 'query'> & Omit<SearchResultListLayoutProps, 'loading' | 'error' | 'resultItems'>;
/**
 * Given a query, search for results and render them as a list.
 * @param props - See {@link SearchResultListProps}.
 * @public
 */
declare const SearchResultList: (props: SearchResultListProps) => React.JSX.Element;

/**
 * Props for {@link SearchResultGroupFilterFieldLayout}
 * @public
 */
type SearchResultGroupFilterFieldLayoutProps = PropsWithChildren<{
    label: string;
    value?: JsonValue;
    onDelete: () => void;
}>;
/**
 * Default layout for a search group filter field.
 * @param props - See {@link SearchResultGroupFilterFieldLayoutProps}.
 * @public
 */
declare const SearchResultGroupFilterFieldLayout: (props: SearchResultGroupFilterFieldLayoutProps) => React.JSX.Element;
/**
 * Common props for a result group filter field.
 * @public
 */
type SearchResultGroupFilterFieldPropsWith<T> = T & SearchResultGroupFilterFieldLayoutProps & {
    onChange: (value: JsonValue) => void;
};
/**
 * Props for {@link SearchResultGroupTextFilterField}.
 * @public
 */
type SearchResultGroupTextFilterFieldProps = SearchResultGroupFilterFieldPropsWith<{}>;
/**
 * A text field that can be used as filter on search result groups.
 * @param props - See {@link SearchResultGroupTextFilterFieldProps}.
 * @example
 * ```
 * <SearchResultGroupTextFilterField
 *   id="lifecycle"
 *   label="Lifecycle"
 *   value={value}
 *   onChange={handleChangeFilter}
 *   onDelete={handleDeleteFilter}
 * />
 * ```
 * @public
 */
declare const SearchResultGroupTextFilterField: (props: SearchResultGroupTextFilterFieldProps) => React.JSX.Element;
/**
 * Props for {@link SearchResultGroupTextFilterField}.
 * @public
 */
type SearchResultGroupSelectFilterFieldProps = SearchResultGroupFilterFieldPropsWith<{
    children: ReactNode;
}>;
/**
 * A select field that can be used as filter on search result groups.
 * @param props - See {@link SearchResultGroupSelectFilterFieldProps}.
 * @example
 * ```
 * <SearchResultGroupSelectFilterField
 *   id="lifecycle"
 *   label="Lifecycle"
 *   value={filters.lifecycle}
 *   onChange={handleChangeFilter}
 *   onDelete={handleDeleteFilter}
 * >
 *   <MenuItem value="experimental">Experimental</MenuItem>
 *   <MenuItem value="production">Production</MenuItem>
 *  </SearchResultGroupSelectFilterField>
 * ```
 * @public
 */
declare const SearchResultGroupSelectFilterField: (props: SearchResultGroupSelectFilterFieldProps) => React.JSX.Element;
/**
 * Props for {@link SearchResultGroupLayout}
 * @public
 */
type SearchResultGroupLayoutProps<FilterOption> = ListProps & {
    /**
     * If defined, will render a default error panel.
     */
    error?: Error;
    /**
     * If defined, will render a default loading progress.
     */
    loading?: boolean;
    /**
     * Icon that representing a result group.
     */
    icon: JSX.Element;
    /**
     * The results group title content, it could be a text or an element.
     */
    title: ReactNode;
    /**
     * Props for the results group title.
     */
    titleProps?: Partial<TypographyProps>;
    /**
     * The results group link content, it could be a text or an element.
     */
    link?: ReactNode;
    /**
     * Props for the results group link, the "to" prop defaults to "/search".
     */
    linkProps?: Partial<LinkProps>;
    /**
     * A generic filter options that is rendered on the "Add filter" dropdown.
     */
    filterOptions?: FilterOption[];
    /**
     * Function to customize how filter options are rendered.
     * @remarks Defaults to a menu item where its value and label bounds to the option string.
     */
    renderFilterOption?: (value: FilterOption, index: number, array: FilterOption[]) => JSX.Element | null;
    /**
     * A list of search filter keys, also known as filter field names.
     */
    filterFields?: string[];
    /**
     * Function to customize how filter chips are rendered.
     */
    renderFilterField?: (key: string) => JSX.Element | null;
    /**
     * Search results to be rendered as a group.
     */
    resultItems?: SearchResult$1[];
    /**
     * Function to customize how result items are rendered.
     */
    renderResultItem?: (value: SearchResult$1, index: number, array: SearchResult$1[]) => JSX.Element | null;
    /**
     * Optional component to render when no results. Default to <EmptyState /> component.
     */
    noResultsComponent?: ReactNode;
    /**
     * Optional property to provide if component should not render the component when no results are found.
     */
    disableRenderingWithNoResults?: boolean;
};
/**
 * Default layout for rendering search results in a group.
 * @param props - See {@link SearchResultGroupLayoutProps}.
 * @public
 */
declare function SearchResultGroupLayout<FilterOption>(props: SearchResultGroupLayoutProps<FilterOption>): React.JSX.Element;
/**
 * Props for {@link SearchResultGroup}.
 * @public
 */
type SearchResultGroupProps<FilterOption> = Pick<SearchResultStateProps, 'query'> & Omit<SearchResultGroupLayoutProps<FilterOption>, 'loading' | 'error' | 'resultItems' | 'filterFields'>;
/**
 * Given a query, search for results and render them as a group.
 * @param props - See {@link SearchResultGroupProps}.
 * @public
 */
declare function SearchResultGroup<FilterOption>(props: SearchResultGroupProps<FilterOption>): React.JSX.Element;

/**
 * @public
 */
declare const SearchResultPager: () => React.JSX.Element;

/**
 * Props for {@link DefaultResultListItem}
 *
 * @public
 */
type DefaultResultListItemProps = {
    icon?: ReactNode;
    secondaryAction?: ReactNode;
    result?: SearchDocument;
    highlight?: ResultHighlight;
    rank?: number;
    lineClamp?: number;
    toggleModal?: () => void;
};
/**
 * @public
 */
declare const HigherOrderDefaultResultListItem: (props: DefaultResultListItemProps) => React.JSX.Element;

/**
 *
 * @public
 */
type SearchContextValue = {
    result: AsyncState<SearchResultSet>;
    setTerm: React.Dispatch<React.SetStateAction<string>>;
    setTypes: React.Dispatch<React.SetStateAction<string[]>>;
    setFilters: React.Dispatch<React.SetStateAction<JsonObject>>;
    setPageLimit: React.Dispatch<React.SetStateAction<number | undefined>>;
    setPageCursor: React.Dispatch<React.SetStateAction<string | undefined>>;
    fetchNextPage?: React.DispatchWithoutAction;
    fetchPreviousPage?: React.DispatchWithoutAction;
} & SearchContextState;
/**
 *
 * @public
 */
type SearchContextState = {
    term: string;
    types: string[];
    filters: JsonObject;
    pageLimit?: number;
    pageCursor?: string;
};
/**
 * @public
 *
 * React hook which provides the search context
 */
declare const useSearch: () => SearchContextValue;
/**
 * @public
 *
 * React hook which checks for an existing search context
 */
declare const useSearchContextCheck: () => boolean;
/**
 * Props for {@link SearchContextProvider}
 *
 * @public
 */
type SearchContextProviderProps = PropsWithChildren<{
    /**
     * State initialized by a local context.
     */
    initialState?: SearchContextState;
    /**
     * Do not create an inheritance from the parent, as a new initial state must be defined in a local context.
     */
    inheritParentContextIfAvailable?: never;
}> | PropsWithChildren<{
    /**
     * Does not accept initial state since it is already initialized by parent context.
     */
    initialState?: never;
    /**
     * If true, don't create a child context if there is a parent one already defined.
     * @remarks Defaults to false.
     */
    inheritParentContextIfAvailable?: boolean;
}>;
/**
 * @public
 * Search context provider which gives you access to shared state between search components
 */
declare const SearchContextProvider: (props: SearchContextProviderProps) => React.JSX.Element;

export { AutocompleteFilter, CheckboxFilter, HigherOrderDefaultResultListItem as DefaultResultListItem, type DefaultResultListItemProps, HighlightedSearchResultText, type HighlightedSearchResultTextClassKey, type HighlightedSearchResultTextProps, MockSearchApi, type SearchApi, SearchAutocomplete, type SearchAutocompleteComponent, SearchAutocompleteDefaultOption, type SearchAutocompleteDefaultOptionProps, type SearchAutocompleteFilterProps, type SearchAutocompleteProps, SearchBar, SearchBarBase, type SearchBarBaseProps, type SearchBarProps, SearchContextProvider, type SearchContextProviderProps, type SearchContextState, type SearchContextValue, SearchFilter, type SearchFilterComponentProps, type SearchFilterWrapperProps, SearchPagination, SearchPaginationBase, type SearchPaginationBaseProps, type SearchPaginationLimitOption, type SearchPaginationLimitText, type SearchPaginationProps, SearchResult, SearchResultApi, type SearchResultApiProps, SearchResultComponent, SearchResultContext, type SearchResultContextProps, SearchResultGroup, SearchResultGroupFilterFieldLayout, type SearchResultGroupFilterFieldLayoutProps, type SearchResultGroupFilterFieldPropsWith, SearchResultGroupLayout, type SearchResultGroupLayoutProps, type SearchResultGroupProps, SearchResultGroupSelectFilterField, type SearchResultGroupSelectFilterFieldProps, SearchResultGroupTextFilterField, type SearchResultGroupTextFilterFieldProps, SearchResultList, type SearchResultListItemExtensionOptions, type SearchResultListItemExtensionProps, SearchResultListItemExtensions, type SearchResultListItemExtensionsProps, SearchResultListLayout, type SearchResultListLayoutProps, type SearchResultListProps, SearchResultPager, type SearchResultProps, SearchResultState, type SearchResultStateProps, SelectFilter, createSearchResultListItemExtension, searchApiRef, useSearch, useSearchContextCheck, useSearchResultListItemExtensions };
