import React from 'react';
import useAsync from 'react-use/esm/useAsync';
import { isFunction } from 'lodash';
import { Progress, ResponseErrorPanel, EmptyState } from '@backstage/core-components';
import { useApi, AnalyticsContext } from '@backstage/core-plugin-api';
import { searchApiRef } from '../../api.esm.js';
import { useSearch } from '../../context/SearchContext.esm.js';
import { SearchResultListItemExtensions } from '../../extensions.esm.js';

const SearchResultContext = (props) => {
  const { children } = props;
  const context = useSearch();
  const { result: state, ...query } = context;
  return children(state, query);
};
const SearchResultApi = (props) => {
  const { query, children } = props;
  const searchApi = useApi(searchApiRef);
  const state = useAsync(() => {
    const { term = "", types = [], filters = {}, ...rest } = query;
    return searchApi.query({ ...rest, term, types, filters });
  }, [query]);
  return children(state, query);
};
const SearchResultState = (props) => {
  const { query, children } = props;
  return query ? /* @__PURE__ */ React.createElement(SearchResultApi, { query }, children) : /* @__PURE__ */ React.createElement(SearchResultContext, null, children);
};
const SearchResultComponent = (props) => {
  const {
    query,
    children,
    noResultsComponent = /* @__PURE__ */ React.createElement(EmptyState, { missing: "data", title: "Sorry, no results were found" }),
    ...rest
  } = props;
  return /* @__PURE__ */ React.createElement(SearchResultState, { query }, ({ loading, error, value }) => {
    if (loading) {
      return /* @__PURE__ */ React.createElement(Progress, null);
    }
    if (error) {
      return /* @__PURE__ */ React.createElement(
        ResponseErrorPanel,
        {
          title: "Error encountered while fetching search results",
          error
        }
      );
    }
    if (!value?.results.length) {
      return noResultsComponent;
    }
    if (isFunction(children)) {
      return children(value);
    }
    return /* @__PURE__ */ React.createElement(SearchResultListItemExtensions, { ...rest, results: value.results }, children);
  });
};
const SearchResult = (props) => /* @__PURE__ */ React.createElement(
  AnalyticsContext,
  {
    attributes: {
      pluginId: "search",
      extension: "SearchResult"
    }
  },
  /* @__PURE__ */ React.createElement(SearchResultComponent, { ...props })
);

export { SearchResult, SearchResultApi, SearchResultComponent, SearchResultContext, SearchResultState };
//# sourceMappingURL=SearchResult.esm.js.map
