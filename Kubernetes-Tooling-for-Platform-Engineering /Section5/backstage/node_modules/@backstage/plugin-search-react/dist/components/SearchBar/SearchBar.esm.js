import { useApi, configApiRef, useApp, AnalyticsContext } from '@backstage/core-plugin-api';
import IconButton from '@material-ui/core/IconButton';
import InputAdornment from '@material-ui/core/InputAdornment';
import TextField from '@material-ui/core/TextField';
import Button from '@material-ui/core/Button';
import DefaultSearchIcon from '@material-ui/icons/Search';
import React, { forwardRef, useState, useRef, useEffect, useCallback } from 'react';
import useDebounce from 'react-use/esm/useDebounce';
import { SearchContextProvider, useSearch } from '../../context/SearchContext.esm.js';

const SearchBarBase = forwardRef((props, ref) => {
  const {
    onChange,
    onKeyDown = () => {
    },
    onClear = () => {
    },
    onSubmit = () => {
    },
    debounceTime = 200,
    clearButton = true,
    fullWidth = true,
    value: defaultValue,
    label,
    placeholder,
    inputProps = {},
    InputProps = {},
    endAdornment,
    ...rest
  } = props;
  const configApi = useApi(configApiRef);
  const [value, setValue] = useState("");
  const forwardedValueRef = useRef("");
  useEffect(() => {
    setValue((prevValue) => {
      if (prevValue === forwardedValueRef.current) {
        return String(defaultValue);
      }
      return prevValue;
    });
  }, [defaultValue, forwardedValueRef]);
  useDebounce(
    () => {
      forwardedValueRef.current = value;
      onChange(value);
    },
    debounceTime,
    [value]
  );
  const handleChange = useCallback(
    (e) => {
      setValue(e.target.value);
    },
    [setValue]
  );
  const handleKeyDown = useCallback(
    (e) => {
      if (onKeyDown) onKeyDown(e);
      if (onSubmit && e.key === "Enter") {
        onSubmit();
      }
    },
    [onKeyDown, onSubmit]
  );
  const handleClear = useCallback(() => {
    forwardedValueRef.current = "";
    onChange("");
    setValue("");
    if (onClear) {
      onClear();
    }
  }, [onChange, onClear]);
  const ariaLabel = label ? void 0 : "Search";
  const inputPlaceholder = placeholder ?? `Search in ${configApi.getOptionalString("app.title") || "Backstage"}`;
  const SearchIcon = useApp().getSystemIcon("search") || DefaultSearchIcon;
  const startAdornment = /* @__PURE__ */ React.createElement(InputAdornment, { position: "start" }, /* @__PURE__ */ React.createElement(IconButton, { "aria-label": "Query", size: "small", disabled: true }, /* @__PURE__ */ React.createElement(SearchIcon, null)));
  const clearButtonEndAdornment = /* @__PURE__ */ React.createElement(InputAdornment, { position: "end" }, /* @__PURE__ */ React.createElement(
    Button,
    {
      "aria-label": "Clear",
      size: "small",
      onClick: handleClear,
      onKeyDown: (event) => {
        if (event.key === "Enter") {
          event.stopPropagation();
        }
      }
    },
    "Clear"
  ));
  return /* @__PURE__ */ React.createElement(SearchContextProvider, { inheritParentContextIfAvailable: true }, /* @__PURE__ */ React.createElement(
    TextField,
    {
      id: "search-bar-text-field",
      "data-testid": "search-bar-next",
      variant: "outlined",
      margin: "normal",
      inputRef: ref,
      value,
      label,
      placeholder: inputPlaceholder,
      InputProps: {
        startAdornment,
        endAdornment: clearButton ? clearButtonEndAdornment : endAdornment,
        ...InputProps
      },
      inputProps: {
        "aria-label": ariaLabel,
        ...inputProps
      },
      fullWidth,
      onChange: handleChange,
      onKeyDown: handleKeyDown,
      ...rest
    }
  ));
});
const SearchBar = forwardRef((props, ref) => {
  const { value: initialValue = "", onChange, ...rest } = props;
  const { term, setTerm } = useSearch();
  useEffect(() => {
    if (initialValue) {
      setTerm(String(initialValue));
    }
  }, [initialValue, setTerm]);
  const handleChange = useCallback(
    (newValue) => {
      if (onChange) {
        onChange(newValue);
      } else {
        setTerm(newValue);
      }
    },
    [onChange, setTerm]
  );
  return /* @__PURE__ */ React.createElement(SearchContextProvider, { inheritParentContextIfAvailable: true }, /* @__PURE__ */ React.createElement(
    AnalyticsContext,
    {
      attributes: { pluginId: "search", extension: "SearchBar" }
    },
    /* @__PURE__ */ React.createElement(
      SearchBarBase,
      {
        ...rest,
        ref,
        value: term,
        onChange: handleChange
      }
    )
  ));
});

export { SearchBar, SearchBarBase };
//# sourceMappingURL=SearchBar.esm.js.map
