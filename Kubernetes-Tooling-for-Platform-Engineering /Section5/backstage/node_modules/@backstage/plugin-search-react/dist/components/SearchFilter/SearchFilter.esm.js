import React, { useRef } from 'react';
import { capitalize } from 'lodash';
import { v4 } from 'uuid';
import FormControl from '@material-ui/core/FormControl';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import Checkbox from '@material-ui/core/Checkbox';
import FormLabel from '@material-ui/core/FormLabel';
import { makeStyles } from '@material-ui/core/styles';
import { Select } from '@backstage/core-components';
import { useSearch } from '../../context/SearchContext.esm.js';
import { AutocompleteFilter } from './SearchFilter.Autocomplete.esm.js';
import { useDefaultFilterValue, useAsyncFilterValues } from './hooks.esm.js';

const useStyles = makeStyles({
  label: {
    textTransform: "capitalize"
  },
  checkboxWrapper: {
    display: "flex",
    alignItems: "center",
    width: "100%"
  },
  textWrapper: {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }
});
const CheckboxFilter = (props) => {
  const {
    className,
    defaultValue,
    label,
    name,
    values: givenValues = [],
    valuesDebounceMs
  } = props;
  const classes = useStyles();
  const { filters, setFilters } = useSearch();
  useDefaultFilterValue(name, defaultValue);
  const asyncValues = typeof givenValues === "function" ? givenValues : void 0;
  const defaultValues = typeof givenValues === "function" ? void 0 : givenValues;
  const { value: values = [], loading } = useAsyncFilterValues(
    asyncValues,
    "",
    defaultValues,
    valuesDebounceMs
  );
  const handleChange = (e) => {
    const {
      target: { value, checked }
    } = e;
    setFilters((prevFilters) => {
      const { [name]: filter, ...others } = prevFilters;
      const rest = (filter || []).filter((i) => i !== value);
      const items = checked ? [...rest, value] : rest;
      return items.length ? { ...others, [name]: items } : others;
    });
  };
  return /* @__PURE__ */ React.createElement(
    FormControl,
    {
      className,
      disabled: loading,
      fullWidth: true,
      "data-testid": "search-checkboxfilter-next"
    },
    label ? /* @__PURE__ */ React.createElement(FormLabel, { className: classes.label }, label) : null,
    values.map((value) => /* @__PURE__ */ React.createElement(
      FormControlLabel,
      {
        key: value,
        classes: {
          root: classes.checkboxWrapper,
          label: classes.textWrapper
        },
        label: value,
        control: /* @__PURE__ */ React.createElement(
          Checkbox,
          {
            color: "primary",
            inputProps: { "aria-labelledby": value },
            value,
            name: value,
            onChange: handleChange,
            checked: (filters[name] ?? []).includes(value)
          }
        )
      }
    ))
  );
};
const SelectFilter = (props) => {
  const {
    className,
    defaultValue,
    label,
    name,
    values: givenValues,
    valuesDebounceMs
  } = props;
  useDefaultFilterValue(name, defaultValue);
  const asyncValues = typeof givenValues === "function" ? givenValues : void 0;
  const defaultValues = typeof givenValues === "function" ? void 0 : givenValues;
  const { value: values = [], loading } = useAsyncFilterValues(
    asyncValues,
    "",
    defaultValues,
    valuesDebounceMs
  );
  const allOptionValue = useRef(v4());
  const allOption = { value: allOptionValue.current, label: "All" };
  const { filters, setFilters } = useSearch();
  const handleChange = (value) => {
    setFilters((prevFilters) => {
      const { [name]: filter, ...others } = prevFilters;
      return value !== allOptionValue.current ? { ...others, [name]: value } : others;
    });
  };
  const items = [allOption, ...values.map((value) => ({ value, label: value }))];
  return /* @__PURE__ */ React.createElement(
    FormControl,
    {
      disabled: loading,
      className,
      variant: "filled",
      fullWidth: true,
      "data-testid": "search-selectfilter-next"
    },
    /* @__PURE__ */ React.createElement(
      Select,
      {
        label: label ?? capitalize(name),
        selected: filters[name] || allOptionValue.current,
        onChange: handleChange,
        items
      }
    )
  );
};
const SearchFilter = (props) => {
  const { component: Element, ...elementProps } = props;
  return /* @__PURE__ */ React.createElement(Element, { ...elementProps });
};
SearchFilter.Checkbox = (props) => /* @__PURE__ */ React.createElement(SearchFilter, { ...props, component: CheckboxFilter });
SearchFilter.Select = (props) => /* @__PURE__ */ React.createElement(SearchFilter, { ...props, component: SelectFilter });
SearchFilter.Autocomplete = (props) => /* @__PURE__ */ React.createElement(SearchFilter, { ...props, component: AutocompleteFilter });

export { CheckboxFilter, SearchFilter, SelectFilter };
//# sourceMappingURL=SearchFilter.esm.js.map
