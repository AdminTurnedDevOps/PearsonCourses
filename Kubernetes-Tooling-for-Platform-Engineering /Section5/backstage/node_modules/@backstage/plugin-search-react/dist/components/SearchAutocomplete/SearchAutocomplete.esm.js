import React, { useCallback, useMemo } from 'react';
import CircularProgress from '@material-ui/core/CircularProgress';
import { makeStyles } from '@material-ui/core/styles';
import Autocomplete from '@material-ui/lab/Autocomplete';
import { SearchContextProvider, useSearch } from '../../context/SearchContext.esm.js';
import { SearchBar } from '../SearchBar/SearchBar.esm.js';

const useStyles = makeStyles((theme) => ({
  loading: {
    right: theme.spacing(1),
    position: "absolute"
  }
}));
const withContext = (Component) => {
  return (props) => /* @__PURE__ */ React.createElement(SearchContextProvider, { inheritParentContextIfAvailable: true }, /* @__PURE__ */ React.createElement(Component, { ...props }));
};
const SearchAutocompleteLoadingAdornment = () => {
  const classes = useStyles();
  return /* @__PURE__ */ React.createElement(
    CircularProgress,
    {
      className: classes.loading,
      "data-testid": "search-autocomplete-progressbar",
      color: "inherit",
      size: 20
    }
  );
};
const SearchAutocomplete = withContext(
  function SearchAutocompleteComponent(props) {
    const {
      loading,
      value,
      onChange = () => {
      },
      options = [],
      getOptionLabel = (option) => String(option),
      inputPlaceholder,
      inputDebounceTime,
      freeSolo = true,
      fullWidth = true,
      clearOnBlur = false,
      "data-testid": dataTestId = "search-autocomplete",
      ...rest
    } = props;
    const { setTerm } = useSearch();
    const getInputValue = useCallback(
      (option) => {
        if (!option) return "";
        if (typeof option === "string") return option;
        return getOptionLabel(option);
      },
      [getOptionLabel]
    );
    const inputValue = useMemo(
      () => getInputValue(value),
      [value, getInputValue]
    );
    const handleChange = useCallback(
      (event, option, reason, details) => {
        setTerm(getInputValue(option));
        onChange(event, option, reason, details);
      },
      [getInputValue, setTerm, onChange]
    );
    const renderInput = useCallback(
      ({
        InputProps: { ref, className, endAdornment },
        InputLabelProps,
        ...params
      }) => /* @__PURE__ */ React.createElement(
        SearchBar,
        {
          ...params,
          ref,
          clearButton: false,
          value: inputValue,
          placeholder: inputPlaceholder,
          debounceTime: inputDebounceTime,
          endAdornment: loading ? /* @__PURE__ */ React.createElement(SearchAutocompleteLoadingAdornment, null) : endAdornment,
          InputProps: { className }
        }
      ),
      [loading, inputValue, inputPlaceholder, inputDebounceTime]
    );
    return /* @__PURE__ */ React.createElement(
      Autocomplete,
      {
        ...rest,
        "data-testid": dataTestId,
        value,
        onChange: handleChange,
        options,
        getOptionLabel,
        renderInput,
        freeSolo,
        fullWidth,
        clearOnBlur
      }
    );
  }
);

export { SearchAutocomplete };
//# sourceMappingURL=SearchAutocomplete.esm.js.map
