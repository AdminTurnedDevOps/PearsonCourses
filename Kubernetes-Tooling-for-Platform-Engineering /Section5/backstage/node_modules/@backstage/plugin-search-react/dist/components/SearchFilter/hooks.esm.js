import { useRef, useEffect } from 'react';
import useAsyncFn from 'react-use/esm/useAsyncFn';
import useDebounce from 'react-use/esm/useDebounce';
import { useSearch } from '../../context/SearchContext.esm.js';

const useAsyncFilterValues = (fn, inputValue, defaultValues = [], debounce = 250) => {
  const valuesMemo = useRef({});
  const definiteFn = fn || (() => Promise.resolve([]));
  const [state, callback] = useAsyncFn(definiteFn, [inputValue], {
    loading: true
  });
  useDebounce(
    () => {
      if (valuesMemo.current[inputValue] === void 0) {
        valuesMemo.current[inputValue] = callback(inputValue).then((values) => {
          valuesMemo.current[inputValue] = values;
          return values;
        });
      }
    },
    debounce,
    [callback, inputValue]
  );
  if (defaultValues.length) {
    return {
      loading: false,
      value: defaultValues
    };
  }
  const possibleValue = valuesMemo.current[inputValue];
  if (Array.isArray(possibleValue)) {
    return {
      loading: false,
      value: possibleValue
    };
  }
  return state;
};
const useDefaultFilterValue = (name, defaultValue) => {
  const { setFilters } = useSearch();
  useEffect(() => {
    if (defaultValue && [defaultValue].flat().length > 0) {
      setFilters((prevFilters) => ({
        ...prevFilters,
        [name]: defaultValue
      }));
    }
  }, []);
};

export { useAsyncFilterValues, useDefaultFilterValue };
//# sourceMappingURL=hooks.esm.js.map
