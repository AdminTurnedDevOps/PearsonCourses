import React, { useCallback, useState } from 'react';
import qs from 'qs';
import List from '@material-ui/core/List';
import ListSubheader from '@material-ui/core/ListSubheader';
import Menu from '@material-ui/core/Menu';
import MenuItem from '@material-ui/core/MenuItem';
import InputBase from '@material-ui/core/InputBase';
import Select from '@material-ui/core/Select';
import Chip from '@material-ui/core/Chip';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import AddIcon from '@material-ui/icons/Add';
import ArrowRightIcon from '@material-ui/icons/ArrowForwardIos';
import { EmptyState, Progress, ResponseErrorPanel, Link } from '@backstage/core-components';
import { AnalyticsContext } from '@backstage/core-plugin-api';
import { useSearchResultListItemExtensions } from '../../extensions.esm.js';
import { DefaultResultListItem as HigherOrderDefaultResultListItem } from '../DefaultResultListItem/DefaultResultListItem.esm.js';
import { SearchResultState } from '../SearchResult/SearchResult.esm.js';

const useStyles = makeStyles((theme) => ({
  listSubheader: {
    display: "flex",
    alignItems: "center"
  },
  listSubheaderName: {
    marginLeft: theme.spacing(1),
    textTransform: "uppercase"
  },
  listSubheaderChip: {
    color: theme.palette.text.secondary,
    margin: theme.spacing(0, 0, 0, 1.5)
  },
  listSubheaderFilter: {
    display: "flex",
    color: theme.palette.text.secondary,
    margin: theme.spacing(0, 0, 0, 1.5)
  },
  listSubheaderLink: {
    marginLeft: "auto",
    display: "flex",
    alignItems: "center"
  },
  listSubheaderLinkIcon: {
    fontSize: "inherit",
    marginLeft: theme.spacing(0.5)
  }
}));
const SearchResultGroupFilterFieldLayout = (props) => {
  const classes = useStyles();
  const { label, children, ...rest } = props;
  return /* @__PURE__ */ React.createElement(
    Chip,
    {
      ...rest,
      className: classes.listSubheaderFilter,
      variant: "outlined",
      label: /* @__PURE__ */ React.createElement(React.Fragment, null, label, ": ", children)
    }
  );
};
const NullIcon = () => null;
const useSearchResultGroupTextFilterStyles = makeStyles((theme) => ({
  root: {
    fontSize: "inherit",
    "&:focus": {
      outline: "none",
      background: theme.palette.common.white
    },
    "&:not(:focus)": {
      cursor: "pointer",
      color: theme.palette.primary.main,
      "&:hover": {
        textDecoration: "underline"
      }
    }
  }
}));
const SearchResultGroupTextFilterField = (props) => {
  const classes = useSearchResultGroupTextFilterStyles();
  const { label, value = "None", onChange, onDelete } = props;
  const handleChange = useCallback(
    (e) => {
      onChange(e.target.value);
    },
    [onChange]
  );
  return /* @__PURE__ */ React.createElement(SearchResultGroupFilterFieldLayout, { label, onDelete }, /* @__PURE__ */ React.createElement(
    Typography,
    {
      role: "textbox",
      component: "span",
      className: classes.root,
      onChange: handleChange,
      contentEditable: true,
      suppressContentEditableWarning: true
    },
    value?.toString()
  ));
};
const useSearchResultGroupSelectFilterStyles = makeStyles((theme) => ({
  root: {
    fontSize: "inherit",
    "&:not(:focus)": {
      cursor: "pointer",
      color: theme.palette.primary.main,
      "&:hover": {
        textDecoration: "underline"
      }
    },
    "&:focus": {
      outline: "none"
    },
    "&>div:first-child": {
      padding: 0
    }
  }
}));
const SearchResultGroupSelectFilterField = (props) => {
  const classes = useSearchResultGroupSelectFilterStyles();
  const { label, value = "none", onChange, onDelete, children } = props;
  const handleChange = useCallback(
    (e) => {
      onChange(e.target.value);
    },
    [onChange]
  );
  return /* @__PURE__ */ React.createElement(SearchResultGroupFilterFieldLayout, { label, onDelete }, /* @__PURE__ */ React.createElement(
    Select,
    {
      className: classes.root,
      value,
      onChange: handleChange,
      input: /* @__PURE__ */ React.createElement(InputBase, null),
      IconComponent: NullIcon
    },
    /* @__PURE__ */ React.createElement(MenuItem, { value: "none" }, "None"),
    children
  ));
};
function SearchResultGroupLayout(props) {
  const classes = useStyles();
  const [anchorEl, setAnchorEl] = useState(null);
  const {
    error,
    loading,
    icon,
    title,
    titleProps = {},
    link = /* @__PURE__ */ React.createElement(React.Fragment, null, "See all", /* @__PURE__ */ React.createElement(ArrowRightIcon, { className: classes.listSubheaderLinkIcon })),
    linkProps = {},
    filterOptions,
    renderFilterOption = (filterOption) => /* @__PURE__ */ React.createElement(MenuItem, { key: String(filterOption), value: String(filterOption) }, String(filterOption)),
    filterFields,
    renderFilterField,
    resultItems,
    renderResultItem = (resultItem) => /* @__PURE__ */ React.createElement(
      HigherOrderDefaultResultListItem,
      {
        key: resultItem.document.location,
        result: resultItem.document
      }
    ),
    disableRenderingWithNoResults,
    noResultsComponent = disableRenderingWithNoResults ? null : /* @__PURE__ */ React.createElement(EmptyState, { missing: "data", title: "Sorry, no results were found" }),
    ...rest
  } = props;
  const handleClick = useCallback((e) => {
    setAnchorEl(e.currentTarget);
  }, []);
  const handleClose = useCallback(() => {
    setAnchorEl(null);
  }, []);
  if (loading) {
    return /* @__PURE__ */ React.createElement(Progress, null);
  }
  if (error) {
    return /* @__PURE__ */ React.createElement(
      ResponseErrorPanel,
      {
        title: "Error encountered while fetching search results",
        error
      }
    );
  }
  if (!resultItems?.length) {
    return /* @__PURE__ */ React.createElement(React.Fragment, null, noResultsComponent);
  }
  return /* @__PURE__ */ React.createElement(List, { ...rest }, /* @__PURE__ */ React.createElement(ListSubheader, { className: classes.listSubheader }, icon, /* @__PURE__ */ React.createElement(
    Typography,
    {
      className: classes.listSubheaderName,
      component: "strong",
      ...titleProps
    },
    title
  ), filterOptions ? /* @__PURE__ */ React.createElement(
    Chip,
    {
      className: classes.listSubheaderChip,
      component: "button",
      icon: /* @__PURE__ */ React.createElement(AddIcon, null),
      variant: "outlined",
      label: "Add filter",
      "aria-controls": "filters-menu",
      "aria-haspopup": "true",
      onClick: handleClick
    }
  ) : null, filterOptions ? /* @__PURE__ */ React.createElement(
    Menu,
    {
      id: "filters-menu",
      anchorEl,
      open: Boolean(anchorEl),
      onClose: handleClose,
      onClick: handleClose,
      keepMounted: true
    },
    filterOptions.map(renderFilterOption)
  ) : null, filterFields?.map(
    (filterField) => renderFilterField?.(filterField) ?? null
  ), /* @__PURE__ */ React.createElement(Link, { className: classes.listSubheaderLink, to: "/search", ...linkProps }, link)), resultItems.map(renderResultItem));
}
function SearchResultGroup(props) {
  const { query, children, renderResultItem, linkProps = {}, ...rest } = props;
  const defaultRenderResultItem = useSearchResultListItemExtensions(children);
  return /* @__PURE__ */ React.createElement(
    AnalyticsContext,
    {
      attributes: {
        pluginId: "search",
        extension: "SearchResultGroup"
      }
    },
    /* @__PURE__ */ React.createElement(SearchResultState, { query }, ({ loading, error, value }, { term, types, pageCursor, filters = {} }) => {
      const to = `/search?${qs.stringify(
        { term, types, filters, pageCursor, query: term },
        { arrayFormat: "brackets" }
      )}`;
      return /* @__PURE__ */ React.createElement(
        SearchResultGroupLayout,
        {
          ...rest,
          error,
          loading,
          linkProps: { to, ...linkProps },
          filterFields: Object.keys(filters),
          resultItems: value?.results,
          renderResultItem: renderResultItem ?? defaultRenderResultItem
        }
      );
    })
  );
}

export { SearchResultGroup, SearchResultGroupFilterFieldLayout, SearchResultGroupLayout, SearchResultGroupSelectFilterField, SearchResultGroupTextFilterField };
//# sourceMappingURL=SearchResultGroup.esm.js.map
