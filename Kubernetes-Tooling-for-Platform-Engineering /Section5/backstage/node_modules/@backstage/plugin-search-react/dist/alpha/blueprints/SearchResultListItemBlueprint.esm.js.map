{"version":3,"file":"SearchResultListItemBlueprint.esm.js","sources":["../../../src/alpha/blueprints/SearchResultListItemBlueprint.tsx"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { lazy } from 'react';\nimport {\n  createExtensionBlueprint,\n  ExtensionBoundary,\n} from '@backstage/frontend-plugin-api';\nimport {\n  SearchResultItemExtensionComponent,\n  SearchResultItemExtensionPredicate,\n  searchResultListItemDataRef,\n} from './types';\nimport {\n  SearchResultListItemExtension,\n  SearchResultListItemExtensionProps,\n} from '../../extensions';\n\n/** @alpha */\nexport interface SearchResultListItemBlueprintParams {\n  /**\n   * The extension component.\n   */\n  component: (options: {\n    config: { noTrack?: boolean };\n  }) => Promise<SearchResultItemExtensionComponent>;\n  /**\n   * When an extension defines a predicate, it returns true if the result should be rendered by that extension.\n   * Defaults to a predicate that returns true, which means it renders all sorts of results.\n   */\n  predicate?: SearchResultItemExtensionPredicate;\n}\n\n/**\n * @alpha\n * Creates SearchResultListItem extensions\n */\nexport const SearchResultListItemBlueprint = createExtensionBlueprint({\n  kind: 'search-result-list-item',\n  attachTo: {\n    id: 'page:search',\n    input: 'items',\n  },\n  config: {\n    schema: {\n      noTrack: z => z.boolean().default(false),\n    },\n  },\n  output: [searchResultListItemDataRef],\n  dataRefs: {\n    item: searchResultListItemDataRef,\n  },\n  *factory(params: SearchResultListItemBlueprintParams, { config, node }) {\n    const ExtensionComponent = lazy(() =>\n      params.component({ config }).then(component => ({ default: component })),\n    );\n\n    yield searchResultListItemDataRef({\n      predicate: params.predicate,\n      component: (props: SearchResultListItemExtensionProps) => (\n        <ExtensionBoundary node={node}>\n          <SearchResultListItemExtension\n            rank={props.rank}\n            result={props.result}\n            noTrack={config.noTrack}\n          >\n            <ExtensionComponent {...props} />\n          </SearchResultListItemExtension>\n        </ExtensionBoundary>\n      ),\n    });\n  },\n});\n"],"names":[],"mappings":";;;;;AAkDO,MAAM,gCAAgC,wBAAyB,CAAA;AAAA,EACpE,IAAM,EAAA,yBAAA;AAAA,EACN,QAAU,EAAA;AAAA,IACR,EAAI,EAAA,aAAA;AAAA,IACJ,KAAO,EAAA;AAAA,GACT;AAAA,EACA,MAAQ,EAAA;AAAA,IACN,MAAQ,EAAA;AAAA,MACN,SAAS,CAAK,CAAA,KAAA,CAAA,CAAE,OAAQ,EAAA,CAAE,QAAQ,KAAK;AAAA;AACzC,GACF;AAAA,EACA,MAAA,EAAQ,CAAC,2BAA2B,CAAA;AAAA,EACpC,QAAU,EAAA;AAAA,IACR,IAAM,EAAA;AAAA,GACR;AAAA,EACA,CAAC,OAAQ,CAAA,MAAA,EAA6C,EAAE,MAAA,EAAQ,MAAQ,EAAA;AACtE,IAAA,MAAM,kBAAqB,GAAA,IAAA;AAAA,MAAK,MAC9B,MAAA,CAAO,SAAU,CAAA,EAAE,MAAO,EAAC,CAAE,CAAA,IAAA,CAAK,CAAc,SAAA,MAAA,EAAE,OAAS,EAAA,SAAA,EAAY,CAAA;AAAA,KACzE;AAEA,IAAA,MAAM,2BAA4B,CAAA;AAAA,MAChC,WAAW,MAAO,CAAA,SAAA;AAAA,MAClB,SAAW,EAAA,CAAC,KACV,qBAAA,KAAA,CAAA,aAAA,CAAC,qBAAkB,IACjB,EAAA,kBAAA,KAAA,CAAA,aAAA;AAAA,QAAC,6BAAA;AAAA,QAAA;AAAA,UACC,MAAM,KAAM,CAAA,IAAA;AAAA,UACZ,QAAQ,KAAM,CAAA,MAAA;AAAA,UACd,SAAS,MAAO,CAAA;AAAA,SAAA;AAAA,wBAEhB,KAAA,CAAA,aAAA,CAAC,kBAAoB,EAAA,EAAA,GAAG,KAAO,EAAA;AAAA,OAEnC;AAAA,KAEH,CAAA;AAAA;AAEL,CAAC;;;;"}