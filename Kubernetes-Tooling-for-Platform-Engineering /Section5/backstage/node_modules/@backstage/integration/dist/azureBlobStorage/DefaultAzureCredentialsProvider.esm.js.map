{"version":3,"file":"DefaultAzureCredentialsProvider.esm.js","sources":["../../src/azureBlobStorage/DefaultAzureCredentialsProvider.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DefaultAzureCredential,\n  ClientSecretCredential,\n  TokenCredential,\n} from '@azure/identity';\nimport { AzureBlobStorageIntegrationConfig } from './config';\nimport { AzureCredentialsManager } from './types';\nimport { ScmIntegrationRegistry } from '../registry';\n\n/**\n * Default implementation of AzureCredentialsManager that supports multiple Azure Blob Storage integrations.\n * @public\n */\nexport class DefaultAzureCredentialsManager implements AzureCredentialsManager {\n  private cachedCredentials: Map<string, TokenCredential>;\n\n  private constructor(\n    private readonly configProviders: Map<\n      string,\n      AzureBlobStorageIntegrationConfig\n    >,\n  ) {\n    this.cachedCredentials = new Map<string, TokenCredential>();\n  }\n\n  /**\n   * Creates an instance of DefaultAzureCredentialsManager from a Backstage integration registry.\n   */\n  static fromIntegrations(\n    integrations: ScmIntegrationRegistry,\n  ): DefaultAzureCredentialsManager {\n    const configProviders = integrations.azureBlobStorage\n      .list()\n      .reduce((acc, integration) => {\n        acc.set(\n          integration.config.accountName || 'default',\n          integration.config,\n        );\n        return acc;\n      }, new Map<string, AzureBlobStorageIntegrationConfig>());\n\n    return new DefaultAzureCredentialsManager(configProviders);\n  }\n\n  private createCredential(\n    config: AzureBlobStorageIntegrationConfig,\n  ): TokenCredential {\n    if (\n      config.aadCredential &&\n      config.aadCredential.clientId &&\n      config.aadCredential.clientSecret &&\n      config.aadCredential.tenantId\n    ) {\n      return new ClientSecretCredential(\n        config.aadCredential.tenantId,\n        config.aadCredential.clientId,\n        config.aadCredential.clientSecret,\n      );\n    }\n\n    return new DefaultAzureCredential();\n  }\n\n  async getCredentials(accountName: string): Promise<TokenCredential> {\n    if (this.cachedCredentials.has(accountName)) {\n      return this.cachedCredentials.get(accountName)!;\n    }\n\n    const config = this.configProviders.get(accountName);\n    if (!config) {\n      throw new Error(`No configuration found for account: ${accountName}`);\n    }\n\n    const credential = this.createCredential(config);\n\n    // Cache the credentials for future use\n    this.cachedCredentials.set(accountName, credential);\n\n    return credential;\n  }\n}\n"],"names":[],"mappings":";;AA6BO,MAAM,8BAAkE,CAAA;AAAA,EAGrE,YACW,eAIjB,EAAA;AAJiB,IAAA,IAAA,CAAA,eAAA,GAAA,eAAA;AAKjB,IAAK,IAAA,CAAA,iBAAA,uBAAwB,GAA6B,EAAA;AAAA;AAC5D,EATQ,iBAAA;AAAA;AAAA;AAAA;AAAA,EAcR,OAAO,iBACL,YACgC,EAAA;AAChC,IAAM,MAAA,eAAA,GAAkB,aAAa,gBAClC,CAAA,IAAA,GACA,MAAO,CAAA,CAAC,KAAK,WAAgB,KAAA;AAC5B,MAAI,GAAA,CAAA,GAAA;AAAA,QACF,WAAA,CAAY,OAAO,WAAe,IAAA,SAAA;AAAA,QAClC,WAAY,CAAA;AAAA,OACd;AACA,MAAO,OAAA,GAAA;AAAA,KACT,kBAAO,IAAA,GAAA,EAAgD,CAAA;AAEzD,IAAO,OAAA,IAAI,+BAA+B,eAAe,CAAA;AAAA;AAC3D,EAEQ,iBACN,MACiB,EAAA;AACjB,IACE,IAAA,MAAA,CAAO,aACP,IAAA,MAAA,CAAO,aAAc,CAAA,QAAA,IACrB,OAAO,aAAc,CAAA,YAAA,IACrB,MAAO,CAAA,aAAA,CAAc,QACrB,EAAA;AACA,MAAA,OAAO,IAAI,sBAAA;AAAA,QACT,OAAO,aAAc,CAAA,QAAA;AAAA,QACrB,OAAO,aAAc,CAAA,QAAA;AAAA,QACrB,OAAO,aAAc,CAAA;AAAA,OACvB;AAAA;AAGF,IAAA,OAAO,IAAI,sBAAuB,EAAA;AAAA;AACpC,EAEA,MAAM,eAAe,WAA+C,EAAA;AAClE,IAAA,IAAI,IAAK,CAAA,iBAAA,CAAkB,GAAI,CAAA,WAAW,CAAG,EAAA;AAC3C,MAAO,OAAA,IAAA,CAAK,iBAAkB,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA;AAG/C,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,eAAgB,CAAA,GAAA,CAAI,WAAW,CAAA;AACnD,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAA,MAAM,IAAI,KAAA,CAAM,CAAuC,oCAAA,EAAA,WAAW,CAAE,CAAA,CAAA;AAAA;AAGtE,IAAM,MAAA,UAAA,GAAa,IAAK,CAAA,gBAAA,CAAiB,MAAM,CAAA;AAG/C,IAAK,IAAA,CAAA,iBAAA,CAAkB,GAAI,CAAA,WAAA,EAAa,UAAU,CAAA;AAElD,IAAO,OAAA,UAAA;AAAA;AAEX;;;;"}