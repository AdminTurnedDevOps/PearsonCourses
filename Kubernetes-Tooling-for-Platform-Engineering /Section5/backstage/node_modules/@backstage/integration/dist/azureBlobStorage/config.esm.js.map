{"version":3,"file":"config.esm.js","sources":["../../src/azureBlobStorage/config.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\nconst AZURE_HOST = 'blob.core.windows.net';\n\n/**\n * The configuration parameters for a single Azure Blob Storage account.\n *\n * @public\n */\nexport type AzureBlobStorageIntegrationConfig = {\n  /**\n   * The name of the Azure Storage Account, e.g., \"mystorageaccount\".\n   */\n  accountName?: string;\n\n  /**\n   * The primary or secondary key for the Azure Storage Account.\n   * Only required if connectionString or SAS token are not specified.\n   */\n  accountKey?: string;\n\n  /**\n   * A Shared Access Signature (SAS) token for limited access to resources.\n   */\n  sasToken?: string;\n\n  /**\n   * A full connection string for the Azure Storage Account.\n   * This includes the account name, key, and endpoint details.\n   */\n  connectionString?: string;\n\n  /**\n   * Optional endpoint suffix for custom domains or sovereign clouds.\n   * e.g., \"core.windows.net\" for public Azure or \"core.usgovcloudapi.net\" for US Government cloud.\n   */\n  endpointSuffix?: string;\n\n  /**\n   * The host of the target that this matches on, e.g., \"blob.core.windows.net\".\n   */\n  host: string;\n\n  endpoint?: string;\n  /**\n   * Optional credential to use for Azure Active Directory authentication.\n   */\n  aadCredential?: {\n    /**\n     * The client ID of the Azure AD application.\n     */\n    clientId: string;\n\n    /**\n     * The tenant ID for Azure AD.\n     */\n    tenantId: string;\n\n    /**\n     * The client secret for the Azure AD application.\n     */\n    clientSecret: string;\n  };\n};\n\n/**\n * Reads a single Azure Blob Storage integration config.\n *\n * @param config - The config object of a single integration.\n * @public\n */\nexport function readAzureBlobStorageIntegrationConfig(\n  config: Config,\n): AzureBlobStorageIntegrationConfig {\n  const endpoint = config.getOptionalString('endpoint');\n  const accountName = config.getString('accountName');\n  const accountKey = config.getOptionalString('accountKey')?.trim();\n  const sasToken = config.getOptionalString('sasToken')?.trim();\n  const connectionString = config.getOptionalString('connectionString')?.trim();\n  const endpointSuffix = config.getOptionalString('endpointSuffix')?.trim();\n\n  let host;\n  let pathname;\n  if (endpoint) {\n    try {\n      const url = new URL(endpoint);\n      host = url.host;\n      pathname = url.pathname;\n    } catch {\n      throw new Error(\n        `invalid azureBlobStorage integration config, endpoint '${endpoint}' is not a valid URL`,\n      );\n    }\n    if (pathname !== '/') {\n      throw new Error(\n        `invalid azureBlobStorage integration config, endpoints cannot contain path, got '${endpoint}'`,\n      );\n    }\n  } else {\n    host = AZURE_HOST;\n  }\n  const aadCredential = config.has('aadCredential')\n    ? {\n        clientId: config.getString('aadCredential.clientId'),\n        tenantId: config.getString('aadCredential.tenantId'),\n        clientSecret: config.getString('aadCredential.clientSecret')?.trim(),\n      }\n    : undefined;\n\n  if (accountKey && sasToken) {\n    throw new Error(\n      `Invalid Azure Blob Storage config for ${accountName}: Both account key and SAS token cannot be used simultaneously.`,\n    );\n  }\n\n  if (aadCredential && (accountKey || sasToken)) {\n    throw new Error(\n      `Invalid Azure Blob Storage config for ${accountName}: Cannot use both Azure AD credentials and account keys/SAS tokens for the same account.`,\n    );\n  }\n\n  return {\n    host,\n    endpoint,\n    accountName,\n    accountKey,\n    sasToken,\n    connectionString,\n    endpointSuffix,\n    aadCredential,\n  };\n}\n\n/**\n * Reads a set of Azure Blob Storage integration configs.\n *\n * @param configs - All of the integration config objects.\n * @public\n */\nexport function readAzureBlobStorageIntegrationConfigs(\n  configs: Config[],\n): AzureBlobStorageIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAzureBlobStorageIntegrationConfig);\n\n  // If no explicit blob.core.windows.net integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AZURE_HOST)) {\n    result.push({\n      host: AZURE_HOST,\n    });\n  }\n  return result;\n}\n"],"names":[],"mappings":"AAkBA,MAAM,UAAa,GAAA,uBAAA;AAqEZ,SAAS,sCACd,MACmC,EAAA;AACnC,EAAM,MAAA,QAAA,GAAW,MAAO,CAAA,iBAAA,CAAkB,UAAU,CAAA;AACpD,EAAM,MAAA,WAAA,GAAc,MAAO,CAAA,SAAA,CAAU,aAAa,CAAA;AAClD,EAAA,MAAM,UAAa,GAAA,MAAA,CAAO,iBAAkB,CAAA,YAAY,GAAG,IAAK,EAAA;AAChE,EAAA,MAAM,QAAW,GAAA,MAAA,CAAO,iBAAkB,CAAA,UAAU,GAAG,IAAK,EAAA;AAC5D,EAAA,MAAM,gBAAmB,GAAA,MAAA,CAAO,iBAAkB,CAAA,kBAAkB,GAAG,IAAK,EAAA;AAC5E,EAAA,MAAM,cAAiB,GAAA,MAAA,CAAO,iBAAkB,CAAA,gBAAgB,GAAG,IAAK,EAAA;AAExE,EAAI,IAAA,IAAA;AACJ,EAAI,IAAA,QAAA;AACJ,EAAA,IAAI,QAAU,EAAA;AACZ,IAAI,IAAA;AACF,MAAM,MAAA,GAAA,GAAM,IAAI,GAAA,CAAI,QAAQ,CAAA;AAC5B,MAAA,IAAA,GAAO,GAAI,CAAA,IAAA;AACX,MAAA,QAAA,GAAW,GAAI,CAAA,QAAA;AAAA,KACT,CAAA,MAAA;AACN,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,0DAA0D,QAAQ,CAAA,oBAAA;AAAA,OACpE;AAAA;AAEF,IAAA,IAAI,aAAa,GAAK,EAAA;AACpB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,oFAAoF,QAAQ,CAAA,CAAA;AAAA,OAC9F;AAAA;AACF,GACK,MAAA;AACL,IAAO,IAAA,GAAA,UAAA;AAAA;AAET,EAAA,MAAM,aAAgB,GAAA,MAAA,CAAO,GAAI,CAAA,eAAe,CAC5C,GAAA;AAAA,IACE,QAAA,EAAU,MAAO,CAAA,SAAA,CAAU,wBAAwB,CAAA;AAAA,IACnD,QAAA,EAAU,MAAO,CAAA,SAAA,CAAU,wBAAwB,CAAA;AAAA,IACnD,YAAc,EAAA,MAAA,CAAO,SAAU,CAAA,4BAA4B,GAAG,IAAK;AAAA,GAErE,GAAA,KAAA,CAAA;AAEJ,EAAA,IAAI,cAAc,QAAU,EAAA;AAC1B,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,yCAAyC,WAAW,CAAA,+DAAA;AAAA,KACtD;AAAA;AAGF,EAAI,IAAA,aAAA,KAAkB,cAAc,QAAW,CAAA,EAAA;AAC7C,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,yCAAyC,WAAW,CAAA,wFAAA;AAAA,KACtD;AAAA;AAGF,EAAO,OAAA;AAAA,IACL,IAAA;AAAA,IACA,QAAA;AAAA,IACA,WAAA;AAAA,IACA,UAAA;AAAA,IACA,QAAA;AAAA,IACA,gBAAA;AAAA,IACA,cAAA;AAAA,IACA;AAAA,GACF;AACF;AAQO,SAAS,uCACd,OACqC,EAAA;AAErC,EAAM,MAAA,MAAA,GAAS,OAAQ,CAAA,GAAA,CAAI,qCAAqC,CAAA;AAIhE,EAAA,IAAI,CAAC,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,IAAA,KAAS,UAAU,CAAG,EAAA;AAC5C,IAAA,MAAA,CAAO,IAAK,CAAA;AAAA,MACV,IAAM,EAAA;AAAA,KACP,CAAA;AAAA;AAEH,EAAO,OAAA,MAAA;AACT;;;;"}