{"version":3,"file":"DefaultAzureDevOpsCredentialsProvider.esm.js","sources":["../../src/azure/DefaultAzureDevOpsCredentialsProvider.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  AzureDevOpsCredentials,\n  AzureDevOpsCredentialsProvider,\n} from './types';\nimport { CachedAzureDevOpsCredentialsProvider } from './CachedAzureDevOpsCredentialsProvider';\nimport { ScmIntegrationRegistry } from '../registry';\nimport { DefaultAzureCredential } from '@azure/identity';\n\n/**\n * Default implementation of AzureDevOpsCredentialsProvider.\n * @public\n */\nexport class DefaultAzureDevOpsCredentialsProvider\n  implements AzureDevOpsCredentialsProvider\n{\n  static fromIntegrations(\n    integrations: ScmIntegrationRegistry,\n  ): DefaultAzureDevOpsCredentialsProvider {\n    const providers = integrations.azure.list().reduce((acc, integration) => {\n      integration.config.credentials?.forEach(credential => {\n        if (\n          credential.organizations === undefined ||\n          credential.organizations.length === 0\n        ) {\n          if (acc.get(integration.config.host) === undefined) {\n            acc.set(\n              integration.config.host,\n              CachedAzureDevOpsCredentialsProvider.fromAzureDevOpsCredential(\n                credential,\n              ),\n            );\n          }\n        } else {\n          const provider =\n            CachedAzureDevOpsCredentialsProvider.fromAzureDevOpsCredential(\n              credential,\n            );\n          credential.organizations?.forEach(organization => {\n            acc.set(`${integration.config.host}/${organization}`, provider);\n          });\n        }\n      });\n\n      if (\n        integration.config.host === 'dev.azure.com' &&\n        acc.get(integration.config.host) === undefined\n      ) {\n        acc.set(\n          integration.config.host,\n          CachedAzureDevOpsCredentialsProvider.fromTokenCredential(\n            new DefaultAzureCredential(),\n          ),\n        );\n      }\n\n      return acc;\n    }, new Map<string, CachedAzureDevOpsCredentialsProvider>());\n\n    return new DefaultAzureDevOpsCredentialsProvider(providers);\n  }\n\n  private constructor(\n    private readonly providers: Map<\n      string,\n      CachedAzureDevOpsCredentialsProvider\n    >,\n  ) {}\n\n  private forAzureDevOpsServerOrganization(\n    url: URL,\n  ): AzureDevOpsCredentialsProvider | undefined {\n    const parts = url.pathname.split('/').filter(part => part !== '');\n    if (url.host !== 'dev.azure.com' && parts.length > 0) {\n      if (parts[0] !== 'tfs') {\n        // url format: https://{host}/{organization}\n        return this.providers.get(`${url.host}/${parts[0]}`);\n      } else if (parts[0] === 'tfs' && parts.length > 1) {\n        // url format: https://{host}/tfs/{organization}\n        return this.providers.get(`${url.host}/${parts[1]}`);\n      }\n    }\n\n    return undefined;\n  }\n\n  private forAzureDevOpsOrganization(\n    url: URL,\n  ): AzureDevOpsCredentialsProvider | undefined {\n    const parts = url.pathname.split('/').filter(part => part !== '');\n    if (url.host === 'dev.azure.com' && parts.length > 0) {\n      // url format: https://{host}/{organization}\n      return this.providers.get(`${url.host}/${parts[0]}`);\n    }\n\n    return undefined;\n  }\n\n  private forHost(url: URL): AzureDevOpsCredentialsProvider | undefined {\n    return this.providers.get(url.host);\n  }\n\n  async getCredentials(opts: {\n    url: string;\n  }): Promise<AzureDevOpsCredentials | undefined> {\n    const url = new URL(opts.url);\n    const provider =\n      this.forAzureDevOpsOrganization(url) ??\n      this.forAzureDevOpsServerOrganization(url) ??\n      this.forHost(url);\n\n    if (provider === undefined) {\n      return undefined;\n    }\n\n    return provider.getCredentials(opts);\n  }\n}\n"],"names":[],"mappings":";;;AA2BO,MAAM,qCAEb,CAAA;AAAA,EA+CU,YACW,SAIjB,EAAA;AAJiB,IAAA,IAAA,CAAA,SAAA,GAAA,SAAA;AAAA;AAIhB,EAnDH,OAAO,iBACL,YACuC,EAAA;AACvC,IAAM,MAAA,SAAA,GAAY,aAAa,KAAM,CAAA,IAAA,GAAO,MAAO,CAAA,CAAC,KAAK,WAAgB,KAAA;AACvE,MAAY,WAAA,CAAA,MAAA,CAAO,WAAa,EAAA,OAAA,CAAQ,CAAc,UAAA,KAAA;AACpD,QAAA,IACE,WAAW,aAAkB,KAAA,KAAA,CAAA,IAC7B,UAAW,CAAA,aAAA,CAAc,WAAW,CACpC,EAAA;AACA,UAAA,IAAI,IAAI,GAAI,CAAA,WAAA,CAAY,MAAO,CAAA,IAAI,MAAM,KAAW,CAAA,EAAA;AAClD,YAAI,GAAA,CAAA,GAAA;AAAA,cACF,YAAY,MAAO,CAAA,IAAA;AAAA,cACnB,oCAAqC,CAAA,yBAAA;AAAA,gBACnC;AAAA;AACF,aACF;AAAA;AACF,SACK,MAAA;AACL,UAAA,MAAM,WACJ,oCAAqC,CAAA,yBAAA;AAAA,YACnC;AAAA,WACF;AACF,UAAW,UAAA,CAAA,aAAA,EAAe,QAAQ,CAAgB,YAAA,KAAA;AAChD,YAAI,GAAA,CAAA,GAAA,CAAI,GAAG,WAAY,CAAA,MAAA,CAAO,IAAI,CAAI,CAAA,EAAA,YAAY,IAAI,QAAQ,CAAA;AAAA,WAC/D,CAAA;AAAA;AACH,OACD,CAAA;AAED,MACE,IAAA,WAAA,CAAY,MAAO,CAAA,IAAA,KAAS,eAC5B,IAAA,GAAA,CAAI,IAAI,WAAY,CAAA,MAAA,CAAO,IAAI,CAAA,KAAM,KACrC,CAAA,EAAA;AACA,QAAI,GAAA,CAAA,GAAA;AAAA,UACF,YAAY,MAAO,CAAA,IAAA;AAAA,UACnB,oCAAqC,CAAA,mBAAA;AAAA,YACnC,IAAI,sBAAuB;AAAA;AAC7B,SACF;AAAA;AAGF,MAAO,OAAA,GAAA;AAAA,KACT,kBAAO,IAAA,GAAA,EAAmD,CAAA;AAE1D,IAAO,OAAA,IAAI,sCAAsC,SAAS,CAAA;AAAA;AAC5D,EASQ,iCACN,GAC4C,EAAA;AAC5C,IAAM,MAAA,KAAA,GAAQ,IAAI,QAAS,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,MAAA,CAAO,CAAQ,IAAA,KAAA,IAAA,KAAS,EAAE,CAAA;AAChE,IAAA,IAAI,GAAI,CAAA,IAAA,KAAS,eAAmB,IAAA,KAAA,CAAM,SAAS,CAAG,EAAA;AACpD,MAAI,IAAA,KAAA,CAAM,CAAC,CAAA,KAAM,KAAO,EAAA;AAEtB,QAAO,OAAA,IAAA,CAAK,SAAU,CAAA,GAAA,CAAI,CAAG,EAAA,GAAA,CAAI,IAAI,CAAI,CAAA,EAAA,KAAA,CAAM,CAAC,CAAC,CAAE,CAAA,CAAA;AAAA,iBAC1C,KAAM,CAAA,CAAC,MAAM,KAAS,IAAA,KAAA,CAAM,SAAS,CAAG,EAAA;AAEjD,QAAO,OAAA,IAAA,CAAK,SAAU,CAAA,GAAA,CAAI,CAAG,EAAA,GAAA,CAAI,IAAI,CAAI,CAAA,EAAA,KAAA,CAAM,CAAC,CAAC,CAAE,CAAA,CAAA;AAAA;AACrD;AAGF,IAAO,OAAA,KAAA,CAAA;AAAA;AACT,EAEQ,2BACN,GAC4C,EAAA;AAC5C,IAAM,MAAA,KAAA,GAAQ,IAAI,QAAS,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,MAAA,CAAO,CAAQ,IAAA,KAAA,IAAA,KAAS,EAAE,CAAA;AAChE,IAAA,IAAI,GAAI,CAAA,IAAA,KAAS,eAAmB,IAAA,KAAA,CAAM,SAAS,CAAG,EAAA;AAEpD,MAAO,OAAA,IAAA,CAAK,SAAU,CAAA,GAAA,CAAI,CAAG,EAAA,GAAA,CAAI,IAAI,CAAI,CAAA,EAAA,KAAA,CAAM,CAAC,CAAC,CAAE,CAAA,CAAA;AAAA;AAGrD,IAAO,OAAA,KAAA,CAAA;AAAA;AACT,EAEQ,QAAQ,GAAsD,EAAA;AACpE,IAAA,OAAO,IAAK,CAAA,SAAA,CAAU,GAAI,CAAA,GAAA,CAAI,IAAI,CAAA;AAAA;AACpC,EAEA,MAAM,eAAe,IAE2B,EAAA;AAC9C,IAAA,MAAM,GAAM,GAAA,IAAI,GAAI,CAAA,IAAA,CAAK,GAAG,CAAA;AAC5B,IAAM,MAAA,QAAA,GACJ,IAAK,CAAA,0BAAA,CAA2B,GAAG,CAAA,IACnC,IAAK,CAAA,gCAAA,CAAiC,GAAG,CAAA,IACzC,IAAK,CAAA,OAAA,CAAQ,GAAG,CAAA;AAElB,IAAA,IAAI,aAAa,KAAW,CAAA,EAAA;AAC1B,MAAO,OAAA,KAAA,CAAA;AAAA;AAGT,IAAO,OAAA,QAAA,CAAS,eAAe,IAAI,CAAA;AAAA;AAEvC;;;;"}