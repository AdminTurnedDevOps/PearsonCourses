{"version":3,"file":"config.cjs.js","sources":["../../src/azure/config.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { isValidHost } from '../helpers';\n\nconst AZURE_HOST = 'dev.azure.com';\n\n/**\n * The configuration parameters for a single Azure provider.\n *\n * @public\n */\nexport type AzureIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"dev.azure.com\".\n   *\n   * Currently only \"dev.azure.com\" is supported.\n   */\n  host: string;\n\n  /**\n   * The authorization token to use for requests.\n   *\n   * If no token is specified, anonymous access is used.\n   *\n   * @deprecated Use `credentials` instead.\n   */\n  token?: string;\n\n  /**\n   * The credential to use for requests.\n   *\n   * If no credential is specified anonymous access is used.\n   *\n   * @deprecated Use `credentials` instead.\n   */\n  credential?: AzureDevOpsCredential;\n\n  /**\n   * The credentials to use for requests. If multiple credentials are specified the first one that matches the organization is used.\n   * If not organization matches the first credential without an organization is used.\n   *\n   * If no credentials are specified at all, either a default credential (for Azure DevOps) or anonymous access (for Azure DevOps Server) is used.\n   */\n  credentials?: AzureDevOpsCredential[];\n};\n\n/**\n * The kind of Azure DevOps credential.\n * @public\n */\nexport type AzureDevOpsCredentialKind =\n  | 'PersonalAccessToken'\n  | 'ClientSecret'\n  | 'ManagedIdentity';\n\n/**\n * Common fields for the Azure DevOps credentials.\n * @public\n */\nexport type AzureCredentialBase = {\n  /**\n   * The kind of credential.\n   */\n  kind: AzureDevOpsCredentialKind;\n  /**\n   * The Azure DevOps organizations for which to use this credential.\n   */\n  organizations?: string[];\n};\n\n/**\n * A client secret credential that was generated for an App Registration.\n * @public\n */\nexport type AzureClientSecretCredential = AzureCredentialBase & {\n  kind: 'ClientSecret';\n  /**\n   * The Entra ID tenant\n   */\n  tenantId: string;\n  /**\n   * The client id\n   */\n  clientId: string;\n\n  /**\n   * The client secret\n   */\n  clientSecret: string;\n};\n\n/**\n * A managed identity credential.\n * @public\n */\nexport type AzureManagedIdentityCredential = AzureCredentialBase & {\n  kind: 'ManagedIdentity';\n  /**\n   * The clientId\n   */\n  clientId: string;\n};\n\n/**\n * A personal access token credential.\n * @public\n */\nexport type PersonalAccessTokenCredential = AzureCredentialBase & {\n  kind: 'PersonalAccessToken';\n  personalAccessToken: string;\n};\n\n/**\n * The general shape of a credential that can be used to authenticate to Azure DevOps.\n * @public\n */\nexport type AzureDevOpsCredentialLike = Omit<\n  Partial<AzureClientSecretCredential> &\n    Partial<AzureManagedIdentityCredential> &\n    Partial<PersonalAccessTokenCredential>,\n  'kind'\n>;\n\n/**\n * Credential used to authenticate to Azure DevOps.\n * @public\n */\nexport type AzureDevOpsCredential =\n  | AzureClientSecretCredential\n  | AzureManagedIdentityCredential\n  | PersonalAccessTokenCredential;\n\nconst AzureDevOpsCredentialFields = [\n  'clientId',\n  'clientSecret',\n  'tenantId',\n  'personalAccessToken',\n] as const;\ntype AzureDevOpsCredentialField = (typeof AzureDevOpsCredentialFields)[number];\n\nconst AzureDevopsCredentialFieldMap = new Map<\n  AzureDevOpsCredentialKind,\n  AzureDevOpsCredentialField[]\n>([\n  ['ClientSecret', ['clientId', 'clientSecret', 'tenantId']],\n  ['ManagedIdentity', ['clientId']],\n  ['PersonalAccessToken', ['personalAccessToken']],\n]);\n\nfunction asAzureDevOpsCredential(\n  credential: AzureDevOpsCredentialLike,\n): AzureDevOpsCredential {\n  for (const entry of AzureDevopsCredentialFieldMap.entries()) {\n    const [kind, requiredFields] = entry;\n\n    const forbiddenFields = AzureDevOpsCredentialFields.filter(\n      field => !requiredFields.includes(field as AzureDevOpsCredentialField),\n    );\n\n    if (\n      requiredFields.every(field => credential[field] !== undefined) &&\n      forbiddenFields.every(field => credential[field] === undefined)\n    ) {\n      return {\n        kind,\n        organizations: credential.organizations,\n        ...requiredFields.reduce((acc, field) => {\n          acc[field] = credential[field];\n          return acc;\n        }, {} as Record<string, any>),\n      } as AzureDevOpsCredential;\n    }\n  }\n  throw new Error('is not a valid credential');\n}\n\n/**\n * Reads a single Azure integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readAzureIntegrationConfig(\n  config: Config,\n): AzureIntegrationConfig {\n  const host = config.getOptionalString('host') ?? AZURE_HOST;\n\n  let credentialConfigs = config\n    .getOptionalConfigArray('credentials')\n    ?.map(credential => {\n      const result: Partial<AzureDevOpsCredentialLike> = {\n        organizations: credential.getOptionalStringArray('organizations'),\n        personalAccessToken: credential\n          .getOptionalString('personalAccessToken')\n          ?.trim(),\n        tenantId: credential.getOptionalString('tenantId'),\n        clientId: credential.getOptionalString('clientId'),\n        clientSecret: credential.getOptionalString('clientSecret')?.trim(),\n      };\n\n      return result;\n    });\n\n  const token = config.getOptionalString('token')?.trim();\n\n  if (\n    config.getOptional('credential') !== undefined &&\n    config.getOptional('credentials') !== undefined\n  ) {\n    throw new Error(\n      `Invalid Azure integration config, 'credential' and 'credentials' cannot be used together. Use 'credentials' instead.`,\n    );\n  }\n\n  if (\n    config.getOptional('token') !== undefined &&\n    config.getOptional('credentials') !== undefined\n  ) {\n    throw new Error(\n      `Invalid Azure integration config, 'token' and 'credentials' cannot be used together. Use 'credentials' instead.`,\n    );\n  }\n\n  if (token !== undefined) {\n    const mapped = [{ personalAccessToken: token }];\n    credentialConfigs = credentialConfigs?.concat(mapped) ?? mapped;\n  }\n\n  if (config.getOptional('credential') !== undefined) {\n    const mapped = [\n      {\n        organizations: config.getOptionalStringArray(\n          'credential.organizations',\n        ),\n        token: config.getOptionalString('credential.token')?.trim(),\n        tenantId: config.getOptionalString('credential.tenantId'),\n        clientId: config.getOptionalString('credential.clientId'),\n        clientSecret: config\n          .getOptionalString('credential.clientSecret')\n          ?.trim(),\n      },\n    ];\n    credentialConfigs = credentialConfigs?.concat(mapped) ?? mapped;\n  }\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Azure integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  let credentials: AzureDevOpsCredential[] | undefined = undefined;\n  if (credentialConfigs !== undefined) {\n    const errors = credentialConfigs\n      ?.reduce((acc, credentialConfig, index) => {\n        let error: string | undefined = undefined;\n        try {\n          asAzureDevOpsCredential(credentialConfig);\n        } catch (e) {\n          error = e.message;\n        }\n\n        if (error !== undefined) {\n          acc.push(`credential at position ${index + 1} ${error}`);\n        }\n\n        return acc;\n      }, Array.of<string>())\n      .concat(\n        Object.entries(\n          credentialConfigs\n            .filter(\n              credential =>\n                credential.organizations !== undefined &&\n                credential.organizations.length > 0,\n            )\n            .reduce((acc, credential, index) => {\n              credential.organizations?.forEach(organization => {\n                if (!acc[organization]) {\n                  acc[organization] = [];\n                }\n\n                acc[organization].push(index + 1);\n              });\n\n              return acc;\n            }, {} as Record<string, number[]>),\n        )\n          .filter(([_, indexes]) => indexes.length > 1)\n          .reduce((acc, [org, indexes]) => {\n            acc.push(\n              `organization ${org} is specified multiple times in credentials at positions ${indexes\n                .slice(0, indexes.length - 1)\n                .join(', ')} and ${indexes[indexes.length - 1]}`,\n            );\n            return acc;\n          }, Array.of<string>()),\n      );\n\n    if (errors?.length > 0) {\n      throw new Error(\n        `Invalid Azure integration config for ${host}: ${errors.join('; ')}`,\n      );\n    }\n\n    credentials = credentialConfigs.map(credentialConfig =>\n      asAzureDevOpsCredential(credentialConfig),\n    );\n\n    if (\n      credentials.some(\n        credential => credential.kind !== 'PersonalAccessToken',\n      ) &&\n      host !== AZURE_HOST\n    ) {\n      throw new Error(\n        `Invalid Azure integration config for ${host}, only personal access tokens can be used with hosts other than ${AZURE_HOST}`,\n      );\n    }\n\n    if (\n      credentials.filter(\n        credential =>\n          credential.organizations === undefined ||\n          credential.organizations.length === 0,\n      ).length > 1\n    ) {\n      throw new Error(\n        `Invalid Azure integration config for ${host}, you cannot specify multiple credentials without organizations`,\n      );\n    }\n  }\n\n  return {\n    host,\n    credentials,\n  };\n}\n\n/**\n * Reads a set of Azure integration configs, and inserts some defaults for\n * public Azure if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readAzureIntegrationConfigs(\n  configs: Config[],\n): AzureIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAzureIntegrationConfig);\n\n  // If no explicit dev.azure.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AZURE_HOST)) {\n    result.push({ host: AZURE_HOST });\n  }\n\n  return result;\n}\n"],"names":["isValidHost"],"mappings":"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"}