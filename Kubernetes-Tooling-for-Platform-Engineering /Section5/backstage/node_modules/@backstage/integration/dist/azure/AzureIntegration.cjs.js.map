{"version":3,"file":"AzureIntegration.cjs.js","sources":["../../src/azure/AzureIntegration.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, isValidUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport { AzureUrl } from './AzureUrl';\nimport { AzureIntegrationConfig, readAzureIntegrationConfigs } from './config';\n\n/**\n * Microsoft Azure based integration.\n *\n * @public\n */\nexport class AzureIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<AzureIntegration> = ({ config }) => {\n    const configs = readAzureIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.azure') ?? [],\n    );\n\n    return basicIntegrations(\n      configs.map(c => new AzureIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: AzureIntegrationConfig) {}\n\n  get type(): string {\n    return 'azure';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): AzureIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  /*\n   * Azure repo URLs on the form with a `path` query param are treated specially.\n   *\n   * Example base URL: https://dev.azure.com/organization/project/_git/repository?path=%2Fcatalog-info.yaml\n   */\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base } = options;\n\n    // If we can parse the url, it is absolute - then return it verbatim\n    if (isValidUrl(url)) {\n      return url;\n    }\n\n    try {\n      const azureUrl = AzureUrl.fromRepoUrl(base);\n      const newUrl = new URL(base);\n\n      // We lean on the URL path resolution logic to resolve the path param\n      const mockBaseUrl = new URL(`https://a.com${azureUrl.getPath() ?? ''}`);\n      const updatedPath = new URL(url, mockBaseUrl).pathname;\n      newUrl.searchParams.set('path', updatedPath);\n\n      if (options.lineNumber) {\n        newUrl.searchParams.set('line', String(options.lineNumber));\n        newUrl.searchParams.set('lineEnd', String(options.lineNumber + 1));\n        newUrl.searchParams.set('lineStartColumn', '1');\n        newUrl.searchParams.set('lineEndColumn', '1');\n      }\n\n      return newUrl.toString();\n    } catch {\n      // If not an actual file path within a repo, treat the URL as raw\n      return new URL(url, base).toString();\n    }\n  }\n\n  resolveEditUrl(url: string): string {\n    // TODO: Implement edit URL for Azure, fallback to view url as I don't know\n    // how azure works.\n    return url;\n  }\n}\n"],"names":["config","readAzureIntegrationConfigs","basicIntegrations","isValidUrl","AzureUrl"],"mappings":";;;;;;AA0BO,MAAM,gBAA2C,CAAA;AAAA,EAYtD,YAA6B,iBAA2C,EAAA;AAA3C,IAAA,IAAA,CAAA,iBAAA,GAAA,iBAAA;AAAA;AAA4C,EAXzE,OAAO,OAAA,GAAoD,CAAC,UAAEA,UAAa,KAAA;AACzE,IAAA,MAAM,OAAU,GAAAC,kCAAA;AAAA,MACdD,QAAO,CAAA,sBAAA,CAAuB,oBAAoB,CAAA,IAAK;AAAC,KAC1D;AAEA,IAAO,OAAAE,yBAAA;AAAA,MACL,QAAQ,GAAI,CAAA,CAAA,CAAA,KAAK,IAAI,gBAAA,CAAiB,CAAC,CAAC,CAAA;AAAA,MACxC,CAAA,CAAA,KAAK,EAAE,MAAO,CAAA;AAAA,KAChB;AAAA,GACF;AAAA,EAIA,IAAI,IAAe,GAAA;AACjB,IAAO,OAAA,OAAA;AAAA;AACT,EAEA,IAAI,KAAgB,GAAA;AAClB,IAAA,OAAO,KAAK,iBAAkB,CAAA,IAAA;AAAA;AAChC,EAEA,IAAI,MAAiC,GAAA;AACnC,IAAA,OAAO,IAAK,CAAA,iBAAA;AAAA;AACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,OAIA,EAAA;AACT,IAAM,MAAA,EAAE,GAAK,EAAA,IAAA,EAAS,GAAA,OAAA;AAGtB,IAAI,IAAAC,kBAAA,CAAW,GAAG,CAAG,EAAA;AACnB,MAAO,OAAA,GAAA;AAAA;AAGT,IAAI,IAAA;AACF,MAAM,MAAA,QAAA,GAAWC,iBAAS,CAAA,WAAA,CAAY,IAAI,CAAA;AAC1C,MAAM,MAAA,MAAA,GAAS,IAAI,GAAA,CAAI,IAAI,CAAA;AAG3B,MAAM,MAAA,WAAA,GAAc,IAAI,GAAI,CAAA,CAAA,aAAA,EAAgB,SAAS,OAAQ,EAAA,IAAK,EAAE,CAAE,CAAA,CAAA;AACtE,MAAA,MAAM,WAAc,GAAA,IAAI,GAAI,CAAA,GAAA,EAAK,WAAW,CAAE,CAAA,QAAA;AAC9C,MAAO,MAAA,CAAA,YAAA,CAAa,GAAI,CAAA,MAAA,EAAQ,WAAW,CAAA;AAE3C,MAAA,IAAI,QAAQ,UAAY,EAAA;AACtB,QAAA,MAAA,CAAO,aAAa,GAAI,CAAA,MAAA,EAAQ,MAAO,CAAA,OAAA,CAAQ,UAAU,CAAC,CAAA;AAC1D,QAAA,MAAA,CAAO,aAAa,GAAI,CAAA,SAAA,EAAW,OAAO,OAAQ,CAAA,UAAA,GAAa,CAAC,CAAC,CAAA;AACjE,QAAO,MAAA,CAAA,YAAA,CAAa,GAAI,CAAA,iBAAA,EAAmB,GAAG,CAAA;AAC9C,QAAO,MAAA,CAAA,YAAA,CAAa,GAAI,CAAA,eAAA,EAAiB,GAAG,CAAA;AAAA;AAG9C,MAAA,OAAO,OAAO,QAAS,EAAA;AAAA,KACjB,CAAA,MAAA;AAEN,MAAA,OAAO,IAAI,GAAA,CAAI,GAAK,EAAA,IAAI,EAAE,QAAS,EAAA;AAAA;AACrC;AACF,EAEA,eAAe,GAAqB,EAAA;AAGlC,IAAO,OAAA,GAAA;AAAA;AAEX;;;;"}