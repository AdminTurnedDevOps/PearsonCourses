{"version":3,"file":"deprecated.cjs.js","sources":["../../src/azure/deprecated.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AzureIntegrationConfig } from './config';\nimport { CachedAzureDevOpsCredentialsProvider } from './CachedAzureDevOpsCredentialsProvider';\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @param additionalHeaders - Additional headers for the request\n * @public\n * @deprecated Use {@link AzureDevOpsCredentialsProvider} instead.\n */\nexport async function getAzureRequestOptions(\n  config: AzureIntegrationConfig,\n  additionalHeaders?: Record<string, string>,\n): Promise<{ headers: Record<string, string> }> {\n  const headers: Record<string, string> = additionalHeaders\n    ? { ...additionalHeaders }\n    : {};\n\n  /*\n   * Since we do not have a way to determine which organization the request is for,\n   * we will use the first credential that does not have an organization specified.\n   */\n  const credentialConfig = config.credentials?.filter(\n    credential =>\n      credential.organizations === undefined ||\n      credential.organizations.length === 0,\n  )[0];\n\n  if (credentialConfig) {\n    const credentialsProvider =\n      CachedAzureDevOpsCredentialsProvider.fromAzureDevOpsCredential(\n        credentialConfig,\n      );\n    const credentials = await credentialsProvider.getCredentials();\n\n    return {\n      headers: {\n        ...credentials?.headers,\n        ...headers,\n      },\n    };\n  }\n\n  return { headers };\n}\n"],"names":["CachedAzureDevOpsCredentialsProvider"],"mappings":";;;;AA0BsB,eAAA,sBAAA,CACpB,QACA,iBAC8C,EAAA;AAC9C,EAAA,MAAM,UAAkC,iBACpC,GAAA,EAAE,GAAG,iBAAA,KACL,EAAC;AAML,EAAM,MAAA,gBAAA,GAAmB,OAAO,WAAa,EAAA,MAAA;AAAA,IAC3C,gBACE,UAAW,CAAA,aAAA,KAAkB,KAC7B,CAAA,IAAA,UAAA,CAAW,cAAc,MAAW,KAAA;AAAA,IACtC,CAAC,CAAA;AAEH,EAAA,IAAI,gBAAkB,EAAA;AACpB,IAAA,MAAM,sBACJA,yEAAqC,CAAA,yBAAA;AAAA,MACnC;AAAA,KACF;AACF,IAAM,MAAA,WAAA,GAAc,MAAM,mBAAA,CAAoB,cAAe,EAAA;AAE7D,IAAO,OAAA;AAAA,MACL,OAAS,EAAA;AAAA,QACP,GAAG,WAAa,EAAA,OAAA;AAAA,QAChB,GAAG;AAAA;AACL,KACF;AAAA;AAGF,EAAA,OAAO,EAAE,OAAQ,EAAA;AACnB;;;;"}