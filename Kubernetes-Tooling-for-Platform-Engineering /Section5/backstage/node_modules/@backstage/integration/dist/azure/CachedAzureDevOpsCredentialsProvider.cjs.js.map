{"version":3,"file":"CachedAzureDevOpsCredentialsProvider.cjs.js","sources":["../../src/azure/CachedAzureDevOpsCredentialsProvider.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AzureDevOpsCredential, PersonalAccessTokenCredential } from './config';\nimport {\n  ClientSecretCredential,\n  ManagedIdentityCredential,\n  TokenCredential,\n} from '@azure/identity';\nimport {\n  AzureDevOpsCredentials,\n  AzureDevOpsCredentialsProvider,\n} from './types';\n\ntype CachedAzureDevOpsCredentials = AzureDevOpsCredentials & {\n  expiresAt?: number;\n};\n\nfunction exhaustiveCheck(_param: never) {}\n\nconst tenMinutes = 1000 * 60 * 10;\n\n/**\n * A credentials provider that caches the credentials for as long as it is valid.\n *\n * @public\n */\nexport class CachedAzureDevOpsCredentialsProvider\n  implements AzureDevOpsCredentialsProvider\n{\n  azureDevOpsScope = '499b84ac-1321-427f-aa17-267ca6975798/.default';\n  cached: CachedAzureDevOpsCredentials | undefined;\n\n  static fromAzureDevOpsCredential(\n    credential: AzureDevOpsCredential,\n  ): CachedAzureDevOpsCredentialsProvider {\n    switch (credential.kind) {\n      case 'PersonalAccessToken':\n        return CachedAzureDevOpsCredentialsProvider.fromPersonalAccessTokenCredential(\n          credential,\n        );\n      case 'ClientSecret':\n        return CachedAzureDevOpsCredentialsProvider.fromTokenCredential(\n          new ClientSecretCredential(\n            credential.tenantId,\n            credential.clientId,\n            credential.clientSecret,\n          ),\n        );\n      case 'ManagedIdentity':\n        return CachedAzureDevOpsCredentialsProvider.fromTokenCredential(\n          new ManagedIdentityCredential(credential.clientId),\n        );\n      default:\n        exhaustiveCheck(credential);\n\n        throw new Error(\n          `Credential kind '${(credential as any).kind}' not supported`,\n        );\n    }\n  }\n\n  static fromTokenCredential(\n    credential: TokenCredential,\n  ): CachedAzureDevOpsCredentialsProvider {\n    return new CachedAzureDevOpsCredentialsProvider(credential);\n  }\n\n  static fromPersonalAccessTokenCredential(\n    credential: PersonalAccessTokenCredential,\n  ) {\n    return new CachedAzureDevOpsCredentialsProvider(\n      credential.personalAccessToken,\n    );\n  }\n\n  private constructor(private readonly credential: TokenCredential | string) {}\n\n  async getCredentials(): Promise<AzureDevOpsCredentials> {\n    if (\n      this.cached === undefined ||\n      (this.cached.expiresAt !== undefined &&\n        Date.now() > this.cached.expiresAt)\n    ) {\n      if (typeof this.credential === 'string') {\n        this.cached = {\n          headers: {\n            Authorization: `Basic ${btoa(`:${this.credential}`)}`,\n          },\n          type: 'pat',\n          token: this.credential,\n        };\n      } else {\n        const accessToken = await this.credential.getToken(\n          this.azureDevOpsScope,\n        );\n\n        if (!accessToken) {\n          throw new Error('Failed to retrieve access token');\n        }\n\n        this.cached = {\n          expiresAt: accessToken.expiresOnTimestamp - tenMinutes,\n          headers: {\n            Authorization: `Bearer ${accessToken.token}`,\n          },\n          type: 'bearer',\n          token: accessToken.token,\n        };\n      }\n    }\n\n    return this.cached;\n  }\n}\n"],"names":["ClientSecretCredential","ManagedIdentityCredential"],"mappings":";;;;AAgCA,MAAM,UAAA,GAAa,MAAO,EAAK,GAAA,EAAA;AAOxB,MAAM,oCAEb,CAAA;AAAA,EA+CU,YAA6B,UAAsC,EAAA;AAAtC,IAAA,IAAA,CAAA,UAAA,GAAA,UAAA;AAAA;AAAuC,EA9C5E,gBAAmB,GAAA,+CAAA;AAAA,EACnB,MAAA;AAAA,EAEA,OAAO,0BACL,UACsC,EAAA;AACtC,IAAA,QAAQ,WAAW,IAAM;AAAA,MACvB,KAAK,qBAAA;AACH,QAAA,OAAO,oCAAqC,CAAA,iCAAA;AAAA,UAC1C;AAAA,SACF;AAAA,MACF,KAAK,cAAA;AACH,QAAA,OAAO,oCAAqC,CAAA,mBAAA;AAAA,UAC1C,IAAIA,+BAAA;AAAA,YACF,UAAW,CAAA,QAAA;AAAA,YACX,UAAW,CAAA,QAAA;AAAA,YACX,UAAW,CAAA;AAAA;AACb,SACF;AAAA,MACF,KAAK,iBAAA;AACH,QAAA,OAAO,oCAAqC,CAAA,mBAAA;AAAA,UAC1C,IAAIC,kCAA0B,CAAA,UAAA,CAAW,QAAQ;AAAA,SACnD;AAAA,MACF;AAGE,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAAA,iBAAA,EAAqB,WAAmB,IAAI,CAAA,eAAA;AAAA,SAC9C;AAAA;AACJ;AACF,EAEA,OAAO,oBACL,UACsC,EAAA;AACtC,IAAO,OAAA,IAAI,qCAAqC,UAAU,CAAA;AAAA;AAC5D,EAEA,OAAO,kCACL,UACA,EAAA;AACA,IAAA,OAAO,IAAI,oCAAA;AAAA,MACT,UAAW,CAAA;AAAA,KACb;AAAA;AACF,EAIA,MAAM,cAAkD,GAAA;AACtD,IAAA,IACE,IAAK,CAAA,MAAA,KAAW,KACf,CAAA,IAAA,IAAA,CAAK,MAAO,CAAA,SAAA,KAAc,KACzB,CAAA,IAAA,IAAA,CAAK,GAAI,EAAA,GAAI,IAAK,CAAA,MAAA,CAAO,SAC3B,EAAA;AACA,MAAI,IAAA,OAAO,IAAK,CAAA,UAAA,KAAe,QAAU,EAAA;AACvC,QAAA,IAAA,CAAK,MAAS,GAAA;AAAA,UACZ,OAAS,EAAA;AAAA,YACP,eAAe,CAAS,MAAA,EAAA,IAAA,CAAK,IAAI,IAAK,CAAA,UAAU,EAAE,CAAC,CAAA;AAAA,WACrD;AAAA,UACA,IAAM,EAAA,KAAA;AAAA,UACN,OAAO,IAAK,CAAA;AAAA,SACd;AAAA,OACK,MAAA;AACL,QAAM,MAAA,WAAA,GAAc,MAAM,IAAA,CAAK,UAAW,CAAA,QAAA;AAAA,UACxC,IAAK,CAAA;AAAA,SACP;AAEA,QAAA,IAAI,CAAC,WAAa,EAAA;AAChB,UAAM,MAAA,IAAI,MAAM,iCAAiC,CAAA;AAAA;AAGnD,QAAA,IAAA,CAAK,MAAS,GAAA;AAAA,UACZ,SAAA,EAAW,YAAY,kBAAqB,GAAA,UAAA;AAAA,UAC5C,OAAS,EAAA;AAAA,YACP,aAAA,EAAe,CAAU,OAAA,EAAA,WAAA,CAAY,KAAK,CAAA;AAAA,WAC5C;AAAA,UACA,IAAM,EAAA,QAAA;AAAA,UACN,OAAO,WAAY,CAAA;AAAA,SACrB;AAAA;AACF;AAGF,IAAA,OAAO,IAAK,CAAA,MAAA;AAAA;AAEhB;;;;"}