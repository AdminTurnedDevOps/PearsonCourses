'use strict';

var fetch = require('cross-fetch');
var parseGitUrl = require('git-url-parse');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fetch__default = /*#__PURE__*/_interopDefaultCompat(fetch);
var parseGitUrl__default = /*#__PURE__*/_interopDefaultCompat(parseGitUrl);

async function getBitbucketCloudDefaultBranch(url, config) {
  const { name: repoName, owner: project } = parseGitUrl__default.default(url);
  const branchUrl = `${config.apiBaseUrl}/repositories/${project}/${repoName}`;
  const response = await fetch__default.default(
    branchUrl,
    getBitbucketCloudRequestOptions(config)
  );
  if (!response.ok) {
    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;
    throw new Error(message);
  }
  const repoInfo = await response.json();
  const defaultBranch = repoInfo.mainbranch.name;
  if (!defaultBranch) {
    throw new Error(
      `Failed to read default branch from ${branchUrl}. Response ${response.status} ${response.json()}`
    );
  }
  return defaultBranch;
}
async function getBitbucketCloudDownloadUrl(url, config) {
  const {
    name: repoName,
    owner: project,
    ref,
    protocol,
    resource
  } = parseGitUrl__default.default(url);
  let branch = ref;
  if (!branch) {
    branch = await getBitbucketCloudDefaultBranch(url, config);
  }
  return `${protocol}://${resource}/${project}/${repoName}/get/${branch}.tar.gz`;
}
function getBitbucketCloudFileFetchUrl(url, config) {
  try {
    const { owner, name, ref, filepathtype, filepath } = parseGitUrl__default.default(url);
    if (!owner || !name || filepathtype !== "src" && filepathtype !== "raw") {
      throw new Error("Invalid Bitbucket Cloud URL or file path");
    }
    const pathWithoutSlash = filepath.replace(/^\//, "");
    if (!ref) {
      throw new Error("Invalid Bitbucket Cloud URL or file path");
    }
    return `${config.apiBaseUrl}/repositories/${owner}/${name}/src/${ref}/${pathWithoutSlash}`;
  } catch (e) {
    throw new Error(`Incorrect URL: ${url}, ${e}`);
  }
}
function getBitbucketCloudRequestOptions(config) {
  const headers = {};
  if (config.username && config.appPassword) {
    const buffer = Buffer.from(
      `${config.username}:${config.appPassword}`,
      "utf8"
    );
    headers.Authorization = `Basic ${buffer.toString("base64")}`;
  }
  return {
    headers
  };
}

exports.getBitbucketCloudDefaultBranch = getBitbucketCloudDefaultBranch;
exports.getBitbucketCloudDownloadUrl = getBitbucketCloudDownloadUrl;
exports.getBitbucketCloudFileFetchUrl = getBitbucketCloudFileFetchUrl;
exports.getBitbucketCloudRequestOptions = getBitbucketCloudRequestOptions;
//# sourceMappingURL=core.cjs.js.map
