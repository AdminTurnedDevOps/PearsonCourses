{"version":3,"file":"BitbucketCloudIntegration.cjs.js","sources":["../../src/bitbucketCloud/BitbucketCloudIntegration.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketCloudIntegrationConfig,\n  readBitbucketCloudIntegrationConfigs,\n} from './config';\n\n/**\n * A Bitbucket Cloud based integration.\n *\n * @public\n */\nexport class BitbucketCloudIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketCloudIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketCloudIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucketCloud') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketCloudIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(\n    private readonly integrationConfig: BitbucketCloudIntegrationConfig,\n  ) {}\n\n  get type(): string {\n    return 'bitbucketCloud';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketCloudIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n\n    // Bitbucket Cloud line numbers use the syntax #lines-42, rather than #L42\n    if (options.lineNumber) {\n      const url = new URL(resolved);\n\n      url.hash = `lines-${options.lineNumber}`;\n      return url.toString();\n    }\n\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    const urlData = parseGitUrl(url);\n    const editUrl = new URL(url);\n\n    editUrl.searchParams.set('mode', 'edit');\n    editUrl.searchParams.set('at', urlData.ref);\n    return editUrl.toString();\n  }\n}\n"],"names":["config","readBitbucketCloudIntegrationConfigs","basicIntegrations","defaultScmResolveUrl","parseGitUrl"],"mappings":";;;;;;;;;;AA6BO,MAAM,yBAAoD,CAAA;AAAA,EAa/D,YACmB,iBACjB,EAAA;AADiB,IAAA,IAAA,CAAA,iBAAA,GAAA,iBAAA;AAAA;AAChB,EAdH,OAAO,UAA6D,CAAC;AAAA,YACnEA;AAAA,GACI,KAAA;AACJ,IAAA,MAAM,OAAU,GAAAC,2CAAA;AAAA,MACdD,QAAO,CAAA,sBAAA,CAAuB,6BAA6B,CAAA,IAAK;AAAC,KACnE;AACA,IAAO,OAAAE,yBAAA;AAAA,MACL,QAAQ,GAAI,CAAA,CAAA,CAAA,KAAK,IAAI,yBAAA,CAA0B,CAAC,CAAC,CAAA;AAAA,MACjD,CAAA,CAAA,KAAK,EAAE,MAAO,CAAA;AAAA,KAChB;AAAA,GACF;AAAA,EAMA,IAAI,IAAe,GAAA;AACjB,IAAO,OAAA,gBAAA;AAAA;AACT,EAEA,IAAI,KAAgB,GAAA;AAClB,IAAA,OAAO,KAAK,iBAAkB,CAAA,IAAA;AAAA;AAChC,EAEA,IAAI,MAA0C,GAAA;AAC5C,IAAA,OAAO,IAAK,CAAA,iBAAA;AAAA;AACd,EAEA,WAAW,OAIA,EAAA;AACT,IAAM,MAAA,QAAA,GAAWC,6BAAqB,OAAO,CAAA;AAG7C,IAAA,IAAI,QAAQ,UAAY,EAAA;AACtB,MAAM,MAAA,GAAA,GAAM,IAAI,GAAA,CAAI,QAAQ,CAAA;AAE5B,MAAI,GAAA,CAAA,IAAA,GAAO,CAAS,MAAA,EAAA,OAAA,CAAQ,UAAU,CAAA,CAAA;AACtC,MAAA,OAAO,IAAI,QAAS,EAAA;AAAA;AAGtB,IAAO,OAAA,QAAA;AAAA;AACT,EAEA,eAAe,GAAqB,EAAA;AAClC,IAAM,MAAA,OAAA,GAAUC,6BAAY,GAAG,CAAA;AAC/B,IAAM,MAAA,OAAA,GAAU,IAAI,GAAA,CAAI,GAAG,CAAA;AAE3B,IAAQ,OAAA,CAAA,YAAA,CAAa,GAAI,CAAA,MAAA,EAAQ,MAAM,CAAA;AACvC,IAAA,OAAA,CAAQ,YAAa,CAAA,GAAA,CAAI,IAAM,EAAA,OAAA,CAAQ,GAAG,CAAA;AAC1C,IAAA,OAAO,QAAQ,QAAS,EAAA;AAAA;AAE5B;;;;"}