{"version":3,"file":"GithubIntegration.esm.js","sources":["../../src/github/GithubIntegration.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport {\n  RateLimitInfo,\n  ScmIntegration,\n  ScmIntegrationsFactory,\n} from '../types';\nimport {\n  GithubIntegrationConfig,\n  readGithubIntegrationConfigs,\n} from './config';\nimport { ConsumedResponse } from '@backstage/errors';\n\n/**\n * A GitHub based integration.\n *\n * @public\n */\nexport class GithubIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GithubIntegration> = ({ config }) => {\n    const configs = readGithubIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.github') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GithubIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GithubIntegrationConfig) {}\n\n  get type(): string {\n    return 'github';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GithubIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    // GitHub uses blob URLs for files and tree urls for directory listings. But\n    // there is a redirect from tree to blob for files, so we can always return\n    // tree urls here.\n    return replaceGithubUrlType(defaultScmResolveUrl(options), 'tree');\n  }\n\n  resolveEditUrl(url: string): string {\n    return replaceGithubUrlType(url, 'edit');\n  }\n\n  parseRateLimitInfo(response: ConsumedResponse): RateLimitInfo {\n    return {\n      isRateLimited:\n        response.status === 429 ||\n        (response.status === 403 &&\n          response.headers.get('x-ratelimit-remaining') === '0'),\n    };\n  }\n}\n\n/**\n * Takes a GitHub URL and replaces the type part (blob, tree etc).\n *\n * @param url - The original URL\n * @param type - The desired type, e.g. \"blob\"\n * @public\n */\nexport function replaceGithubUrlType(\n  url: string,\n  type: 'blob' | 'tree' | 'edit',\n): string {\n  return url.replace(\n    /\\/\\/([^/]+)\\/([^/]+)\\/([^/]+)\\/(blob|tree|edit)\\//,\n    (_, host, owner, repo) => {\n      return `//${host}/${owner}/${repo}/${type}/`;\n    },\n  );\n}\n"],"names":[],"mappings":";;;AAiCO,MAAM,iBAA4C,CAAA;AAAA,EAWvD,YAA6B,iBAA4C,EAAA;AAA5C,IAAA,IAAA,CAAA,iBAAA,GAAA,iBAAA;AAAA;AAA6C,EAV1E,OAAO,OAAA,GAAqD,CAAC,EAAE,QAAa,KAAA;AAC1E,IAAA,MAAM,OAAU,GAAA,4BAAA;AAAA,MACd,MAAO,CAAA,sBAAA,CAAuB,qBAAqB,CAAA,IAAK;AAAC,KAC3D;AACA,IAAO,OAAA,iBAAA;AAAA,MACL,QAAQ,GAAI,CAAA,CAAA,CAAA,KAAK,IAAI,iBAAA,CAAkB,CAAC,CAAC,CAAA;AAAA,MACzC,CAAA,CAAA,KAAK,EAAE,MAAO,CAAA;AAAA,KAChB;AAAA,GACF;AAAA,EAIA,IAAI,IAAe,GAAA;AACjB,IAAO,OAAA,QAAA;AAAA;AACT,EAEA,IAAI,KAAgB,GAAA;AAClB,IAAA,OAAO,KAAK,iBAAkB,CAAA,IAAA;AAAA;AAChC,EAEA,IAAI,MAAkC,GAAA;AACpC,IAAA,OAAO,IAAK,CAAA,iBAAA;AAAA;AACd,EAEA,WAAW,OAIA,EAAA;AAIT,IAAA,OAAO,oBAAqB,CAAA,oBAAA,CAAqB,OAAO,CAAA,EAAG,MAAM,CAAA;AAAA;AACnE,EAEA,eAAe,GAAqB,EAAA;AAClC,IAAO,OAAA,oBAAA,CAAqB,KAAK,MAAM,CAAA;AAAA;AACzC,EAEA,mBAAmB,QAA2C,EAAA;AAC5D,IAAO,OAAA;AAAA,MACL,aAAA,EACE,QAAS,CAAA,MAAA,KAAW,GACnB,IAAA,QAAA,CAAS,MAAW,KAAA,GAAA,IACnB,QAAS,CAAA,OAAA,CAAQ,GAAI,CAAA,uBAAuB,CAAM,KAAA;AAAA,KACxD;AAAA;AAEJ;AASgB,SAAA,oBAAA,CACd,KACA,IACQ,EAAA;AACR,EAAA,OAAO,GAAI,CAAA,OAAA;AAAA,IACT,mDAAA;AAAA,IACA,CAAC,CAAA,EAAG,IAAM,EAAA,KAAA,EAAO,IAAS,KAAA;AACxB,MAAA,OAAO,KAAK,IAAI,CAAA,CAAA,EAAI,KAAK,CAAI,CAAA,EAAA,IAAI,IAAI,IAAI,CAAA,CAAA,CAAA;AAAA;AAC3C,GACF;AACF;;;;"}