'use strict';

var lodash = require('lodash');
var helpers = require('../helpers.cjs.js');

const GITHUB_HOST = "github.com";
const GITHUB_API_BASE_URL = "https://api.github.com";
const GITHUB_RAW_BASE_URL = "https://raw.githubusercontent.com";
function readGithubIntegrationConfig(config) {
  const host = config.getOptionalString("host") ?? GITHUB_HOST;
  let apiBaseUrl = config.getOptionalString("apiBaseUrl");
  let rawBaseUrl = config.getOptionalString("rawBaseUrl");
  const token = config.getOptionalString("token")?.trim();
  const apps = config.getOptionalConfigArray("apps")?.map((c) => ({
    appId: c.getNumber("appId"),
    clientId: c.getString("clientId"),
    clientSecret: c.getString("clientSecret"),
    webhookSecret: c.getString("webhookSecret"),
    privateKey: c.getString("privateKey"),
    allowedInstallationOwners: c.getOptionalStringArray(
      "allowedInstallationOwners"
    )
  }));
  if (!helpers.isValidHost(host)) {
    throw new Error(
      `Invalid GitHub integration config, '${host}' is not a valid host`
    );
  }
  if (apiBaseUrl) {
    apiBaseUrl = lodash.trimEnd(apiBaseUrl, "/");
  } else if (host === GITHUB_HOST) {
    apiBaseUrl = GITHUB_API_BASE_URL;
  }
  if (rawBaseUrl) {
    rawBaseUrl = lodash.trimEnd(rawBaseUrl, "/");
  } else if (host === GITHUB_HOST) {
    rawBaseUrl = GITHUB_RAW_BASE_URL;
  }
  return { host, apiBaseUrl, rawBaseUrl, token, apps };
}
function readGithubIntegrationConfigs(configs) {
  const result = configs.map(readGithubIntegrationConfig);
  if (!result.some((c) => c.host === GITHUB_HOST)) {
    result.push({
      host: GITHUB_HOST,
      apiBaseUrl: GITHUB_API_BASE_URL,
      rawBaseUrl: GITHUB_RAW_BASE_URL
    });
  }
  return result;
}

exports.readGithubIntegrationConfig = readGithubIntegrationConfig;
exports.readGithubIntegrationConfigs = readGithubIntegrationConfigs;
//# sourceMappingURL=config.cjs.js.map
