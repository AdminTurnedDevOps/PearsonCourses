{"version":3,"file":"config.esm.js","sources":["../../src/github/config.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\nconst GITHUB_HOST = 'github.com';\nconst GITHUB_API_BASE_URL = 'https://api.github.com';\nconst GITHUB_RAW_BASE_URL = 'https://raw.githubusercontent.com';\n\n/**\n * The configuration parameters for a single GitHub integration.\n *\n * @public\n */\nexport type GithubIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"github.com\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://api.github.com\",\n   * with no trailing slash.\n   *\n   * May be omitted specifically for GitHub; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  apiBaseUrl?: string;\n\n  /**\n   * The base URL of the raw fetch endpoint of this provider, e.g.\n   * \"https://raw.githubusercontent.com\", with no trailing slash.\n   *\n   * May be omitted specifically for GitHub; then it will be deduced.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  rawBaseUrl?: string;\n\n  /**\n   * The authorization token to use for requests to this provider.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The GitHub Apps configuration to use for requests to this provider.\n   *\n   * If no apps are specified, token or anonymous is used.\n   */\n  apps?: GithubAppConfig[];\n};\n\n/**\n * The configuration parameters for authenticating a GitHub Application.\n *\n * @remarks\n *\n * A GitHub Apps configuration can be generated using the `backstage-cli create-github-app` command.\n *\n * @public\n */\nexport type GithubAppConfig = {\n  /**\n   * Unique app identifier, found at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  appId: number;\n  /**\n   * The private key is used by the GitHub App integration to authenticate the app.\n   * A private key can be generated from the app at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  privateKey: string;\n  /**\n   * Webhook secret can be configured at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  webhookSecret: string;\n  /**\n   * Found at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  clientId: string;\n  /**\n   * Client secrets can be generated at https://github.com/organizations/$org/settings/apps/$AppName\n   */\n  clientSecret: string;\n  /**\n   * List of installation owners allowed to be used by this GitHub app. The GitHub UI does not provide a way to list the installations.\n   * However you can list the installations with the GitHub API. You can find the list of installations here:\n   * https://api.github.com/app/installations\n   * The relevant documentation for this is here.\n   * https://docs.github.com/en/rest/reference/apps#list-installations-for-the-authenticated-app--code-samples\n   */\n  allowedInstallationOwners?: string[];\n};\n\n/**\n * Reads a single GitHub integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGithubIntegrationConfig(\n  config: Config,\n): GithubIntegrationConfig {\n  const host = config.getOptionalString('host') ?? GITHUB_HOST;\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  let rawBaseUrl = config.getOptionalString('rawBaseUrl');\n  const token = config.getOptionalString('token')?.trim();\n  const apps = config.getOptionalConfigArray('apps')?.map(c => ({\n    appId: c.getNumber('appId'),\n    clientId: c.getString('clientId'),\n    clientSecret: c.getString('clientSecret'),\n    webhookSecret: c.getString('webhookSecret'),\n    privateKey: c.getString('privateKey'),\n    allowedInstallationOwners: c.getOptionalStringArray(\n      'allowedInstallationOwners',\n    ),\n  }));\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid GitHub integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === GITHUB_HOST) {\n    apiBaseUrl = GITHUB_API_BASE_URL;\n  }\n\n  if (rawBaseUrl) {\n    rawBaseUrl = trimEnd(rawBaseUrl, '/');\n  } else if (host === GITHUB_HOST) {\n    rawBaseUrl = GITHUB_RAW_BASE_URL;\n  }\n\n  return { host, apiBaseUrl, rawBaseUrl, token, apps };\n}\n\n/**\n * Reads a set of GitHub integration configs, and inserts some defaults for\n * public GitHub if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readGithubIntegrationConfigs(\n  configs: Config[],\n): GithubIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readGithubIntegrationConfig);\n\n  // If no explicit github.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === GITHUB_HOST)) {\n    result.push({\n      host: GITHUB_HOST,\n      apiBaseUrl: GITHUB_API_BASE_URL,\n      rawBaseUrl: GITHUB_RAW_BASE_URL,\n    });\n  }\n\n  return result;\n}\n"],"names":[],"mappings":";;;AAoBA,MAAM,WAAc,GAAA,YAAA;AACpB,MAAM,mBAAsB,GAAA,wBAAA;AAC5B,MAAM,mBAAsB,GAAA,mCAAA;AAiGrB,SAAS,4BACd,MACyB,EAAA;AACzB,EAAA,MAAM,IAAO,GAAA,MAAA,CAAO,iBAAkB,CAAA,MAAM,CAAK,IAAA,WAAA;AACjD,EAAI,IAAA,UAAA,GAAa,MAAO,CAAA,iBAAA,CAAkB,YAAY,CAAA;AACtD,EAAI,IAAA,UAAA,GAAa,MAAO,CAAA,iBAAA,CAAkB,YAAY,CAAA;AACtD,EAAA,MAAM,KAAQ,GAAA,MAAA,CAAO,iBAAkB,CAAA,OAAO,GAAG,IAAK,EAAA;AACtD,EAAA,MAAM,OAAO,MAAO,CAAA,sBAAA,CAAuB,MAAM,CAAA,EAAG,IAAI,CAAM,CAAA,MAAA;AAAA,IAC5D,KAAA,EAAO,CAAE,CAAA,SAAA,CAAU,OAAO,CAAA;AAAA,IAC1B,QAAA,EAAU,CAAE,CAAA,SAAA,CAAU,UAAU,CAAA;AAAA,IAChC,YAAA,EAAc,CAAE,CAAA,SAAA,CAAU,cAAc,CAAA;AAAA,IACxC,aAAA,EAAe,CAAE,CAAA,SAAA,CAAU,eAAe,CAAA;AAAA,IAC1C,UAAA,EAAY,CAAE,CAAA,SAAA,CAAU,YAAY,CAAA;AAAA,IACpC,2BAA2B,CAAE,CAAA,sBAAA;AAAA,MAC3B;AAAA;AACF,GACA,CAAA,CAAA;AAEF,EAAI,IAAA,CAAC,WAAY,CAAA,IAAI,CAAG,EAAA;AACtB,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,uCAAuC,IAAI,CAAA,qBAAA;AAAA,KAC7C;AAAA;AAGF,EAAA,IAAI,UAAY,EAAA;AACd,IAAa,UAAA,GAAA,OAAA,CAAQ,YAAY,GAAG,CAAA;AAAA,GACtC,MAAA,IAAW,SAAS,WAAa,EAAA;AAC/B,IAAa,UAAA,GAAA,mBAAA;AAAA;AAGf,EAAA,IAAI,UAAY,EAAA;AACd,IAAa,UAAA,GAAA,OAAA,CAAQ,YAAY,GAAG,CAAA;AAAA,GACtC,MAAA,IAAW,SAAS,WAAa,EAAA;AAC/B,IAAa,UAAA,GAAA,mBAAA;AAAA;AAGf,EAAA,OAAO,EAAE,IAAA,EAAM,UAAY,EAAA,UAAA,EAAY,OAAO,IAAK,EAAA;AACrD;AASO,SAAS,6BACd,OAC2B,EAAA;AAE3B,EAAM,MAAA,MAAA,GAAS,OAAQ,CAAA,GAAA,CAAI,2BAA2B,CAAA;AAItD,EAAA,IAAI,CAAC,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,IAAA,KAAS,WAAW,CAAG,EAAA;AAC7C,IAAA,MAAA,CAAO,IAAK,CAAA;AAAA,MACV,IAAM,EAAA,WAAA;AAAA,MACN,UAAY,EAAA,mBAAA;AAAA,MACZ,UAAY,EAAA;AAAA,KACb,CAAA;AAAA;AAGH,EAAO,OAAA,MAAA;AACT;;;;"}