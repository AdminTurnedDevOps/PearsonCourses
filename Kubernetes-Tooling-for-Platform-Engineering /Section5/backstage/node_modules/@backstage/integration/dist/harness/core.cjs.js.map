{"version":3,"file":"core.cjs.js","sources":["../../src/harness/core.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { HarnessIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a file, returns a URL\n * for editing the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://app.harness.io/a/b/src/branchname/path/to/c.yaml\n * or:   https://app.harness.io/a/b/_edit/branchname/path/to/c.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getHarnessEditContentsUrl(\n  config: HarnessIntegrationConfig,\n  url: string,\n) {\n  const parsedUrl = parseHarnessUrl(config, url);\n\n  return `${parsedUrl.baseUrl}/ng/account/${parsedUrl.accountId}/module/code${\n    parsedUrl.orgName !== '' ? `/orgs/${parsedUrl.orgName}` : ''\n  }${\n    parsedUrl.projectName !== '' ? `/projects/${parsedUrl.projectName}` : ''\n  }/repos/${parsedUrl.repoName}/files/${parsedUrl.branch}/~/${parsedUrl.path}`;\n}\n\n/**\n * Given a file path URL,\n * it returns an API URL which returns the contents of the file .\n * @remarks\n *\n * Converts\n * from: https://app.harness.io/ng/account/accountId/module/code/orgs/orgName/projects/projName/repos/repoName/files/refMain/~/all-apis.yaml\n *       https://qa.harness.io/ng/account/bDCAuAjFSJCLFj_0ug3lCg/module/code/orgs/HiteshTest/repos/impoorter/files/main/~/catalog.yaml\n * to:   https://app.harness.io/gateway/code/api/v1/repos/accountId/orgName/projName/repoName/+/content/all-apis.yaml?routingId=accountId&include_commit=false&ref=refMain\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getHarnessFileContentsUrl(\n  config: HarnessIntegrationConfig,\n  url: string,\n) {\n  const parsedUrl = parseHarnessUrl(config, url);\n\n  let constructedUrl = `${parsedUrl.baseUrl}/gateway/code/api/v1/repos/${parsedUrl.accountId}`;\n\n  if (parsedUrl.orgName) {\n    constructedUrl += `/${parsedUrl.orgName}`;\n  }\n\n  if (parsedUrl.projectName) {\n    constructedUrl += `/${parsedUrl.projectName}`;\n  }\n\n  constructedUrl += `/${parsedUrl.repoName}/+/raw/${parsedUrl.path}?routingId=${parsedUrl.accountId}&git_ref=refs/heads/${parsedUrl.refString}`;\n\n  return constructedUrl;\n}\n\n/**\n * Given a URL pointing to a repository/path, returns a URL\n * for archive contents of the repository.\n *\n * @remarks\n *\n * Converts\n * from: https://qa.harness.io/ng/account/accountId/module/code/orgs/orgId/projects/projectName/repos/repoName/files/branch/~/fileName\n * to:   https://qa.harness.io/gateway/code/api/v1/repos/accountId/orgId/projectName/repoName/+/archive/branch.zip?routingId=accountId\n *\n * @param url - A URL pointing to a repository/path\n * @param config - The relevant provider config\n * @public\n */\nexport function getHarnessArchiveUrl(\n  config: HarnessIntegrationConfig,\n  url: string,\n) {\n  const parsedUrl = parseHarnessUrl(config, url);\n\n  let constructedUrl = `${parsedUrl.baseUrl}/gateway/code/api/v1/repos/${parsedUrl.accountId}`;\n\n  if (parsedUrl.orgName) {\n    constructedUrl += `/${parsedUrl.orgName}`;\n  }\n\n  if (parsedUrl.projectName) {\n    constructedUrl += `/${parsedUrl.projectName}`;\n  }\n\n  constructedUrl += `/${parsedUrl.repoName}/+/archive/${parsedUrl.branch}.zip?routingId=${parsedUrl.accountId}`;\n\n  return constructedUrl;\n}\n\n/**\n * Given a URL pointing to a repository branch, returns a URL\n * for latest commit information.\n *\n * @remarks\n *\n * Converts\n * from: https://app.harness.io/ng/account/accountId/module/code/orgs/orgName/projects/projectName/repos/repoName/files/branchName\n * to:   https://app.harness.io/gateway/code/api/v1/repos/accountId/orgName/projectName/repoName/+/content?routingId=accountId&include_commit=true&git_ref=refs/heads/branchName\n *\n * @param url - A URL pointing to a repository branch\n * @param config - The relevant provider config\n * @public\n */\nexport function getHarnessLatestCommitUrl(\n  config: HarnessIntegrationConfig,\n  url: string,\n) {\n  const parsedUrl = parseHarnessUrl(config, url);\n\n  let constructedUrl = `${parsedUrl.baseUrl}/gateway/code/api/v1/repos/${parsedUrl.accountId}`;\n\n  if (parsedUrl.orgName) {\n    constructedUrl += `/${parsedUrl.orgName}`;\n  }\n\n  if (parsedUrl.projectName) {\n    constructedUrl += `/${parsedUrl.projectName}`;\n  }\n\n  constructedUrl += `/${parsedUrl.repoName}/+/content?routingId=${parsedUrl.accountId}&include_commit=true&git_ref=refs/heads/${parsedUrl.branch}`;\n\n  return constructedUrl;\n}\n\n/**\n * Return request headers for a Harness Code provider.\n *\n * @param config - A Harness Code provider config\n * @public\n */\nexport function getHarnessRequestOptions(config: HarnessIntegrationConfig): {\n  headers?: Record<string, string>;\n} {\n  const headers: Record<string, string> = {};\n  const { token, apiKey } = config;\n\n  if (apiKey) {\n    headers['x-api-key'] = apiKey;\n  } else if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  return {\n    headers,\n  };\n}\n\n/**\n * Return parsed git url properties.\n *\n * @param config - A Harness provider config\n * @param url - A URL pointing to a repository\n * @public\n */\nexport function parseHarnessUrl(\n  config: HarnessIntegrationConfig,\n  url: string,\n): {\n  baseUrl: string;\n  accountId: string;\n  orgName: string;\n  projectName: string;\n  refString: string;\n  repoName: string;\n  path: string;\n  refDashStr: string;\n  branch: string;\n} {\n  const baseUrl = `https://${config.host}`;\n  try {\n    const pathUrl = new URL(url);\n    const pathSegments = pathUrl.pathname\n      .split('/')\n      .filter(segment => segment !== '');\n    const urlParts = pathUrl.pathname.split('/');\n\n    const accountIdIndex =\n      pathSegments.findIndex(segment => segment === 'account') + 1;\n    const accountId = pathSegments[accountIdIndex];\n\n    const orgNameIndex = pathSegments.findIndex(segment => segment === 'orgs');\n    const orgName = orgNameIndex !== -1 ? pathSegments[orgNameIndex + 1] : '';\n    const projectNameIndex = pathSegments.findIndex(\n      segment => segment === 'projects',\n    );\n\n    const projectName =\n      projectNameIndex !== -1 ? pathSegments[projectNameIndex + 1] : '';\n    // Adjust repoNameIndex to correctly identify the repository name\n    const repoNameIndex =\n      pathSegments.findIndex(\n        (segment, index) =>\n          segment === 'repos' &&\n          index > Math.max(accountIdIndex, orgNameIndex, projectNameIndex),\n      ) + 1;\n    const repoName = pathSegments[repoNameIndex];\n    const refAndPath = urlParts.slice(\n      urlParts.findIndex(i => i === 'files' || i === 'edit') + 1,\n    );\n    const refIndex = refAndPath.findIndex(item => item === '~');\n\n    const refString = refAndPath.slice(0, refIndex).join('/');\n    const pathWithoutSlash =\n      refIndex !== -1\n        ? refAndPath\n            .slice(refIndex + 1)\n            .join('/')\n            .replace(/^\\//, '')\n        : '';\n\n    return {\n      baseUrl: baseUrl,\n      accountId: accountId,\n      orgName: orgName,\n      projectName: projectName,\n      refString: refString,\n      path: pathWithoutSlash,\n      repoName: repoName,\n      refDashStr: refAndPath.slice(0, refIndex).join('-'),\n      branch:\n        refIndex !== -1\n          ? refAndPath.slice(0, refIndex).join('/')\n          : refAndPath.join('/'),\n    };\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n"],"names":[],"mappings":"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"}