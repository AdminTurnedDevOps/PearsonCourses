{"version":3,"file":"ScmIntegrations.esm.js","sources":["../src/ScmIntegrations.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { AwsS3Integration } from './awsS3/AwsS3Integration';\nimport { AwsCodeCommitIntegration } from './awsCodeCommit/AwsCodeCommitIntegration';\nimport { AzureIntegration } from './azure/AzureIntegration';\nimport { BitbucketCloudIntegration } from './bitbucketCloud/BitbucketCloudIntegration';\nimport { BitbucketIntegration } from './bitbucket/BitbucketIntegration';\nimport { BitbucketServerIntegration } from './bitbucketServer/BitbucketServerIntegration';\nimport { GerritIntegration } from './gerrit/GerritIntegration';\nimport { GithubIntegration } from './github/GithubIntegration';\nimport { GitLabIntegration } from './gitlab/GitLabIntegration';\nimport { defaultScmResolveUrl } from './helpers';\nimport { ScmIntegration, ScmIntegrationsGroup } from './types';\nimport { ScmIntegrationRegistry } from './registry';\nimport { GiteaIntegration } from './gitea';\nimport { HarnessIntegration } from './harness/HarnessIntegration';\nimport { AzureBlobStorageIntergation } from './azureBlobStorage';\n\n/**\n * The set of supported integrations.\n *\n * @public\n */\nexport interface IntegrationsByType {\n  awsS3: ScmIntegrationsGroup<AwsS3Integration>;\n  awsCodeCommit: ScmIntegrationsGroup<AwsCodeCommitIntegration>;\n  azureBlobStorage: ScmIntegrationsGroup<AzureBlobStorageIntergation>;\n  azure: ScmIntegrationsGroup<AzureIntegration>;\n  /**\n   * @deprecated in favor of `bitbucketCloud` and `bitbucketServer`\n   */\n  bitbucket: ScmIntegrationsGroup<BitbucketIntegration>;\n  bitbucketCloud: ScmIntegrationsGroup<BitbucketCloudIntegration>;\n  bitbucketServer: ScmIntegrationsGroup<BitbucketServerIntegration>;\n  gerrit: ScmIntegrationsGroup<GerritIntegration>;\n  github: ScmIntegrationsGroup<GithubIntegration>;\n  gitlab: ScmIntegrationsGroup<GitLabIntegration>;\n  gitea: ScmIntegrationsGroup<GiteaIntegration>;\n  harness: ScmIntegrationsGroup<HarnessIntegration>;\n}\n\n/**\n * Exposes the set of supported integrations.\n *\n * @public\n */\nexport class ScmIntegrations implements ScmIntegrationRegistry {\n  private readonly byType: IntegrationsByType;\n\n  static fromConfig(config: Config): ScmIntegrations {\n    return new ScmIntegrations({\n      awsS3: AwsS3Integration.factory({ config }),\n      awsCodeCommit: AwsCodeCommitIntegration.factory({ config }),\n      azureBlobStorage: AzureBlobStorageIntergation.factory({ config }),\n      azure: AzureIntegration.factory({ config }),\n      bitbucket: BitbucketIntegration.factory({ config }),\n      bitbucketCloud: BitbucketCloudIntegration.factory({ config }),\n      bitbucketServer: BitbucketServerIntegration.factory({ config }),\n      gerrit: GerritIntegration.factory({ config }),\n      github: GithubIntegration.factory({ config }),\n      gitlab: GitLabIntegration.factory({ config }),\n      gitea: GiteaIntegration.factory({ config }),\n      harness: HarnessIntegration.factory({ config }),\n    });\n  }\n\n  constructor(integrationsByType: IntegrationsByType) {\n    this.byType = integrationsByType;\n  }\n\n  get awsS3(): ScmIntegrationsGroup<AwsS3Integration> {\n    return this.byType.awsS3;\n  }\n\n  get awsCodeCommit(): ScmIntegrationsGroup<AwsCodeCommitIntegration> {\n    return this.byType.awsCodeCommit;\n  }\n\n  get azureBlobStorage(): ScmIntegrationsGroup<AzureBlobStorageIntergation> {\n    return this.byType.azureBlobStorage;\n  }\n\n  get azure(): ScmIntegrationsGroup<AzureIntegration> {\n    return this.byType.azure;\n  }\n\n  /**\n   * @deprecated in favor of `bitbucketCloud()` and `bitbucketServer()`\n   */\n  get bitbucket(): ScmIntegrationsGroup<BitbucketIntegration> {\n    return this.byType.bitbucket;\n  }\n\n  get bitbucketCloud(): ScmIntegrationsGroup<BitbucketCloudIntegration> {\n    return this.byType.bitbucketCloud;\n  }\n\n  get bitbucketServer(): ScmIntegrationsGroup<BitbucketServerIntegration> {\n    return this.byType.bitbucketServer;\n  }\n\n  get gerrit(): ScmIntegrationsGroup<GerritIntegration> {\n    return this.byType.gerrit;\n  }\n\n  get github(): ScmIntegrationsGroup<GithubIntegration> {\n    return this.byType.github;\n  }\n\n  get gitlab(): ScmIntegrationsGroup<GitLabIntegration> {\n    return this.byType.gitlab;\n  }\n\n  get gitea(): ScmIntegrationsGroup<GiteaIntegration> {\n    return this.byType.gitea;\n  }\n\n  get harness(): ScmIntegrationsGroup<HarnessIntegration> {\n    return this.byType.harness;\n  }\n\n  list(): ScmIntegration[] {\n    return Object.values(this.byType).flatMap(\n      i => i.list() as ScmIntegration[],\n    );\n  }\n\n  byUrl(url: string | URL): ScmIntegration | undefined {\n    let candidates = Object.values(this.byType)\n      .map(i => i.byUrl(url))\n      .filter(Boolean);\n\n    // Do not return deprecated integrations if there are other options\n    if (candidates.length > 1) {\n      const filteredCandidates = candidates.filter(\n        x => !(x instanceof BitbucketIntegration),\n      );\n      if (filteredCandidates.length !== 0) {\n        candidates = filteredCandidates;\n      }\n    }\n\n    return candidates[0];\n  }\n\n  byHost(host: string): ScmIntegration | undefined {\n    return Object.values(this.byType)\n      .map(i => i.byHost(host))\n      .find(Boolean);\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const integration = this.byUrl(options.base);\n    if (!integration) {\n      return defaultScmResolveUrl(options);\n    }\n\n    return integration.resolveUrl(options);\n  }\n\n  resolveEditUrl(url: string): string {\n    const integration = this.byUrl(url);\n    if (!integration) {\n      return url;\n    }\n\n    return integration.resolveEditUrl(url);\n  }\n}\n"],"names":[],"mappings":"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"}