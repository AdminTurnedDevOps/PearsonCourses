{"version":3,"file":"BitbucketServerIntegration.cjs.js","sources":["../../src/bitbucketServer/BitbucketServerIntegration.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations, defaultScmResolveUrl } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  BitbucketServerIntegrationConfig,\n  readBitbucketServerIntegrationConfigs,\n} from './config';\n\n/**\n * A Bitbucket Server based integration.\n *\n * @public\n */\nexport class BitbucketServerIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<BitbucketServerIntegration> = ({\n    config,\n  }) => {\n    const configs = readBitbucketServerIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.bitbucketServer') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new BitbucketServerIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(\n    private readonly integrationConfig: BitbucketServerIntegrationConfig,\n  ) {}\n\n  get type(): string {\n    return 'bitbucketServer';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): BitbucketServerIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const resolved = defaultScmResolveUrl(options);\n\n    // Bitbucket Server line numbers use the syntax #42, rather than #L42\n    if (options.lineNumber) {\n      const url = new URL(resolved);\n\n      url.hash = options.lineNumber.toString();\n      return url.toString();\n    }\n\n    return resolved;\n  }\n\n  resolveEditUrl(url: string): string {\n    // Bitbucket Server doesn't support deep linking to edit mode, therefore there's nothing to do here.\n    // We just remove query parameters since they cause issues with TechDocs edit button.\n    if (url.includes('?')) {\n      return url.substring(0, url.indexOf('?'));\n    }\n    return url;\n  }\n}\n"],"names":["config","readBitbucketServerIntegrationConfigs","basicIntegrations","defaultScmResolveUrl"],"mappings":";;;;;AA4BO,MAAM,0BAAqD,CAAA;AAAA,EAahE,YACmB,iBACjB,EAAA;AADiB,IAAA,IAAA,CAAA,iBAAA,GAAA,iBAAA;AAAA;AAChB,EAdH,OAAO,UAA8D,CAAC;AAAA,YACpEA;AAAA,GACI,KAAA;AACJ,IAAA,MAAM,OAAU,GAAAC,4CAAA;AAAA,MACdD,QAAO,CAAA,sBAAA,CAAuB,8BAA8B,CAAA,IAAK;AAAC,KACpE;AACA,IAAO,OAAAE,yBAAA;AAAA,MACL,QAAQ,GAAI,CAAA,CAAA,CAAA,KAAK,IAAI,0BAAA,CAA2B,CAAC,CAAC,CAAA;AAAA,MAClD,CAAA,CAAA,KAAK,EAAE,MAAO,CAAA;AAAA,KAChB;AAAA,GACF;AAAA,EAMA,IAAI,IAAe,GAAA;AACjB,IAAO,OAAA,iBAAA;AAAA;AACT,EAEA,IAAI,KAAgB,GAAA;AAClB,IAAA,OAAO,KAAK,iBAAkB,CAAA,IAAA;AAAA;AAChC,EAEA,IAAI,MAA2C,GAAA;AAC7C,IAAA,OAAO,IAAK,CAAA,iBAAA;AAAA;AACd,EAEA,WAAW,OAIA,EAAA;AACT,IAAM,MAAA,QAAA,GAAWC,6BAAqB,OAAO,CAAA;AAG7C,IAAA,IAAI,QAAQ,UAAY,EAAA;AACtB,MAAM,MAAA,GAAA,GAAM,IAAI,GAAA,CAAI,QAAQ,CAAA;AAE5B,MAAI,GAAA,CAAA,IAAA,GAAO,OAAQ,CAAA,UAAA,CAAW,QAAS,EAAA;AACvC,MAAA,OAAO,IAAI,QAAS,EAAA;AAAA;AAGtB,IAAO,OAAA,QAAA;AAAA;AACT,EAEA,eAAe,GAAqB,EAAA;AAGlC,IAAI,IAAA,GAAA,CAAI,QAAS,CAAA,GAAG,CAAG,EAAA;AACrB,MAAA,OAAO,IAAI,SAAU,CAAA,CAAA,EAAG,GAAI,CAAA,OAAA,CAAQ,GAAG,CAAC,CAAA;AAAA;AAE1C,IAAO,OAAA,GAAA;AAAA;AAEX;;;;"}