{"version":3,"file":"config.cjs.js","sources":["../../src/bitbucketServer/config.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost } from '../helpers';\n\n/**\n * The configuration parameters for a single Bitbucket Server API provider.\n *\n * @public\n */\nexport type BitbucketServerIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"bitbucket.company.com\"\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g. \"https://<host>/rest/api/1.0\",\n   * with no trailing slash.\n   *\n   * The API will always be preferred if both its base URL and a token are\n   * present.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to a Bitbucket Server provider.\n   *\n   * See https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The credentials for Basic Authentication for requests to a Bitbucket Server provider.\n   *\n   * If `token` was provided, it will be preferred.\n   *\n   * See https://developer.atlassian.com/server/bitbucket/how-tos/command-line-rest/#authentication\n   */\n  username?: string;\n\n  /**\n   * The credentials for Basic Authentication for requests to a Bitbucket Server provider.\n   *\n   * If `token` was provided, it will be preferred.\n   *\n   * See https://developer.atlassian.com/server/bitbucket/how-tos/command-line-rest/#authentication\n   */\n  password?: string;\n};\n\n/**\n * Reads a single Bitbucket Server integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readBitbucketServerIntegrationConfig(\n  config: Config,\n): BitbucketServerIntegrationConfig {\n  const host = config.getString('host');\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token')?.trim();\n  const username = config.getOptionalString('username');\n  const password = config.getOptionalString('password');\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Bitbucket Server integration config, '${host}' is not a valid host`,\n    );\n  }\n\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else {\n    apiBaseUrl = `https://${host}/rest/api/1.0`;\n  }\n\n  return {\n    host,\n    apiBaseUrl,\n    token,\n    username,\n    password,\n  };\n}\n\n/**\n * Reads a set of Bitbucket Server integration configs.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readBitbucketServerIntegrationConfigs(\n  configs: Config[],\n): BitbucketServerIntegrationConfig[] {\n  // Read all the explicit integrations\n  // No default integration will be added\n  return configs.map(readBitbucketServerIntegrationConfig);\n}\n"],"names":["isValidHost","trimEnd"],"mappings":";;;;;AA0EO,SAAS,qCACd,MACkC,EAAA;AAClC,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,SAAA,CAAU,MAAM,CAAA;AACpC,EAAI,IAAA,UAAA,GAAa,MAAO,CAAA,iBAAA,CAAkB,YAAY,CAAA;AACtD,EAAA,MAAM,KAAQ,GAAA,MAAA,CAAO,iBAAkB,CAAA,OAAO,GAAG,IAAK,EAAA;AACtD,EAAM,MAAA,QAAA,GAAW,MAAO,CAAA,iBAAA,CAAkB,UAAU,CAAA;AACpD,EAAM,MAAA,QAAA,GAAW,MAAO,CAAA,iBAAA,CAAkB,UAAU,CAAA;AAEpD,EAAI,IAAA,CAACA,mBAAY,CAAA,IAAI,CAAG,EAAA;AACtB,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,iDAAiD,IAAI,CAAA,qBAAA;AAAA,KACvD;AAAA;AAGF,EAAA,IAAI,UAAY,EAAA;AACd,IAAa,UAAA,GAAAC,cAAA,CAAQ,YAAY,GAAG,CAAA;AAAA,GAC/B,MAAA;AACL,IAAA,UAAA,GAAa,WAAW,IAAI,CAAA,aAAA,CAAA;AAAA;AAG9B,EAAO,OAAA;AAAA,IACL,IAAA;AAAA,IACA,UAAA;AAAA,IACA,KAAA;AAAA,IACA,QAAA;AAAA,IACA;AAAA,GACF;AACF;AAQO,SAAS,sCACd,OACoC,EAAA;AAGpC,EAAO,OAAA,OAAA,CAAQ,IAAI,oCAAoC,CAAA;AACzD;;;;;"}