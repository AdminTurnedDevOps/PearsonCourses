{"version":3,"file":"core.cjs.js","sources":["../../src/bitbucketServer/core.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { BitbucketServerIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a path on a provider, returns the default branch.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketServerDefaultBranch(\n  url: string,\n  config: BitbucketServerIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project } = parseGitUrl(url);\n\n  // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp184\n  let branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/default-branch`;\n\n  let response = await fetch(\n    branchUrl,\n    getBitbucketServerRequestOptions(config),\n  );\n\n  if (response.status === 404) {\n    // First try the new format, and then if it gets specifically a 404 it should try the old format\n    // (to support old  Atlassian Bitbucket Server v5.11.1 format )\n    branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches/default`;\n    response = await fetch(branchUrl, getBitbucketServerRequestOptions(config));\n  }\n\n  if (!response.ok) {\n    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;\n    throw new Error(message);\n  }\n\n  const { displayId } = await response.json();\n  const defaultBranch = displayId;\n  if (!defaultBranch) {\n    throw new Error(\n      `Failed to read default branch from ${branchUrl}. ` +\n        `Response ${response.status} ${response.json()}`,\n    );\n  }\n  return defaultBranch;\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n */\nexport async function getBitbucketServerDownloadUrl(\n  url: string,\n  config: BitbucketServerIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project, ref, filepath } = parseGitUrl(url);\n\n  let branch = ref;\n  if (!branch) {\n    branch = await getBitbucketServerDefaultBranch(url, config);\n  }\n  // path will limit the downloaded content\n  // /docs will only download the docs folder and everything below it\n  // /docs/index.md will download the docs folder and everything below it\n  const path = filepath\n    ? `&path=${encodeURIComponent(decodeURIComponent(filepath))}`\n    : '';\n  return `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/archive?format=tgz&at=${branch}&prefix=${project}-${repoName}${path}`;\n}\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://bitbucket.company.com/projectname/reponame/src/main/file.yaml\n * to:   https://bitbucket.company.com/rest/api/1.0/project/projectname/reponame/raw/file.yaml?at=main\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketServerFileFetchUrl(\n  url: string,\n  config: BitbucketServerIntegrationConfig,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      (filepathtype !== 'browse' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'src')\n    ) {\n      throw new Error('Invalid Bitbucket Server URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n    return `${config.apiBaseUrl}/projects/${owner}/repos/${name}/raw/${pathWithoutSlash}?at=${ref}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getBitbucketServerRequestOptions(\n  config: BitbucketServerIntegrationConfig,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (config.token) {\n    headers.Authorization = `Bearer ${config.token}`;\n  } else if (config.username && config.password) {\n    const buffer = Buffer.from(`${config.username}:${config.password}`, 'utf8');\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return {\n    headers,\n  };\n}\n"],"names":["parseGitUrl","fetch"],"mappings":"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"}