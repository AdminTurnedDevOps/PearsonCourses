{"version":3,"file":"core.cjs.js","sources":["../../src/gerrit/core.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { join, takeWhile, trimEnd, trimStart } from 'lodash';\nimport { GerritIntegrationConfig } from './config';\n\nconst GERRIT_BODY_PREFIX = \")]}'\";\n\n/**\n * Parse a Gitiles URL and return branch, file path and project.\n *\n * @remarks\n *\n * Gerrit only handles code reviews so it does not have a native way to browse\n * or showing the content of gits. Image if Github only had the \"pull requests\"\n * tab.\n *\n * Any source code browsing is instead handled by optional services outside\n * Gerrit. The url format chosen for the Gerrit url reader is the one used by\n * the Gitiles project. Gerrit will work perfectly with Backstage without\n * having Gitiles installed but there are some places in the Backstage GUI\n * with links to the url used by the url reader. These will not work unless\n * the urls point to an actual Gitiles installation.\n *\n * Gitiles url:\n * https://g.com/optional_path/\\{project\\}/+/refs/heads/\\{branch\\}/\\{filePath\\}\n * https://g.com/a/optional_path/\\{project\\}/+/refs/heads/\\{branch\\}/\\{filePath\\}\n *\n *\n * @param url - An URL pointing to a file stored in git.\n * @public\n */\n\nexport function parseGerritGitilesUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n): { branch: string; filePath: string; project: string } {\n  const baseUrlParse = new URL(config.gitilesBaseUrl!);\n  const urlParse = new URL(url);\n\n  // Remove the gerrit authentication prefix '/a/' from the url\n  // In case of the gitilesBaseUrl is https://review.gerrit.com/plugins/gitiles\n  // and the url provided is https://review.gerrit.com/a/plugins/gitiles/...\n  // remove the prefix only if the pathname start with '/a/'\n  const urlPath = urlParse.pathname\n    .substring(urlParse.pathname.startsWith('/a/') ? 2 : 0)\n    .replace(baseUrlParse.pathname, '');\n\n  const parts = urlPath.split('/').filter(p => !!p);\n\n  const projectEndIndex = parts.indexOf('+');\n\n  if (projectEndIndex <= 0) {\n    throw new Error(`Unable to parse project from url: ${url}`);\n  }\n  const project = trimStart(parts.slice(0, projectEndIndex).join('/'), '/');\n\n  const branchIndex = parts.indexOf('heads');\n  if (branchIndex <= 0) {\n    throw new Error(`Unable to parse branch from url: ${url}`);\n  }\n  const branch = parts[branchIndex + 1];\n  const filePath = parts.slice(branchIndex + 2).join('/');\n\n  return {\n    branch,\n    filePath: filePath === '' ? '/' : filePath,\n    project,\n  };\n}\n\n/**\n * Parses Gitiles urls and returns the following:\n *\n * - The project\n * - The type of ref. I.e: branch name, SHA, HEAD or tag.\n * - The file path from the repo root.\n * - The base path as the path that points to the repo root.\n *\n * Supported types of gitiles urls that point to:\n *\n * - Branches\n * - Tags\n * - A commit SHA\n * - HEAD\n *\n * @param config - A Gerrit provider config.\n * @param url - An url to a file or folder in Gitiles.\n * @public\n */\nexport function parseGitilesUrlRef(\n  config: GerritIntegrationConfig,\n  url: string,\n): {\n  project: string;\n  path: string;\n  ref: string;\n  refType: 'sha' | 'branch' | 'tag' | 'head';\n  basePath: string;\n} {\n  const baseUrlParse = new URL(config.gitilesBaseUrl!);\n  const urlParse = new URL(url);\n  // Remove the gerrit authentication prefix '/a/' from the url\n  // In case of the gitilesBaseUrl is https://review.gerrit.com/plugins/gitiles\n  // and the url provided is https://review.gerrit.com/a/plugins/gitiles/...\n  // remove the prefix only if the pathname start with '/a/'\n  const urlPath = trimStart(\n    urlParse.pathname\n      .substring(urlParse.pathname.startsWith('/a/') ? 2 : 0)\n      .replace(baseUrlParse.pathname, ''),\n    '/',\n  );\n\n  // Find the project by taking everything up to \"/+/\".\n  const parts = urlPath.split('/').filter(p => !!p);\n  const projectParts = takeWhile(parts, p => p !== '+');\n  if (projectParts.length === 0) {\n    throw new Error(`Unable to parse gitiles url: ${url}`);\n  }\n  // Also remove the \"+\" after the project.\n  const rest = parts.slice(projectParts.length + 1);\n  const project = join(projectParts, '/');\n\n  // match <project>/+/HEAD/<path>\n  if (rest.length > 0 && rest[0] === 'HEAD') {\n    const ref = rest.shift()!;\n    const path = join(rest, '/');\n    return {\n      project,\n      ref,\n      refType: 'head' as const,\n      path: path || '/',\n      basePath: trimEnd(url.replace(path, ''), '/'),\n    };\n  }\n  // match <project>/+/<sha>/<path>\n  if (rest.length > 0 && rest[0].length === 40) {\n    const ref = rest.shift()!;\n    const path = join(rest, '/');\n    return {\n      project,\n      ref,\n      refType: 'sha' as const,\n      path: path || '/',\n      basePath: trimEnd(url.replace(path, ''), '/'),\n    };\n  }\n  const remainingPath = join(rest, '/');\n  // Regexp for matching \"refs/tags/<tag>\" or \"refs/heads/<branch>/\"\n  const refsRegexp = /^refs\\/(?<refsReference>heads|tags)\\/(?<ref>.*?)(\\/|$)/;\n  const result = refsRegexp.exec(remainingPath);\n  if (result) {\n    const matchString = result[0];\n    let refType;\n    const { refsReference, ref } = result.groups || {};\n    const path = remainingPath.replace(matchString, '');\n    switch (refsReference) {\n      case 'heads':\n        refType = 'branch' as const;\n        break;\n      case 'tags':\n        refType = 'tag' as const;\n        break;\n      default:\n        throw new Error(`Unable to parse gitiles url: ${url}`);\n    }\n    return {\n      project,\n      ref,\n      refType,\n      path: path || '/',\n      basePath: trimEnd(url.replace(path, ''), '/'),\n    };\n  }\n  throw new Error(`Unable to parse gitiles : ${url}`);\n}\n\n/**\n * Build a Gerrit Gitiles url that targets a specific path.\n *\n * @param config - A Gerrit provider config.\n * @param project - The name of the git project\n * @param branch - The branch we will target.\n * @param filePath - The absolute file path.\n * @public\n */\nexport function buildGerritGitilesUrl(\n  config: GerritIntegrationConfig,\n  project: string,\n  branch: string,\n  filePath: string,\n): string {\n  return `${\n    config.gitilesBaseUrl\n  }/${project}/+/refs/heads/${branch}/${trimStart(filePath, '/')}`;\n}\n\n/**\n * Build a Gerrit Gitiles archive url that targets a specific branch and path\n *\n * @param config - A Gerrit provider config.\n * @param project - The name of the git project\n * @param branch - The branch we will target.\n * @param filePath - The absolute file path.\n * @public\n */\nexport function buildGerritGitilesArchiveUrl(\n  config: GerritIntegrationConfig,\n  project: string,\n  branch: string,\n  filePath: string,\n): string {\n  const archiveName =\n    filePath === '/' || filePath === '' ? '.tar.gz' : `/${filePath}.tar.gz`;\n  return `${getGitilesAuthenticationUrl(\n    config,\n  )}/${project}/+archive/refs/heads/${branch}${archiveName}`;\n}\n\n/**\n * Return the authentication prefix.\n *\n * @remarks\n *\n * To authenticate with a password the API url must be prefixed with \"/a/\".\n * If no password is set anonymous access (without the prefix) will\n * be used.\n *\n * @param config - A Gerrit provider config.\n * @public\n */\nexport function getAuthenticationPrefix(\n  config: GerritIntegrationConfig,\n): string {\n  return config.password ? '/a/' : '/';\n}\n\n/**\n * Return the authentication gitiles url.\n *\n * @remarks\n *\n * To authenticate with a password the API url must be prefixed with \"/a/\".\n * If no password is set anonymous access (without the prefix) will\n * be used.\n *\n * @param config - A Gerrit provider config.\n */\nexport function getGitilesAuthenticationUrl(\n  config: GerritIntegrationConfig,\n): string {\n  if (!config.baseUrl || !config.gitilesBaseUrl) {\n    throw new Error(\n      'Unexpected Gerrit config values. baseUrl or gitilesBaseUrl not set.',\n    );\n  }\n  if (config.gitilesBaseUrl.startsWith(config.baseUrl)) {\n    return config.gitilesBaseUrl.replace(\n      config.baseUrl.concat('/'),\n      config.baseUrl.concat(getAuthenticationPrefix(config)),\n    );\n  }\n  if (config.password) {\n    throw new Error(\n      'Since the baseUrl (Gerrit) is not part of the gitilesBaseUrl, an authentication URL could not be constructed.',\n    );\n  }\n  return config.gitilesBaseUrl!;\n}\n\n/**\n * Return the url to get branch info from the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritBranchApiUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { branch, project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.baseUrl}${getAuthenticationPrefix(\n    config,\n  )}projects/${encodeURIComponent(project)}/branches/${branch}`;\n}\n\n/**\n * Return the url to clone the repo that is referenced by the url.\n *\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritCloneRepoUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.cloneUrl}${getAuthenticationPrefix(config)}${project}`;\n}\n\n/**\n * Return the url to fetch the contents of a file using the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @param url - An url pointing to a file in git.\n * @public\n */\nexport function getGerritFileContentsApiUrl(\n  config: GerritIntegrationConfig,\n  url: string,\n) {\n  const { branch, filePath, project } = parseGerritGitilesUrl(config, url);\n\n  return `${config.baseUrl}${getAuthenticationPrefix(\n    config,\n  )}projects/${encodeURIComponent(\n    project,\n  )}/branches/${branch}/files/${encodeURIComponent(filePath)}/content`;\n}\n\n/**\n * Return the url to query available projects using the Gerrit API.\n *\n * @param config - A Gerrit provider config.\n * @public\n */\nexport function getGerritProjectsApiUrl(config: GerritIntegrationConfig) {\n  return `${config.baseUrl}${getAuthenticationPrefix(config)}projects/`;\n}\n\n/**\n * Return request headers for a Gerrit provider.\n *\n * @param config - A Gerrit provider config\n * @public\n */\nexport function getGerritRequestOptions(config: GerritIntegrationConfig): {\n  headers?: Record<string, string>;\n} {\n  const headers: Record<string, string> = {};\n\n  if (!config.password) {\n    return headers;\n  }\n  const buffer = Buffer.from(`${config.username}:${config.password}`, 'utf8');\n  headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  return {\n    headers,\n  };\n}\n\n/**\n * Parse the json response from Gerrit and strip the magic prefix.\n *\n * @remarks\n *\n * To prevent against XSSI attacks the JSON response body from Gerrit starts\n * with a magic prefix that must be stripped before it can be fed to a JSON\n * parser.\n *\n * @param response - An API response.\n * @public\n */\nexport async function parseGerritJsonResponse(\n  response: Response,\n): Promise<unknown> {\n  const responseBody = await response.text();\n  if (responseBody.startsWith(GERRIT_BODY_PREFIX)) {\n    try {\n      return JSON.parse(responseBody.slice(GERRIT_BODY_PREFIX.length));\n    } catch (ex) {\n      throw new Error(\n        `Invalid response from Gerrit: ${responseBody.slice(0, 10)} - ${ex}`,\n      );\n    }\n  }\n  throw new Error(\n    `Gerrit JSON body prefix missing. Found: ${responseBody.slice(0, 10)}`,\n  );\n}\n"],"names":["trimStart","takeWhile","join","trimEnd"],"mappings":"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"}