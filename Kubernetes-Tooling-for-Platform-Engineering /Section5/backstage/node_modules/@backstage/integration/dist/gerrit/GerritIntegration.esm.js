import { basicIntegrations } from '../helpers.esm.js';
import { readGerritIntegrationConfigs } from './config.esm.js';
import { parseGitilesUrlRef } from './core.esm.js';

class GerritIntegration {
  constructor(integrationConfig) {
    this.integrationConfig = integrationConfig;
  }
  static factory = ({ config }) => {
    const configs = readGerritIntegrationConfigs(
      config.getOptionalConfigArray("integrations.gerrit") ?? []
    );
    return basicIntegrations(
      configs.map((c) => new GerritIntegration(c)),
      (i) => i.config.host
    );
  };
  get type() {
    return "gerrit";
  }
  get title() {
    return this.integrationConfig.host;
  }
  get config() {
    return this.integrationConfig;
  }
  resolveUrl(options) {
    const { url, base, lineNumber } = options;
    let updated;
    if (url.startsWith("/")) {
      const { basePath } = parseGitilesUrlRef(this.config, base);
      return basePath + url;
    }
    if (url) {
      updated = new URL(url, base);
    } else {
      updated = new URL(base);
    }
    if (lineNumber) {
      updated.hash = lineNumber.toString();
    }
    return updated.toString();
  }
  resolveEditUrl(url) {
    return url;
  }
}

export { GerritIntegration };
//# sourceMappingURL=GerritIntegration.esm.js.map
