{"version":3,"file":"GerritIntegration.esm.js","sources":["../../src/gerrit/GerritIntegration.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { basicIntegrations } from '../helpers';\nimport { ScmIntegration, ScmIntegrationsFactory } from '../types';\nimport {\n  GerritIntegrationConfig,\n  readGerritIntegrationConfigs,\n} from './config';\nimport { parseGitilesUrlRef } from './core';\n\n/**\n * A Gerrit based integration.\n *\n * @public\n */\nexport class GerritIntegration implements ScmIntegration {\n  static factory: ScmIntegrationsFactory<GerritIntegration> = ({ config }) => {\n    const configs = readGerritIntegrationConfigs(\n      config.getOptionalConfigArray('integrations.gerrit') ?? [],\n    );\n    return basicIntegrations(\n      configs.map(c => new GerritIntegration(c)),\n      i => i.config.host,\n    );\n  };\n\n  constructor(private readonly integrationConfig: GerritIntegrationConfig) {}\n\n  get type(): string {\n    return 'gerrit';\n  }\n\n  get title(): string {\n    return this.integrationConfig.host;\n  }\n\n  get config(): GerritIntegrationConfig {\n    return this.integrationConfig;\n  }\n\n  resolveUrl(options: {\n    url: string;\n    base: string;\n    lineNumber?: number;\n  }): string {\n    const { url, base, lineNumber } = options;\n    let updated;\n    if (url.startsWith('/')) {\n      const { basePath } = parseGitilesUrlRef(this.config, base);\n      return basePath + url;\n    }\n    if (url) {\n      updated = new URL(url, base);\n    } else {\n      updated = new URL(base);\n    }\n    if (lineNumber) {\n      updated.hash = lineNumber.toString();\n    }\n    return updated.toString();\n  }\n\n  resolveEditUrl(url: string): string {\n    // Not applicable for gerrit.\n    return url;\n  }\n}\n"],"names":[],"mappings":";;;;AA6BO,MAAM,iBAA4C,CAAA;AAAA,EAWvD,YAA6B,iBAA4C,EAAA;AAA5C,IAAA,IAAA,CAAA,iBAAA,GAAA,iBAAA;AAAA;AAA6C,EAV1E,OAAO,OAAA,GAAqD,CAAC,EAAE,QAAa,KAAA;AAC1E,IAAA,MAAM,OAAU,GAAA,4BAAA;AAAA,MACd,MAAO,CAAA,sBAAA,CAAuB,qBAAqB,CAAA,IAAK;AAAC,KAC3D;AACA,IAAO,OAAA,iBAAA;AAAA,MACL,QAAQ,GAAI,CAAA,CAAA,CAAA,KAAK,IAAI,iBAAA,CAAkB,CAAC,CAAC,CAAA;AAAA,MACzC,CAAA,CAAA,KAAK,EAAE,MAAO,CAAA;AAAA,KAChB;AAAA,GACF;AAAA,EAIA,IAAI,IAAe,GAAA;AACjB,IAAO,OAAA,QAAA;AAAA;AACT,EAEA,IAAI,KAAgB,GAAA;AAClB,IAAA,OAAO,KAAK,iBAAkB,CAAA,IAAA;AAAA;AAChC,EAEA,IAAI,MAAkC,GAAA;AACpC,IAAA,OAAO,IAAK,CAAA,iBAAA;AAAA;AACd,EAEA,WAAW,OAIA,EAAA;AACT,IAAA,MAAM,EAAE,GAAA,EAAK,IAAM,EAAA,UAAA,EAAe,GAAA,OAAA;AAClC,IAAI,IAAA,OAAA;AACJ,IAAI,IAAA,GAAA,CAAI,UAAW,CAAA,GAAG,CAAG,EAAA;AACvB,MAAA,MAAM,EAAE,QAAS,EAAA,GAAI,kBAAmB,CAAA,IAAA,CAAK,QAAQ,IAAI,CAAA;AACzD,MAAA,OAAO,QAAW,GAAA,GAAA;AAAA;AAEpB,IAAA,IAAI,GAAK,EAAA;AACP,MAAU,OAAA,GAAA,IAAI,GAAI,CAAA,GAAA,EAAK,IAAI,CAAA;AAAA,KACtB,MAAA;AACL,MAAU,OAAA,GAAA,IAAI,IAAI,IAAI,CAAA;AAAA;AAExB,IAAA,IAAI,UAAY,EAAA;AACd,MAAQ,OAAA,CAAA,IAAA,GAAO,WAAW,QAAS,EAAA;AAAA;AAErC,IAAA,OAAO,QAAQ,QAAS,EAAA;AAAA;AAC1B,EAEA,eAAe,GAAqB,EAAA;AAElC,IAAO,OAAA,GAAA;AAAA;AAEX;;;;"}