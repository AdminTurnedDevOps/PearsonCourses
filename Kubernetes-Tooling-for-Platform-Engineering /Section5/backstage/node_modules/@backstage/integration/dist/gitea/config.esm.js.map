{"version":3,"file":"config.esm.js","sources":["../../src/gitea/config.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost, isValidUrl } from '../helpers';\n\n/**\n * The configuration for a single Gitea integration.\n *\n * @public\n */\nexport type GiteaIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. \"gitea.website.com\"\n   */\n  host: string;\n  /**\n   * The optional base URL of the Gitea instance. It is assumed that https\n   * is used and that the base path is \"/\" on the host. If that is not the\n   * case set the complete base url to the gitea instance, e.g.\n   * \"https://gitea.website.com/\". This is the url that you would open\n   * in a browser.\n   */\n  baseUrl?: string;\n  /**\n   * The username to use for requests to gitea.\n   */\n  username?: string;\n\n  /**\n   * The password or http token to use for authentication.\n   */\n  password?: string;\n};\n\n/**\n * Parses a location config block for use in GiteaIntegration\n *\n * @public\n */\nexport function readGiteaConfig(config: Config): GiteaIntegrationConfig {\n  const host = config.getString('host');\n  let baseUrl = config.getOptionalString('baseUrl');\n  const username = config.getOptionalString('username');\n  const password = config.getOptionalString('password')?.trim();\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid Gitea integration config, '${host}' is not a valid host`,\n    );\n  } else if (baseUrl && !isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid Gitea integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  }\n\n  if (baseUrl) {\n    baseUrl = trimEnd(baseUrl, '/');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n\n  return {\n    host,\n    baseUrl,\n    username,\n    password,\n  };\n}\n"],"names":[],"mappings":";;;AAsDO,SAAS,gBAAgB,MAAwC,EAAA;AACtE,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,SAAA,CAAU,MAAM,CAAA;AACpC,EAAI,IAAA,OAAA,GAAU,MAAO,CAAA,iBAAA,CAAkB,SAAS,CAAA;AAChD,EAAM,MAAA,QAAA,GAAW,MAAO,CAAA,iBAAA,CAAkB,UAAU,CAAA;AACpD,EAAA,MAAM,QAAW,GAAA,MAAA,CAAO,iBAAkB,CAAA,UAAU,GAAG,IAAK,EAAA;AAE5D,EAAI,IAAA,CAAC,WAAY,CAAA,IAAI,CAAG,EAAA;AACtB,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,sCAAsC,IAAI,CAAA,qBAAA;AAAA,KAC5C;AAAA,GACS,MAAA,IAAA,OAAA,IAAW,CAAC,UAAA,CAAW,OAAO,CAAG,EAAA;AAC1C,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,sCAAsC,OAAO,CAAA,wBAAA;AAAA,KAC/C;AAAA;AAGF,EAAA,IAAI,OAAS,EAAA;AACX,IAAU,OAAA,GAAA,OAAA,CAAQ,SAAS,GAAG,CAAA;AAAA,GACzB,MAAA;AACL,IAAA,OAAA,GAAU,WAAW,IAAI,CAAA,CAAA;AAAA;AAG3B,EAAO,OAAA;AAAA,IACL,IAAA;AAAA,IACA,OAAA;AAAA,IACA,QAAA;AAAA,IACA;AAAA,GACF;AACF;;;;"}