'use strict';

function getGiteaEditContentsUrl(config, url) {
  const giteaUrl = parseGiteaUrl(config, url);
  return `${giteaUrl.url}/${giteaUrl.owner}/${giteaUrl.name}/_edit/${giteaUrl.ref}/${giteaUrl.path}`;
}
function getGiteaFileContentsUrl(config, url) {
  const giteaUrl = parseGiteaUrl(config, url);
  return `${giteaUrl.url}/api/v1/repos/${giteaUrl.owner}/${giteaUrl.name}/contents/${giteaUrl.path}?ref=${giteaUrl.ref}`;
}
function getGiteaArchiveUrl(config, url) {
  const giteaUrl = parseGiteaUrl(config, url);
  return `${giteaUrl.url}/api/v1/repos/${giteaUrl.owner}/${giteaUrl.name}/archive/${giteaUrl.ref}.tar.gz`;
}
function getGiteaLatestCommitUrl(config, url) {
  const giteaUrl = parseGiteaUrl(config, url);
  return `${giteaUrl.url}/api/v1/repos/${giteaUrl.owner}/${giteaUrl.name}/git/commits/${giteaUrl.ref}`;
}
function getGiteaRequestOptions(config) {
  const headers = {};
  const { username, password } = config;
  if (!password) {
    return headers;
  }
  if (username) {
    headers.Authorization = `basic ${Buffer.from(
      `${username}:${password}`
    ).toString("base64")}`;
  } else {
    headers.Authorization = `token ${password}`;
  }
  return {
    headers
  };
}
function parseGiteaUrl(config, url) {
  const baseUrl = config.baseUrl ?? `https://${config.host}`;
  try {
    const [_blank, owner, name, _src, _branch, ref, ...path] = url.replace(baseUrl, "").split("/");
    const pathWithoutSlash = path.join("/").replace(/^\//, "");
    return {
      url: baseUrl,
      owner,
      name,
      ref,
      path: pathWithoutSlash
    };
  } catch (e) {
    throw new Error(`Incorrect URL: ${url}, ${e}`);
  }
}

exports.getGiteaArchiveUrl = getGiteaArchiveUrl;
exports.getGiteaEditContentsUrl = getGiteaEditContentsUrl;
exports.getGiteaFileContentsUrl = getGiteaFileContentsUrl;
exports.getGiteaLatestCommitUrl = getGiteaLatestCommitUrl;
exports.getGiteaRequestOptions = getGiteaRequestOptions;
exports.parseGiteaUrl = parseGiteaUrl;
//# sourceMappingURL=core.cjs.js.map
