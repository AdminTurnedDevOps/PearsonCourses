{"version":3,"file":"core.cjs.js","sources":["../../src/gitea/core.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { GiteaIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a file, returns a URL\n * for editing the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://gitea.com/a/b/src/branchname/path/to/c.yaml\n * or:   https://gitea.com/a/b/_edit/branchname/path/to/c.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getGiteaEditContentsUrl(\n  config: GiteaIntegrationConfig,\n  url: string,\n) {\n  const giteaUrl = parseGiteaUrl(config, url);\n  return `${giteaUrl.url}/${giteaUrl.owner}/${giteaUrl.name}/_edit/${giteaUrl.ref}/${giteaUrl.path}`;\n}\n\n/**\n * Given a URL pointing to a file, returns an api URL\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://gitea.com/a/b/src/branch/branchname/path/to/c.yaml\n * to:   https://gitea.com/api/v1/repos/a/b/contents/path/to/c.yaml?ref=branchname\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport function getGiteaFileContentsUrl(\n  config: GiteaIntegrationConfig,\n  url: string,\n) {\n  const giteaUrl = parseGiteaUrl(config, url);\n  return `${giteaUrl.url}/api/v1/repos/${giteaUrl.owner}/${giteaUrl.name}/contents/${giteaUrl.path}?ref=${giteaUrl.ref}`;\n}\n\n/**\n * Given a URL pointing to a repository/path, returns a URL\n * for archive contents of the repository.\n *\n * @remarks\n *\n * Converts\n * from: https://gitea.com/a/b/src/branchname\n * or:   https://gitea.com/api/v1/repos/a/b/archive/branchname.tar.gz\n *\n * @param url - A URL pointing to a repository/path\n * @param config - The relevant provider config\n * @public\n */\nexport function getGiteaArchiveUrl(\n  config: GiteaIntegrationConfig,\n  url: string,\n) {\n  const giteaUrl = parseGiteaUrl(config, url);\n  return `${giteaUrl.url}/api/v1/repos/${giteaUrl.owner}/${giteaUrl.name}/archive/${giteaUrl.ref}.tar.gz`;\n}\n\n/**\n * Given a URL pointing to a repository branch, returns a URL\n * for latest commit information.\n *\n * @remarks\n *\n * Converts\n * from: https://gitea.com/a/b/src/branchname\n * or:   https://gitea.com/api/v1/repos/a/b/git/commits/branchname\n *\n * @param url - A URL pointing to a repository branch\n * @param config - The relevant provider config\n * @public\n */\nexport function getGiteaLatestCommitUrl(\n  config: GiteaIntegrationConfig,\n  url: string,\n) {\n  const giteaUrl = parseGiteaUrl(config, url);\n  return `${giteaUrl.url}/api/v1/repos/${giteaUrl.owner}/${giteaUrl.name}/git/commits/${giteaUrl.ref}`;\n}\n\n/**\n * Return request headers for a Gitea provider.\n *\n * @param config - A Gitea provider config\n * @public\n */\nexport function getGiteaRequestOptions(config: GiteaIntegrationConfig): {\n  headers?: Record<string, string>;\n} {\n  const headers: Record<string, string> = {};\n  const { username, password } = config;\n\n  if (!password) {\n    return headers;\n  }\n\n  if (username) {\n    headers.Authorization = `basic ${Buffer.from(\n      `${username}:${password}`,\n    ).toString('base64')}`;\n  } else {\n    headers.Authorization = `token ${password}`;\n  }\n\n  return {\n    headers,\n  };\n}\n\n/**\n * Return parsed git url properties.\n *\n * @param config - A Gitea provider config\n * @param url - A URL pointing to a repository\n * @public\n */\nexport function parseGiteaUrl(\n  config: GiteaIntegrationConfig,\n  url: string,\n): {\n  url: string;\n  owner: string;\n  name: string;\n  ref: string;\n  path: string;\n} {\n  const baseUrl = config.baseUrl ?? `https://${config.host}`;\n  try {\n    const [_blank, owner, name, _src, _branch, ref, ...path] = url\n      .replace(baseUrl, '')\n      .split('/');\n    const pathWithoutSlash = path.join('/').replace(/^\\//, '');\n\n    return {\n      url: baseUrl,\n      owner: owner,\n      name: name,\n      ref: ref,\n      path: pathWithoutSlash,\n    };\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n"],"names":[],"mappings":"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"}