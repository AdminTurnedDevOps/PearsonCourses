{"version":3,"file":"config.esm.js","sources":["../../src/awsS3/config.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\n\nconst AMAZON_AWS_HOST = 'amazonaws.com';\n\n/**\n * The configuration parameters for a single AWS S3 provider.\n *\n * @public\n */\nexport type AwsS3IntegrationConfig = {\n  /**\n   * Host, derived from endpoint, and defaults to amazonaws.com\n   */\n  host: string;\n\n  /**\n   * (Optional) AWS Endpoint.\n   * The endpoint URI to send requests to. The default endpoint is built from the configured region.\n   * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#constructor-property\n   *\n   * Supports non-AWS providers, e.g. for LocalStack, endpoint may look like http://localhost:4566\n   */\n  endpoint?: string;\n\n  /**\n   * (Optional) Whether to use path style URLs when communicating with S3.\n   * Defaults to false.\n   * This allows providers like LocalStack, Minio and Wasabi (and possibly others) to be used.\n   */\n  s3ForcePathStyle?: boolean;\n\n  /**\n   * (Optional) User access key id\n   */\n  accessKeyId?: string;\n\n  /**\n   * (Optional) User secret access key\n   */\n  secretAccessKey?: string;\n\n  /**\n   * (Optional) ARN of role to be assumed\n   */\n  roleArn?: string;\n\n  /**\n   * (Optional) External ID to use when assuming role\n   */\n  externalId?: string;\n};\n\n/**\n * Reads a single Aws S3 integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\n\nexport function readAwsS3IntegrationConfig(\n  config: Config,\n): AwsS3IntegrationConfig {\n  const endpoint = config.getOptionalString('endpoint');\n  const s3ForcePathStyle =\n    config.getOptionalBoolean('s3ForcePathStyle') ?? false;\n  let host;\n  let pathname;\n  if (endpoint) {\n    try {\n      const url = new URL(endpoint);\n      host = url.host;\n      pathname = url.pathname;\n    } catch {\n      throw new Error(\n        `invalid awsS3 integration config, endpoint '${endpoint}' is not a valid URL`,\n      );\n    }\n    if (pathname !== '/') {\n      throw new Error(\n        `invalid awsS3 integration config, endpoints cannot contain path, got '${endpoint}'`,\n      );\n    }\n  } else {\n    host = AMAZON_AWS_HOST;\n  }\n\n  const accessKeyId = config.getOptionalString('accessKeyId');\n  const secretAccessKey = config.getOptionalString('secretAccessKey')?.trim();\n  const roleArn = config.getOptionalString('roleArn');\n  const externalId = config.getOptionalString('externalId');\n\n  return {\n    host,\n    endpoint,\n    s3ForcePathStyle,\n    accessKeyId,\n    secretAccessKey,\n    roleArn,\n    externalId,\n  };\n}\n\n/**\n * Reads a set of AWS S3 integration configs, and inserts some defaults for\n * public Amazon AWS if not specified.\n *\n * @param configs - The config objects of the integrations\n * @public\n */\nexport function readAwsS3IntegrationConfigs(\n  configs: Config[],\n): AwsS3IntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readAwsS3IntegrationConfig);\n\n  // If no explicit amazonaws.com integration was added, put one in the list as\n  // a convenience\n  if (!result.some(c => c.host === AMAZON_AWS_HOST)) {\n    result.push({\n      host: AMAZON_AWS_HOST,\n    });\n  }\n  return result;\n}\n"],"names":[],"mappings":"AAkBA,MAAM,eAAkB,GAAA,eAAA;AAyDjB,SAAS,2BACd,MACwB,EAAA;AACxB,EAAM,MAAA,QAAA,GAAW,MAAO,CAAA,iBAAA,CAAkB,UAAU,CAAA;AACpD,EAAA,MAAM,gBACJ,GAAA,MAAA,CAAO,kBAAmB,CAAA,kBAAkB,CAAK,IAAA,KAAA;AACnD,EAAI,IAAA,IAAA;AACJ,EAAI,IAAA,QAAA;AACJ,EAAA,IAAI,QAAU,EAAA;AACZ,IAAI,IAAA;AACF,MAAM,MAAA,GAAA,GAAM,IAAI,GAAA,CAAI,QAAQ,CAAA;AAC5B,MAAA,IAAA,GAAO,GAAI,CAAA,IAAA;AACX,MAAA,QAAA,GAAW,GAAI,CAAA,QAAA;AAAA,KACT,CAAA,MAAA;AACN,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,+CAA+C,QAAQ,CAAA,oBAAA;AAAA,OACzD;AAAA;AAEF,IAAA,IAAI,aAAa,GAAK,EAAA;AACpB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,yEAAyE,QAAQ,CAAA,CAAA;AAAA,OACnF;AAAA;AACF,GACK,MAAA;AACL,IAAO,IAAA,GAAA,eAAA;AAAA;AAGT,EAAM,MAAA,WAAA,GAAc,MAAO,CAAA,iBAAA,CAAkB,aAAa,CAAA;AAC1D,EAAA,MAAM,eAAkB,GAAA,MAAA,CAAO,iBAAkB,CAAA,iBAAiB,GAAG,IAAK,EAAA;AAC1E,EAAM,MAAA,OAAA,GAAU,MAAO,CAAA,iBAAA,CAAkB,SAAS,CAAA;AAClD,EAAM,MAAA,UAAA,GAAa,MAAO,CAAA,iBAAA,CAAkB,YAAY,CAAA;AAExD,EAAO,OAAA;AAAA,IACL,IAAA;AAAA,IACA,QAAA;AAAA,IACA,gBAAA;AAAA,IACA,WAAA;AAAA,IACA,eAAA;AAAA,IACA,OAAA;AAAA,IACA;AAAA,GACF;AACF;AASO,SAAS,4BACd,OAC0B,EAAA;AAE1B,EAAM,MAAA,MAAA,GAAS,OAAQ,CAAA,GAAA,CAAI,0BAA0B,CAAA;AAIrD,EAAA,IAAI,CAAC,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,IAAA,KAAS,eAAe,CAAG,EAAA;AACjD,IAAA,MAAA,CAAO,IAAK,CAAA;AAAA,MACV,IAAM,EAAA;AAAA,KACP,CAAA;AAAA;AAEH,EAAO,OAAA,MAAA;AACT;;;;"}