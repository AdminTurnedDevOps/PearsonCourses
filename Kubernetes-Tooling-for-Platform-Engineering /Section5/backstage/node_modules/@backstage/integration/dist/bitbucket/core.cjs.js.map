{"version":3,"file":"core.cjs.js","sources":["../../src/bitbucket/core.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport parseGitUrl from 'git-url-parse';\nimport { BitbucketIntegrationConfig } from './config';\n\n/**\n * Given a URL pointing to a path on a provider, returns the default branch.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport async function getBitbucketDefaultBranch(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): Promise<string> {\n  const { name: repoName, owner: project, resource } = parseGitUrl(url);\n\n  const isHosted = resource === 'bitbucket.org';\n  // Bitbucket Server https://docs.atlassian.com/bitbucket-server/rest/7.9.0/bitbucket-rest.html#idp184\n  let branchUrl = isHosted\n    ? `${config.apiBaseUrl}/repositories/${project}/${repoName}`\n    : `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/default-branch`;\n\n  let response = await fetch(branchUrl, getBitbucketRequestOptions(config));\n\n  if (response.status === 404 && !isHosted) {\n    // First try the new format, and then if it gets specifically a 404 it should try the old format\n    // (to support old  Atlassian Bitbucket v5.11.1 format )\n    branchUrl = `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/branches/default`;\n    response = await fetch(branchUrl, getBitbucketRequestOptions(config));\n  }\n\n  if (!response.ok) {\n    const message = `Failed to retrieve default branch from ${branchUrl}, ${response.status} ${response.statusText}`;\n    throw new Error(message);\n  }\n\n  let defaultBranch;\n  if (isHosted) {\n    const repoInfo = await response.json();\n    defaultBranch = repoInfo.mainbranch.name;\n  } else {\n    const { displayId } = await response.json();\n    defaultBranch = displayId;\n  }\n  if (!defaultBranch) {\n    throw new Error(\n      `Failed to read default branch from ${branchUrl}. ` +\n        `Response ${response.status} ${response.json()}`,\n    );\n  }\n  return defaultBranch;\n}\n\n/**\n * Given a URL pointing to a path on a provider, returns a URL that is suitable\n * for downloading the subtree.\n *\n * @param url - A URL pointing to a path\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport async function getBitbucketDownloadUrl(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): Promise<string> {\n  const {\n    name: repoName,\n    owner: project,\n    ref,\n    protocol,\n    resource,\n    filepath,\n  } = parseGitUrl(url);\n\n  const isHosted = resource === 'bitbucket.org';\n\n  let branch = ref;\n  if (!branch) {\n    branch = await getBitbucketDefaultBranch(url, config);\n  }\n  // path will limit the downloaded content\n  // /docs will only download the docs folder and everything below it\n  // /docs/index.md will download the docs folder and everything below it\n  const path = filepath\n    ? `&path=${encodeURIComponent(decodeURIComponent(filepath))}`\n    : '';\n  const archiveUrl = isHosted\n    ? `${protocol}://${resource}/${project}/${repoName}/get/${branch}.tar.gz`\n    : `${config.apiBaseUrl}/projects/${project}/repos/${repoName}/archive?format=tgz&at=${branch}&prefix=${project}-${repoName}${path}`;\n\n  return archiveUrl;\n}\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://bitbucket.org/orgname/reponame/src/master/file.yaml\n * to:   https://api.bitbucket.org/2.0/repositories/orgname/reponame/src/master/file.yaml\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function getBitbucketFileFetchUrl(\n  url: string,\n  config: BitbucketIntegrationConfig,\n): string {\n  try {\n    const { owner, name, ref, filepathtype, filepath } = parseGitUrl(url);\n    if (\n      !owner ||\n      !name ||\n      (filepathtype !== 'browse' &&\n        filepathtype !== 'raw' &&\n        filepathtype !== 'src')\n    ) {\n      throw new Error('Invalid Bitbucket URL or file path');\n    }\n\n    const pathWithoutSlash = filepath.replace(/^\\//, '');\n\n    if (config.host === 'bitbucket.org') {\n      if (!ref) {\n        throw new Error('Invalid Bitbucket URL or file path');\n      }\n      return `${config.apiBaseUrl}/repositories/${owner}/${name}/src/${ref}/${pathWithoutSlash}`;\n    }\n    return `${config.apiBaseUrl}/projects/${owner}/repos/${name}/raw/${pathWithoutSlash}?at=${ref}`;\n  } catch (e) {\n    throw new Error(`Incorrect URL: ${url}, ${e}`);\n  }\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n * @deprecated no longer in use, bitbucket integration replaced by integrations bitbucketCloud and bitbucketServer.\n */\nexport function getBitbucketRequestOptions(\n  config: BitbucketIntegrationConfig,\n): { headers: Record<string, string> } {\n  const headers: Record<string, string> = {};\n\n  if (config.token) {\n    headers.Authorization = `Bearer ${config.token}`;\n  } else if (config.username && config.appPassword) {\n    const buffer = Buffer.from(\n      `${config.username}:${config.appPassword}`,\n      'utf8',\n    );\n    headers.Authorization = `Basic ${buffer.toString('base64')}`;\n  }\n\n  return {\n    headers,\n  };\n}\n"],"names":["parseGitUrl","fetch"],"mappings":"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"}