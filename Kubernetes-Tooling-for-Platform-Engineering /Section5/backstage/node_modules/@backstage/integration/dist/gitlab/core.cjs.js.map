{"version":3,"file":"core.cjs.js","sources":["../../src/gitlab/core.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'cross-fetch';\nimport {\n  getGitLabIntegrationRelativePath,\n  GitLabIntegrationConfig,\n} from './config';\n\n/**\n * Given a URL pointing to a file on a provider, returns a URL that is suitable\n * for fetching the contents of the data.\n *\n * @remarks\n *\n * Converts\n * from: https://gitlab.example.com/a/b/blob/master/c.yaml\n * to:   https://gitlab.com/api/v4/projects/projectId/repository/c.yaml?ref=master\n * -or-\n * from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n * to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\n *\n * @param url - A URL pointing to a file\n * @param config - The relevant provider config\n * @public\n */\nexport async function getGitLabFileFetchUrl(\n  url: string,\n  config: GitLabIntegrationConfig,\n): Promise<string> {\n  const projectID = await getProjectId(url, config);\n  return buildProjectUrl(url, projectID, config).toString();\n}\n\n/**\n * Gets the request options necessary to make requests to a given provider.\n *\n * @param config - The relevant provider config\n * @public\n */\nexport function getGitLabRequestOptions(\n  config: GitLabIntegrationConfig,\n  token?: string,\n): { headers: Record<string, string> } {\n  if (token) {\n    // If token comes from the user and starts with \"gl\", it's a private token (see https://docs.gitlab.com/ee/security/token_overview.html#token-prefixes)\n    return {\n      headers: token.startsWith('gl')\n        ? { 'PRIVATE-TOKEN': token }\n        : { Authorization: `Bearer ${token}` }, // Otherwise, it's a bearer token\n    };\n  }\n\n  // If token not provided, fetch the integration token\n  const { token: configToken = '' } = config;\n  return {\n    headers: { 'PRIVATE-TOKEN': configToken },\n  };\n}\n\n// Converts\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   https://gitlab.com/api/v4/projects/projectId/repository/files/filepath?ref=branch\nexport function buildProjectUrl(\n  target: string,\n  projectID: Number,\n  config: GitLabIntegrationConfig,\n): URL {\n  try {\n    const url = new URL(target);\n\n    const branchAndFilePath = url.pathname\n      .split('/blob/')\n      .slice(1)\n      .join('/blob/');\n    const [branch, ...filePath] = branchAndFilePath.split('/');\n    const relativePath = getGitLabIntegrationRelativePath(config);\n\n    url.pathname = [\n      ...(relativePath ? [relativePath] : []),\n      'api/v4/projects',\n      projectID,\n      'repository/files',\n      encodeURIComponent(decodeURIComponent(filePath.join('/'))),\n      'raw',\n    ].join('/');\n\n    url.search = `?ref=${branch}`;\n\n    return url;\n  } catch (e) {\n    throw new Error(`Incorrect url: ${target}, ${e}`);\n  }\n}\n\n// Convert\n// from: https://gitlab.com/groupA/teams/teamA/subgroupA/repoA/-/blob/branch/filepath\n// to:   The project ID that corresponds to the URL\nexport async function getProjectId(\n  target: string,\n  config: GitLabIntegrationConfig,\n): Promise<number> {\n  const url = new URL(target);\n\n  if (!url.pathname.includes('/blob/')) {\n    throw new Error(\n      `Failed converting ${url.pathname} to a project id. Url path must include /blob/.`,\n    );\n  }\n\n  try {\n    let repo = url.pathname.split('/-/blob/')[0].split('/blob/')[0];\n\n    // Get gitlab relative path\n    const relativePath = getGitLabIntegrationRelativePath(config);\n\n    // Check relative path exist and replace it if it's the case.\n    if (relativePath) {\n      repo = repo.replace(relativePath, '');\n    }\n\n    // Convert\n    // to: https://gitlab.com/api/v4/projects/groupA%2Fteams%2FsubgroupA%2FteamA%2Frepo\n    const repoIDLookup = new URL(\n      `${url.origin}${relativePath}/api/v4/projects/${encodeURIComponent(\n        repo.replace(/^\\//, ''),\n      )}`,\n    );\n\n    const response = await fetch(\n      repoIDLookup.toString(),\n      getGitLabRequestOptions(config),\n    );\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(\n        `GitLab Error '${data.error}', ${data.error_description}`,\n      );\n    }\n\n    return Number(data.id);\n  } catch (e) {\n    throw new Error(`Could not get GitLab project ID for: ${target}, ${e}`);\n  }\n}\n"],"names":["config","getGitLabIntegrationRelativePath","fetch"],"mappings":"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"}