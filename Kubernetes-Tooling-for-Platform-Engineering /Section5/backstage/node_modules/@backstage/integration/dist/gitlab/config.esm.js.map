{"version":3,"file":"config.esm.js","sources":["../../src/gitlab/config.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { trimEnd } from 'lodash';\nimport { isValidHost, isValidUrl } from '../helpers';\n\nconst GITLAB_HOST = 'gitlab.com';\nconst GITLAB_API_BASE_URL = 'https://gitlab.com/api/v4';\n\n/**\n * The configuration parameters for a single GitLab integration.\n *\n * @public\n */\nexport type GitLabIntegrationConfig = {\n  /**\n   * The host of the target that this matches on, e.g. `gitlab.com`.\n   */\n  host: string;\n\n  /**\n   * The base URL of the API of this provider, e.g.\n   * `https://gitlab.com/api/v4`, with no trailing slash.\n   *\n   * May be omitted specifically for public GitLab; then it will be deduced.\n   */\n  apiBaseUrl: string;\n\n  /**\n   * The authorization token to use for requests to this provider.\n   *\n   * If no token is specified, anonymous access is used.\n   */\n  token?: string;\n\n  /**\n   * The baseUrl of this provider, e.g. `https://gitlab.com`, which is passed\n   * into the GitLab client.\n   *\n   * If no baseUrl is provided, it will default to `https://${host}`\n   */\n  baseUrl: string;\n};\n\n/**\n * Reads a single GitLab integration config.\n *\n * @param config - The config object of a single integration\n * @public\n */\nexport function readGitLabIntegrationConfig(\n  config: Config,\n): GitLabIntegrationConfig {\n  const host = config.getString('host');\n  let apiBaseUrl = config.getOptionalString('apiBaseUrl');\n  const token = config.getOptionalString('token')?.trim();\n  let baseUrl = config.getOptionalString('baseUrl');\n  if (apiBaseUrl) {\n    apiBaseUrl = trimEnd(apiBaseUrl, '/');\n  } else if (host === GITLAB_HOST) {\n    apiBaseUrl = GITLAB_API_BASE_URL;\n  }\n\n  if (baseUrl) {\n    baseUrl = trimEnd(baseUrl, '/');\n  } else {\n    baseUrl = `https://${host}`;\n  }\n\n  if (!isValidHost(host)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${host}' is not a valid host`,\n    );\n  } else if (!apiBaseUrl || !isValidUrl(apiBaseUrl)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${apiBaseUrl}' is not a valid apiBaseUrl`,\n    );\n  } else if (!isValidUrl(baseUrl)) {\n    throw new Error(\n      `Invalid GitLab integration config, '${baseUrl}' is not a valid baseUrl`,\n    );\n  }\n\n  return { host, token, apiBaseUrl, baseUrl };\n}\n\n/**\n * Reads a set of GitLab integration configs, and inserts some defaults for\n * public GitLab if not specified.\n *\n * @param configs - All of the integration config objects\n * @public\n */\nexport function readGitLabIntegrationConfigs(\n  configs: Config[],\n): GitLabIntegrationConfig[] {\n  // First read all the explicit integrations\n  const result = configs.map(readGitLabIntegrationConfig);\n\n  // As a convenience we always make sure there's at least an unauthenticated\n  // reader for public gitlab repos.\n  if (!result.some(c => c.host === GITLAB_HOST)) {\n    result.push({\n      host: GITLAB_HOST,\n      apiBaseUrl: GITLAB_API_BASE_URL,\n      baseUrl: `https://${GITLAB_HOST}`,\n    });\n  }\n\n  return result;\n}\n\n/**\n * Reads a GitLab integration config, and returns\n * relative path.\n *\n * @param config - GitLabIntegrationConfig object\n * @public\n */\nexport function getGitLabIntegrationRelativePath(\n  config: GitLabIntegrationConfig,\n): string {\n  let relativePath = '';\n  if (config.host !== GITLAB_HOST) {\n    relativePath = new URL(config.baseUrl).pathname;\n  }\n  return trimEnd(relativePath, '/');\n}\n"],"names":[],"mappings":";;;AAoBA,MAAM,WAAc,GAAA,YAAA;AACpB,MAAM,mBAAsB,GAAA,2BAAA;AA2CrB,SAAS,4BACd,MACyB,EAAA;AACzB,EAAM,MAAA,IAAA,GAAO,MAAO,CAAA,SAAA,CAAU,MAAM,CAAA;AACpC,EAAI,IAAA,UAAA,GAAa,MAAO,CAAA,iBAAA,CAAkB,YAAY,CAAA;AACtD,EAAA,MAAM,KAAQ,GAAA,MAAA,CAAO,iBAAkB,CAAA,OAAO,GAAG,IAAK,EAAA;AACtD,EAAI,IAAA,OAAA,GAAU,MAAO,CAAA,iBAAA,CAAkB,SAAS,CAAA;AAChD,EAAA,IAAI,UAAY,EAAA;AACd,IAAa,UAAA,GAAA,OAAA,CAAQ,YAAY,GAAG,CAAA;AAAA,GACtC,MAAA,IAAW,SAAS,WAAa,EAAA;AAC/B,IAAa,UAAA,GAAA,mBAAA;AAAA;AAGf,EAAA,IAAI,OAAS,EAAA;AACX,IAAU,OAAA,GAAA,OAAA,CAAQ,SAAS,GAAG,CAAA;AAAA,GACzB,MAAA;AACL,IAAA,OAAA,GAAU,WAAW,IAAI,CAAA,CAAA;AAAA;AAG3B,EAAI,IAAA,CAAC,WAAY,CAAA,IAAI,CAAG,EAAA;AACtB,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,uCAAuC,IAAI,CAAA,qBAAA;AAAA,KAC7C;AAAA,aACS,CAAC,UAAA,IAAc,CAAC,UAAA,CAAW,UAAU,CAAG,EAAA;AACjD,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,uCAAuC,UAAU,CAAA,2BAAA;AAAA,KACnD;AAAA,GACS,MAAA,IAAA,CAAC,UAAW,CAAA,OAAO,CAAG,EAAA;AAC/B,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,uCAAuC,OAAO,CAAA,wBAAA;AAAA,KAChD;AAAA;AAGF,EAAA,OAAO,EAAE,IAAA,EAAM,KAAO,EAAA,UAAA,EAAY,OAAQ,EAAA;AAC5C;AASO,SAAS,6BACd,OAC2B,EAAA;AAE3B,EAAM,MAAA,MAAA,GAAS,OAAQ,CAAA,GAAA,CAAI,2BAA2B,CAAA;AAItD,EAAA,IAAI,CAAC,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,IAAA,KAAS,WAAW,CAAG,EAAA;AAC7C,IAAA,MAAA,CAAO,IAAK,CAAA;AAAA,MACV,IAAM,EAAA,WAAA;AAAA,MACN,UAAY,EAAA,mBAAA;AAAA,MACZ,OAAA,EAAS,WAAW,WAAW,CAAA;AAAA,KAChC,CAAA;AAAA;AAGH,EAAO,OAAA,MAAA;AACT;AASO,SAAS,iCACd,MACQ,EAAA;AACR,EAAA,IAAI,YAAe,GAAA,EAAA;AACnB,EAAI,IAAA,MAAA,CAAO,SAAS,WAAa,EAAA;AAC/B,IAAA,YAAA,GAAe,IAAI,GAAA,CAAI,MAAO,CAAA,OAAO,CAAE,CAAA,QAAA;AAAA;AAEzC,EAAO,OAAA,OAAA,CAAQ,cAAc,GAAG,CAAA;AAClC;;;;"}