'use strict';

var fetch = require('cross-fetch');
var config = require('./config.cjs.js');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

var fetch__default = /*#__PURE__*/_interopDefaultCompat(fetch);

async function getGitLabFileFetchUrl(url, config) {
  const projectID = await getProjectId(url, config);
  return buildProjectUrl(url, projectID, config).toString();
}
function getGitLabRequestOptions(config, token) {
  if (token) {
    return {
      headers: token.startsWith("gl") ? { "PRIVATE-TOKEN": token } : { Authorization: `Bearer ${token}` }
      // Otherwise, it's a bearer token
    };
  }
  const { token: configToken = "" } = config;
  return {
    headers: { "PRIVATE-TOKEN": configToken }
  };
}
function buildProjectUrl(target, projectID, config$1) {
  try {
    const url = new URL(target);
    const branchAndFilePath = url.pathname.split("/blob/").slice(1).join("/blob/");
    const [branch, ...filePath] = branchAndFilePath.split("/");
    const relativePath = config.getGitLabIntegrationRelativePath(config$1);
    url.pathname = [
      ...relativePath ? [relativePath] : [],
      "api/v4/projects",
      projectID,
      "repository/files",
      encodeURIComponent(decodeURIComponent(filePath.join("/"))),
      "raw"
    ].join("/");
    url.search = `?ref=${branch}`;
    return url;
  } catch (e) {
    throw new Error(`Incorrect url: ${target}, ${e}`);
  }
}
async function getProjectId(target, config$1) {
  const url = new URL(target);
  if (!url.pathname.includes("/blob/")) {
    throw new Error(
      `Failed converting ${url.pathname} to a project id. Url path must include /blob/.`
    );
  }
  try {
    let repo = url.pathname.split("/-/blob/")[0].split("/blob/")[0];
    const relativePath = config.getGitLabIntegrationRelativePath(config$1);
    if (relativePath) {
      repo = repo.replace(relativePath, "");
    }
    const repoIDLookup = new URL(
      `${url.origin}${relativePath}/api/v4/projects/${encodeURIComponent(
        repo.replace(/^\//, "")
      )}`
    );
    const response = await fetch__default.default(
      repoIDLookup.toString(),
      getGitLabRequestOptions(config$1)
    );
    const data = await response.json();
    if (!response.ok) {
      throw new Error(
        `GitLab Error '${data.error}', ${data.error_description}`
      );
    }
    return Number(data.id);
  } catch (e) {
    throw new Error(`Could not get GitLab project ID for: ${target}, ${e}`);
  }
}

exports.buildProjectUrl = buildProjectUrl;
exports.getGitLabFileFetchUrl = getGitLabFileFetchUrl;
exports.getGitLabRequestOptions = getGitLabRequestOptions;
exports.getProjectId = getProjectId;
//# sourceMappingURL=core.cjs.js.map
