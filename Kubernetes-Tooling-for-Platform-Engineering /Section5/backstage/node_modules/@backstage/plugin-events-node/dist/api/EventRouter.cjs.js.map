{"version":3,"file":"EventRouter.cjs.js","sources":["../../src/api/EventRouter.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventParams } from './EventParams';\nimport { EventsService } from './EventsService';\n\n/**\n * Subscribes to a topic and - depending on a set of conditions -\n * republishes the event to another topic.\n *\n * @see {@link https://www.enterpriseintegrationpatterns.com/MessageRouter.html | Message Router pattern}.\n * @public\n */\nexport abstract class EventRouter {\n  private readonly events: EventsService;\n  private readonly topics: string[];\n  private subscribed: boolean = false;\n\n  protected constructor(options: { events: EventsService; topics: string[] }) {\n    this.events = options.events;\n    this.topics = options.topics;\n  }\n\n  protected abstract getSubscriberId(): string;\n\n  protected abstract determineDestinationTopic(\n    params: EventParams,\n  ): string | undefined;\n\n  /**\n   * Subscribes itself to the topic(s),\n   * after which events potentially can be received\n   * and processed by {@link EventRouter.onEvent}.\n   */\n  async subscribe(): Promise<void> {\n    if (this.subscribed) {\n      return;\n    }\n\n    this.subscribed = true;\n\n    await this.events.subscribe({\n      id: this.getSubscriberId(),\n      topics: this.topics,\n      onEvent: this.onEvent.bind(this),\n    });\n  }\n\n  async onEvent(params: EventParams): Promise<void> {\n    const topic = this.determineDestinationTopic(params);\n\n    if (!topic) {\n      return;\n    }\n\n    // republish to different topic\n    await this.events.publish({\n      ...params,\n      topic,\n    });\n  }\n}\n"],"names":[],"mappings":";;AA0BO,MAAe,WAAY,CAAA;AAAA,EACf,MAAA;AAAA,EACA,MAAA;AAAA,EACT,UAAsB,GAAA,KAAA;AAAA,EAEpB,YAAY,OAAsD,EAAA;AAC1E,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA;AACtB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA;AAAA;AACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,SAA2B,GAAA;AAC/B,IAAA,IAAI,KAAK,UAAY,EAAA;AACnB,MAAA;AAAA;AAGF,IAAA,IAAA,CAAK,UAAa,GAAA,IAAA;AAElB,IAAM,MAAA,IAAA,CAAK,OAAO,SAAU,CAAA;AAAA,MAC1B,EAAA,EAAI,KAAK,eAAgB,EAAA;AAAA,MACzB,QAAQ,IAAK,CAAA,MAAA;AAAA,MACb,OAAS,EAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,IAAI;AAAA,KAChC,CAAA;AAAA;AACH,EAEA,MAAM,QAAQ,MAAoC,EAAA;AAChD,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,yBAAA,CAA0B,MAAM,CAAA;AAEnD,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA;AAAA;AAIF,IAAM,MAAA,IAAA,CAAK,OAAO,OAAQ,CAAA;AAAA,MACxB,GAAG,MAAA;AAAA,MACH;AAAA,KACD,CAAA;AAAA;AAEL;;;;"}