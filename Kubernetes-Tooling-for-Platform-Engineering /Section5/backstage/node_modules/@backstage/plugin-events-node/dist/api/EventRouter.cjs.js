'use strict';

class EventRouter {
  events;
  topics;
  subscribed = false;
  constructor(options) {
    this.events = options.events;
    this.topics = options.topics;
  }
  /**
   * Subscribes itself to the topic(s),
   * after which events potentially can be received
   * and processed by {@link EventRouter.onEvent}.
   */
  async subscribe() {
    if (this.subscribed) {
      return;
    }
    this.subscribed = true;
    await this.events.subscribe({
      id: this.getSubscriberId(),
      topics: this.topics,
      onEvent: this.onEvent.bind(this)
    });
  }
  async onEvent(params) {
    const topic = this.determineDestinationTopic(params);
    if (!topic) {
      return;
    }
    await this.events.publish({
      ...params,
      topic
    });
  }
}

exports.EventRouter = EventRouter;
//# sourceMappingURL=EventRouter.cjs.js.map
