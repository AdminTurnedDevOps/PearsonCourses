{"version":3,"file":"EventsService.cjs.js","sources":["../../src/api/EventsService.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventParams } from './EventParams';\n\n/**\n * Allows a decoupled and asynchronous communication between components.\n * Components can publish events for a given topic and\n * others can subscribe for future events for topics they are interested in.\n *\n * @public\n */\nexport interface EventsService {\n  /**\n   * Publishes an event for the topic.\n   *\n   * @param params - parameters for the to be published event.\n   */\n  publish(params: EventParams): Promise<void>;\n\n  /**\n   * Subscribes to one or more topics, registering an event handler for them.\n   *\n   * @param options - event subscription options.\n   */\n  subscribe(options: EventsServiceSubscribeOptions): Promise<void>;\n}\n\n/**\n * @public\n */\nexport type EventsServiceSubscribeOptions = {\n  /**\n   * Subscriber ID that is scoped to the calling plugin. Subscribers with the same ID will have events distributed between them.\n   */\n  id: string;\n  topics: string[];\n  onEvent: EventsServiceEventHandler;\n};\n\n/**\n * @public\n */\nexport type EventsServiceEventHandler = (params: EventParams) => Promise<void>;\n\n/**\n * @public\n */\nexport const EVENTS_NOTIFY_TIMEOUT_HEADER = 'backstage-events-notify-timeout';\n"],"names":[],"mappings":";;AA6DO,MAAM,4BAA+B,GAAA;;;;"}