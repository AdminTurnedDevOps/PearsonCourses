'use strict';

var crossFetch = require('cross-fetch');
var pluginId = require('../pluginId.cjs.js');
var parser = require('uri-template');

function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }

function _interopNamespaceCompat(e) {
  if (e && typeof e === 'object' && 'default' in e) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var crossFetch__default = /*#__PURE__*/_interopDefaultCompat(crossFetch);
var parser__namespace = /*#__PURE__*/_interopNamespaceCompat(parser);

class DefaultApiClient {
  discoveryApi;
  fetchApi;
  constructor(options) {
    this.discoveryApi = options.discoveryApi;
    this.fetchApi = options.fetchApi || { fetch: crossFetch__default.default };
  }
  /**
   * Get new events for the provided subscription
   * @param subscriptionId
   */
  async getSubscriptionEvents(request, options) {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId.pluginId);
    const uriTemplate = `/bus/v1/subscriptions/{subscriptionId}/events`;
    const uri = parser__namespace.parse(uriTemplate).expand({
      subscriptionId: request.path.subscriptionId
    });
    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        "Content-Type": "application/json",
        ...options?.token && { Authorization: `Bearer ${options?.token}` }
      },
      method: "GET"
    });
  }
  /**
   * Publish a new event
   * @param postEventRequest
   */
  async postEvent(request, options) {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId.pluginId);
    const uriTemplate = `/bus/v1/events`;
    const uri = parser__namespace.parse(uriTemplate).expand({});
    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        "Content-Type": "application/json",
        ...options?.token && { Authorization: `Bearer ${options?.token}` }
      },
      method: "POST",
      body: JSON.stringify(request.body)
    });
  }
  /**
   * Ensures that the subscription exists with the provided configuration
   * @param subscriptionId
   * @param putSubscriptionRequest
   */
  async putSubscription(request, options) {
    const baseUrl = await this.discoveryApi.getBaseUrl(pluginId.pluginId);
    const uriTemplate = `/bus/v1/subscriptions/{subscriptionId}`;
    const uri = parser__namespace.parse(uriTemplate).expand({
      subscriptionId: request.path.subscriptionId
    });
    return await this.fetchApi.fetch(`${baseUrl}${uri}`, {
      headers: {
        "Content-Type": "application/json",
        ...options?.token && { Authorization: `Bearer ${options?.token}` }
      },
      method: "PUT",
      body: JSON.stringify(request.body)
    });
  }
}

exports.DefaultApiClient = DefaultApiClient;
//# sourceMappingURL=DefaultApi.client.cjs.js.map
