import{formats}from"@kubernetes-models/validate";export const validate=function validate25(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if(data&&"object"==typeof data&&!Array.isArray(data)){if(void 0===data.exitCode){let err0={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"exitCode"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}void 0===data.containerID||validate21(data.containerID,{instancePath:instancePath+"/containerID",parentData:data,parentDataProperty:"containerID",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.exitCode||validate27(data.exitCode,{instancePath:instancePath+"/exitCode",parentData:data,parentDataProperty:"exitCode",rootData})||(errors=(vErrors=null===vErrors?validate27.errors:vErrors.concat(validate27.errors)).length),void 0===data.finishedAt||validate22(data.finishedAt,{instancePath:instancePath+"/finishedAt",parentData:data,parentDataProperty:"finishedAt",rootData})||(errors=(vErrors=null===vErrors?validate22.errors:vErrors.concat(validate22.errors)).length),void 0===data.message||validate21(data.message,{instancePath:instancePath+"/message",parentData:data,parentDataProperty:"message",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.reason||validate21(data.reason,{instancePath:instancePath+"/reason",parentData:data,parentDataProperty:"reason",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.signal||validate32(data.signal,{instancePath:instancePath+"/signal",parentData:data,parentDataProperty:"signal",rootData})||(errors=(vErrors=null===vErrors?validate32.errors:vErrors.concat(validate32.errors)).length),void 0===data.startedAt||validate22(data.startedAt,{instancePath:instancePath+"/startedAt",parentData:data,parentDataProperty:"startedAt",rootData})||(errors=(vErrors=null===vErrors?validate22.errors:vErrors.concat(validate22.errors)).length)}else{let err1={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"}};null===vErrors?vErrors=[err1]:vErrors.push(err1),errors++}return validate25.errors=vErrors,0===errors};function validate21(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if("string"!=typeof data&&null!==data){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"string"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}return validate21.errors=vErrors,0===errors}let formats0=formats.int32;function validate27(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if(!("number"==typeof data&&!(data%1)&&!isNaN(data)&&isFinite(data))){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"integer"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}if("number"==typeof data&&isFinite(data)&&!formats0.validate(data)){let err1={instancePath,schemaPath:"#/format",keyword:"format",params:{format:"int32"}};null===vErrors?vErrors=[err1]:vErrors.push(err1),errors++}return validate27.errors=vErrors,0===errors}import{validate as validate23}from"@kubernetes-models/apimachinery/_schemas/IoK8sApimachineryPkgApisMetaV1Time";function validate22(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;return null===data||validate23(data,{instancePath,parentData,parentDataProperty,rootData})||(errors=(vErrors=null===vErrors?validate23.errors:vErrors.concat(validate23.errors)).length),validate22.errors=vErrors,0===errors}function validate32(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if(!("number"==typeof data&&!(data%1)&&!isNaN(data)&&isFinite(data))&&null!==data){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"integer"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}if("number"==typeof data&&isFinite(data)&&!formats0.validate(data)){let err1={instancePath,schemaPath:"#/format",keyword:"format",params:{format:"int32"}};null===vErrors?vErrors=[err1]:vErrors.push(err1),errors++}return validate32.errors=vErrors,0===errors}