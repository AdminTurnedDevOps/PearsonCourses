export const validate=function validate22(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if(data&&"object"==typeof data&&!Array.isArray(data))void 0===data.group||validate21(data.group,{instancePath:instancePath+"/group",parentData:data,parentDataProperty:"group",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.name||validate21(data.name,{instancePath:instancePath+"/name",parentData:data,parentDataProperty:"name",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.namespace||validate21(data.namespace,{instancePath:instancePath+"/namespace",parentData:data,parentDataProperty:"namespace",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.resource||validate21(data.resource,{instancePath:instancePath+"/resource",parentData:data,parentDataProperty:"resource",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.subresource||validate21(data.subresource,{instancePath:instancePath+"/subresource",parentData:data,parentDataProperty:"subresource",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.verb||validate21(data.verb,{instancePath:instancePath+"/verb",parentData:data,parentDataProperty:"verb",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.version||validate21(data.version,{instancePath:instancePath+"/version",parentData:data,parentDataProperty:"version",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length);else{let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}return validate22.errors=vErrors,0===errors};function validate21(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if("string"!=typeof data&&null!==data){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"string"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}return validate21.errors=vErrors,0===errors}