export const validate=function validate22(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if(data&&"object"==typeof data&&!Array.isArray(data)){if(void 0===data.allowed){let err0={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"allowed"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}void 0===data.allowed||validate23(data.allowed,{instancePath:instancePath+"/allowed",parentData:data,parentDataProperty:"allowed",rootData})||(errors=(vErrors=null===vErrors?validate23.errors:vErrors.concat(validate23.errors)).length),void 0===data.denied||validate25(data.denied,{instancePath:instancePath+"/denied",parentData:data,parentDataProperty:"denied",rootData})||(errors=(vErrors=null===vErrors?validate25.errors:vErrors.concat(validate25.errors)).length),void 0===data.evaluationError||validate21(data.evaluationError,{instancePath:instancePath+"/evaluationError",parentData:data,parentDataProperty:"evaluationError",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.reason||validate21(data.reason,{instancePath:instancePath+"/reason",parentData:data,parentDataProperty:"reason",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length)}else{let err1={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"}};null===vErrors?vErrors=[err1]:vErrors.push(err1),errors++}return validate22.errors=vErrors,0===errors};function validate23(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if("boolean"!=typeof data){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"boolean"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}return validate23.errors=vErrors,0===errors}function validate25(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if("boolean"!=typeof data&&null!==data){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"boolean"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}return validate25.errors=vErrors,0===errors}function validate21(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if("string"!=typeof data&&null!==data){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"string"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}return validate21.errors=vErrors,0===errors}