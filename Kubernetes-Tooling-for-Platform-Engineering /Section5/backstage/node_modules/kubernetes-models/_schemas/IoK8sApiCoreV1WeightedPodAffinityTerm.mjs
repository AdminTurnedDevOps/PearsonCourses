import{formats}from"@kubernetes-models/validate";export const validate=function validate21(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if(data&&"object"==typeof data&&!Array.isArray(data)){if(void 0===data.weight){let err0={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"weight"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}if(void 0===data.podAffinityTerm){let err1={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"podAffinityTerm"}};null===vErrors?vErrors=[err1]:vErrors.push(err1),errors++}void 0===data.podAffinityTerm||validate22(data.podAffinityTerm,{instancePath:instancePath+"/podAffinityTerm",parentData:data,parentDataProperty:"podAffinityTerm",rootData})||(errors=(vErrors=null===vErrors?validate22.errors:vErrors.concat(validate22.errors)).length),void 0===data.weight||validate26(data.weight,{instancePath:instancePath+"/weight",parentData:data,parentDataProperty:"weight",rootData})||(errors=(vErrors=null===vErrors?validate26.errors:vErrors.concat(validate26.errors)).length)}else{let err2={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"}};null===vErrors?vErrors=[err2]:vErrors.push(err2),errors++}return validate21.errors=vErrors,0===errors};import{validate as validate23}from"./IoK8sApiCoreV1PodAffinityTerm.mjs";function validate22(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;return validate23(data,{instancePath,parentData,parentDataProperty,rootData})||(errors=(vErrors=null===vErrors?validate23.errors:vErrors.concat(validate23.errors)).length),validate22.errors=vErrors,0===errors}let formats0=formats.int32;function validate26(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if(!("number"==typeof data&&!(data%1)&&!isNaN(data)&&isFinite(data))){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"integer"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}if("number"==typeof data&&isFinite(data)&&!formats0.validate(data)){let err1={instancePath,schemaPath:"#/format",keyword:"format",params:{format:"int32"}};null===vErrors?vErrors=[err1]:vErrors.push(err1),errors++}return validate26.errors=vErrors,0===errors}