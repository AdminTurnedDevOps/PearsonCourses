{"version":3,"file":"bindingsHelpers.js","sourceRoot":"","sources":["../../../src/helpers/bindingsHelpers.ts"],"names":[],"mappings":";;;AAAA;IAAA;QAOU,qBAAgB,GAAa;YACnC,YAAY;YACZ,eAAe;YACf,gBAAgB;YAChB,WAAW;YACX,YAAY;YACZ,UAAU;SACX,CAAC;IAUJ,CAAC;IARC,uCAAc,GAAd,UAAe,OAAe,EAAE,WAAmB;QACjD,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,UAAG,WAAW,cAAI,OAAO,CAAE,CAAC,CAAC;IACrE,CAAC;IAGD,iCAAQ,GAAR,UAAS,KAAU;QACjB,OAAO,CAAC,CAAC,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC;IAC9C,CAAC;IACH,qBAAC;AAAD,CAAC,AAxBD,IAwBC;AACY,QAAA,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","sourcesContent":["class BindingsHelper {\n  /**\n   *\n   * Since we do not have a reliable way to identify schema objects via a spec, schema or similar - using a list of known\n   * binding properties of type SchemaObject\n   * Change it when AsyncAPI will support JSON Schema specification (definition) for bindings\n   */\n  private schemaObjectKeys: string[] = [\n    'http.query',\n    'kafka.groupId',\n    'kafka.clientId',\n    'kafka.key',\n    'ws.headers',\n    'ws.query',\n  ];\n\n  isSchemaObject(context: string, bindingType: string): boolean {\n    return this.schemaObjectKeys.includes(`${bindingType}.${context}`);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isObject(value: any): boolean {\n    return !!value && typeof value === 'object';\n  }\n}\nexport const bindingsHelper = new BindingsHelper();\n"]}