{"version":3,"file":"sidebar.js","sourceRoot":"","sources":["../../../src/helpers/sidebar.ts"],"names":[],"mappings":";;;AAgBA,SAAgB,mBAAmB,CACjC,IAAc,EACd,OAAuB;IAEvB,IAAM,aAAa,GAAG,IAAI,GAAG,EAAa,CAAC;IAC3C,IAAM,MAAM,GAAG,IAAI,GAAG,EAAuB,CAAC;IAC9C,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;QACf,IAAM,YAAY,GAAgB,EAAE,CAAC;QACrC,OAAO,CAAC,OAAO,CAAC,UAAC,GAAG;;YAClB,IAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;YACzB,IAAM,QAAQ,GAAG,CAAC,MAAA,OAAO,CAAC,GAAG,EAAE,mCAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,EAAE,EAAR,CAAQ,CAAC,CAAC;YAC5D,IAAM,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACtC,IAAI,MAAM,EAAE;gBACV,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACxB;QACH,CAAC,CAAC,CAAC;QACH,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;SAC/B;IACH,CAAC,CAAC,CAAC;IAEH,IAAM,QAAQ,GAAgB,EAAE,CAAC;IACjC,OAAO,CAAC,OAAO,CAAC,UAAC,GAAG;QAClB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC3B,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACpB;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,MAAM,QAAA,EAAE,QAAQ,UAAA,EAAE,CAAC;AAC9B,CAAC;AA9BD,kDA8BC","sourcesContent":["import { TagsInterface } from '@asyncapi/parser';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface TagObject<T = any> {\n  name: string;\n  tags: TagsInterface;\n  data: T;\n}\nexport interface SortedReturnType {\n  tagged: Map<string, TagObject[]>;\n  untagged: TagObject[];\n}\n\n/**\n * Filter an array of objects by certain tags\n */\nexport function filterObjectsByTags<T>(\n  tags: string[],\n  objects: TagObject<T>[],\n): SortedReturnType {\n  const taggedObjects = new Set<TagObject>();\n  const tagged = new Map<string, TagObject[]>();\n  tags.forEach((tag) => {\n    const taggedForTag: TagObject[] = [];\n    objects.forEach((obj) => {\n      const objTags = obj.tags;\n      const nameTags = (objTags.all() ?? []).map((t) => t.name());\n      const hasTag = nameTags.includes(tag);\n      if (hasTag) {\n        taggedForTag.push(obj);\n        taggedObjects.add(obj);\n      }\n    });\n    if (taggedForTag.length > 0) {\n      tagged.set(tag, taggedForTag);\n    }\n  });\n\n  const untagged: TagObject[] = [];\n  objects.forEach((obj) => {\n    if (!taggedObjects.has(obj)) {\n      untagged.push(obj);\n    }\n  });\n\n  return { tagged, untagged };\n}\n"]}