{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../src/helpers/server.ts"],"names":[],"mappings":"AAGA;IAAA;IA0FA,CAAC;IAzFQ,0BAAY,GAAnB,UAAoB,KAAa;QAC/B,QAAQ,KAAK,EAAE;YACb,KAAK,QAAQ;gBACX,OAAO,SAAS,CAAC;YACnB,KAAK,QAAQ;gBACX,OAAO,QAAQ,CAAC;YAClB,KAAK,eAAe;gBAClB,OAAO,SAAS,CAAC;YACnB,KAAK,MAAM;gBACT,OAAO,MAAM,CAAC;YAChB,KAAK,cAAc;gBACjB,OAAO,eAAe,CAAC;YACzB,KAAK,MAAM;gBACT,OAAO,OAAO,CAAC;YACjB,KAAK,qBAAqB;gBACxB,OAAO,sBAAsB,CAAC;YAChC,KAAK,sBAAsB;gBACzB,OAAO,uBAAuB,CAAC;YACjC,KAAK,YAAY;gBACf,OAAO,cAAc,CAAC;YACxB,KAAK,aAAa;gBAChB,OAAO,aAAa,CAAC;YACvB,KAAK,aAAa;gBAChB,OAAO,aAAa,CAAC;YACvB,KAAK,QAAQ;gBACX,OAAO,QAAQ,CAAC;YAClB;gBACE,OAAO,SAAS,CAAC;SACpB;IACH,CAAC;IAEM,sBAAQ,GAAf,UAAgB,KAAa;QAC3B,QAAQ,KAAK,EAAE;YACb,KAAK,UAAU;gBACb,OAAO,UAAU,CAAC;YACpB,KAAK,UAAU;gBACb,OAAO,UAAU,CAAC;YACpB,KAAK,mBAAmB;gBACtB,OAAO,oBAAoB,CAAC;YAC9B,KAAK,mBAAmB;gBACtB,OAAO,oBAAoB,CAAC;YAC9B;gBACE,OAAO,UAAU,CAAC;SACrB;IACH,CAAC;IAEM,8BAAgB,GAAvB,UACE,QAAgB,EAChB,cAA8C;QAE9C,IAAI,gBAAgB,CAAC;QACrB,IAAI,aAAa,CAAC;QAClB,IAAI,QAAQ,KAAK,OAAO,EAAE;YACxB,IAAI,cAAc,EAAE;gBAClB,gBAAgB,GAAG,gBAAgB,CAAC;aACrC;iBAAM;gBACL,gBAAgB,GAAG,WAAW,CAAC;aAChC;SACF;aAAM,IAAI,cAAc,EAAE;YACzB,gBAAgB,GAAG,UAAU,CAAC;SAC/B;aAAM;YACL,gBAAgB,GAAG,KAAK,CAAC;SAC1B;QAED,IAAI,cAAc,EAAE;YAClB,QAAQ,cAAc,CAAC,IAAI,EAAE,EAAE;gBAC7B,KAAK,OAAO;oBACV,aAAa,GAAG,OAAO,CAAC;oBACxB,MAAM;gBACR,KAAK,aAAa;oBAChB,aAAa,GAAG,eAAe,CAAC;oBAChC,MAAM;gBACR,KAAK,aAAa;oBAChB,aAAa,GAAG,eAAe,CAAC;oBAChC,MAAM;gBACR,KAAK,QAAQ;oBACX,aAAa,GAAG,aAAa,CAAC;oBAC9B,MAAM;gBACR,KAAK,QAAQ;oBACX,aAAa,GAAG,QAAQ,CAAC;oBACzB,MAAM;gBACR,KAAK,MAAM;oBACT,gBAAgB,GAAG,KAAK,CAAC;oBACzB,MAAM;aACT;SACF;QAED,OAAO,EAAE,gBAAgB,kBAAA,EAAE,aAAa,eAAA,EAAE,CAAC;IAC7C,CAAC;IACH,oBAAC;AAAD,CAAC,AA1FD,IA0FC","sourcesContent":["import { SecuritySchemeInterface } from '@asyncapi/parser';\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class ServerHelpers {\n  static securityType(value: string) {\n    switch (value) {\n      case 'apiKey':\n        return 'API key';\n      case 'oauth2':\n        return 'OAuth2';\n      case 'openIdConnect':\n        return 'Open ID';\n      case 'http':\n        return 'HTTP';\n      case 'userPassword':\n        return 'User/Password';\n      case 'X509':\n        return 'X509:';\n      case 'symmetricEncryption':\n        return 'Symmetric Encription';\n      case 'asymmetricEncryption':\n        return 'Asymmetric Encription';\n      case 'httpApiKey':\n        return 'HTTP API key';\n      case 'scramSha256':\n        return 'ScramSha256';\n      case 'scramSha512':\n        return 'ScramSha512';\n      case 'gssapi':\n        return 'GSSAPI';\n      default:\n        return 'API key';\n    }\n  }\n\n  static flowName(value: string) {\n    switch (value) {\n      case 'implicit':\n        return 'Implicit';\n      case 'password':\n        return 'Password';\n      case 'clientCredentials':\n        return 'Client credentials';\n      case 'authorizationCode':\n        return 'Authorization Code';\n      default:\n        return 'Implicit';\n    }\n  }\n\n  static getKafkaSecurity(\n    protocol: string,\n    securitySchema: SecuritySchemeInterface | null,\n  ) {\n    let securityProtocol;\n    let saslMechanism;\n    if (protocol === 'kafka') {\n      if (securitySchema) {\n        securityProtocol = 'SASL_PLAINTEXT';\n      } else {\n        securityProtocol = 'PLAINTEXT';\n      }\n    } else if (securitySchema) {\n      securityProtocol = 'SASL_SSL';\n    } else {\n      securityProtocol = 'SSL';\n    }\n\n    if (securitySchema) {\n      switch (securitySchema.type()) {\n        case 'plain':\n          saslMechanism = 'PLAIN';\n          break;\n        case 'scramSha256':\n          saslMechanism = 'SCRAM-SHA-256';\n          break;\n        case 'scramSha512':\n          saslMechanism = 'SCRAM-SHA-512';\n          break;\n        case 'oauth2':\n          saslMechanism = 'OAUTHBEARER';\n          break;\n        case 'gssapi':\n          saslMechanism = 'GSSAPI';\n          break;\n        case 'X509':\n          securityProtocol = 'SSL';\n          break;\n      }\n    }\n\n    return { securityProtocol, saslMechanism };\n  }\n}\n"]}