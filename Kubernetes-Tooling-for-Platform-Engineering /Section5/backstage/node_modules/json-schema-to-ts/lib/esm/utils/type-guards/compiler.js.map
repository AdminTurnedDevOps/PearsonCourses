{"version":3,"sources":["../../../../src/utils/type-guards/compiler.ts"],"names":["wrapCompilerAsTypeGuard","compiler","schema","compilingOptions","validator","data","validationOptions"],"mappings":"AAOA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,uBAAwC,GACnD,SADWA,uBACX,CAKEC,QALF;AAAA,SAOA,UACEC,MADF,EAGK;AAAA,sCADAC,gBACA;AADAA,MAAAA,gBACA;AAAA;;AACH,QAAMC,SAAS,GAAGH,QAAQ,MAAR,UAASC,MAAT,SAAoBC,gBAApB,EAAlB;AAEA,WAAO,UAACE,IAAD;AAAA,yCAAmBC,iBAAnB;AAAmBA,QAAAA,iBAAnB;AAAA;;AAAA,aACLF,SAAS,MAAT,UAAUC,IAAV,SAAmBC,iBAAnB,EADK;AAAA,KAAP;AAED,GAfD;AAAA,CADK","sourcesContent":["import type {\n  FromSchema,\n  FromSchemaDefaultOptions,\n  FromSchemaOptions,\n  JSONSchema,\n} from \"~/index\";\n\n/**\n * Any compiler function type (non type-guarding)\n */\nexport type $Compiler<C extends unknown[] = [], V extends unknown[] = []> = (\n  schema: JSONSchema,\n  ...compilingOptions: C\n) => (data: unknown, ...validationOptions: V) => boolean;\n\n/**\n * Adds type guarding to a validator function\n *\n * ```ts\n * const compiler: Compiler = <S extends JSONSchema, T = FromSchema<S>>(\n *   schema: S,\n * ) => (data: unknown): data is T => {\n *   const isDataValid: boolean = ... // Implement validation here\n *   return isDataValid;\n * };\n * ```\n */\nexport type Compiler<\n  O extends FromSchemaOptions = FromSchemaDefaultOptions,\n  C extends unknown[] = [],\n  V extends unknown[] = [],\n> = <S extends JSONSchema, T = FromSchema<S, O>>(\n  schema: S,\n  ...compilingOptions: C\n) => (data: unknown, ...validationOptions: V) => data is T;\n\n/**\n * Type definition for `wrapCompilerAsTypeGuard`\n */\ntype CompilerWrapper = <\n  O extends FromSchemaOptions = FromSchemaDefaultOptions,\n  C extends unknown[] = [],\n  V extends unknown[] = [],\n>(\n  compiler: $Compiler<C, V>,\n) => Compiler<O, C, V>;\n\n/**\n * Adds type guarding to any compiler function (doesn't modify it)\n * @param compiler Compiler function\n * @returns Compiler function with type guarding\n */\nexport const wrapCompilerAsTypeGuard: CompilerWrapper =\n  <\n    O extends FromSchemaOptions = FromSchemaDefaultOptions,\n    C extends unknown[] = [],\n    V extends unknown[] = [],\n  >(\n    compiler: $Compiler<C, V>,\n  ) =>\n  <S extends JSONSchema, T = FromSchema<S, O>>(\n    schema: S,\n    ...compilingOptions: C\n  ) => {\n    const validator = compiler(schema, ...compilingOptions);\n\n    return (data: unknown, ...validationOptions: V): data is T =>\n      validator(data, ...validationOptions);\n  };\n"],"file":"compiler.js"}