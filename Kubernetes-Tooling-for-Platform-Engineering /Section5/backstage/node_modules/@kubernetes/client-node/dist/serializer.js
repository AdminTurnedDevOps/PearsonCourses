"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectSerializer = void 0;
const ObjectSerializer_1 = require("./gen/models/ObjectSerializer");
class KubernetesObject {
}
KubernetesObject.attributeTypeMap = [
    {
        name: 'apiVersion',
        baseName: 'apiVersion',
        type: 'string',
        format: '',
    },
    {
        name: 'kind',
        baseName: 'kind',
        type: 'string',
        format: '',
    },
    {
        name: 'metadata',
        baseName: 'metadata',
        type: 'V1ObjectMeta',
        format: '',
    },
];
const isKubernetesObject = (data) => !!data && typeof data === 'object' && 'apiVersion' in data && 'kind' in data;
/**
 * Wraps the ObjectSerializer to support custom resources and generic Kubernetes objects.
 */
class ObjectSerializer extends ObjectSerializer_1.ObjectSerializer {
    static serialize(data, type, format = '') {
        const obj = ObjectSerializer_1.ObjectSerializer.serialize(data, type, format);
        if (obj !== data) {
            return obj;
        }
        if (!isKubernetesObject(data)) {
            return obj;
        }
        const instance = {};
        for (const attributeType of KubernetesObject.attributeTypeMap) {
            const value = data[attributeType.baseName];
            if (value !== undefined) {
                instance[attributeType.name] = ObjectSerializer_1.ObjectSerializer.serialize(data[attributeType.baseName], attributeType.type, attributeType.format);
            }
        }
        // add all unknown properties as is.
        for (const [key, value] of Object.entries(data)) {
            if (KubernetesObject.attributeTypeMap.find((t) => t.name === key)) {
                continue;
            }
            instance[key] = value;
        }
        return instance;
    }
    static deserialize(data, type, format = '') {
        const obj = ObjectSerializer_1.ObjectSerializer.deserialize(data, type, format);
        if (obj !== data) {
            // the serializer knows the type and already deserialized it.
            return obj;
        }
        if (!isKubernetesObject(data)) {
            return obj;
        }
        const instance = new KubernetesObject();
        for (const attributeType of KubernetesObject.attributeTypeMap) {
            const value = data[attributeType.baseName];
            if (value !== undefined) {
                instance[attributeType.name] = ObjectSerializer_1.ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type, attributeType.format);
            }
        }
        // add all unknown properties as is.
        for (const [key, value] of Object.entries(data)) {
            if (KubernetesObject.attributeTypeMap.find((t) => t.name === key)) {
                continue;
            }
            instance[key] = value;
        }
        return instance;
    }
}
exports.ObjectSerializer = ObjectSerializer;
//# sourceMappingURL=serializer.js.map