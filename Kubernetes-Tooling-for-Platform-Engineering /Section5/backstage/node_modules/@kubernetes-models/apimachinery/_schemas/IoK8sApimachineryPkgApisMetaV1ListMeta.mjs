import{formats}from"@kubernetes-models/validate";export const validate=function validate22(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if(data&&"object"==typeof data&&!Array.isArray(data))void 0===data.continue||validate21(data.continue,{instancePath:instancePath+"/continue",parentData:data,parentDataProperty:"continue",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.remainingItemCount||validate24(data.remainingItemCount,{instancePath:instancePath+"/remainingItemCount",parentData:data,parentDataProperty:"remainingItemCount",rootData})||(errors=(vErrors=null===vErrors?validate24.errors:vErrors.concat(validate24.errors)).length),void 0===data.resourceVersion||validate21(data.resourceVersion,{instancePath:instancePath+"/resourceVersion",parentData:data,parentDataProperty:"resourceVersion",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.selfLink||validate21(data.selfLink,{instancePath:instancePath+"/selfLink",parentData:data,parentDataProperty:"selfLink",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length);else{let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}return validate22.errors=vErrors,0===errors};function validate21(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if("string"!=typeof data&&null!==data){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"string"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}return validate21.errors=vErrors,0===errors}let formats0=formats.int64;function validate24(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if(!("number"==typeof data&&!(data%1)&&!isNaN(data)&&isFinite(data))&&null!==data){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"integer"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}if("number"==typeof data&&isFinite(data)&&!formats0.validate(data)){let err1={instancePath,schemaPath:"#/format",keyword:"format",params:{format:"int64"}};null===vErrors?vErrors=[err1]:vErrors.push(err1),errors++}return validate24.errors=vErrors,0===errors}