export const validate=function validate22(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if(data&&"object"==typeof data&&!Array.isArray(data)){if(void 0===data.major){let err0={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"major"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}if(void 0===data.minor){let err1={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"minor"}};null===vErrors?vErrors=[err1]:vErrors.push(err1),errors++}if(void 0===data.gitVersion){let err2={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"gitVersion"}};null===vErrors?vErrors=[err2]:vErrors.push(err2),errors++}if(void 0===data.gitCommit){let err3={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"gitCommit"}};null===vErrors?vErrors=[err3]:vErrors.push(err3),errors++}if(void 0===data.gitTreeState){let err4={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"gitTreeState"}};null===vErrors?vErrors=[err4]:vErrors.push(err4),errors++}if(void 0===data.buildDate){let err5={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"buildDate"}};null===vErrors?vErrors=[err5]:vErrors.push(err5),errors++}if(void 0===data.goVersion){let err6={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"goVersion"}};null===vErrors?vErrors=[err6]:vErrors.push(err6),errors++}if(void 0===data.compiler){let err7={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"compiler"}};null===vErrors?vErrors=[err7]:vErrors.push(err7),errors++}if(void 0===data.platform){let err8={instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty:"platform"}};null===vErrors?vErrors=[err8]:vErrors.push(err8),errors++}void 0===data.buildDate||validate21(data.buildDate,{instancePath:instancePath+"/buildDate",parentData:data,parentDataProperty:"buildDate",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.compiler||validate21(data.compiler,{instancePath:instancePath+"/compiler",parentData:data,parentDataProperty:"compiler",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.gitCommit||validate21(data.gitCommit,{instancePath:instancePath+"/gitCommit",parentData:data,parentDataProperty:"gitCommit",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.gitTreeState||validate21(data.gitTreeState,{instancePath:instancePath+"/gitTreeState",parentData:data,parentDataProperty:"gitTreeState",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.gitVersion||validate21(data.gitVersion,{instancePath:instancePath+"/gitVersion",parentData:data,parentDataProperty:"gitVersion",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.goVersion||validate21(data.goVersion,{instancePath:instancePath+"/goVersion",parentData:data,parentDataProperty:"goVersion",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.major||validate21(data.major,{instancePath:instancePath+"/major",parentData:data,parentDataProperty:"major",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.minor||validate21(data.minor,{instancePath:instancePath+"/minor",parentData:data,parentDataProperty:"minor",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length),void 0===data.platform||validate21(data.platform,{instancePath:instancePath+"/platform",parentData:data,parentDataProperty:"platform",rootData})||(errors=(vErrors=null===vErrors?validate21.errors:vErrors.concat(validate21.errors)).length)}else{let err9={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"object"}};null===vErrors?vErrors=[err9]:vErrors.push(err9),errors++}return validate22.errors=vErrors,0===errors};function validate21(data,{instancePath="",parentData,parentDataProperty,rootData=data}={}){let vErrors=null,errors=0;if("string"!=typeof data){let err0={instancePath,schemaPath:"#/type",keyword:"type",params:{type:"string"}};null===vErrors?vErrors=[err0]:vErrors.push(err0),errors++}return validate21.errors=vErrors,0===errors}