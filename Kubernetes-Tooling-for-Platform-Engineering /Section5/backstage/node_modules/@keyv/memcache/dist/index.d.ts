/// <reference types="node" />
import EventEmitter from 'node:events';
import memcache from 'memjs';
import Keyv, { Store, StoredData } from 'keyv';
type GetOutput<Value> = Value | Promise<Value | undefined> | undefined;
type KeyvMemcacheOptions<Value> = {
    url?: string;
    expires?: number;
} & memcache.ClientOptions & Keyv.Options<Value>;
declare class KeyvMemcache<Value = any> extends EventEmitter implements Store<Value> {
    ttlSupport: boolean;
    namespace?: string;
    client: memcache.Client;
    opts: KeyvMemcacheOptions<Value>;
    constructor(uri?: string, options?: KeyvMemcacheOptions<Value>);
    _getNamespace(): string;
    get(key: string): GetOutput<Value>;
    getMany(keys: string[]): Promise<Array<StoredData<Value>>>;
    set(key: string, value: Value, ttl: number): Promise<unknown>;
    delete(key: string): Promise<boolean>;
    deleteMany(keys: string[]): Promise<boolean>;
    clear(): Promise<void>;
    formatKey(key: string): string;
    has(key: string): Promise<boolean>;
}
export = KeyvMemcache;
