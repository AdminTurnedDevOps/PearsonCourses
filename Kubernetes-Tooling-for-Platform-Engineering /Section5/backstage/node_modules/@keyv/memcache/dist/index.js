"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const node_events_1 = __importDefault(require("node:events"));
const memjs_1 = __importDefault(require("memjs"));
const json_buffer_1 = __importDefault(require("json-buffer"));
class KeyvMemcache extends node_events_1.default {
    constructor(uri, options) {
        super();
        this.ttlSupport = true;
        options = Object.assign(Object.assign({}, ((typeof uri === 'string') ? { uri } : uri)), options);
        if (options.uri && options.url === undefined) {
            options.url = options.uri;
        }
        if (uri === undefined) {
            uri = 'localhost:11211';
            // eslint-disable-next-line no-multi-assign
            options.url = options.uri = uri;
        }
        this.opts = options;
        this.client = memjs_1.default.Client.create(uri, options);
    }
    _getNamespace() {
        return `namespace:${this.namespace}`;
    }
    get(key) {
        return new Promise((resolve, reject) => {
            this.client.get(this.formatKey(key), (error, value) => {
                if (error) {
                    this.emit('error', error);
                    reject(error);
                }
                else {
                    let value_;
                    if (value === null) {
                        value_ = {
                            // @ts-expect-error - value is an object
                            value: undefined,
                            expires: 0,
                        };
                    }
                    else {
                        value_ = this.opts.deserialize ? this.opts.deserialize(value) : json_buffer_1.default.parse(value);
                    }
                    resolve(value_);
                }
            });
        });
    }
    getMany(keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            for (const key of keys) {
                promises.push(this.get(key));
            }
            return Promise.allSettled(promises)
                .then(values => {
                const data = [];
                for (const value of values) {
                    // @ts-expect-error - value is an object
                    data.push(value.value);
                }
                return data;
            });
        });
    }
    set(key, value, ttl) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = {};
            if (ttl !== undefined) {
                // eslint-disable-next-line no-multi-assign
                options.expires = options.ttl = Math.floor(ttl / 1000); // Moving to seconds
            }
            return new Promise((resolve, reject) => {
                this.client.set(this.formatKey(key), value, options, (error, success) => {
                    if (error) {
                        this.emit('error', error);
                        reject(error);
                    }
                    else {
                        resolve(success);
                    }
                });
            });
        });
    }
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.client.delete(this.formatKey(key), (error, success) => {
                    if (error) {
                        this.emit('error', error);
                        reject(error);
                    }
                    else {
                        resolve(success);
                    }
                });
            });
        });
    }
    deleteMany(keys) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            for (const key of keys) {
                promises.push(this.delete(key));
            }
            return Promise.allSettled(promises)
                // @ts-expect-error - x is an object
                .then(values => values.every(x => x.value === true));
        });
    }
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                this.client.flush(error => {
                    if (error) {
                        this.emit('error', error);
                        reject(error);
                    }
                    else {
                        resolve(undefined);
                    }
                });
            });
        });
    }
    formatKey(key) {
        let result = key;
        if (this.namespace) {
            result = this.namespace.trim() + ':' + key.trim();
        }
        return result;
    }
    has(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => {
                this.client.get(this.formatKey(key), (error, value) => {
                    if (error) {
                        resolve(false);
                    }
                    else {
                        resolve(value !== null);
                    }
                });
            });
        });
    }
}
module.exports = KeyvMemcache;
//# sourceMappingURL=index.js.map