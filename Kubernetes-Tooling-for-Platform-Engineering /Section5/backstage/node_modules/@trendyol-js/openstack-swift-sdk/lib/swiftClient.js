"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwiftClient = void 0;
var authService_1 = require("./authService");
var httpClient_1 = require("./httpClient");
var types_1 = require("./types");
var utils_1 = require("./utils");
var SwiftClient = /** @class */ (function () {
    function SwiftClient(configuration) {
        this.configuration = configuration;
        this.authService = new authService_1.AuthService(configuration);
        this.client = new httpClient_1.HttpClient(configuration.swiftEndpoint);
    }
    SwiftClient.prototype.buildHeaders = function (headers) {
        if (headers === void 0) { headers = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.authService.getToken()];
                    case 1:
                        token = _a.sent();
                        return [2 /*return*/, __assign(__assign({}, token.getAsHeader()), headers)];
                }
            });
        });
    };
    SwiftClient.prototype.download = function (container, path) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, fullPath, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.buildHeaders()];
                    case 1:
                        headers = _a.sent();
                        fullPath = this.buildFullPath(container, path);
                        return [4 /*yield*/, this.client.get(fullPath, {
                                responseType: "stream",
                                headers: headers,
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.status === 404) {
                            return [2 /*return*/, new types_1.NotFound()];
                        }
                        return [2 /*return*/, new types_1.DownloadResponse(this.convertHeaderObjectToArray(response.headers), response.data)];
                }
            });
        });
    };
    SwiftClient.prototype.buildFullPath = function (container, path) {
        return encodeURIComponent("".concat(container, "/").concat(path));
    };
    SwiftClient.prototype.getContainerMetadata = function (container) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, response, responseHeaders;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.buildHeaders()];
                    case 1:
                        headers = _a.sent();
                        return [4 /*yield*/, this.client.head(container, {
                                headers: headers,
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.status === 404) {
                            return [2 /*return*/, new types_1.NotFound()];
                        }
                        responseHeaders = response.headers;
                        return [2 /*return*/, new types_1.ContainerMetaResponse({
                                headers: this.convertHeaderObjectToArray(response.headers),
                                size: responseHeaders["content-length"],
                                lastModified: responseHeaders["last-modified"],
                            })];
                }
            });
        });
    };
    SwiftClient.prototype.getMetadata = function (container, path) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, fullPath, response, responseHeaders;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.buildHeaders()];
                    case 1:
                        headers = _a.sent();
                        fullPath = this.buildFullPath(container, path);
                        return [4 /*yield*/, this.client.head(fullPath, {
                                headers: headers,
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.status === 404) {
                            return [2 /*return*/, new types_1.NotFound()];
                        }
                        responseHeaders = response.headers;
                        return [2 /*return*/, new types_1.ObjectMetaResponse({
                                fullPath: fullPath,
                                headers: this.convertHeaderObjectToArray(response.headers),
                                size: responseHeaders["content-length"],
                                lastModified: responseHeaders["last-modified"],
                                contentType: responseHeaders["content-type"],
                                createdAt: responseHeaders["x-timestamp"],
                                deleteAt: responseHeaders["x-delete-at"],
                            })];
                }
            });
        });
    };
    SwiftClient.prototype.list = function (container, prefix, limit, after) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, url, response, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.buildHeaders()];
                    case 1:
                        headers = _a.sent();
                        url = new utils_1.UrlBuilder(container)
                            .addQueryString("format", "json")
                            .addQueryStringIf("prefix", encodeURIComponent(prefix))
                            .addQueryString("limit", limit)
                            .addQueryStringIf("after", after ? encodeURIComponent(after) : null)
                            .build();
                        return [4 /*yield*/, this.client.get(url, {
                                headers: headers,
                            })];
                    case 2:
                        response = _a.sent();
                        result = response.data.map(function (f) {
                            return new types_1.ListObjectResponse({
                                bytes: f.bytes,
                                contentType: f["content_type"],
                                hash: f.hash,
                                lastModified: f["last_modified"],
                                name: f.name,
                            });
                        });
                        return [2 /*return*/, result];
                }
            });
        });
    };
    SwiftClient.prototype.upload = function (container, path, stream, options) {
        return __awaiter(this, void 0, void 0, function () {
            var objectHeaders, mimetype, headers, fullPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = new types_1.UploadOptions(options);
                        objectHeaders = options.headers;
                        if (options.ttl) {
                            objectHeaders["x-delete-after"] = options.ttl.toString();
                        }
                        mimetype = options.mimetype || "";
                        return [4 /*yield*/, this.buildHeaders(__assign(__assign({}, objectHeaders), { "Content-Type": mimetype }))];
                    case 1:
                        headers = _a.sent();
                        if (!container) {
                            throw new Error("available container not found!");
                        }
                        fullPath = this.buildFullPath(container, path);
                        return [4 /*yield*/, this.client.put(fullPath, stream, {
                                headers: headers,
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, new types_1.UploadResponse(fullPath)];
                }
            });
        });
    };
    SwiftClient.prototype.copy = function (container, path, destinationContainer, destinationPath) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, fullPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!container) {
                            throw new Error("available container not found!");
                        }
                        return [4 /*yield*/, this.buildHeaders({
                                "X-Copy-From": "/" + container + "/" + path,
                                "Content-Length": 0,
                            })];
                    case 1:
                        headers = _a.sent();
                        fullPath = this.buildFullPath(destinationContainer, destinationPath);
                        return [4 /*yield*/, this.client.put(fullPath, "", {
                                headers: headers,
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    SwiftClient.prototype.delete = function (container, path) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, fullPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.buildHeaders()];
                    case 1:
                        headers = _a.sent();
                        if (!container) {
                            throw new Error("available container not found!");
                        }
                        fullPath = this.buildFullPath(container, path);
                        return [4 /*yield*/, this.client.delete(fullPath, { headers: headers })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    SwiftClient.prototype.convertHeaderObjectToArray = function (headers, filter) {
        if (filter === void 0) { filter = undefined; }
        var newHeaders = [];
        for (var key in Object.keys(headers)) {
            var val = headers[key];
            if (filter && !filter(key, val)) {
                continue;
            }
            newHeaders.push({
                key: key,
                value: val,
            });
        }
        return newHeaders;
    };
    return SwiftClient;
}());
exports.SwiftClient = SwiftClient;
//# sourceMappingURL=swiftClient.js.map