"use strict";
/* export async function detectMimeTypeFromStream(
  stream: ReadableStream
): Promise<ReadableStream & { readonly fileType?: FileType.FileTypeResult | undefined; }> {
  return await FileType.stream(stream)
} */ // TO-DO (mert.bilgic) Add correctly implementation for that.
Object.defineProperty(exports, "__esModule", { value: true });
exports.UrlBuilder = void 0;
function DefaultUndefinedValueFilter(val, type) {
    return type !== "undefined";
}
var UrlBuilder = /** @class */ (function () {
    function UrlBuilder(basePath) {
        this.basePath = basePath;
        this.queryStrings = new Map();
    }
    UrlBuilder.prototype.addQueryString = function (q, v) {
        this.queryStrings.set(q, v);
        return this;
    };
    UrlBuilder.prototype.addQueryStringIf = function (q, v, condition) {
        if (condition === void 0) { condition = DefaultUndefinedValueFilter; }
        if (condition && condition(v, typeof v) === false) {
            return this;
        }
        this.queryStrings.set(q, v);
        return this;
    };
    UrlBuilder.prototype.build = function () {
        var url = "".concat(this.basePath);
        var query = "";
        var first = true;
        this.queryStrings.forEach(function (v, k) {
            if (first) {
                query = "?".concat(k, "=").concat(v);
                first = false;
            }
            else {
                query = "".concat(query, "&").concat(k, "=").concat(v);
            }
        });
        return url + query;
    };
    return UrlBuilder;
}());
exports.UrlBuilder = UrlBuilder;
//# sourceMappingURL=utils.js.map