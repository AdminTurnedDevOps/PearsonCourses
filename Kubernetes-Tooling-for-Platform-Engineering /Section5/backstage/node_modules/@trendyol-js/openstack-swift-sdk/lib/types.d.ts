/// <reference types="node" />
import { Stream } from "stream";
export type HeaderKeyValueArray = {
    key: string;
    value: string;
}[];
export type HeadersObject = {
    [key: string]: string;
};
export declare class DownloadResponse {
    readonly headers: HeaderKeyValueArray;
    readonly data: Stream;
    constructor(headers: HeaderKeyValueArray, data: Stream);
}
export declare class ContainerMetaResponse {
    headers: HeaderKeyValueArray;
    size: number;
    lastModified: string;
    constructor(init?: Partial<ContainerMetaResponse>);
}
export declare class ObjectMetaResponse {
    fullPath: string;
    headers: HeaderKeyValueArray;
    size: number;
    lastModified: string;
    contentType: string;
    createdAt: number;
    deleteAt: number;
    constructor(init?: Partial<ObjectMetaResponse>);
}
export declare class ListObjectResponse {
    name: string;
    hash: string;
    bytes: number;
    contentType: string;
    lastModified: string;
    constructor(init?: Partial<ListObjectResponse>);
}
export declare class NotFound {
    found: boolean;
}
export declare class UploadOptions {
    encoding: string;
    mimetype: string;
    originalName: string;
    size: number;
    headers: HeadersObject;
    ttl: number;
    tempExpire: number;
    constructor(init?: Partial<UploadOptions>);
}
export declare class UploadResponse {
    readonly fullPath: string;
    constructor(fullPath: string);
}
