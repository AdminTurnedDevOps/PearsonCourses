"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpClient = void 0;
var agentkeepalive_1 = __importDefault(require("agentkeepalive"));
var axios_1 = __importDefault(require("axios"));
var HttpClient = /** @class */ (function () {
    function HttpClient(baseUrl, defaultHeaders) {
        var keepAliveAgent = new agentkeepalive_1.default({
            maxSockets: 1000,
            maxFreeSockets: 100,
            timeout: 60000,
            freeSocketTimeout: 30000, // free socket keepalive for 30 seconds
        });
        var sslKeepAliveAgent = new agentkeepalive_1.default.HttpsAgent({
            maxSockets: 1000,
            maxFreeSockets: 100,
            timeout: 60000,
            freeSocketTimeout: 3000,
        });
        this.client = axios_1.default.create({
            httpAgent: keepAliveAgent,
            httpsAgent: sslKeepAliveAgent,
            baseURL: baseUrl,
            headers: defaultHeaders,
            validateStatus: this.validateStatusCode,
            maxContentLength: Infinity,
            maxBodyLength: Infinity,
            timeout: 1000 * 60 * 1, // one minute,
        });
    }
    HttpClient.prototype.get = function (url, config) {
        return this.client.get(url, config);
    };
    HttpClient.prototype.delete = function (url, config) {
        return this.client.delete(url, config);
    };
    HttpClient.prototype.head = function (url, config) {
        return this.client.head(url, config);
    };
    HttpClient.prototype.options = function (url, config) {
        return this.client.options(url, config);
    };
    HttpClient.prototype.post = function (url, data, config) {
        return this.client.post(url, data, config);
    };
    HttpClient.prototype.put = function (url, data, config) {
        return this.client.put(url, data, config);
    };
    HttpClient.prototype.validateStatusCode = function (statusCode) {
        return statusCode === 404 || (statusCode >= 200 && statusCode < 300);
    };
    return HttpClient;
}());
exports.HttpClient = HttpClient;
//# sourceMappingURL=httpClient.js.map