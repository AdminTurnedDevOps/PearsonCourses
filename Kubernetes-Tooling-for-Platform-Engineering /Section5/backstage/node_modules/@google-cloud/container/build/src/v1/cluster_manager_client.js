"use strict";
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterManagerClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/cluster_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./cluster_manager_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Google Kubernetes Engine Cluster Manager v1
 * @class
 * @memberof v1
 */
class ClusterManagerClient {
    /**
     * Construct an instance of ClusterManagerClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new ClusterManagerClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b, _c, _d, _e;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'
            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
            : undefined;
        this._universeDomain =
            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';
        this._servicePath = 'container.' + this._universeDomain;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};
        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            caPoolPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/caPools/{ca_pool}'),
            cryptoKeyVersionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listUsableSubnetworks: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'subnetworks'),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.container.v1.ClusterManager', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.clusterManagerStub) {
            return this.clusterManagerStub;
        }
        // Put together the "service stub" for
        // google.container.v1.ClusterManager.
        this.clusterManagerStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.container.v1.ClusterManager')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.container.v1.ClusterManager, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const clusterManagerStubMethods = [
            'listClusters',
            'getCluster',
            'createCluster',
            'updateCluster',
            'updateNodePool',
            'setNodePoolAutoscaling',
            'setLoggingService',
            'setMonitoringService',
            'setAddonsConfig',
            'setLocations',
            'updateMaster',
            'setMasterAuth',
            'deleteCluster',
            'listOperations',
            'getOperation',
            'cancelOperation',
            'getServerConfig',
            'getJsonWebKeys',
            'listNodePools',
            'getNodePool',
            'createNodePool',
            'deleteNodePool',
            'completeNodePoolUpgrade',
            'rollbackNodePoolUpgrade',
            'setNodePoolManagement',
            'setLabels',
            'setLegacyAbac',
            'startIpRotation',
            'completeIpRotation',
            'setNodePoolSize',
            'setNetworkPolicy',
            'setMaintenancePolicy',
            'listUsableSubnetworks',
            'checkAutopilotCompatibility',
        ];
        for (const methodName of clusterManagerStubMethods) {
            const callPromise = this.clusterManagerStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] || undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.clusterManagerStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'container.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'container.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    listClusters(request, optionsOrCallback, callback) {
        var _a, _b, _c;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
            });
        this.initialize();
        return this.innerApiCalls.listClusters(request, options, callback);
    }
    getCluster(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.getCluster(request, options, callback);
    }
    createCluster(request, optionsOrCallback, callback) {
        var _a, _b, _c;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
            });
        this.initialize();
        return this.innerApiCalls.createCluster(request, options, callback);
    }
    updateCluster(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.updateCluster(request, options, callback);
    }
    updateNodePool(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d, _e;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
                node_pool_id: (_e = request.nodePoolId) !== null && _e !== void 0 ? _e : '',
            });
        this.initialize();
        return this.innerApiCalls.updateNodePool(request, options, callback);
    }
    setNodePoolAutoscaling(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d, _e;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
                node_pool_id: (_e = request.nodePoolId) !== null && _e !== void 0 ? _e : '',
            });
        this.initialize();
        return this.innerApiCalls.setNodePoolAutoscaling(request, options, callback);
    }
    setLoggingService(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.setLoggingService(request, options, callback);
    }
    setMonitoringService(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.setMonitoringService(request, options, callback);
    }
    setAddonsConfig(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.setAddonsConfig(request, options, callback);
    }
    setLocations(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        this.warn('DEP$ClusterManager-$SetLocations', 'SetLocations is deprecated and may be removed in a future version.', 'DeprecationWarning');
        return this.innerApiCalls.setLocations(request, options, callback);
    }
    updateMaster(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.updateMaster(request, options, callback);
    }
    setMasterAuth(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.setMasterAuth(request, options, callback);
    }
    deleteCluster(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteCluster(request, options, callback);
    }
    listOperations(request, optionsOrCallback, callback) {
        var _a, _b, _c;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
            });
        this.initialize();
        return this.innerApiCalls.listOperations(request, options, callback);
    }
    getOperation(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                operation_id: (_d = request.operationId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.getOperation(request, options, callback);
    }
    cancelOperation(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                operation_id: (_d = request.operationId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.cancelOperation(request, options, callback);
    }
    getServerConfig(request, optionsOrCallback, callback) {
        var _a, _b, _c;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
            });
        this.initialize();
        return this.innerApiCalls.getServerConfig(request, options, callback);
    }
    getJSONWebKeys(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getJsonWebKeys(request, options, callback);
    }
    listNodePools(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.listNodePools(request, options, callback);
    }
    getNodePool(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d, _e;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
                node_pool_id: (_e = request.nodePoolId) !== null && _e !== void 0 ? _e : '',
            });
        this.initialize();
        return this.innerApiCalls.getNodePool(request, options, callback);
    }
    createNodePool(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.createNodePool(request, options, callback);
    }
    deleteNodePool(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d, _e;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
                node_pool_id: (_e = request.nodePoolId) !== null && _e !== void 0 ? _e : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteNodePool(request, options, callback);
    }
    completeNodePoolUpgrade(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.completeNodePoolUpgrade(request, options, callback);
    }
    rollbackNodePoolUpgrade(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d, _e;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
                node_pool_id: (_e = request.nodePoolId) !== null && _e !== void 0 ? _e : '',
            });
        this.initialize();
        return this.innerApiCalls.rollbackNodePoolUpgrade(request, options, callback);
    }
    setNodePoolManagement(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d, _e;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
                node_pool_id: (_e = request.nodePoolId) !== null && _e !== void 0 ? _e : '',
            });
        this.initialize();
        return this.innerApiCalls.setNodePoolManagement(request, options, callback);
    }
    setLabels(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.setLabels(request, options, callback);
    }
    setLegacyAbac(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.setLegacyAbac(request, options, callback);
    }
    startIPRotation(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.startIpRotation(request, options, callback);
    }
    completeIPRotation(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.completeIpRotation(request, options, callback);
    }
    setNodePoolSize(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d, _e;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
                node_pool_id: (_e = request.nodePoolId) !== null && _e !== void 0 ? _e : '',
            });
        this.initialize();
        return this.innerApiCalls.setNodePoolSize(request, options, callback);
    }
    setNetworkPolicy(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.setNetworkPolicy(request, options, callback);
    }
    setMaintenancePolicy(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
                project_id: (_b = request.projectId) !== null && _b !== void 0 ? _b : '',
                zone: (_c = request.zone) !== null && _c !== void 0 ? _c : '',
                cluster_id: (_d = request.clusterId) !== null && _d !== void 0 ? _d : '',
            });
        this.initialize();
        return this.innerApiCalls.setMaintenancePolicy(request, options, callback);
    }
    checkAutopilotCompatibility(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.checkAutopilotCompatibility(request, options, callback);
    }
    listUsableSubnetworks(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listUsableSubnetworks(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The parent project where subnetworks are usable.
     *   Specified in the format `projects/*`.
     * @param {string} request.filter
     *   Filtering currently only supports equality on the networkProjectId and must
     *   be in the form: "networkProjectId=[PROJECTID]", where `networkProjectId`
     *   is the project which owns the listed subnetworks. This defaults to the
     *   parent project ID.
     * @param {number} request.pageSize
     *   The max number of results per page that should be returned. If the number
     *   of available results is larger than `page_size`, a `next_page_token` is
     *   returned which can be used to get the next page of results in subsequent
     *   requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
     * @param {string} request.pageToken
     *   Specifies a page token to use. Set this to the nextPageToken returned by
     *   previous list requests to get the next page of results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.container.v1.UsableSubnetwork|UsableSubnetwork} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listUsableSubnetworksAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listUsableSubnetworksStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listUsableSubnetworks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listUsableSubnetworks.createStream(this.innerApiCalls.listUsableSubnetworks, request, callSettings);
    }
    /**
     * Equivalent to `listUsableSubnetworks`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The parent project where subnetworks are usable.
     *   Specified in the format `projects/*`.
     * @param {string} request.filter
     *   Filtering currently only supports equality on the networkProjectId and must
     *   be in the form: "networkProjectId=[PROJECTID]", where `networkProjectId`
     *   is the project which owns the listed subnetworks. This defaults to the
     *   parent project ID.
     * @param {number} request.pageSize
     *   The max number of results per page that should be returned. If the number
     *   of available results is larger than `page_size`, a `next_page_token` is
     *   returned which can be used to get the next page of results in subsequent
     *   requests. Acceptable values are 0 to 500, inclusive. (Default: 500)
     * @param {string} request.pageToken
     *   Specifies a page token to use. Set this to the nextPageToken returned by
     *   previous list requests to get the next page of results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.container.v1.UsableSubnetwork|UsableSubnetwork}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/cluster_manager.list_usable_subnetworks.js</caption>
     * region_tag:container_v1_generated_ClusterManager_ListUsableSubnetworks_async
     */
    listUsableSubnetworksAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listUsableSubnetworks'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listUsableSubnetworks.asyncIterate(this.innerApiCalls['listUsableSubnetworks'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified caPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} ca_pool
     * @returns {string} Resource name string.
     */
    caPoolPath(project, location, caPool) {
        return this.pathTemplates.caPoolPathTemplate.render({
            project: project,
            location: location,
            ca_pool: caPool,
        });
    }
    /**
     * Parse the project from CaPool resource.
     *
     * @param {string} caPoolName
     *   A fully-qualified path representing CaPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCaPoolName(caPoolName) {
        return this.pathTemplates.caPoolPathTemplate.match(caPoolName).project;
    }
    /**
     * Parse the location from CaPool resource.
     *
     * @param {string} caPoolName
     *   A fully-qualified path representing CaPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCaPoolName(caPoolName) {
        return this.pathTemplates.caPoolPathTemplate.match(caPoolName).location;
    }
    /**
     * Parse the ca_pool from CaPool resource.
     *
     * @param {string} caPoolName
     *   A fully-qualified path representing CaPool resource.
     * @returns {string} A string representing the ca_pool.
     */
    matchCaPoolFromCaPoolName(caPoolName) {
        return this.pathTemplates.caPoolPathTemplate.match(caPoolName).ca_pool;
    }
    /**
     * Return a fully-qualified cryptoKeyVersion resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} key_ring
     * @param {string} crypto_key
     * @param {string} crypto_key_version
     * @returns {string} Resource name string.
     */
    cryptoKeyVersionPath(project, location, keyRing, cryptoKey, cryptoKeyVersion) {
        return this.pathTemplates.cryptoKeyVersionPathTemplate.render({
            project: project,
            location: location,
            key_ring: keyRing,
            crypto_key: cryptoKey,
            crypto_key_version: cryptoKeyVersion,
        });
    }
    /**
     * Parse the project from CryptoKeyVersion resource.
     *
     * @param {string} cryptoKeyVersionName
     *   A fully-qualified path representing CryptoKeyVersion resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCryptoKeyVersionName(cryptoKeyVersionName) {
        return this.pathTemplates.cryptoKeyVersionPathTemplate.match(cryptoKeyVersionName).project;
    }
    /**
     * Parse the location from CryptoKeyVersion resource.
     *
     * @param {string} cryptoKeyVersionName
     *   A fully-qualified path representing CryptoKeyVersion resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCryptoKeyVersionName(cryptoKeyVersionName) {
        return this.pathTemplates.cryptoKeyVersionPathTemplate.match(cryptoKeyVersionName).location;
    }
    /**
     * Parse the key_ring from CryptoKeyVersion resource.
     *
     * @param {string} cryptoKeyVersionName
     *   A fully-qualified path representing CryptoKeyVersion resource.
     * @returns {string} A string representing the key_ring.
     */
    matchKeyRingFromCryptoKeyVersionName(cryptoKeyVersionName) {
        return this.pathTemplates.cryptoKeyVersionPathTemplate.match(cryptoKeyVersionName).key_ring;
    }
    /**
     * Parse the crypto_key from CryptoKeyVersion resource.
     *
     * @param {string} cryptoKeyVersionName
     *   A fully-qualified path representing CryptoKeyVersion resource.
     * @returns {string} A string representing the crypto_key.
     */
    matchCryptoKeyFromCryptoKeyVersionName(cryptoKeyVersionName) {
        return this.pathTemplates.cryptoKeyVersionPathTemplate.match(cryptoKeyVersionName).crypto_key;
    }
    /**
     * Parse the crypto_key_version from CryptoKeyVersion resource.
     *
     * @param {string} cryptoKeyVersionName
     *   A fully-qualified path representing CryptoKeyVersion resource.
     * @returns {string} A string representing the crypto_key_version.
     */
    matchCryptoKeyVersionFromCryptoKeyVersionName(cryptoKeyVersionName) {
        return this.pathTemplates.cryptoKeyVersionPathTemplate.match(cryptoKeyVersionName).crypto_key_version;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.clusterManagerStub && !this._terminated) {
            return this.clusterManagerStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.ClusterManagerClient = ClusterManagerClient;
//# sourceMappingURL=cluster_manager_client.js.map